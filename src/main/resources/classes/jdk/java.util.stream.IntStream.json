{
  "package": "java.util.stream",
  "methods": [
    {
      "name": "getClass",
      "return": "java.lang.Class"
    },
    {
      "name": "hashCode",
      "return": "int"
    },
    {
      "name": "equals",
      "parameters": [{
        "name": "obj",
        "type": "java.lang.Object"
      }],
      "return": "boolean"
    },
    {
      "name": "toString",
      "return": "java.lang.String"
    },
    {"name": "notify"},
    {"name": "notifyAll"},
    {"name": "wait"},
    {
      "name": "wait",
      "parameters": [{
        "name": "timeoutMillis",
        "type": "long"
      }]
    },
    {
      "name": "wait",
      "parameters": [
        {
          "name": "timeoutMillis",
          "type": "long"
        },
        {
          "name": "nanos",
          "type": "int"
        }
      ]
    },
    {
      "name": "isParallel",
      "return": "boolean"
    },
    {
      "name": "unordered",
      "return": "java.util.stream.BaseStream"
    },
    {
      "name": "onClose",
      "parameters": [{
        "name": "closeHandler",
        "type": "java.lang.Runnable"
      }],
      "return": "java.util.stream.BaseStream"
    },
    {"name": "close"},
    {
      "name": "filter",
      "parameters": [{
        "name": "predicate",
        "type": "java.util.function.IntPredicate"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "map",
      "parameters": [{
        "name": "mapper",
        "type": "java.util.function.IntUnaryOperator"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "mapToObj",
      "parameters": [{
        "name": "mapper",
        "type": "java.util.function.IntFunction"
      }],
      "return": "java.util.stream.Stream"
    },
    {
      "name": "mapToLong",
      "parameters": [{
        "name": "mapper",
        "type": "java.util.function.IntToLongFunction"
      }],
      "return": "java.util.stream.LongStream"
    },
    {
      "name": "mapToDouble",
      "parameters": [{
        "name": "mapper",
        "type": "java.util.function.IntToDoubleFunction"
      }],
      "return": "java.util.stream.DoubleStream"
    },
    {
      "name": "flatMap",
      "parameters": [{
        "name": "mapper",
        "type": "java.util.function.IntFunction"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "mapMulti",
      "parameters": [{
        "name": "mapper",
        "type": "java.util.stream.IntStream.IntMapMultiConsumer"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "distinct",
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "sorted",
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "peek",
      "parameters": [{
        "name": "action",
        "type": "java.util.function.IntConsumer"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "limit",
      "parameters": [{
        "name": "maxSize",
        "type": "long"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "skip",
      "parameters": [{
        "name": "n",
        "type": "long"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "takeWhile",
      "parameters": [{
        "name": "predicate",
        "type": "java.util.function.IntPredicate"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "dropWhile",
      "parameters": [{
        "name": "predicate",
        "type": "java.util.function.IntPredicate"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "forEach",
      "parameters": [{
        "name": "action",
        "type": "java.util.function.IntConsumer"
      }]
    },
    {
      "name": "forEachOrdered",
      "parameters": [{
        "name": "action",
        "type": "java.util.function.IntConsumer"
      }]
    },
    {
      "name": "toArray",
      "return": "int[]"
    },
    {
      "name": "reduce",
      "parameters": [
        {
          "name": "identity",
          "type": "int"
        },
        {
          "name": "op",
          "type": "java.util.function.IntBinaryOperator"
        }
      ],
      "return": "int"
    },
    {
      "name": "reduce",
      "parameters": [{
        "name": "op",
        "type": "java.util.function.IntBinaryOperator"
      }],
      "return": "java.util.OptionalInt"
    },
    {
      "name": "collect",
      "parameters": [
        {
          "name": "supplier",
          "type": "java.util.function.Supplier"
        },
        {
          "name": "accumulator",
          "type": "java.util.function.ObjIntConsumer"
        },
        {
          "name": "combiner",
          "type": "java.util.function.BiConsumer"
        }
      ],
      "return": "java.lang.Object"
    },
    {
      "name": "sum",
      "return": "int"
    },
    {
      "name": "min",
      "return": "java.util.OptionalInt"
    },
    {
      "name": "max",
      "return": "java.util.OptionalInt"
    },
    {
      "name": "count",
      "return": "long"
    },
    {
      "name": "average",
      "return": "java.util.OptionalDouble"
    },
    {
      "name": "summaryStatistics",
      "return": "java.util.IntSummaryStatistics"
    },
    {
      "name": "anyMatch",
      "parameters": [{
        "name": "predicate",
        "type": "java.util.function.IntPredicate"
      }],
      "return": "boolean"
    },
    {
      "name": "allMatch",
      "parameters": [{
        "name": "predicate",
        "type": "java.util.function.IntPredicate"
      }],
      "return": "boolean"
    },
    {
      "name": "noneMatch",
      "parameters": [{
        "name": "predicate",
        "type": "java.util.function.IntPredicate"
      }],
      "return": "boolean"
    },
    {
      "name": "findFirst",
      "return": "java.util.OptionalInt"
    },
    {
      "name": "findAny",
      "return": "java.util.OptionalInt"
    },
    {
      "name": "asLongStream",
      "return": "java.util.stream.LongStream"
    },
    {
      "name": "asDoubleStream",
      "return": "java.util.stream.DoubleStream"
    },
    {
      "name": "boxed",
      "return": "java.util.stream.Stream"
    },
    {
      "name": "sequential",
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "parallel",
      "return": "java.util.stream.IntStream"
    },
    {
      "name": "iterator",
      "return": "java.util.PrimitiveIterator.OfInt"
    },
    {
      "name": "spliterator",
      "return": "java.util.Spliterator.OfInt"
    },
    {
      "static": true,
      "name": "builder",
      "return": "java.util.stream.IntStream.Builder"
    },
    {
      "static": true,
      "name": "empty",
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "of",
      "parameters": [{
        "name": "t",
        "type": "int"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "of",
      "parameters": [{
        "name": "values",
        "type": "int[]"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "iterate",
      "parameters": [
        {
          "name": "seed",
          "type": "int"
        },
        {
          "name": "f",
          "type": "java.util.function.IntUnaryOperator"
        }
      ],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "iterate",
      "parameters": [
        {
          "name": "seed",
          "type": "int"
        },
        {
          "name": "hasNext",
          "type": "java.util.function.IntPredicate"
        },
        {
          "name": "next",
          "type": "java.util.function.IntUnaryOperator"
        }
      ],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "generate",
      "parameters": [{
        "name": "s",
        "type": "java.util.function.IntSupplier"
      }],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "range",
      "parameters": [
        {
          "name": "startInclusive",
          "type": "int"
        },
        {
          "name": "endExclusive",
          "type": "int"
        }
      ],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "rangeClosed",
      "parameters": [
        {
          "name": "startInclusive",
          "type": "int"
        },
        {
          "name": "endInclusive",
          "type": "int"
        }
      ],
      "return": "java.util.stream.IntStream"
    },
    {
      "static": true,
      "name": "concat",
      "parameters": [
        {
          "name": "a",
          "type": "java.util.stream.IntStream"
        },
        {
          "name": "b",
          "type": "java.util.stream.IntStream"
        }
      ],
      "return": "java.util.stream.IntStream"
    }
  ],
  "name": "java.util.stream.IntStream",
  "simple-name": "IntStream"
}