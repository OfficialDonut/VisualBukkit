{
  "constructors": [
    {
      "name": "<init>",
      "parameters": [{
        "name": "value",
        "type": "double"
      }]
    },
    {
      "name": "<init>",
      "parameters": [{
        "name": "s",
        "type": "java.lang.String"
      }]
    }
  ],
  "package": "java.lang",
  "methods": [
    {
      "name": "getClass",
      "return": "java.lang.Class"
    },
    {"name": "notify"},
    {"name": "notifyAll"},
    {"name": "wait"},
    {
      "name": "wait",
      "parameters": [{
        "name": "timeoutMillis",
        "type": "long"
      }]
    },
    {
      "name": "wait",
      "parameters": [
        {
          "name": "timeoutMillis",
          "type": "long"
        },
        {
          "name": "nanos",
          "type": "int"
        }
      ]
    },
    {
      "static": true,
      "name": "toString",
      "parameters": [{
        "name": "d",
        "type": "double"
      }],
      "return": "java.lang.String"
    },
    {
      "static": true,
      "name": "toHexString",
      "parameters": [{
        "name": "d",
        "type": "double"
      }],
      "return": "java.lang.String"
    },
    {
      "static": true,
      "name": "valueOf",
      "parameters": [{
        "name": "s",
        "type": "java.lang.String"
      }],
      "return": "java.lang.Double"
    },
    {
      "static": true,
      "name": "valueOf",
      "parameters": [{
        "name": "d",
        "type": "double"
      }],
      "return": "java.lang.Double"
    },
    {
      "static": true,
      "name": "parseDouble",
      "parameters": [{
        "name": "s",
        "type": "java.lang.String"
      }],
      "return": "double"
    },
    {
      "static": true,
      "name": "isNaN",
      "parameters": [{
        "name": "v",
        "type": "double"
      }],
      "return": "boolean"
    },
    {
      "static": true,
      "name": "isInfinite",
      "parameters": [{
        "name": "v",
        "type": "double"
      }],
      "return": "boolean"
    },
    {
      "static": true,
      "name": "isFinite",
      "parameters": [{
        "name": "d",
        "type": "double"
      }],
      "return": "boolean"
    },
    {
      "name": "isNaN",
      "return": "boolean"
    },
    {
      "name": "isInfinite",
      "return": "boolean"
    },
    {
      "name": "toString",
      "return": "java.lang.String"
    },
    {
      "name": "byteValue",
      "return": "byte"
    },
    {
      "name": "shortValue",
      "return": "short"
    },
    {
      "name": "intValue",
      "return": "int"
    },
    {
      "name": "longValue",
      "return": "long"
    },
    {
      "name": "floatValue",
      "return": "float"
    },
    {
      "name": "doubleValue",
      "return": "double"
    },
    {
      "name": "hashCode",
      "return": "int"
    },
    {
      "static": true,
      "name": "hashCode",
      "parameters": [{
        "name": "value",
        "type": "double"
      }],
      "return": "int"
    },
    {
      "name": "equals",
      "parameters": [{
        "name": "obj",
        "type": "java.lang.Object"
      }],
      "return": "boolean"
    },
    {
      "static": true,
      "name": "doubleToLongBits",
      "parameters": [{
        "name": "value",
        "type": "double"
      }],
      "return": "long"
    },
    {
      "static": true,
      "name": "doubleToRawLongBits",
      "parameters": [{
        "name": "value",
        "type": "double"
      }],
      "return": "long"
    },
    {
      "static": true,
      "name": "longBitsToDouble",
      "parameters": [{
        "name": "bits",
        "type": "long"
      }],
      "return": "double"
    },
    {
      "name": "compareTo",
      "parameters": [{
        "name": "anotherDouble",
        "type": "java.lang.Double"
      }],
      "return": "int"
    },
    {
      "static": true,
      "name": "compare",
      "parameters": [
        {
          "name": "d1",
          "type": "double"
        },
        {
          "name": "d2",
          "type": "double"
        }
      ],
      "return": "int"
    },
    {
      "static": true,
      "name": "sum",
      "parameters": [
        {
          "name": "a",
          "type": "double"
        },
        {
          "name": "b",
          "type": "double"
        }
      ],
      "return": "double"
    },
    {
      "static": true,
      "name": "max",
      "parameters": [
        {
          "name": "a",
          "type": "double"
        },
        {
          "name": "b",
          "type": "double"
        }
      ],
      "return": "double"
    },
    {
      "static": true,
      "name": "min",
      "parameters": [
        {
          "name": "a",
          "type": "double"
        },
        {
          "name": "b",
          "type": "double"
        }
      ],
      "return": "double"
    },
    {
      "name": "describeConstable",
      "return": "java.util.Optional"
    },
    {
      "name": "resolveConstantDesc",
      "parameters": [{
        "name": "lookup",
        "type": "java.lang.invoke.MethodHandles.Lookup"
      }],
      "return": "java.lang.Double"
    }
  ],
  "name": "java.lang.Double",
  "simple-name": "Double",
  "fields": [
    {
      "static": true,
      "name": "POSITIVE_INFINITY",
      "type": "double"
    },
    {
      "static": true,
      "name": "NEGATIVE_INFINITY",
      "type": "double"
    },
    {
      "static": true,
      "name": "NaN",
      "type": "double"
    },
    {
      "static": true,
      "name": "MAX_VALUE",
      "type": "double"
    },
    {
      "static": true,
      "name": "MIN_NORMAL",
      "type": "double"
    },
    {
      "static": true,
      "name": "MIN_VALUE",
      "type": "double"
    },
    {
      "static": true,
      "name": "MAX_EXPONENT",
      "type": "int"
    },
    {
      "static": true,
      "name": "MIN_EXPONENT",
      "type": "int"
    },
    {
      "static": true,
      "name": "SIZE",
      "type": "int"
    },
    {
      "static": true,
      "name": "BYTES",
      "type": "int"
    },
    {
      "static": true,
      "name": "TYPE",
      "type": "java.lang.Class"
    }
  ]
}