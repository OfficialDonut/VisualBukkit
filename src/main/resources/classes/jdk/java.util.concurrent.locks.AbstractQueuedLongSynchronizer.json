{
  "constructors": [{"name": "<init>"}],
  "package": "java.util.concurrent.locks",
  "methods": [
    {
      "name": "getClass",
      "return": "java.lang.Class"
    },
    {
      "name": "hashCode",
      "return": "int"
    },
    {
      "name": "equals",
      "parameters": [{
        "name": "obj",
        "type": "java.lang.Object"
      }],
      "return": "boolean"
    },
    {"name": "notify"},
    {"name": "notifyAll"},
    {"name": "wait"},
    {
      "name": "wait",
      "parameters": [{
        "name": "timeoutMillis",
        "type": "long"
      }]
    },
    {
      "name": "wait",
      "parameters": [
        {
          "name": "timeoutMillis",
          "type": "long"
        },
        {
          "name": "nanos",
          "type": "int"
        }
      ]
    },
    {
      "name": "acquire",
      "parameters": [{
        "name": "arg",
        "type": "long"
      }]
    },
    {
      "name": "acquireInterruptibly",
      "parameters": [{
        "name": "arg",
        "type": "long"
      }]
    },
    {
      "name": "tryAcquireNanos",
      "parameters": [
        {
          "name": "arg",
          "type": "long"
        },
        {
          "name": "nanosTimeout",
          "type": "long"
        }
      ],
      "return": "boolean"
    },
    {
      "name": "release",
      "parameters": [{
        "name": "arg",
        "type": "long"
      }],
      "return": "boolean"
    },
    {
      "name": "acquireShared",
      "parameters": [{
        "name": "arg",
        "type": "long"
      }]
    },
    {
      "name": "acquireSharedInterruptibly",
      "parameters": [{
        "name": "arg",
        "type": "long"
      }]
    },
    {
      "name": "tryAcquireSharedNanos",
      "parameters": [
        {
          "name": "arg",
          "type": "long"
        },
        {
          "name": "nanosTimeout",
          "type": "long"
        }
      ],
      "return": "boolean"
    },
    {
      "name": "releaseShared",
      "parameters": [{
        "name": "arg",
        "type": "long"
      }],
      "return": "boolean"
    },
    {
      "name": "hasQueuedThreads",
      "return": "boolean"
    },
    {
      "name": "hasContended",
      "return": "boolean"
    },
    {
      "name": "getFirstQueuedThread",
      "return": "java.lang.Thread"
    },
    {
      "name": "isQueued",
      "parameters": [{
        "name": "thread",
        "type": "java.lang.Thread"
      }],
      "return": "boolean"
    },
    {
      "name": "hasQueuedPredecessors",
      "return": "boolean"
    },
    {
      "name": "getQueueLength",
      "return": "int"
    },
    {
      "name": "getQueuedThreads",
      "return": "java.util.Collection"
    },
    {
      "name": "getExclusiveQueuedThreads",
      "return": "java.util.Collection"
    },
    {
      "name": "getSharedQueuedThreads",
      "return": "java.util.Collection"
    },
    {
      "name": "toString",
      "return": "java.lang.String"
    },
    {
      "name": "owns",
      "parameters": [{
        "name": "condition",
        "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
      }],
      "return": "boolean"
    },
    {
      "name": "hasWaiters",
      "parameters": [{
        "name": "condition",
        "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
      }],
      "return": "boolean"
    },
    {
      "name": "getWaitQueueLength",
      "parameters": [{
        "name": "condition",
        "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
      }],
      "return": "int"
    },
    {
      "name": "getWaitingThreads",
      "parameters": [{
        "name": "condition",
        "type": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject"
      }],
      "return": "java.util.Collection"
    }
  ],
  "name": "java.util.concurrent.locks.AbstractQueuedLongSynchronizer",
  "simple-name": "AbstractQueuedLongSynchronizer"
}