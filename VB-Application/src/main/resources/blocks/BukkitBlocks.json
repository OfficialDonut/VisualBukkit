[
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_WEAPONSMITH",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_WEAPONSMITH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockBurnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DIORITE",
    "id": "org.bukkit.Material#DIORITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Removed by destroying the block behind it, etc",
    "static": true,
    "field": "PHYSICS",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#PHYSICS",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "descr": "Increments automatically when a player kills another player on the dark green team.",
    "static": true,
    "field": "TEAM_KILL_DARK_GREEN",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_DARK_GREEN",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.LeavesDecayEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent"
  },
  {
    "static": true,
    "field": "CRIMSON_ROOTS",
    "id": "org.bukkit.Material#CRIMSON_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "HOME",
    "id": "org.bukkit.entity.memory.MemoryKey#HOME",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Outer corner stair block with higher left side.",
    "static": true,
    "field": "OUTER_LEFT",
    "id": "org.bukkit.block.data.type.Stairs.Shape#OUTER_LEFT",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "static": true,
    "field": "SNEAK_TIME",
    "id": "org.bukkit.Statistic#SNEAK_TIME",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Returns true if the Piston in the event is sticky.",
    "method": "isSticky",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#isSticky()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "boolean"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the gold team.",
    "static": true,
    "field": "KILLED_BY_TEAM_GOLD",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_GOLD",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Gets a block from this chunk",
    "param-names": [
      "Chunk",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "int",
      "int",
      "int"
    ],
    "method": "getBlock",
    "id": "org.bukkit.Chunk#getBlock(int,int,int)",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Adds a custom potion effect to this arrow.",
    "param-names": [
      "Arrow",
      "Effect",
      "Overwrite"
    ],
    "param-types": [
      "org.bukkit.entity.Arrow",
      "org.bukkit.potion.PotionEffect",
      "boolean"
    ],
    "method": "addCustomEffect",
    "id": "org.bukkit.entity.Arrow#addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
    "class": "org.bukkit.entity.Arrow",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "VOID",
    "id": "org.bukkit.Art#VOID",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Gets the relative in-game time of this world.\\n\\nThe relative time is analogous to hours * 1000",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTime",
    "id": "org.bukkit.World#getTime()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "BIRCH_PRESSURE_PLATE",
    "id": "org.bukkit.Material#BIRCH_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the spawner's delay.\\n\\nIf set to -1, the spawn delay will be reset to a random value between\\n#getMinSpawnDelay and #getMaxSpawnDelay().",
    "param-names": [
      "CreatureSpawner",
      "Delay"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setDelay",
    "id": "org.bukkit.block.CreatureSpawner#setDelay(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "boolean"
  },
  {
    "descr": "Shield blocks attack.",
    "static": true,
    "field": "SHIELD_BLOCK",
    "id": "org.bukkit.EntityEffect#SHIELD_BLOCK",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "DARK_OAK_CHEST_BOAT",
    "id": "org.bukkit.Material#DARK_OAK_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the idle kick timeout.",
    "static": true,
    "method": "getIdleTimeout",
    "id": "org.bukkit.Bukkit#getIdleTimeout()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Sets the most recent warning level of this block.\\nWhen the warning level reaches 4, the shrieker will attempt to spawn a\\nWarden.",
    "param-names": [
      "SculkShrieker",
      "Level"
    ],
    "param-types": [
      "org.bukkit.block.SculkShrieker",
      "int"
    ],
    "method": "setWarningLevel",
    "id": "org.bukkit.block.SculkShrieker#setWarningLevel(int)",
    "class": "org.bukkit.block.SculkShrieker"
  },
  {
    "descr": "Left-clicking the air",
    "static": true,
    "field": "LEFT_CLICK_AIR",
    "id": "org.bukkit.event.block.Action#LEFT_CLICK_AIR",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "id": "org.bukkit.inventory.ShapelessRecipe#ShapelessRecipe(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Gets the source ItemStack for this event.",
    "method": "getSource",
    "id": "org.bukkit.event.block.InventoryBlockStartEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PIGLIN_WALL_HEAD",
    "id": "org.bukkit.Material#PIGLIN_WALL_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.StructureGrowEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the value of the 'powered' property.",
    "param-names": ["Powerable"],
    "param-types": ["org.bukkit.block.data.Powerable"],
    "method": "isPowered",
    "id": "org.bukkit.block.data.Powerable#isPowered()",
    "class": "org.bukkit.block.data.Powerable",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the Entity that was killed. Can be null.",
    "param-names": ["LootContext"],
    "param-types": ["org.bukkit.loot.LootContext"],
    "method": "getLootedEntity",
    "id": "org.bukkit.loot.LootContext#getLootedEntity()",
    "class": "org.bukkit.loot.LootContext",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Creates explosion at given coordinates with given power and optionally\\nsetting blocks on fire or breaking blocks.",
    "param-names": [
      "World",
      "Loc",
      "Power",
      "Set Fire",
      "Break Blocks",
      "Source"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "float",
      "boolean",
      "boolean",
      "org.bukkit.entity.Entity"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(org.bukkit.Location,float,boolean,boolean,org.bukkit.entity.Entity)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "EMERALD",
    "id": "org.bukkit.Material#EMERALD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BASALT_FALL",
    "id": "org.bukkit.Sound#BLOCK_BASALT_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HUSK_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_HUSK_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Causes this villager to wake up if he's currently sleeping.",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "wakeup",
    "id": "org.bukkit.entity.Villager#wakeup()",
    "class": "org.bukkit.entity.Villager"
  },
  {
    "descr": "Get generate-structures setting.",
    "static": true,
    "method": "getGenerateStructures",
    "id": "org.bukkit.Bukkit#getGenerateStructures()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Left aligned text.",
    "static": true,
    "field": "LEFT",
    "id": "org.bukkit.entity.TextDisplay.TextAlignment#LEFT",
    "class": "org.bukkit.entity.TextDisplay.TextAlignment",
    "return": "org.bukkit.entity.TextDisplay.TextAlignment"
  },
  {
    "static": true,
    "field": "SEEK",
    "id": "org.bukkit.MusicInstrument#SEEK",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_WITHER_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_JUNGLE",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_JUNGLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLUE_WOOL",
    "id": "org.bukkit.Material#BLUE_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get all the criteria present in this advancement.",
    "param-names": ["Advancement"],
    "param-types": ["org.bukkit.advancement.Advancement"],
    "method": "getCriteria",
    "id": "org.bukkit.advancement.Advancement#getCriteria()",
    "class": "org.bukkit.advancement.Advancement",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.MushroomCow.Variant#values()",
    "class": "org.bukkit.entity.MushroomCow.Variant",
    "return": "org.bukkit.entity.MushroomCow.Variant[]"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ZOMBIE_HORSE",
    "id": "org.bukkit.loot.LootTables#ZOMBIE_HORSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Raised when an entity enters a vehicle.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent"
  },
  {
    "static": true,
    "field": "YELLOW",
    "id": "org.bukkit.boss.BarColor#YELLOW",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "static": true,
    "field": "GLOWSTONE",
    "id": "org.bukkit.Material#GLOWSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'bites' property.",
    "param-names": ["Cake"],
    "param-types": ["org.bukkit.block.data.type.Cake"],
    "method": "getBites",
    "id": "org.bukkit.block.data.type.Cake#getBites()",
    "class": "org.bukkit.block.data.type.Cake",
    "return": "int"
  },
  {
    "descr": "Sets whether the piglin is immune to zombification.",
    "param-names": [
      "PiglinAbstract",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.PiglinAbstract",
      "boolean"
    ],
    "method": "setImmuneToZombification",
    "id": "org.bukkit.entity.PiglinAbstract#setImmuneToZombification(boolean)",
    "class": "org.bukkit.entity.PiglinAbstract"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.loot.LootTables#valueOf(java.lang.String)",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ZOMBIE",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ZOMBIE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_PUMPKIN_SEEDS",
    "id": "org.bukkit.Material#LEGACY_PUMPKIN_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "KELP_PLANT",
    "id": "org.bukkit.Material#KELP_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerShowEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_ENCHANTED_BOOK",
    "id": "org.bukkit.Material#LEGACY_ENCHANTED_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the magnitude of the location squared. Not world-aware and\\norientation independent.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "lengthSquared",
    "id": "org.bukkit.Location#lengthSquared()",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "static": true,
    "field": "ORANGE_CONCRETE_POWDER",
    "id": "org.bukkit.Material#ORANGE_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TADPOLE_SPAWN_EGG",
    "id": "org.bukkit.Material#TADPOLE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_EAT",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents a nether based map (\"hell\")",
    "static": true,
    "field": "NETHER",
    "id": "org.bukkit.World.Environment#NETHER",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "POTTED_FLOWERING_AZALEA_BUSH",
    "id": "org.bukkit.Material#POTTED_FLOWERING_AZALEA_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getById",
    "id": "org.bukkit.block.PistonMoveReaction#getById(int)",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_STEP",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Removes all scores for an entry on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "resetScores",
    "id": "org.bukkit.scoreboard.Scoreboard#resetScores(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "descr": "Gets the DyeColor with the given firework color value.",
    "param-names": ["Color"],
    "static": true,
    "param-types": ["org.bukkit.Color"],
    "method": "getByFireworkColor",
    "id": "org.bukkit.DyeColor#getByFireworkColor(org.bukkit.Color)",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Gets the Unix timestamp at when this interaction occurred.",
    "param-names": ["Interaction.PreviousInteraction"],
    "param-types": ["org.bukkit.entity.Interaction.PreviousInteraction"],
    "method": "getTimestamp",
    "id": "org.bukkit.entity.Interaction.PreviousInteraction#getTimestamp()",
    "class": "org.bukkit.entity.Interaction.PreviousInteraction",
    "return": "long"
  },
  {
    "descr": "Get the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": ["ShapelessRecipe"],
    "param-types": ["org.bukkit.inventory.ShapelessRecipe"],
    "method": "getGroup",
    "id": "org.bukkit.inventory.ShapelessRecipe#getGroup()",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "RESONATE_8",
    "id": "org.bukkit.GameEvent#RESONATE_8",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "EAST_UP",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#EAST_UP",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "param-names": ["Choices"],
    "param-types": ["java.util.List"],
    "id": "org.bukkit.inventory.RecipeChoice.ExactChoice#ExactChoice(java.util.List<org.bukkit.inventory.ItemStack>)",
    "class": "org.bukkit.inventory.RecipeChoice.ExactChoice"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_SAPLING_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_SAPLING_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause",
    "return": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause"
  },
  {
    "descr": "Causes the entity to float into the air.",
    "static": true,
    "field": "LEVITATION",
    "id": "org.bukkit.potion.PotionEffectType#LEVITATION",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "FLAME",
    "id": "org.bukkit.Particle#FLAME",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_CAVE_VINES_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CAVE_VINES_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_ATTACK_CRIT",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_ATTACK_CRIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the difficulty value associated with this Difficulty.",
    "param-names": ["Difficulty"],
    "param-types": ["org.bukkit.Difficulty"],
    "method": "getValue",
    "id": "org.bukkit.Difficulty#getValue()",
    "class": "org.bukkit.Difficulty",
    "return": "int"
  },
  {
    "descr": "The dragon will fly towards a targeted player and shoot a\\nfireball when within 64 blocks.",
    "static": true,
    "field": "STRAFING",
    "id": "org.bukkit.entity.EnderDragon.Phase#STRAFING",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WHEAT_SEEDS",
    "id": "org.bukkit.Material#WHEAT_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Ready to harvest",
    "static": true,
    "field": "RIPE",
    "id": "org.bukkit.NetherWartsState#RIPE",
    "class": "org.bukkit.NetherWartsState",
    "return": "org.bukkit.NetherWartsState"
  },
  {
    "descr": "Checks to see if an entity has been visually hidden from this player.",
    "param-names": [
      "Player",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Entity"
    ],
    "method": "canSee",
    "id": "org.bukkit.entity.Player#canSee(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "Creates a new bounding box using the given center and extents.",
    "param-names": [
      "Center",
      "X",
      "Y",
      "Z"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.util.Vector",
      "double",
      "double",
      "double"
    ],
    "method": "of",
    "id": "org.bukkit.util.BoundingBox#of(org.bukkit.util.Vector,double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Entity hurt due to explosion damage.",
    "static": true,
    "field": "HURT_EXPLOSION",
    "id": "org.bukkit.EntityEffect#HURT_EXPLOSION",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Gets whether the player is sprinting or not.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isSprinting",
    "id": "org.bukkit.entity.Player#isSprinting()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "WAXED_WEATHERED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#WAXED_WEATHERED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#values()",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason[]"
  },
  {
    "descr": "Get the ticks that this entity has performed no action.\\n\\nThe details of what \"no action ticks\" entails varies from entity to entity\\nand cannot be specifically defined. Some examples include squid using this\\nvalue to determine when to swim, raiders for when they are to be expelled\\nfrom raids, or creatures (such as withers) as a requirement to be despawned.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getNoActionTicks",
    "id": "org.bukkit.entity.LivingEntity#getNoActionTicks()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "descr": "Sets the age of the mob to an adult",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.entity.Ageable"],
    "method": "setAdult",
    "id": "org.bukkit.entity.Ageable#setAdult()",
    "class": "org.bukkit.entity.Ageable"
  },
  {
    "descr": "Gets the action which will be performed on the potion effect type.",
    "method": "getAction",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getAction()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action"
  },
  {
    "descr": "Stops fire damage.",
    "static": true,
    "field": "FIRE_RESISTANCE",
    "id": "org.bukkit.potion.PotionEffectType#FIRE_RESISTANCE",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "boolean"
  },
  {
    "descr": "Rotates the vector around the x axis.\\n\\nThis piece of math is based on the standard rotation matrix for vectors\\nin three dimensional space. This matrix can be found here:\\nRotation\\nMatrix.",
    "param-names": [
      "Vector",
      "Angle"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rotateAroundX",
    "id": "org.bukkit.util.Vector#rotateAroundX(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "LEGACY_LADDER",
    "id": "org.bukkit.Material#LEGACY_LADDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the width of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getDisplayWidth",
    "id": "org.bukkit.entity.Display#getDisplayWidth()",
    "class": "org.bukkit.entity.Display",
    "return": "float"
  },
  {
    "param-names": ["Vibration.Destination.EntityDestination"],
    "param-types": ["org.bukkit.Vibration.Destination.EntityDestination"],
    "method": "getEntity",
    "id": "org.bukkit.Vibration.Destination.EntityDestination#getEntity()",
    "class": "org.bukkit.Vibration.Destination.EntityDestination",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "UNDER_FLOWING_WATER",
    "id": "org.bukkit.entity.Boat.Status#UNDER_FLOWING_WATER",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "static": true,
    "field": "FLETCHING_TABLE",
    "id": "org.bukkit.Material#FLETCHING_TABLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents a player related inventory event",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent"
  },
  {
    "static": true,
    "field": "REDSTONE",
    "id": "org.bukkit.Material#REDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_MEDIUM_AMETHYST_BUD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MEDIUM_AMETHYST_BUD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the shadow radius of this display.",
    "param-names": [
      "Display",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "float"
    ],
    "method": "setShadowRadius",
    "id": "org.bukkit.entity.Display#setShadowRadius(float)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "descr": "Send a TileState change. This fakes a TileState change for a user at\\nthe given location. This will not actually change the world in any way.\\nThis method will use a TileState at the location's block or a faked TileState\\nsent via\\n#sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData).\\n\\nIf the client does not have an appropriate tile at the given location it\\nmay display an error message to the user.\\n\\nBlockData#createBlockState() can be used to create a BlockState.",
    "param-names": [
      "Player",
      "Loc",
      "Tile State"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.block.TileState"
    ],
    "method": "sendBlockUpdate",
    "id": "org.bukkit.entity.Player#sendBlockUpdate(org.bukkit.Location,org.bukkit.block.TileState)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "NETHER_GOLD_ORE",
    "id": "org.bukkit.Material#NETHER_GOLD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the BlockData at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Block Data"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.RegionAccessor#setBlockData(org.bukkit.Location,org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.RegionAccessor"
  },
  {
    "descr": "Acacia tree.",
    "static": true,
    "field": "ACACIA",
    "id": "org.bukkit.TreeType#ACACIA",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "OAK_FENCE_GATE",
    "id": "org.bukkit.Material#OAK_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SAND_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SAND_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the view distance/range of this display.",
    "param-names": [
      "Display",
      "Range"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "float"
    ],
    "method": "setViewRange",
    "id": "org.bukkit.entity.Display#setViewRange(float)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_NO",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_NO",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getX",
    "id": "org.bukkit.block.DoubleChest#getX()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "double"
  },
  {
    "descr": "Unregisters this team from the Scoreboard",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "unregister",
    "id": "org.bukkit.scoreboard.Team#unregister()",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "static": true,
    "field": "BLOCK_WOOL_HIT",
    "id": "org.bukkit.Sound#BLOCK_WOOL_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERITE_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHERITE_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockDamageEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "MANGROVE_SWAMP",
    "id": "org.bukkit.block.Biome#MANGROVE_SWAMP",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Set the amount of ticks the bee cannot enter a hive for.",
    "param-names": [
      "Bee",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Bee",
      "int"
    ],
    "method": "setCannotEnterHiveTicks",
    "id": "org.bukkit.entity.Bee#setCannotEnterHiveTicks(int)",
    "class": "org.bukkit.entity.Bee"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The clicked item and the cursor are exchanged.",
    "static": true,
    "field": "SWAP_WITH_CURSOR",
    "id": "org.bukkit.event.inventory.InventoryAction#SWAP_WITH_CURSOR",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "TROPICAL_FISH",
    "id": "org.bukkit.Material#TROPICAL_FISH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WOODED_BADLANDS",
    "id": "org.bukkit.block.Biome#WOODED_BADLANDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the current phase that the dragon is performing.",
    "param-names": ["EnderDragon"],
    "param-types": ["org.bukkit.entity.EnderDragon"],
    "method": "getPhase",
    "id": "org.bukkit.entity.EnderDragon#getPhase()",
    "class": "org.bukkit.entity.EnderDragon",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Set the clear weather duration.\\nThe clear weather ticks determine whether or not the world will be\\nallowed to rain or storm. If clear weather ticks are &gt; 0, the world will\\nnot naturally do either until the duration has elapsed.\\nThis method is equivalent to calling /weather clear with a set\\namount of ticks.",
    "param-names": [
      "World",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setClearWeatherDuration",
    "id": "org.bukkit.World#setClearWeatherDuration(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Sets the entity's current freeze ticks (amount of ticks the entity has\\nbeen in powdered snow).",
    "param-names": [
      "Entity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "int"
    ],
    "method": "setFreezeTicks",
    "id": "org.bukkit.entity.Entity#setFreezeTicks(int)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Represents a player animation event",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent"
  },
  {
    "static": true,
    "field": "LEGACY_APPLE",
    "id": "org.bukkit.Material#LEGACY_APPLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHEEP_WHITE",
    "id": "org.bukkit.loot.LootTables#SHEEP_WHITE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getRawData",
    "id": "org.bukkit.block.BlockState#getRawData()",
    "class": "org.bukkit.block.BlockState",
    "return": "byte"
  },
  {
    "static": true,
    "field": "SALMON",
    "id": "org.bukkit.Material#SALMON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_COPPER_STEP",
    "id": "org.bukkit.Sound#BLOCK_COPPER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerItemBreakEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "YELLOW_CONCRETE",
    "id": "org.bukkit.Material#YELLOW_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent"
  },
  {
    "descr": "Get the hand in which the totem of undying was found, or null if the\\nentity did not have a totem of undying.",
    "method": "getHand",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_DEATH",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the faces which are applicable to this block.",
    "param-names": ["PointedDripstone"],
    "param-types": ["org.bukkit.block.data.type.PointedDripstone"],
    "method": "getVerticalDirections",
    "id": "org.bukkit.block.data.type.PointedDripstone#getVerticalDirections()",
    "class": "org.bukkit.block.data.type.PointedDripstone",
    "return": "java.util.Set"
  },
  {
    "descr": "Set the item in the result slot of the crafting inventory.",
    "param-names": [
      "CraftingInventory",
      "New Result"
    ],
    "param-types": [
      "org.bukkit.inventory.CraftingInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setResult",
    "id": "org.bukkit.inventory.CraftingInventory#setResult(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.CraftingInventory"
  },
  {
    "descr": "Sets the number of times this arrow can pierce through an entity.\\nMust be between 0 and 127 times.",
    "param-names": [
      "AbstractArrow",
      "Pierce Level"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractArrow",
      "int"
    ],
    "method": "setPierceLevel",
    "id": "org.bukkit.entity.AbstractArrow#setPierceLevel(int)",
    "class": "org.bukkit.entity.AbstractArrow"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SNIFFER_SPAWN_EGG",
    "id": "org.bukkit.Material#SNIFFER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entity is sneaking.",
    "static": true,
    "field": "SNEAKING",
    "id": "org.bukkit.entity.Pose#SNEAKING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Add a modifier to this instance.",
    "param-names": [
      "AttributeInstance",
      "Modifier"
    ],
    "param-types": [
      "org.bukkit.attribute.AttributeInstance",
      "org.bukkit.attribute.AttributeModifier"
    ],
    "method": "addModifier",
    "id": "org.bukkit.attribute.AttributeInstance#addModifier(org.bukkit.attribute.AttributeModifier)",
    "class": "org.bukkit.attribute.AttributeInstance"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "GREEN_CARPET",
    "id": "org.bukkit.Material#GREEN_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This is an Ender portal.",
    "static": true,
    "field": "ENDER",
    "id": "org.bukkit.PortalType#ENDER",
    "class": "org.bukkit.PortalType",
    "return": "org.bukkit.PortalType"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_JAGGED_PEAKS",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_JAGGED_PEAKS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increases damage against undead targets",
    "static": true,
    "field": "DAMAGE_UNDEAD",
    "id": "org.bukkit.enchantments.Enchantment#DAMAGE_UNDEAD",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Get the entities which are being unloaded.",
    "method": "getEntities",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#getEntities()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_CLICKING_STOP",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_CLICKING_STOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Rabbit.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "Gets the Entity being put into the bucket.",
    "method": "getEntity",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the color of the fish's pattern.\\n\\nPlugins should check that hasVariant() returns true before\\ncalling this method.",
    "param-names": ["TropicalFishBucketMeta"],
    "param-types": ["org.bukkit.inventory.meta.TropicalFishBucketMeta"],
    "method": "getPatternColor",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#getPatternColor()",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Called when a player toggles their flying state",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WITHER_ROSE",
    "id": "org.bukkit.Material#WITHER_ROSE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the current pickup status of this arrow.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "getPickupStatus",
    "id": "org.bukkit.entity.AbstractArrow#getPickupStatus()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "org.bukkit.entity.AbstractArrow.PickupStatus"
  },
  {
    "descr": "The player is not allowed to log in, due to them being banned",
    "static": true,
    "field": "KICK_BANNED",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#KICK_BANNED",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "Eject any passenger.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "eject",
    "id": "org.bukkit.entity.Entity#eject()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_TILES_PLACE",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_TILES_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_SUGAR_CANE_BLOCK",
    "id": "org.bukkit.Material#LEGACY_SUGAR_CANE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether this armor stand is a marker, meaning it has a very small\\ncollision box.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "isMarker",
    "id": "org.bukkit.entity.ArmorStand#isMarker()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "boolean"
  },
  {
    "descr": "Get whether the hoglin is able to be hunted by piglins.",
    "param-names": ["Hoglin"],
    "param-types": ["org.bukkit.entity.Hoglin"],
    "method": "isAbleToBeHunted",
    "id": "org.bukkit.entity.Hoglin#isAbleToBeHunted()",
    "class": "org.bukkit.entity.Hoglin",
    "return": "boolean"
  },
  {
    "descr": "Gets the number that health is scaled to for the client.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getHealthScale",
    "id": "org.bukkit.entity.Player#getHealthScale()",
    "class": "org.bukkit.entity.Player",
    "return": "double"
  },
  {
    "descr": "Instantiates a final PotionData object to contain information about a\\nPotion",
    "param-names": [
      "Type",
      "Extended",
      "Upgraded"
    ],
    "param-types": [
      "org.bukkit.potion.PotionType",
      "boolean",
      "boolean"
    ],
    "id": "org.bukkit.potion.PotionData#PotionData(org.bukkit.potion.PotionType,boolean,boolean)",
    "class": "org.bukkit.potion.PotionData"
  },
  {
    "descr": "Gets the entity caught by the player.\\n\\nIf player has fished successfully, the result may be cast to org.bukkit.entity.Item.",
    "method": "getCaught",
    "id": "org.bukkit.event.player.PlayerFishEvent#getCaught()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getRightSide",
    "id": "org.bukkit.block.DoubleChest#getRightSide()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "org.bukkit.inventory.InventoryHolder"
  },
  {
    "static": true,
    "field": "RAGDOLL",
    "id": "org.bukkit.entity.Cat.Type#RAGDOLL",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "The rail runs flat along the north/south (Z) axis.",
    "static": true,
    "field": "NORTH_SOUTH",
    "id": "org.bukkit.block.data.Rail.Shape#NORTH_SOUTH",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "Butcher profession. Wears a white apron. Butchers primarily trade for\\nraw and cooked food.",
    "static": true,
    "field": "BUTCHER",
    "id": "org.bukkit.entity.Villager.Profession#BUTCHER",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Represents pink dye.",
    "static": true,
    "field": "PINK",
    "id": "org.bukkit.DyeColor#PINK",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Allows this player to see a player that was previously hidden",
    "param-names": [
      "Player",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Player"
    ],
    "method": "showPlayer",
    "id": "org.bukkit.entity.Player#showPlayer(org.bukkit.entity.Player)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Large crimson fungus native to the nether",
    "static": true,
    "field": "CRIMSON_FUNGUS",
    "id": "org.bukkit.TreeType#CRIMSON_FUNGUS",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets the sea level for this world.\\n\\nThis is often half of #getMaxHeight()",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getSeaLevel",
    "id": "org.bukkit.World#getSeaLevel()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CAT",
    "id": "org.bukkit.entity.EntityType#CAT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Pitch black",
    "static": true,
    "field": "BLACK",
    "id": "org.bukkit.entity.Horse.Color#BLACK",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.attribute.AttributeModifier.Operation#values()",
    "class": "org.bukkit.attribute.AttributeModifier.Operation",
    "return": "org.bukkit.attribute.AttributeModifier.Operation[]"
  },
  {
    "descr": "Sets the z-coordinate of this location",
    "param-names": [
      "Location",
      "Z"
    ],
    "param-types": [
      "org.bukkit.Location",
      "double"
    ],
    "method": "setZ",
    "id": "org.bukkit.Location#setZ(double)",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ORANGE_SHULKER_BOX",
    "id": "org.bukkit.Material#ORANGE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the BlockFace that the block is moving to.",
    "method": "getFace",
    "id": "org.bukkit.event.block.BlockFromToEvent#getFace()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "MAGENTA_CANDLE_CAKE",
    "id": "org.bukkit.Material#MAGENTA_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the default value for a given GameRule. This value is not\\nguaranteed to match the current value.",
    "param-names": [
      "World",
      "Rule"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.GameRule"
    ],
    "method": "getGameRuleDefault",
    "id": "org.bukkit.World#<T>getGameRuleDefault(org.bukkit.GameRule<T>)",
    "class": "org.bukkit.World",
    "return": "java.lang.Object"
  },
  {
    "descr": "Sets the new level of the cauldron.",
    "param-names": ["New Level"],
    "param-types": ["int"],
    "method": "setNewLevel",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#setNewLevel(int)",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent"
  },
  {
    "descr": "Gets the amount of ticks before client-side interpolation will commence.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getInterpolationDelay",
    "id": "org.bukkit.entity.Display#getInterpolationDelay()",
    "class": "org.bukkit.entity.Display",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the item on the cursor.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCursor",
    "id": "org.bukkit.event.inventory.CraftItemEvent#setCursor(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent"
  },
  {
    "descr": "Gets if the client is displayed a 'scaled' health, that is, health on a\\nscale from 0-#getHealthScale().",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isHealthScaled",
    "id": "org.bukkit.entity.Player#isHealthScaled()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "Represents white dye.",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.DyeColor#WHITE",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Gets if the EnderSignal should drop an item on death.\\nIf true, it will drop an item. If false, it will shatter.",
    "param-names": ["EnderSignal"],
    "param-types": ["org.bukkit.entity.EnderSignal"],
    "method": "getDropItem",
    "id": "org.bukkit.entity.EnderSignal#getDropItem()",
    "class": "org.bukkit.entity.EnderSignal",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.entity.Panda.Gene#BROWN",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "descr": "Sets the damage for the specified modifier.",
    "param-names": [
      "Type",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
      "double"
    ],
    "method": "setDamage",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#setDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier,double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent"
  },
  {
    "descr": "Gets the second trusted player.",
    "param-names": ["Fox"],
    "param-types": ["org.bukkit.entity.Fox"],
    "method": "getSecondTrustedPlayer",
    "id": "org.bukkit.entity.Fox#getSecondTrustedPlayer()",
    "class": "org.bukkit.entity.Fox",
    "return": "org.bukkit.entity.AnimalTamer"
  },
  {
    "static": true,
    "field": "GUARDIAN_SPAWN_EGG",
    "id": "org.bukkit.Material#GUARDIAN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the raw amount of damage caused by the event",
    "method": "getDamage",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getDamage()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "double"
  },
  {
    "descr": "Damage caused by being in the area when a block explodes.\\n\\nDamage: variable",
    "static": true,
    "field": "BLOCK_EXPLOSION",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#BLOCK_EXPLOSION",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Sets the maximum radius the world is searched for a free space from the\\ngiven location.\\nIf enough free space is found then the portal will be created there, if\\nnot it will force create with air-space at the target location.\\nDoes not apply to end portal target platforms which will always appear at\\nthe target location.",
    "param-names": ["Creation Radius"],
    "param-types": ["int"],
    "method": "setCreationRadius",
    "id": "org.bukkit.event.player.PlayerPortalEvent#setCreationRadius(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "descr": "Removes an ingredient from the list. If the ingredient occurs multiple\\ntimes, only one instance of it is removed. Only removes exact matches,\\nwith a data value of 0.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.Material"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(org.bukkit.Material)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the chance of the leggings being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setLeggingsDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setLeggingsDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the dimension ID of this environment",
    "param-names": ["World.Environment"],
    "param-types": ["org.bukkit.World.Environment"],
    "method": "getId",
    "id": "org.bukkit.World.Environment#getId()",
    "class": "org.bukkit.World.Environment",
    "return": "int"
  },
  {
    "descr": "Check if the provided ItemStack is the correct item used for breeding\\nthis entity..",
    "param-names": [
      "Animals",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Animals",
      "org.bukkit.Material"
    ],
    "method": "isBreedItem",
    "id": "org.bukkit.entity.Animals#isBreedItem(org.bukkit.Material)",
    "class": "org.bukkit.entity.Animals",
    "return": "boolean"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "WITHER_SKELETON_WALL_SKULL",
    "id": "org.bukkit.Material#WITHER_SKELETON_WALL_SKULL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the normal vector corresponding to this block face.",
    "param-names": ["BlockFace"],
    "param-types": ["org.bukkit.block.BlockFace"],
    "method": "getDirection",
    "id": "org.bukkit.block.BlockFace#getDirection()",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Removes all players from this boss bar",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "removeAll",
    "id": "org.bukkit.boss.BossBar#removeAll()",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "boolean"
  },
  {
    "descr": "Sound of a trapdoor opening.",
    "static": true,
    "field": "TRAPDOOR_TOGGLE",
    "id": "org.bukkit.Effect#TRAPDOOR_TOGGLE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.ServerListPingEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Thrown when a player picks up an arrow from the ground.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent"
  },
  {
    "static": true,
    "field": "LEGACY_THIN_GLASS",
    "id": "org.bukkit.Material#LEGACY_THIN_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Hostile mobs spawn, enemies deal normal amounts of damage, the hunger\\nbar does deplete and starving deals up to 9.5 hearts of damage.",
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.Difficulty#NORMAL",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "boolean"
  },
  {
    "descr": "Item disappears instead of dropping",
    "static": true,
    "field": "VANISHING_CURSE",
    "id": "org.bukkit.enchantments.Enchantment#VANISHING_CURSE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Get the Sound this mob makes while ambiently existing. This sound\\nmay change depending on the current state of the entity, and may also\\nreturn null under specific conditions. This sound is not constant.\\nFor instance, villagers will make different passive noises depending\\non whether or not they are actively trading with a player, or make no\\nambient noise while sleeping.",
    "param-names": ["Mob"],
    "param-types": ["org.bukkit.entity.Mob"],
    "method": "getAmbientSound",
    "id": "org.bukkit.entity.Mob#getAmbientSound()",
    "class": "org.bukkit.entity.Mob",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_GOLD_ORE_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHER_GOLD_ORE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the zoglin is a baby",
    "param-names": ["Zoglin"],
    "param-types": ["org.bukkit.entity.Zoglin"],
    "method": "isBaby",
    "id": "org.bukkit.entity.Zoglin#isBaby()",
    "class": "org.bukkit.entity.Zoglin",
    "return": "boolean"
  },
  {
    "descr": "Represents black",
    "static": true,
    "field": "BLACK",
    "id": "org.bukkit.ChatColor#BLACK",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "LEGACY_HARD_CLAY",
    "id": "org.bukkit.Material#LEGACY_HARD_CLAY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a new EulerAngle which is the result of subtracting\\nthe x, y, z components to this EulerAngle",
    "param-names": [
      "EulerAngle",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.EulerAngle",
      "double",
      "double",
      "double"
    ],
    "method": "subtract",
    "id": "org.bukkit.util.EulerAngle#subtract(double,double,double)",
    "class": "org.bukkit.util.EulerAngle",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "A hopper inventory, with 5 slots of type CONTAINER.",
    "static": true,
    "field": "HOPPER",
    "id": "org.bukkit.event.inventory.InventoryType#HOPPER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "GOLD_ORE",
    "id": "org.bukkit.Material#GOLD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_ITEM_THROWN",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_ITEM_THROWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the location where the explosion happened.\\n\\nIt is not possible to get this value from the Entity as the Entity no\\nlonger exists in the world.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_SAND_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_SAND_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Big brown mushroom; tall and umbrella-like",
    "static": true,
    "field": "BROWN_MUSHROOM",
    "id": "org.bukkit.TreeType#BROWN_MUSHROOM",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "param-names": ["Damage"],
    "param-types": ["int"],
    "method": "setDamage",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#setDamage(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent"
  },
  {
    "static": true,
    "field": "HOPPER_INSPECTED",
    "id": "org.bukkit.Statistic#HOPPER_INSPECTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "STRONGHOLD_CROSSING",
    "id": "org.bukkit.loot.LootTables#STRONGHOLD_CROSSING",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Checks if the inventory contains any ItemStacks with the given\\nmaterial.",
    "param-names": [
      "Inventory",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.Material"
    ],
    "method": "contains",
    "id": "org.bukkit.inventory.Inventory#contains(org.bukkit.Material)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SNOW_BLOCK",
    "id": "org.bukkit.Material#SNOW_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_LEASH",
    "id": "org.bukkit.Material#LEGACY_LEASH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get whether this raid started.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "isStarted",
    "id": "org.bukkit.Raid#isStarted()",
    "class": "org.bukkit.Raid",
    "return": "boolean"
  },
  {
    "descr": "Set the spawner's creature type.",
    "param-names": [
      "CreatureSpawner",
      "Creature Type"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "org.bukkit.entity.EntityType"
    ],
    "method": "setSpawnedType",
    "id": "org.bukkit.block.CreatureSpawner#setSpawnedType(org.bukkit.entity.EntityType)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "When a mooshroom (or MUSHROOM_COW) is sheared and a cow spawns.",
    "static": true,
    "field": "SHEARED",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#SHEARED",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "Returns the base color for this banner",
    "param-names": ["BannerMeta"],
    "param-types": ["org.bukkit.inventory.meta.BannerMeta"],
    "method": "getBaseColor",
    "id": "org.bukkit.inventory.meta.BannerMeta#getBaseColor()",
    "class": "org.bukkit.inventory.meta.BannerMeta",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Checks if this enchantment is a treasure enchantment.\\n\\nTreasure enchantments can only be received via looting, trading, or\\nfishing.",
    "param-names": ["Enchantment"],
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "isTreasure",
    "id": "org.bukkit.enchantments.Enchantment#isTreasure()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "boolean"
  },
  {
    "descr": "Gets the message that the player is attempting to send. This message\\nwill be used with #getFormat().",
    "method": "getMessage",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getMessage()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the current type of this cat.",
    "param-names": ["Ocelot"],
    "param-types": ["org.bukkit.entity.Ocelot"],
    "method": "getCatType",
    "id": "org.bukkit.entity.Ocelot#getCatType()",
    "class": "org.bukkit.entity.Ocelot",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "descr": "Gets the type of this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWorldType",
    "id": "org.bukkit.World#getWorldType()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.WorldType"
  },
  {
    "static": true,
    "field": "COD_SPAWN_EGG",
    "id": "org.bukkit.Material#COD_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The sound played when launching an endereye",
    "static": true,
    "field": "ENDEREYE_LAUNCH",
    "id": "org.bukkit.Effect#ENDEREYE_LAUNCH",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "LIBRARIAN_GIFT",
    "id": "org.bukkit.loot.LootTables#LIBRARIAN_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_TILES_FALL",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_TILES_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIGHT_GRAY_WALL_BANNER",
    "id": "org.bukkit.Material#LIGHT_GRAY_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GLOWING_REDSTONE_ORE",
    "id": "org.bukkit.Material#LEGACY_GLOWING_REDSTONE_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the starvation rate (1 health per x ticks) of\\nthe HumanEntity. Default is 80.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getStarvationRate",
    "id": "org.bukkit.entity.HumanEntity#getStarvationRate()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "Called when a ThrownExpBottle hits and releases experience.",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent"
  },
  {
    "descr": "The particles shown when wax is removed from a copper block.",
    "static": true,
    "field": "COPPER_WAX_OFF",
    "id": "org.bukkit.Effect#COPPER_WAX_OFF",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "F",
    "id": "org.bukkit.Note.Tone#F",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "boolean"
  },
  {
    "descr": "An event that is called when a world's spawn changes. The world's previous\\nspawn location is included.",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent"
  },
  {
    "descr": "Sets the key required to access this container. Set to null (or empty\\nstring) to remove key.",
    "param-names": [
      "Lockable",
      "Key"
    ],
    "param-types": [
      "org.bukkit.block.Lockable",
      "java.lang.String"
    ],
    "method": "setLock",
    "id": "org.bukkit.block.Lockable#setLock(java.lang.String)",
    "class": "org.bukkit.block.Lockable"
  },
  {
    "descr": "BlockData: Snow",
    "static": true,
    "field": "SNOW",
    "id": "org.bukkit.Material#SNOW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the corresponding fall sound for this group.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getFallSound",
    "id": "org.bukkit.SoundGroup#getFallSound()",
    "class": "org.bukkit.SoundGroup",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_BITE",
    "id": "org.bukkit.Sound#ENTITY_PANDA_BITE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_HURT",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent"
  },
  {
    "static": true,
    "field": "ENTITY_SPIDER_HURT",
    "id": "org.bukkit.Sound#ENTITY_SPIDER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the chance of a fish biting.\\n\\n0.0 = No Chance.\\n1.0 = Instant catch.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getBiteChance",
    "id": "org.bukkit.entity.FishHook#getBiteChance()",
    "class": "org.bukkit.entity.FishHook",
    "return": "double"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the amount of ticks until this entity will be converted to a Drowned\\nas a result of being underwater.\\nWhen this reaches 0, the entity will be converted. A value of less than 0\\nwill stop the current conversion process without converting the current\\nentity.",
    "param-names": [
      "Zombie",
      "Time"
    ],
    "param-types": [
      "org.bukkit.entity.Zombie",
      "int"
    ],
    "method": "setConversionTime",
    "id": "org.bukkit.entity.Zombie#setConversionTime(int)",
    "class": "org.bukkit.entity.Zombie"
  },
  {
    "descr": "Called when a player toggles their sprinting state",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent"
  },
  {
    "descr": "Gets the value of the 'sculk_sensor_phase' property.",
    "param-names": ["SculkSensor"],
    "param-types": ["org.bukkit.block.data.type.SculkSensor"],
    "method": "getPhase",
    "id": "org.bukkit.block.data.type.SculkSensor#getPhase()",
    "class": "org.bukkit.block.data.type.SculkSensor",
    "return": "org.bukkit.block.data.type.SculkSensor.Phase"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerChatEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns a HashMap with all slots and ItemStacks in the inventory with\\nthe given Material.\\n\\nThe HashMap contains entries where, the key is the slot index, and the\\nvalue is the ItemStack in that slot. If no matching ItemStack with the\\ngiven Material is found, an empty map is returned.",
    "param-names": [
      "Inventory",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.Material"
    ],
    "method": "all",
    "id": "org.bukkit.inventory.Inventory#all(org.bukkit.Material)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "java.util.HashMap"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BANNER_CYAN",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_CYAN",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When the effect was removed due to expiration.",
    "static": true,
    "field": "EXPIRATION",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#EXPIRATION",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "param-names": ["Vibration.Destination.BlockDestination"],
    "param-types": ["org.bukkit.Vibration.Destination.BlockDestination"],
    "method": "getBlock",
    "id": "org.bukkit.Vibration.Destination.BlockDestination#getBlock()",
    "class": "org.bukkit.Vibration.Destination.BlockDestination",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Zombie is normally played when a Zombie Head is on top of the note block.",
    "static": true,
    "field": "ZOMBIE",
    "id": "org.bukkit.Instrument#ZOMBIE",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_BASEDRUM",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_BASEDRUM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "NORTH_UP",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#NORTH_UP",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "Get the collar color of this wolf",
    "param-names": ["Wolf"],
    "param-types": ["org.bukkit.entity.Wolf"],
    "method": "getCollarColor",
    "id": "org.bukkit.entity.Wolf#getCollarColor()",
    "class": "org.bukkit.entity.Wolf",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "LEGACY_EGG",
    "id": "org.bukkit.Material#LEGACY_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_EMPTY_AXOLOTL",
    "id": "org.bukkit.Sound#ITEM_BUCKET_EMPTY_AXOLOTL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LIME_WOOL",
    "id": "org.bukkit.Material#LIME_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents red",
    "static": true,
    "field": "RED",
    "id": "org.bukkit.ChatColor#RED",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Get the contents of the crafting matrix.",
    "param-names": ["CraftingInventory"],
    "param-types": ["org.bukkit.inventory.CraftingInventory"],
    "method": "getMatrix",
    "id": "org.bukkit.inventory.CraftingInventory#getMatrix()",
    "class": "org.bukkit.inventory.CraftingInventory",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "descr": "Set the maximum amount of players allowed to be logged in at once.",
    "param-names": ["Max Players"],
    "static": true,
    "param-types": ["int"],
    "method": "setMaxPlayers",
    "id": "org.bukkit.Bukkit#setMaxPlayers(int)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_DEATH_WATER",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_DEATH_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Particle#values()",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle[]"
  },
  {
    "static": true,
    "field": "EMPTY",
    "id": "org.bukkit.loot.LootTables#EMPTY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Get the operation this modifier will apply.",
    "param-names": ["AttributeModifier"],
    "param-types": ["org.bukkit.attribute.AttributeModifier"],
    "method": "getOperation",
    "id": "org.bukkit.attribute.AttributeModifier#getOperation()",
    "class": "org.bukkit.attribute.AttributeModifier",
    "return": "org.bukkit.attribute.AttributeModifier.Operation"
  },
  {
    "static": true,
    "field": "BEEF",
    "id": "org.bukkit.Material#BEEF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_SPAWN",
    "id": "org.bukkit.Sound#ENTITY_WITHER_SPAWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.InventoryBlockStartEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "COLD_OCEAN",
    "id": "org.bukkit.block.Biome#COLD_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sound played by a bat taking off",
    "static": true,
    "field": "BAT_TAKEOFF",
    "id": "org.bukkit.Effect#BAT_TAKEOFF",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Gets the DyeColor with the given color value.",
    "param-names": ["Color"],
    "static": true,
    "param-types": ["org.bukkit.Color"],
    "method": "getByColor",
    "id": "org.bukkit.DyeColor#getByColor(org.bukkit.Color)",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Set the ItemStack to be displayed while in the air and to be\\ndropped on death.",
    "param-names": [
      "EnderSignal",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.EnderSignal",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.entity.EnderSignal#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.EnderSignal"
  },
  {
    "static": true,
    "field": "ENTITY_GHAST_WARN",
    "id": "org.bukkit.Sound#ENTITY_GHAST_WARN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The Location to store where the loot will be generated.",
    "param-names": ["LootContext"],
    "param-types": ["org.bukkit.loot.LootContext"],
    "method": "getLocation",
    "id": "org.bukkit.loot.LootContext#getLocation()",
    "class": "org.bukkit.loot.LootContext",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "SHEEP",
    "id": "org.bukkit.loot.LootTables#SHEEP",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "WHITE_ASH",
    "id": "org.bukkit.Particle#WHITE_ASH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "boolean"
  },
  {
    "descr": "Creates a new BlockData instance for the specified Material, with\\nall properties initialized to unspecified defaults, except for those\\nprovided in data.",
    "param-names": [
      "Material",
      "Data"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Material",
      "java.lang.String"
    ],
    "method": "createBlockData",
    "id": "org.bukkit.Bukkit#createBlockData(org.bukkit.Material,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockExplodeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "IRON_CHESTPLATE",
    "id": "org.bukkit.Material#IRON_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the sound to play if the skull is placed on a note block.\\n\\nNote: This only works for player heads. For other heads,\\nsee org.bukkit.Instrument.",
    "param-names": [
      "Skull",
      "Note Block Sound"
    ],
    "param-types": [
      "org.bukkit.block.Skull",
      "org.bukkit.NamespacedKey"
    ],
    "method": "setNoteBlockSound",
    "id": "org.bukkit.block.Skull#setNoteBlockSound(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.block.Skull"
  },
  {
    "static": true,
    "field": "DRIPPING_HONEY",
    "id": "org.bukkit.Particle#DRIPPING_HONEY",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets the value of the 'face' property.",
    "param-names": [
      "Switch",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Switch",
      "org.bukkit.block.data.type.Switch.Face"
    ],
    "method": "setFace",
    "id": "org.bukkit.block.data.type.Switch#setFace(org.bukkit.block.data.type.Switch.Face)",
    "class": "org.bukkit.block.data.type.Switch"
  },
  {
    "static": true,
    "field": "SNIFFER_EXPLORED_POSITIONS",
    "id": "org.bukkit.entity.memory.MemoryKey#SNIFFER_EXPLORED_POSITIONS",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Sound of zombies destroying a door.",
    "static": true,
    "field": "ZOMBIE_DESTROY_DOOR",
    "id": "org.bukkit.Effect#ZOMBIE_DESTROY_DOOR",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.PortalCreateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when the recipe of an Item is completed inside a crafting matrix.",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent"
  },
  {
    "descr": "BlockData: RespawnAnchor",
    "static": true,
    "field": "RESPAWN_ANCHOR",
    "id": "org.bukkit.Material#RESPAWN_ANCHOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Low wall present.",
    "static": true,
    "field": "LOW",
    "id": "org.bukkit.block.data.type.Wall.Height#LOW",
    "class": "org.bukkit.block.data.type.Wall.Height",
    "return": "org.bukkit.block.data.type.Wall.Height"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent"
  },
  {
    "descr": "The entire clicked slot is dropped.",
    "static": true,
    "field": "DROP_ALL_SLOT",
    "id": "org.bukkit.event.inventory.InventoryAction#DROP_ALL_SLOT",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Removes a material from the list of materials the piglin will pickup.\\nNote: It's not possible to override the default list of\\nitem the piglin will pickup. To cancel pickup see\\norg.bukkit.event.entity.EntityPickupItemEvent.",
    "param-names": [
      "Piglin",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Piglin",
      "org.bukkit.Material"
    ],
    "method": "removeMaterialOfInterest",
    "id": "org.bukkit.entity.Piglin#removeMaterialOfInterest(org.bukkit.Material)",
    "class": "org.bukkit.entity.Piglin",
    "return": "boolean"
  },
  {
    "descr": "Set the center X position of this map.",
    "param-names": [
      "MapView",
      "X"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "int"
    ],
    "method": "setCenterX",
    "id": "org.bukkit.map.MapView#setCenterX(int)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "sharped",
    "id": "org.bukkit.Note#sharped()",
    "class": "org.bukkit.Note",
    "return": "org.bukkit.Note"
  },
  {
    "descr": "Sets the environment that will be used to create or load the world",
    "param-names": [
      "WorldCreator",
      "Env"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "org.bukkit.World.Environment"
    ],
    "method": "environment",
    "id": "org.bukkit.WorldCreator#environment(org.bukkit.World.Environment)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "The sensor is inactive.",
    "static": true,
    "field": "INACTIVE",
    "id": "org.bukkit.block.data.type.SculkSensor.Phase#INACTIVE",
    "class": "org.bukkit.block.data.type.SculkSensor.Phase",
    "return": "org.bukkit.block.data.type.SculkSensor.Phase"
  },
  {
    "descr": "Get the Sound this entity makes while swimming.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getSwimSound",
    "id": "org.bukkit.entity.Entity#getSwimSound()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Material of the item being retrieved",
    "method": "getItemType",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getItemType()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "LIGHT_GRAY_CANDLE_CAKE",
    "id": "org.bukkit.Material#LIGHT_GRAY_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the wither's current invulnerability ticks.",
    "param-names": ["Wither"],
    "param-types": ["org.bukkit.entity.Wither"],
    "method": "getInvulnerabilityTicks",
    "id": "org.bukkit.entity.Wither#getInvulnerabilityTicks()",
    "class": "org.bukkit.entity.Wither",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_9",
    "id": "org.bukkit.Material#LEGACY_RECORD_9",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent"
  },
  {
    "descr": "Set the visibility status of this cursor.",
    "param-names": [
      "MapCursor",
      "Visible"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "boolean"
    ],
    "method": "setVisible",
    "id": "org.bukkit.map.MapCursor#setVisible(boolean)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "Checks if this bounding box overlaps with the bounding box that is\\ndefined by the given corners.\\n\\nBounding boxes that are only intersecting at the borders are not\\nconsidered overlapping.",
    "param-names": [
      "BoundingBox",
      "Min",
      "Max"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "overlaps",
    "id": "org.bukkit.util.BoundingBox#overlaps(org.bukkit.util.Vector,org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ELYTRA_FREE_FALL",
    "id": "org.bukkit.GameEvent#ELYTRA_FREE_FALL",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_PISTON_STICKY_BASE",
    "id": "org.bukkit.Material#LEGACY_PISTON_STICKY_BASE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_STEP",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Sound of blaze firing.",
    "static": true,
    "field": "BLAZE_SHOOT",
    "id": "org.bukkit.Effect#BLAZE_SHOOT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "How much time is left in the brewing cycle.",
    "param-names": ["BrewingStand"],
    "param-types": ["org.bukkit.block.BrewingStand"],
    "method": "getBrewingTime",
    "id": "org.bukkit.block.BrewingStand#getBrewingTime()",
    "class": "org.bukkit.block.BrewingStand",
    "return": "int"
  },
  {
    "descr": "Sets the value of the 'pickles' property.",
    "param-names": [
      "SeaPickle",
      "Pickles"
    ],
    "param-types": [
      "org.bukkit.block.data.type.SeaPickle",
      "int"
    ],
    "method": "setPickles",
    "id": "org.bukkit.block.data.type.SeaPickle#setPickles(int)",
    "class": "org.bukkit.block.data.type.SeaPickle"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_VILLAGER_CURE",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_CURE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the command that the server will execute",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setCommand",
    "id": "org.bukkit.event.server.ServerCommandEvent#setCommand(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "YELLOW_BANNER",
    "id": "org.bukkit.Material#YELLOW_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Instructs this Mob to set the specified LivingEntity as its target.\\n\\nHostile creatures may attack their target, and friendly creatures may\\nfollow their target.",
    "param-names": [
      "Mob",
      "Target"
    ],
    "param-types": [
      "org.bukkit.entity.Mob",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "setTarget",
    "id": "org.bukkit.entity.Mob#setTarget(org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.entity.Mob"
  },
  {
    "param-names": ["PotionType"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "method": "getMaxLevel",
    "id": "org.bukkit.potion.PotionType#getMaxLevel()",
    "class": "org.bukkit.potion.PotionType",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_SQUID_SQUIRT",
    "id": "org.bukkit.Sound#ENTITY_GLOW_SQUID_SQUIRT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a chunk is loaded",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent"
  },
  {
    "descr": "Sets the amount of ticks until this entity will be converted to a\\nZombified Piglin.\\nWhen this reaches 0, the entity will be converted. A value of less than 0\\nwill stop the current conversion process without converting the current\\nentity.",
    "param-names": [
      "PiglinAbstract",
      "Time"
    ],
    "param-types": [
      "org.bukkit.entity.PiglinAbstract",
      "int"
    ],
    "method": "setConversionTime",
    "id": "org.bukkit.entity.PiglinAbstract#setConversionTime(int)",
    "class": "org.bukkit.entity.PiglinAbstract"
  },
  {
    "descr": "Get the current fuel.",
    "param-names": ["FurnaceInventory"],
    "param-types": ["org.bukkit.inventory.FurnaceInventory"],
    "method": "getFuel",
    "id": "org.bukkit.inventory.FurnaceInventory#getFuel()",
    "class": "org.bukkit.inventory.FurnaceInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Decrements the given statistic for this player.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "int"
    ],
    "method": "decrementStatistic",
    "id": "org.bukkit.OfflinePlayer#decrementStatistic(org.bukkit.Statistic,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Gets all the recipes in the book.",
    "param-names": ["KnowledgeBookMeta"],
    "param-types": ["org.bukkit.inventory.meta.KnowledgeBookMeta"],
    "method": "getRecipes",
    "id": "org.bukkit.inventory.meta.KnowledgeBookMeta#getRecipes()",
    "class": "org.bukkit.inventory.meta.KnowledgeBookMeta",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Fire",
    "static": true,
    "field": "FIRE",
    "id": "org.bukkit.Material#FIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the ItemStack for this thrown potion.\\n\\nThe ItemStack must be of type org.bukkit.Material#SPLASH_POTION\\nor org.bukkit.Material#LINGERING_POTION, otherwise an exception\\nis thrown.",
    "param-names": [
      "ThrownPotion",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ThrownPotion",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.entity.ThrownPotion#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ThrownPotion"
  },
  {
    "descr": "Mason profession.",
    "static": true,
    "field": "MASON",
    "id": "org.bukkit.entity.Villager.Profession#MASON",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Internal representation of a Firework once it has been launched.",
    "static": true,
    "field": "FIREWORK",
    "id": "org.bukkit.entity.EntityType#FIREWORK",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_CLUSTER_BREAK",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_CLUSTER_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Scoreboard to which this team is attached",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getScoreboard",
    "id": "org.bukkit.scoreboard.Team#getScoreboard()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "descr": "Indicates the teleporation was caused by a player throwing an Ender\\nPearl",
    "static": true,
    "field": "ENDER_PEARL",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#ENDER_PEARL",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerChangedMainHandEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Ring this bell in the direction that the bell is facing. This will call a\\nBellRingEvent.",
    "param-names": ["Bell"],
    "param-types": ["org.bukkit.block.Bell"],
    "method": "ring",
    "id": "org.bukkit.block.Bell#ring()",
    "class": "org.bukkit.block.Bell",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerItemBreakEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns the hand used by the player to leash the entity.",
    "method": "getHand",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "TRAIL_RUINS_ARCHAEOLOGY_RARE",
    "id": "org.bukkit.loot.LootTables#TRAIL_RUINS_ARCHAEOLOGY_RARE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Entity is swimming.",
    "static": true,
    "field": "SWIMMING",
    "id": "org.bukkit.entity.Pose#SWIMMING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Get a list of all living entities in this World",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getLivingEntities",
    "id": "org.bukkit.World#getLivingEntities()",
    "class": "org.bukkit.World",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "ACACIA_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#ACACIA_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "KNOWLEDGE_BOOK",
    "id": "org.bukkit.Material#KNOWLEDGE_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Mirrors the player's food points (0 for no food, 20 for maximum food).",
    "static": true,
    "field": "FOOD",
    "id": "org.bukkit.scoreboard.Criteria#FOOD",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the new result of the login, as an enum",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.event.player.PlayerLoginEvent.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.player.PlayerLoginEvent#setResult(org.bukkit.event.player.PlayerLoginEvent.Result)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sound of a wither shooting",
    "static": true,
    "field": "WITHER_SHOOT",
    "id": "org.bukkit.Effect#WITHER_SHOOT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Raid.RaidStatus#valueOf(java.lang.String)",
    "class": "org.bukkit.Raid.RaidStatus",
    "return": "org.bukkit.Raid.RaidStatus"
  },
  {
    "static": true,
    "field": "LEGACY_CACTUS",
    "id": "org.bukkit.Material#LEGACY_CACTUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the hand used to harvest the block.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "boolean"
  },
  {
    "descr": "Banjo is normally played when a note block is on top of a hay block.",
    "static": true,
    "field": "BANJO",
    "id": "org.bukkit.Instrument#BANJO",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Shorthand; sets to either 0 or the default level.",
    "param-names": [
      "PigZombie",
      "Angry"
    ],
    "param-types": [
      "org.bukkit.entity.PigZombie",
      "boolean"
    ],
    "method": "setAngry",
    "id": "org.bukkit.entity.PigZombie#setAngry(boolean)",
    "class": "org.bukkit.entity.PigZombie"
  },
  {
    "descr": "A smoker inventory, with a RESULT slot, a CRAFTING slot, and a FUEL slot.",
    "static": true,
    "field": "SMOKER",
    "id": "org.bukkit.event.inventory.InventoryType#SMOKER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "MOSSY_COBBLESTONE_WALL",
    "id": "org.bukkit.Material#MOSSY_COBBLESTONE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_STEP",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_COMMAND_MINECART",
    "id": "org.bukkit.Material#LEGACY_COMMAND_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns whether the world has clear weather.\\nThis will be true such that #isThundering() and\\n#hasStorm() are both false.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isClearWeather",
    "id": "org.bukkit.World#isClearWeather()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RED_TERRACOTTA",
    "id": "org.bukkit.Material#RED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the experience cost (in levels) to complete the current repair.",
    "param-names": [
      "AnvilInventory",
      "Levels"
    ],
    "param-types": [
      "org.bukkit.inventory.AnvilInventory",
      "int"
    ],
    "method": "setRepairCost",
    "id": "org.bukkit.inventory.AnvilInventory#setRepairCost(int)",
    "class": "org.bukkit.inventory.AnvilInventory"
  },
  {
    "descr": "Remove a LockType locking mechanism.",
    "param-names": [
      "ArmorStand",
      "Slot",
      "Lock Type"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.entity.ArmorStand.LockType"
    ],
    "method": "removeEquipmentLock",
    "id": "org.bukkit.entity.ArmorStand#removeEquipmentLock(org.bukkit.inventory.EquipmentSlot,org.bukkit.entity.ArmorStand.LockType)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "The rail forms a curve connecting the north and east faces of the\\nblock.",
    "static": true,
    "field": "NORTH_EAST",
    "id": "org.bukkit.block.data.Rail.Shape#NORTH_EAST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "Zero this vector's components.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "zero",
    "id": "org.bukkit.util.Vector#zero()",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_CLUSTER_PLACE",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_CLUSTER_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SHEPHERD_GIFT",
    "id": "org.bukkit.loot.LootTables#SHEPHERD_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIME_WALL_BANNER",
    "id": "org.bukkit.Material#LIME_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Opens an inventory window to the specified inventory view.",
    "param-names": [
      "HumanEntity",
      "Inventory"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.InventoryView"
    ],
    "method": "openInventory",
    "id": "org.bukkit.entity.HumanEntity#openInventory(org.bukkit.inventory.InventoryView)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.SpawnChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "POTTED_OXEYE_DAISY",
    "id": "org.bukkit.Material#POTTED_OXEYE_DAISY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BARRIER",
    "id": "org.bukkit.Material#BARRIER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTED_DIRT_BREAK",
    "id": "org.bukkit.Sound#BLOCK_ROOTED_DIRT_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_HIT",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an entity spawns as a jockey of another entity (mostly spider\\njockeys)",
    "static": true,
    "field": "JOCKEY",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#JOCKEY",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "When an cow is spawned by shearing a mushroom cow",
    "static": true,
    "field": "SHEARED",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SHEARED",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.AbstractArrow.PickupStatus#values()",
    "class": "org.bukkit.entity.AbstractArrow.PickupStatus",
    "return": "org.bukkit.entity.AbstractArrow.PickupStatus[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_SHAKE",
    "id": "org.bukkit.GameEvent#ENTITY_SHAKE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Adds the location by another. Not world-aware.",
    "param-names": [
      "Location",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.Location",
      "double",
      "double",
      "double"
    ],
    "method": "add",
    "id": "org.bukkit.Location#add(double,double,double)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the join message to send to all online players",
    "method": "getJoinMessage",
    "id": "org.bukkit.event.player.PlayerJoinEvent#getJoinMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the ID of this painting.",
    "param-names": ["Art"],
    "param-types": ["org.bukkit.Art"],
    "method": "getId",
    "id": "org.bukkit.Art#getId()",
    "class": "org.bukkit.Art",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_BOAT_BIRCH",
    "id": "org.bukkit.Material#LEGACY_BOAT_BIRCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SHRIEKER_FALL",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SHRIEKER_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Removes the pattern at the specified index",
    "param-names": [
      "Banner",
      "I"
    ],
    "param-types": [
      "org.bukkit.block.Banner",
      "int"
    ],
    "method": "removePattern",
    "id": "org.bukkit.block.Banner#removePattern(int)",
    "class": "org.bukkit.block.Banner",
    "return": "org.bukkit.block.banner.Pattern"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CRIMSON_SPORE",
    "id": "org.bukkit.Particle#CRIMSON_SPORE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Decreases dig speed.",
    "static": true,
    "field": "SLOW_DIGGING",
    "id": "org.bukkit.potion.PotionEffectType#SLOW_DIGGING",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Creates an empty merchant.",
    "param-names": ["Title"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "createMerchant",
    "id": "org.bukkit.Bukkit#createMerchant(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Merchant"
  },
  {
    "static": true,
    "field": "ENTITY_DISMOUNT",
    "id": "org.bukkit.GameEvent#ENTITY_DISMOUNT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "boolean"
  },
  {
    "descr": "The cursor is split evenly across all selected slots, not to exceed the\\nMaterial's max stack size, with the remainder going to the cursor.",
    "static": true,
    "field": "EVEN",
    "id": "org.bukkit.event.inventory.DragType#EVEN",
    "class": "org.bukkit.event.inventory.DragType",
    "return": "org.bukkit.event.inventory.DragType"
  },
  {
    "static": true,
    "field": "JUNGLE_PLANKS",
    "id": "org.bukkit.Material#JUNGLE_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_WOOD_FALL",
    "id": "org.bukkit.Sound#BLOCK_WOOD_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.map.MapPalette#BLUE",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "static": true,
    "field": "DESERT_PYRAMID",
    "id": "org.bukkit.loot.LootTables#DESERT_PYRAMID",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the amount that the radius of this cloud will decrease by each tick.",
    "param-names": [
      "AreaEffectCloud",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "float"
    ],
    "method": "setRadiusPerTick",
    "id": "org.bukkit.entity.AreaEffectCloud#setRadiusPerTick(float)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_STEP_LAVA",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_STEP_LAVA",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityInteractEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_HORSE_HURT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_HORSE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the server resource pack uri, or empty string if not specified.",
    "static": true,
    "method": "getResourcePack",
    "id": "org.bukkit.Bukkit#getResourcePack()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_FROGSPAWN_FALL",
    "id": "org.bukkit.Sound#BLOCK_FROGSPAWN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the player that this command will be executed as.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "setPlayer",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#setPlayer(org.bukkit.entity.Player)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent"
  },
  {
    "descr": "Gets the chunk being loaded/unloaded",
    "method": "getChunk",
    "id": "org.bukkit.event.world.ChunkLoadEvent#getChunk()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Plays an effect to just this player.",
    "param-names": [
      "Player",
      "Loc",
      "Effect",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.Effect",
      "java.lang.Object"
    ],
    "method": "playEffect",
    "id": "org.bukkit.entity.Player#<T>playEffect(org.bukkit.Location,org.bukkit.Effect,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: BubbleColumn",
    "static": true,
    "field": "BUBBLE_COLUMN",
    "id": "org.bukkit.Material#BUBBLE_COLUMN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Add a tag to this entity.\\n\\nEntities can have no more than 1024 tags.",
    "param-names": [
      "Entity",
      "Tag"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "java.lang.String"
    ],
    "method": "addScoreboardTag",
    "id": "org.bukkit.entity.Entity#addScoreboardTag(java.lang.String)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BellRingEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_CONCRETE",
    "id": "org.bukkit.Material#LIGHT_BLUE_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "VILLAGE_DESERT_HOUSE",
    "id": "org.bukkit.loot.LootTables#VILLAGE_DESERT_HOUSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Get the rotation of the frame's item",
    "param-names": ["ItemFrame"],
    "param-types": ["org.bukkit.entity.ItemFrame"],
    "method": "getRotation",
    "id": "org.bukkit.entity.ItemFrame#getRotation()",
    "class": "org.bukkit.entity.ItemFrame",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Returns whether the item frame is be visible or not.",
    "param-names": ["ItemFrame"],
    "param-types": ["org.bukkit.entity.ItemFrame"],
    "method": "isVisible",
    "id": "org.bukkit.entity.ItemFrame#isVisible()",
    "class": "org.bukkit.entity.ItemFrame",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#values()",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause[]"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_OLD_GROWTH_TAIGA",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_OLD_GROWTH_TAIGA",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.ServerListPingEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SAND_STEP",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SAND_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerMoveEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Allows the Enchantment to be placed on leg slot armor",
    "static": true,
    "field": "ARMOR_LEGS",
    "id": "org.bukkit.enchantments.EnchantmentTarget#ARMOR_LEGS",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Gets whether the fox is faceplanting the ground",
    "param-names": ["Fox"],
    "param-types": ["org.bukkit.entity.Fox"],
    "method": "isFaceplanted",
    "id": "org.bukkit.entity.Fox#isFaceplanted()",
    "class": "org.bukkit.entity.Fox",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "OFF_ARM_SWING",
    "id": "org.bukkit.event.player.PlayerAnimationType#OFF_ARM_SWING",
    "class": "org.bukkit.event.player.PlayerAnimationType",
    "return": "org.bukkit.event.player.PlayerAnimationType"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "BRICK_STAIRS",
    "id": "org.bukkit.Material#BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entities related to Animals, eg: Strider, Cow, Turtle, etc.",
    "static": true,
    "field": "ANIMAL",
    "id": "org.bukkit.entity.SpawnCategory#ANIMAL",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Entering the bed is prevented due to the player being too far away.",
    "static": true,
    "field": "TOO_FAR_AWAY",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#TOO_FAR_AWAY",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "static": true,
    "field": "ENTITY_CHICKEN_HURT",
    "id": "org.bukkit.Sound#ENTITY_CHICKEN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Green, or (0x00,0x80,0x00) in (R,G,B)",
    "static": true,
    "field": "GREEN",
    "id": "org.bukkit.Color#GREEN",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Get the maximum experience cost (in levels) to be allowed by the current\\nrepair. If the result of #getRepairCost() exceeds the returned\\nvalue, the repair result will be air to due being \"too expensive\".\\n\\nBy default, this level is set to 40. Players in creative mode ignore the\\nmaximum repair cost.",
    "param-names": ["AnvilInventory"],
    "param-types": ["org.bukkit.inventory.AnvilInventory"],
    "method": "getMaximumRepairCost",
    "id": "org.bukkit.inventory.AnvilInventory#getMaximumRepairCost()",
    "class": "org.bukkit.inventory.AnvilInventory",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Chunk.LoadLevel#values()",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel[]"
  },
  {
    "descr": "This event is fired when the player activates the riptide enchantment, using\\ntheir trident to propel them through the air.\\n\\nN.B. the riptide action is currently performed client side, so manipulating\\nthe player in this event may have undesired effects.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent"
  },
  {
    "descr": "Sets the server-icon sent to the client.",
    "param-names": ["Icon"],
    "param-types": ["org.bukkit.util.CachedServerIcon"],
    "method": "setServerIcon",
    "id": "org.bukkit.event.server.ServerListPingEvent#setServerIcon(org.bukkit.util.CachedServerIcon)",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent"
  },
  {
    "descr": "Checks if world in this location is present and loaded.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "isWorldLoaded",
    "id": "org.bukkit.Location#isWorldLoaded()",
    "class": "org.bukkit.Location",
    "return": "boolean"
  },
  {
    "descr": "Sets the display name.",
    "param-names": [
      "ItemMeta",
      "Name"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "java.lang.String"
    ],
    "method": "setDisplayName",
    "id": "org.bukkit.inventory.meta.ItemMeta#setDisplayName(java.lang.String)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "Get a copy of the ingredients map.",
    "param-names": ["ShapedRecipe"],
    "param-types": ["org.bukkit.inventory.ShapedRecipe"],
    "method": "getIngredientMap",
    "id": "org.bukkit.inventory.ShapedRecipe#getIngredientMap()",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "java.util.Map"
  },
  {
    "descr": "Set whether the firework effect should have a trail.",
    "param-names": [
      "FireworkEffect.Builder",
      "Trail"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "boolean"
    ],
    "method": "trail",
    "id": "org.bukkit.FireworkEffect.Builder#trail(boolean)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "Get a pixel from the layers below this canvas.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int"
    ],
    "method": "getBasePixel",
    "id": "org.bukkit.map.MapCanvas#getBasePixel(int,int)",
    "class": "org.bukkit.map.MapCanvas",
    "return": "byte"
  },
  {
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getItemInHandDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getItemInHandDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "descr": "Get the amount of light at this block from nearby blocks.\\n\\nAny light given from other sources (such as the sun) will be ignored.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getLightFromBlocks",
    "id": "org.bukkit.block.Block#getLightFromBlocks()",
    "class": "org.bukkit.block.Block",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_DRIPLEAF_HIT",
    "id": "org.bukkit.Sound#BLOCK_SMALL_DRIPLEAF_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_AMETHYST_BUD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SMALL_AMETHYST_BUD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_PLATE",
    "id": "org.bukkit.Material#LEGACY_STONE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_FLOP",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLACK_CAT",
    "id": "org.bukkit.entity.Ocelot.Type#BLACK_CAT",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "descr": "Sets the canBuild state of this event. Set to true if you want the\\nplayer to be able to build.",
    "param-names": ["Can Build"],
    "param-types": ["boolean"],
    "method": "setBuild",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#setBuild(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent"
  },
  {
    "descr": "Gets the jukebox the allay is set to dance to.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "getJukebox",
    "id": "org.bukkit.entity.Allay#getJukebox()",
    "class": "org.bukkit.entity.Allay",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason#values()",
    "class": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason[]"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_AMBIENT_WATER",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_AMBIENT_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Allows loading of a structure.",
    "static": true,
    "field": "LOAD",
    "id": "org.bukkit.block.data.type.StructureBlock.Mode#LOAD",
    "class": "org.bukkit.block.data.type.StructureBlock.Mode",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_SNIFFER_EGG_HATCH",
    "id": "org.bukkit.Sound#BLOCK_SNIFFER_EGG_HATCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the CropState with the given data value",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByData",
    "id": "org.bukkit.CropState#getByData(byte)",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "Removed by an entity",
    "static": true,
    "field": "ENTITY",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#ENTITY",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "static": true,
    "field": "SUSPENDED",
    "id": "org.bukkit.Particle#SUSPENDED",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the amount of regained health",
    "method": "getAmount",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getAmount()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "double"
  },
  {
    "descr": "Gets the old level of the cauldron.",
    "method": "getOldLevel",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getOldLevel()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_CORAL_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_CORAL_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a right\\nclick.",
    "method": "isRightClick",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#isRightClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the item currently being worn by the armor stand on its feet.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getBoots",
    "id": "org.bukkit.entity.ArmorStand#getBoots()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "RED_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#RED_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "JELLIE",
    "id": "org.bukkit.entity.Cat.Type#JELLIE",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Get the entity used as context for loot generation (if applicable).\\nFor inventories where entities are not required to generate loot, such as\\nhoppers, null will be returned.\\nThis is a convenience method for\\ngetLootContext().getLootedEntity().",
    "method": "getEntity",
    "id": "org.bukkit.event.world.LootGenerateEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the item the entity is holding in their off hand.",
    "param-names": [
      "EntityEquipment",
      "Item",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setItemInOffHand",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInOffHand(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "ENTITY_SNOW_GOLEM_SHEAR",
    "id": "org.bukkit.Sound#ENTITY_SNOW_GOLEM_SHEAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_CROP_PLANT",
    "id": "org.bukkit.Sound#ITEM_CROP_PLANT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the item being dispensed.",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setItem",
    "id": "org.bukkit.event.block.BlockDispenseEvent#setItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "CHERRY_SLAB",
    "id": "org.bukkit.Material#CHERRY_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "BLUE_CANDLE_CAKE",
    "id": "org.bukkit.Material#BLUE_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerItemBreakEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the new level of the player",
    "method": "getNewLevel",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#getNewLevel()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "int"
  },
  {
    "descr": "Called when some entity or block (e.g. hopper) tries to move items directly\\nfrom one inventory to another.\\n\\nWhen this event is called, the initiator may already have removed the item\\nfrom the source inventory and is ready to move it into the destination\\ninventory.\\n\\nIf this event is cancelled, the items will be returned to the source\\ninventory, if needed.\\n\\nIf this event is not cancelled, the initiator will try to put the ItemStack\\ninto the destination inventory. If this is not possible and the ItemStack\\nhas not been modified, the source inventory slot will be restored to its\\nformer state. Otherwise any additional items will be discarded.",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "static": true,
    "field": "DIAMOND_LEGGINGS",
    "id": "org.bukkit.Material#DIAMOND_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_STRUCTURE_VOID",
    "id": "org.bukkit.Material#LEGACY_STRUCTURE_VOID",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FOREST",
    "id": "org.bukkit.block.Biome#FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the displayed item stack.",
    "param-names": ["ItemDisplay"],
    "param-types": ["org.bukkit.entity.ItemDisplay"],
    "method": "getItemStack",
    "id": "org.bukkit.entity.ItemDisplay#getItemStack()",
    "class": "org.bukkit.entity.ItemDisplay",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: RedstoneRail",
    "static": true,
    "field": "DETECTOR_RAIL",
    "id": "org.bukkit.Material#DETECTOR_RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets a Team by name on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Team Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "getTeam",
    "id": "org.bukkit.scoreboard.Scoreboard#getTeam(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "A type of inventory manipulation not yet recognized by Bukkit.\\n\\nThis is only for transitional purposes on a new Minecraft update, and\\nshould never be relied upon.\\n\\nAny ClickType.UNKNOWN is called on a best-effort basis.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.inventory.ClickType#UNKNOWN",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.TropicalFish.Pattern#values()",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "BAMBOO_SLAB",
    "id": "org.bukkit.Material#BAMBOO_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_HUSK",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_HUSK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "TUBE_CORAL_FAN",
    "id": "org.bukkit.Material#TUBE_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_AXE",
    "id": "org.bukkit.Material#LEGACY_WOOD_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_DYE",
    "id": "org.bukkit.Material#LIGHT_BLUE_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "No rotation.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.block.structure.StructureRotation#NONE",
    "class": "org.bukkit.block.structure.StructureRotation",
    "return": "org.bukkit.block.structure.StructureRotation"
  },
  {
    "descr": "Loot table luck.",
    "static": true,
    "field": "LUCK",
    "id": "org.bukkit.potion.PotionEffectType#LUCK",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets if the allay can duplicate.\\n\\nNote: Duplication is based when the\\n#getDuplicationCooldown its lower than zero.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "canDuplicate",
    "id": "org.bukkit.entity.Allay#canDuplicate()",
    "class": "org.bukkit.entity.Allay",
    "return": "boolean"
  },
  {
    "descr": "Set if this event should set the new spawn location for the\\nPlayer.\\n\\nThis will not remove any existing spawn location, only prevent it from\\nbeing changed (if true).\\n\\nTo change a Player's spawn location, use\\nPlayer#setBedSpawnLocation(Location).",
    "param-names": ["Set Bed Spawn"],
    "param-types": ["boolean"],
    "method": "setSpawnLocation",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#setSpawnLocation(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_DEATH",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BEACON",
    "id": "org.bukkit.Material#BEACON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Indicate the spawn was reset by an invalid bed position or empty\\nrespawn anchor.",
    "static": true,
    "field": "RESET",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#RESET",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "static": true,
    "field": "BLOCK_DECORATED_POT_BREAK",
    "id": "org.bukkit.Sound#BLOCK_DECORATED_POT_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the chance of the helmet being dropped upon this creature's death.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getHelmetDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getHelmetDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "static": true,
    "field": "LEGACY_COCOA",
    "id": "org.bukkit.Material#LEGACY_COCOA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'attached' property.",
    "param-names": ["Attachable"],
    "param-types": ["org.bukkit.block.data.Attachable"],
    "method": "isAttached",
    "id": "org.bukkit.block.data.Attachable#isAttached()",
    "class": "org.bukkit.block.data.Attachable",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "QUARTZ_PILLAR",
    "id": "org.bukkit.Material#QUARTZ_PILLAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BANNER_LIGHT_GRAY",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_LIGHT_GRAY",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "BlockData: Hopper",
    "static": true,
    "field": "HOPPER",
    "id": "org.bukkit.Material#HOPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FLOWER_BANNER_PATTERN",
    "id": "org.bukkit.Material#FLOWER_BANNER_PATTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DARK_OAK_FENCE_GATE",
    "id": "org.bukkit.Material#LEGACY_DARK_OAK_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PIGLIN_BRUTE",
    "id": "org.bukkit.entity.EntityType#PIGLIN_BRUTE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent"
  },
  {
    "static": true,
    "field": "CHISELED_DEEPSLATE",
    "id": "org.bukkit.Material#CHISELED_DEEPSLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DOLPHIN_SPAWN_EGG",
    "id": "org.bukkit.Material#DOLPHIN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check whether or not this entity has discovered the specified recipe.",
    "param-names": [
      "HumanEntity",
      "Recipe"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.NamespacedKey"
    ],
    "method": "hasDiscoveredRecipe",
    "id": "org.bukkit.entity.HumanEntity#hasDiscoveredRecipe(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "Sends this sender a message",
    "param-names": [
      "CommandSender",
      "Message"
    ],
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.String"
    ],
    "method": "sendMessage",
    "id": "org.bukkit.command.CommandSender#sendMessage(java.lang.String)",
    "class": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "CRIMSON_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#CRIMSON_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SHRIEKER_STEP",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SHRIEKER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Safely queues the Chunk at the specified coordinates for\\nunloading.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "unloadChunkRequest",
    "id": "org.bukkit.World#unloadChunkRequest(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DOWN_SOUTH",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#DOWN_SOUTH",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "static": true,
    "field": "ENTITY_VINDICATOR_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_VINDICATOR_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Horse.Variant#values()",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant[]"
  },
  {
    "descr": "Get the variant of the axolotl in the bucket.\\n\\nPlugins should check that hasVariant() returns true before\\ncalling this method.",
    "param-names": ["AxolotlBucketMeta"],
    "param-types": ["org.bukkit.inventory.meta.AxolotlBucketMeta"],
    "method": "getVariant",
    "id": "org.bukkit.inventory.meta.AxolotlBucketMeta#getVariant()",
    "class": "org.bukkit.inventory.meta.AxolotlBucketMeta",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "static": true,
    "field": "ENTITY_SHEEP_HURT",
    "id": "org.bukkit.Sound#ENTITY_SHEEP_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "One item is dropped from the clicked slot.",
    "static": true,
    "field": "DROP_ONE_SLOT",
    "id": "org.bukkit.event.inventory.InventoryAction#DROP_ONE_SLOT",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_AMBIENT_LAND",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_AMBIENT_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_BEACON_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_BEACON_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get block data for block at corresponding coordinate in the chunk",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockData",
    "id": "org.bukkit.ChunkSnapshot#getBlockData(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Create a new potion of the given type and level.",
    "param-names": [
      "Type",
      "Level",
      "Splash",
      "Extended"
    ],
    "param-types": [
      "org.bukkit.potion.PotionType",
      "int",
      "boolean",
      "boolean"
    ],
    "id": "org.bukkit.potion.Potion#Potion(org.bukkit.potion.PotionType,int,boolean,boolean)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Sets the generation of the book. Removes generation when given null.",
    "param-names": [
      "BookMeta",
      "Generation"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "org.bukkit.inventory.meta.BookMeta.Generation"
    ],
    "method": "setGeneration",
    "id": "org.bukkit.inventory.meta.BookMeta#setGeneration(org.bukkit.inventory.meta.BookMeta.Generation)",
    "class": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "static": true,
    "field": "PUFFERFISH",
    "id": "org.bukkit.entity.EntityType#PUFFERFISH",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the prefix prepended to the display of entries on this team.",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getPrefix",
    "id": "org.bukkit.scoreboard.Team#getPrefix()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns a list of entities within a bounding box centered around a\\nLocation.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the size of the\\nsearch bounding box.",
    "param-names": [
      "World",
      "Location",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "double",
      "double",
      "double"
    ],
    "method": "getNearbyEntities",
    "id": "org.bukkit.World#getNearbyEntities(org.bukkit.Location,double,double,double)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "descr": "Teleports this entity to the target Entity. If this entity is riding a\\nvehicle, it will be dismounted prior to teleportation.",
    "param-names": [
      "Entity",
      "Destination"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.entity.Entity"
    ],
    "method": "teleport",
    "id": "org.bukkit.entity.Entity#teleport(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_COOKIE",
    "id": "org.bukkit.Material#LEGACY_COOKIE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get burn time.",
    "param-names": ["Furnace"],
    "param-types": ["org.bukkit.block.Furnace"],
    "method": "getBurnTime",
    "id": "org.bukkit.block.Furnace#getBurnTime()",
    "class": "org.bukkit.block.Furnace",
    "return": "short"
  },
  {
    "descr": "Checks if this object contains an override for the specified\\npermission, by fully qualified name",
    "param-names": [
      "Permissible",
      "Name"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "java.lang.String"
    ],
    "method": "isPermissionSet",
    "id": "org.bukkit.permissions.Permissible#isPermissionSet(java.lang.String)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "boolean"
  },
  {
    "descr": "Ring this bell. This will call a BellRingEvent.",
    "param-names": [
      "Bell",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.block.Bell",
      "org.bukkit.block.BlockFace"
    ],
    "method": "ring",
    "id": "org.bukkit.block.Bell#ring(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Bell",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_TRIPWIRE_DETACH",
    "id": "org.bukkit.Sound#BLOCK_TRIPWIRE_DETACH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the X-coordinate of this chunk",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getX",
    "id": "org.bukkit.Chunk#getX()",
    "class": "org.bukkit.Chunk",
    "return": "int"
  },
  {
    "descr": "Gets the blue component",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "getBlue",
    "id": "org.bukkit.Color#getBlue()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "descr": "The \"wololo\" spell.",
    "static": true,
    "field": "WOLOLO",
    "id": "org.bukkit.entity.Evoker.Spell#WOLOLO",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "static": true,
    "field": "WATER_BUBBLE",
    "id": "org.bukkit.Particle#WATER_BUBBLE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "MOB_APPEARANCE",
    "id": "org.bukkit.Particle#MOB_APPEARANCE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "STRAY",
    "id": "org.bukkit.loot.LootTables#STRAY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "CARTOGRAPHER_GIFT",
    "id": "org.bukkit.loot.LootTables#CARTOGRAPHER_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "IRON_DOOR",
    "id": "org.bukkit.Material#IRON_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CAULDRON_USED",
    "id": "org.bukkit.Statistic#CAULDRON_USED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the Player that is breaking the block involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockBreakEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_EMERALD_ORE",
    "id": "org.bukkit.Material#LEGACY_EMERALD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LAST_WOKEN",
    "id": "org.bukkit.entity.memory.MemoryKey#LAST_WOKEN",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Returns the unique ID of this type.",
    "param-names": ["PotionEffectType"],
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "getId",
    "id": "org.bukkit.potion.PotionEffectType#getId()",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "int"
  },
  {
    "descr": "Gets the reason for the portal's creation",
    "method": "getReason",
    "id": "org.bukkit.event.world.PortalCreateEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "org.bukkit.event.world.PortalCreateEvent.CreateReason"
  },
  {
    "descr": "Gets the value of the specified permission, if set.\\n\\nIf a permission override is not set on this object, the default value\\nof the permission will be returned",
    "param-names": [
      "Permissible",
      "Perm"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.permissions.Permission"
    ],
    "method": "hasPermission",
    "id": "org.bukkit.permissions.Permissible#hasPermission(org.bukkit.permissions.Permission)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "boolean"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.TropicalFish.Pattern#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "The fishing hook has hooked an entity.",
    "static": true,
    "field": "HOOKED_ENTITY",
    "id": "org.bukkit.entity.FishHook.HookState#HOOKED_ENTITY",
    "class": "org.bukkit.entity.FishHook.HookState",
    "return": "org.bukkit.entity.FishHook.HookState"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the new held slot index",
    "method": "getNewSlot",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#getNewSlot()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "SNOW_SHOVEL",
    "id": "org.bukkit.Particle#SNOW_SHOVEL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Allows the enchantment to be placed on wearable items.",
    "static": true,
    "field": "WEARABLE",
    "id": "org.bukkit.enchantments.EnchantmentTarget#WEARABLE",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Sets the amount that the radius of this cloud will decrease by when it\\napplies an effect to an entity.",
    "param-names": [
      "AreaEffectCloud",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "float"
    ],
    "method": "setRadiusOnUse",
    "id": "org.bukkit.entity.AreaEffectCloud#setRadiusOnUse(float)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "field": "ENTITY_SILVERFISH_STEP",
    "id": "org.bukkit.Sound#ENTITY_SILVERFISH_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "ENTITY_STRAY_STEP",
    "id": "org.bukkit.Sound#ENTITY_STRAY_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_PUMPKIN_STEM",
    "id": "org.bukkit.Material#LEGACY_PUMPKIN_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHULKER_SHELL",
    "id": "org.bukkit.Material#SHULKER_SHELL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SPIDER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SPIDER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "POLISHED_ANDESITE_SLAB",
    "id": "org.bukkit.Material#POLISHED_ANDESITE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUTTON",
    "id": "org.bukkit.Material#MUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Create a FireworkEffect from the current contents of this\\nbuilder.\\n\\nTo successfully build, you must have specified at least one color.",
    "param-names": ["FireworkEffect.Builder"],
    "param-types": ["org.bukkit.FireworkEffect.Builder"],
    "method": "build",
    "id": "org.bukkit.FireworkEffect.Builder#build()",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect"
  },
  {
    "static": true,
    "field": "WHITE_POINTER",
    "id": "org.bukkit.map.MapCursor.Type#WHITE_POINTER",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "HALF_HORIZONTAL_MIRROR",
    "id": "org.bukkit.block.banner.PatternType#HALF_HORIZONTAL_MIRROR",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Set the target of the player's compass.",
    "param-names": [
      "Player",
      "Loc"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location"
    ],
    "method": "setCompassTarget",
    "id": "org.bukkit.entity.Player#setCompassTarget(org.bukkit.Location)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "FROZEN_PEAKS",
    "id": "org.bukkit.block.Biome#FROZEN_PEAKS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the leave message send to all online players",
    "method": "getLeaveMessage",
    "id": "org.bukkit.event.player.PlayerKickEvent#getLeaveMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "The sound played / particles shown when bone meal is used to grow a\\nplant.\\nData is the number of particles.",
    "static": true,
    "field": "BONE_MEAL_USE",
    "id": "org.bukkit.Effect#BONE_MEAL_USE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Gets the type of the block at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location"
    ],
    "method": "getType",
    "id": "org.bukkit.RegionAccessor#getType(org.bukkit.Location)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attempts to match any players with the given name, and returns a list\\nof all possibly matches.\\n\\nThis list is not sorted in any particular order. If an exact match is\\nfound, the returned list will only contain a single result.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "matchPlayer",
    "id": "org.bukkit.Bukkit#matchPlayer(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_ORE",
    "id": "org.bukkit.Material#LEGACY_IRON_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "VINDICATOR",
    "id": "org.bukkit.entity.EntityType#VINDICATOR",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "CHAINMAIL_LEGGINGS",
    "id": "org.bukkit.Material#CHAINMAIL_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerChangedMainHandEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Result",
      "Source"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.Material)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_WIRE",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_WIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_DISPLAY",
    "id": "org.bukkit.entity.EntityType#ITEM_DISPLAY",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WEATHERED_CUT_COPPER",
    "id": "org.bukkit.Material#WEATHERED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_CHORUS_FLOWER",
    "id": "org.bukkit.Material#LEGACY_CHORUS_FLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "IGLOO_CHEST",
    "id": "org.bukkit.loot.LootTables#IGLOO_CHEST",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "param-names": ["InventoryView.Property"],
    "param-types": ["org.bukkit.inventory.InventoryView.Property"],
    "method": "getType",
    "id": "org.bukkit.inventory.InventoryView.Property#getType()",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.LeavesDecayEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_FUNGUS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_FUNGUS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WOODLAND_MANSION",
    "id": "org.bukkit.loot.LootTables#WOODLAND_MANSION",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets if this goat has its left horn.",
    "param-names": ["Goat"],
    "param-types": ["org.bukkit.entity.Goat"],
    "method": "hasLeftHorn",
    "id": "org.bukkit.entity.Goat#hasLeftHorn()",
    "class": "org.bukkit.entity.Goat",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: DecoratedPot",
    "static": true,
    "field": "DECORATED_POT",
    "id": "org.bukkit.Material#DECORATED_POT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_6",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_6",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Weaponsmith profession. Wears a black apron. Weapon smiths primarily\\ntrade for iron and diamond weapons, sometimes enchanted.",
    "static": true,
    "field": "WEAPONSMITH",
    "id": "org.bukkit.entity.Villager.Profession#WEAPONSMITH",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "static": true,
    "field": "PISTON_EXTEND",
    "id": "org.bukkit.GameEvent#PISTON_EXTEND",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "SOUTH_SOUTH_WEST",
    "id": "org.bukkit.block.BlockFace#SOUTH_SOUTH_WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the amount of experience the villager earns from this trade.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getVillagerExperience",
    "id": "org.bukkit.inventory.MerchantRecipe#getVillagerExperience()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "int"
  },
  {
    "descr": "Set the dragon's respawn phase.\\nThis method will is unsuccessful if a dragon respawn is not in progress.",
    "param-names": [
      "DragonBattle",
      "Phase"
    ],
    "param-types": [
      "org.bukkit.boss.DragonBattle",
      "org.bukkit.boss.DragonBattle.RespawnPhase"
    ],
    "method": "setRespawnPhase",
    "id": "org.bukkit.boss.DragonBattle#setRespawnPhase(org.bukkit.boss.DragonBattle.RespawnPhase)",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "boolean"
  },
  {
    "descr": "Gets whether this ClickType represents an action that can only be\\nperformed by a Player in creative mode.",
    "param-names": ["ClickType"],
    "param-types": ["org.bukkit.event.inventory.ClickType"],
    "method": "isCreativeAction",
    "id": "org.bukkit.event.inventory.ClickType#isCreativeAction()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "boolean"
  },
  {
    "descr": "An ender eye signal.",
    "static": true,
    "field": "ENDER_SIGNAL",
    "id": "org.bukkit.entity.EntityType#ENDER_SIGNAL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Adds the given PotionEffect to the living entity.\\n\\nOnly one potion effect can be present for a given PotionEffectType.",
    "param-names": [
      "LivingEntity",
      "Effect",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.potion.PotionEffect",
      "boolean"
    ],
    "method": "addPotionEffect",
    "id": "org.bukkit.entity.LivingEntity#addPotionEffect(org.bukkit.potion.PotionEffect,boolean)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Gets the block at the represented location",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getBlock",
    "id": "org.bukkit.Location#getBlock()",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "LEGACY_CLAY_BALL",
    "id": "org.bukkit.Material#LEGACY_CLAY_BALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns if the given item is a preferred choice to break this Block.\\nIn some cases this determines if a block will drop anything or extra\\nloot.",
    "param-names": [
      "Block",
      "Tool"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "isPreferredTool",
    "id": "org.bukkit.block.Block#isPreferredTool(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Add a cursor to the collection.",
    "param-names": [
      "MapCursorCollection",
      "X",
      "Y",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "int",
      "int",
      "byte"
    ],
    "method": "addCursor",
    "id": "org.bukkit.map.MapCursorCollection#addCursor(int,int,byte)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "Mineshafts are underground structures which consist of branching mining\\ntunnels with wooden supports and broken rails.\\n\\nThey are the only place where cave spider spawners and minecarts with\\nchests can be found naturally.",
    "static": true,
    "field": "MINESHAFT",
    "id": "org.bukkit.StructureType#MINESHAFT",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Called when a World is unloaded",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_CAST_SPELL",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_CAST_SPELL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the level of the specified enchantment on this item stack",
    "param-names": [
      "ItemStack",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "getEnchantmentLevel",
    "id": "org.bukkit.inventory.ItemStack#getEnchantmentLevel(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "int"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_FENCE_GATE_OPEN",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_FENCE_GATE_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DROWNED",
    "id": "org.bukkit.loot.LootTables#DROWNED",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLAZE_ROD",
    "id": "org.bukkit.Material#BLAZE_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Colored particles from a tipped arrow.",
    "static": true,
    "field": "ARROW_PARTICLES",
    "id": "org.bukkit.EntityEffect#ARROW_PARTICLES",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Allows this player to see a player that was previously hidden. If\\nanother another plugin had hidden the player too, then the player will\\nremain hidden until the other plugin calls this method too.",
    "param-names": [
      "Player",
      "Plugin",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.plugin.Plugin",
      "org.bukkit.entity.Player"
    ],
    "method": "showPlayer",
    "id": "org.bukkit.entity.Player#showPlayer(org.bukkit.plugin.Plugin,org.bukkit.entity.Player)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the base color for this banner",
    "param-names": ["Banner"],
    "param-types": ["org.bukkit.block.Banner"],
    "method": "getBaseColor",
    "id": "org.bukkit.block.Banner#getBaseColor()",
    "class": "org.bukkit.block.Banner",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "OAK_SAPLING",
    "id": "org.bukkit.Material#OAK_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Action#values()",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Action",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action[]"
  },
  {
    "descr": "Sound of an enderdragon firing",
    "static": true,
    "field": "ENDERDRAGON_SHOOT",
    "id": "org.bukkit.Effect#ENDERDRAGON_SHOOT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "LIME_BED",
    "id": "org.bukkit.Material#LIME_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the translation key of the item associated with this material, or\\nnull if this material does not have an associated item.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getItemTranslationKey",
    "id": "org.bukkit.Material#getItemTranslationKey()",
    "class": "org.bukkit.Material",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns an appropriate item meta for the specified material.\\n\\nThe item meta returned will always be a valid meta for a given\\nItemStack of the specified material. It may be a more or less specific\\nmeta, and could also be the same meta or meta type as the parameter.\\nThe item meta returned will also always be the most appropriate meta.\\n\\nExample, if a SkullMeta is being applied to a book, this method\\nwould return a BookMeta containing all information in the\\nspecified meta that is applicable to an ItemMeta, the highest\\ncommon interface.",
    "param-names": [
      "ItemFactory",
      "Meta",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.Material"
    ],
    "method": "asMetaFor",
    "id": "org.bukkit.inventory.ItemFactory#asMetaFor(org.bukkit.inventory.meta.ItemMeta,org.bukkit.Material)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "Increases jump height.",
    "static": true,
    "field": "JUMP",
    "id": "org.bukkit.potion.PotionEffectType#JUMP",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Returns the player placing the entity",
    "method": "getPlayer",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the player who performed the click.",
    "method": "getWhoClicked",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getWhoClicked()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Sound of a door closing.",
    "static": true,
    "field": "DOOR_CLOSE",
    "id": "org.bukkit.Effect#DOOR_CLOSE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.CraftItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_GOLD_ORE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_GOLD_ORE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Effect.Type#values()",
    "class": "org.bukkit.Effect.Type",
    "return": "org.bukkit.Effect.Type[]"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "PURPLE_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#PURPLE_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the angle on the z axis in radians",
    "param-names": ["EulerAngle"],
    "param-types": ["org.bukkit.util.EulerAngle"],
    "method": "getZ",
    "id": "org.bukkit.util.EulerAngle#getZ()",
    "class": "org.bukkit.util.EulerAngle",
    "return": "double"
  },
  {
    "descr": "The highest non-air block, solid block.",
    "static": true,
    "field": "OCEAN_FLOOR",
    "id": "org.bukkit.HeightMap#OCEAN_FLOOR",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "RIGHT",
    "id": "org.bukkit.inventory.MainHand#RIGHT",
    "class": "org.bukkit.inventory.MainHand",
    "return": "org.bukkit.inventory.MainHand"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_HURT_DROWN",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_HURT_DROWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Sound this entity will play when celebrating.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "getCelebrationSound",
    "id": "org.bukkit.entity.Raider#getCelebrationSound()",
    "class": "org.bukkit.entity.Raider",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Adds the specified Enchantment to this item stack.\\n\\nIf this item stack already contained the given enchantment (at any\\nlevel), it will be replaced.\\n\\nThis method is unsafe and will ignore level restrictions or item type.\\nUse at your own discretion.",
    "param-names": [
      "ItemStack",
      "Ench",
      "Level"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.enchantments.Enchantment",
      "int"
    ],
    "method": "addUnsafeEnchantment",
    "id": "org.bukkit.inventory.ItemStack#addUnsafeEnchantment(org.bukkit.enchantments.Enchantment,int)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "GLYPHED",
    "id": "org.bukkit.SandstoneType#GLYPHED",
    "class": "org.bukkit.SandstoneType",
    "return": "org.bukkit.SandstoneType"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_3",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_3",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Indicates the teleportation was caused by a player entering an End\\ngateway",
    "static": true,
    "field": "END_GATEWAY",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#END_GATEWAY",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "static": true,
    "field": "LEGACY_LAPIS_ORE",
    "id": "org.bukkit.Material#LEGACY_LAPIS_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents blue dye.",
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.DyeColor#BLUE",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Increments automatically when a player kills another player on the light purple team.",
    "static": true,
    "field": "TEAM_KILL_LIGHT_PURPLE",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_LIGHT_PURPLE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Create a new potion of the given type and level.",
    "param-names": [
      "Type",
      "Level",
      "Splash"
    ],
    "param-types": [
      "org.bukkit.potion.PotionType",
      "int",
      "boolean"
    ],
    "id": "org.bukkit.potion.Potion#Potion(org.bukkit.potion.PotionType,int,boolean)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.LootGenerateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_CONDUIT_ACTIVATE",
    "id": "org.bukkit.Sound#BLOCK_CONDUIT_ACTIVATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Stop the specified sound from playing.",
    "param-names": [
      "Player",
      "Sound"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "stopSound",
    "id": "org.bukkit.entity.Player#stopSound(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Base value of this instance before modifiers are applied.",
    "param-names": ["AttributeInstance"],
    "param-types": ["org.bukkit.attribute.AttributeInstance"],
    "method": "getBaseValue",
    "id": "org.bukkit.attribute.AttributeInstance#getBaseValue()",
    "class": "org.bukkit.attribute.AttributeInstance",
    "return": "double"
  },
  {
    "descr": "Set the ticks that this entity has performed no action.\\n\\nThe details of what \"no action ticks\" entails varies from entity to entity\\nand cannot be specifically defined. Some examples include squid using this\\nvalue to determine when to swim, raiders for when they are to be expelled\\nfrom raids, or creatures (such as withers) as a requirement to be despawned.",
    "param-names": [
      "LivingEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setNoActionTicks",
    "id": "org.bukkit.entity.LivingEntity#setNoActionTicks(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "field": "INFESTED_CRACKED_STONE_BRICKS",
    "id": "org.bukkit.Material#INFESTED_CRACKED_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_RESONATE",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_RESONATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SALMON_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SALMON_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "MOSSY_STONE_BRICK_WALL",
    "id": "org.bukkit.Material#MOSSY_STONE_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_MELON_STEM",
    "id": "org.bukkit.Material#LEGACY_MELON_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a tree at the given Location",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Random",
      "Type"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "java.util.Random",
      "org.bukkit.TreeType"
    ],
    "method": "generateTree",
    "id": "org.bukkit.RegionAccessor#generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType)",
    "class": "org.bukkit.RegionAccessor",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEATHER_LEGGINGS",
    "id": "org.bukkit.Material#LEATHER_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GOLDEN_CARROT",
    "id": "org.bukkit.Material#LEGACY_GOLDEN_CARROT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Unknown.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#UNKNOWN",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Gets the chunk being loaded/unloaded",
    "method": "getChunk",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#getChunk()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_STAINED_GLASS",
    "id": "org.bukkit.Material#LIGHT_GRAY_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Unregisters this objective from the Scoreboard scoreboard.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "unregister",
    "id": "org.bukkit.scoreboard.Objective#unregister()",
    "class": "org.bukkit.scoreboard.Objective"
  },
  {
    "static": true,
    "field": "DEAD_FIRE_CORAL_BLOCK",
    "id": "org.bukkit.Material#DEAD_FIRE_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Setting to show/hide where this ItemStack can be build/placed on",
    "static": true,
    "field": "HIDE_PLACED_ON",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_PLACED_ON",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "static": true,
    "field": "DRIPPING_DRIPSTONE_WATER",
    "id": "org.bukkit.Particle#DRIPPING_DRIPSTONE_WATER",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BANNER_CLEANED",
    "id": "org.bukkit.Statistic#BANNER_CLEANED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_WEEPING_VINES_FALL",
    "id": "org.bukkit.Sound#BLOCK_WEEPING_VINES_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the item containing the used enchantment.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerRiptideEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_PLATE",
    "id": "org.bukkit.Material#LEGACY_GOLD_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Loads the chunk.",
    "param-names": [
      "Chunk",
      "Generate"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "boolean"
    ],
    "method": "load",
    "id": "org.bukkit.Chunk#load(boolean)",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_HONEY_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_HONEY_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Retrieves a mutable list of the effected entities\\n\\nIt is important to note that not every entity in this list\\nis guaranteed to be effected.  The cloud may die during the\\napplication of its effects due to the depletion of AreaEffectCloud#getDurationOnUse()\\nor AreaEffectCloud#getRadiusOnUse()",
    "method": "getAffectedEntities",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#getAffectedEntities()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Called when an entity dies and may have the opportunity to be resurrected.\\nWill be called in a cancelled state if the entity does not have a totem\\nequipped.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Stores the specified enchantment in this item meta.",
    "param-names": [
      "EnchantmentStorageMeta",
      "Ench",
      "Level",
      "Ignore Level Restriction"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.EnchantmentStorageMeta",
      "org.bukkit.enchantments.Enchantment",
      "int",
      "boolean"
    ],
    "method": "addStoredEnchant",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#addStoredEnchant(org.bukkit.enchantments.Enchantment,int,boolean)",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "boolean"
  },
  {
    "id": "org.bukkit.inventory.InventoryView#InventoryView()",
    "class": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets an instance of the server's default server-icon.",
    "static": true,
    "method": "getServerIcon",
    "id": "org.bukkit.Bukkit#getServerIcon()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.util.CachedServerIcon"
  },
  {
    "descr": "Creates a RayTraceResult.",
    "param-names": [
      "Hit Position",
      "Hit Entity"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.entity.Entity"
    ],
    "id": "org.bukkit.util.RayTraceResult#RayTraceResult(org.bukkit.util.Vector,org.bukkit.entity.Entity)",
    "class": "org.bukkit.util.RayTraceResult"
  },
  {
    "static": true,
    "field": "LEGACY_BRICK",
    "id": "org.bukkit.Material#LEGACY_BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "While in UsageMode#SAVE mode, this will ignore any entities when\\nsaving the structure.\\n\\nWhile in UsageMode#LOAD mode this will ignore any entities that\\nwere saved to file.",
    "param-names": [
      "Structure",
      "Ignore Entities"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "boolean"
    ],
    "method": "setIgnoreEntities",
    "id": "org.bukkit.block.Structure#setIgnoreEntities(boolean)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "param-names": [
      "Zombie",
      "Profession"
    ],
    "param-types": [
      "org.bukkit.entity.Zombie",
      "org.bukkit.entity.Villager.Profession"
    ],
    "method": "setVillagerProfession",
    "id": "org.bukkit.entity.Zombie#setVillagerProfession(org.bukkit.entity.Villager.Profession)",
    "class": "org.bukkit.entity.Zombie"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "SHULKER_BOX",
    "id": "org.bukkit.Material#SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Campfire",
    "static": true,
    "field": "CAMPFIRE",
    "id": "org.bukkit.Material#CAMPFIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Use Interacted Block"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setUseInteractedBlock",
    "id": "org.bukkit.event.player.PlayerInteractEvent#setUseInteractedBlock(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent"
  },
  {
    "descr": "Represents dark blue",
    "static": true,
    "field": "DARK_BLUE",
    "id": "org.bukkit.ChatColor#DARK_BLUE",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "BLOCK_PINK_PETALS_FALL",
    "id": "org.bukkit.Sound#BLOCK_PINK_PETALS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Maroon, or (0x80,0x00,0x00) in (R,G,B)",
    "static": true,
    "field": "MAROON",
    "id": "org.bukkit.Color#MAROON",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "JUNGLE_BUTTON",
    "id": "org.bukkit.Material#JUNGLE_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockFadeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent"
  },
  {
    "descr": "An enchantment table inventory, with two CRAFTING slots and three\\nenchanting buttons.",
    "static": true,
    "field": "ENCHANTING",
    "id": "org.bukkit.event.inventory.InventoryType#ENCHANTING",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the hit entity.",
    "param-names": ["RayTraceResult"],
    "param-types": ["org.bukkit.util.RayTraceResult"],
    "method": "getHitEntity",
    "id": "org.bukkit.util.RayTraceResult#getHitEntity()",
    "class": "org.bukkit.util.RayTraceResult",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_SWIM",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Splits the boss bar into 12 segments",
    "static": true,
    "field": "SEGMENTED_12",
    "id": "org.bukkit.boss.BarStyle#SEGMENTED_12",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "Returns if the ArmorStand has the specified\\nLockType locking mechanism.",
    "param-names": [
      "ArmorStand",
      "Slot",
      "Lock Type"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.entity.ArmorStand.LockType"
    ],
    "method": "hasEquipmentLock",
    "id": "org.bukkit.entity.ArmorStand#hasEquipmentLock(org.bukkit.inventory.EquipmentSlot,org.bukkit.entity.ArmorStand.LockType)",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "POLAR_BEAR",
    "id": "org.bukkit.loot.LootTables#POLAR_BEAR",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LAZY",
    "id": "org.bukkit.entity.Panda.Gene#LAZY",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Tests if this chunk contains the specified biome.",
    "param-names": [
      "Chunk",
      "Biome"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "org.bukkit.block.Biome"
    ],
    "method": "contains",
    "id": "org.bukkit.Chunk#contains(org.bukkit.block.Biome)",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_LIME_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_LIME_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The distance to the opposite corner of this structure. The maximum\\nstructure size is 48x48x48. When a structure has successfully been\\ncalculated (i.e. it is within the maximum allowed distance) a white\\nborder surrounds the structure.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getStructureSize",
    "id": "org.bukkit.block.Structure#getStructureSize()",
    "class": "org.bukkit.block.Structure",
    "return": "org.bukkit.util.BlockVector"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_DIG",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_DIG",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the maximum line width before wrapping.",
    "param-names": [
      "TextDisplay",
      "Width"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "int"
    ],
    "method": "setLineWidth",
    "id": "org.bukkit.entity.TextDisplay#setLineWidth(int)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "descr": "A barrel box inventory, with 27 slots of type CONTAINER.",
    "static": true,
    "field": "BARREL",
    "id": "org.bukkit.event.inventory.InventoryType#BARREL",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WEST_NORTH_WEST",
    "id": "org.bukkit.block.BlockFace#WEST_NORTH_WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status"
  },
  {
    "descr": "Checks to see if an entity is currently using the Riptide enchantment.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isRiptiding",
    "id": "org.bukkit.entity.LivingEntity#isRiptiding()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Gets the limit for number of animals that can spawn in a chunk in this\\nworld",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getAnimalSpawnLimit",
    "id": "org.bukkit.World#getAnimalSpawnLimit()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "method": "iterator",
    "id": "org.bukkit.event.server.ServerListPingEvent#iterator()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "java.util.Iterator"
  },
  {
    "descr": "Book that was copied from an original. Can be copied.",
    "static": true,
    "field": "COPY_OF_ORIGINAL",
    "id": "org.bukkit.inventory.meta.BookMeta.Generation#COPY_OF_ORIGINAL",
    "class": "org.bukkit.inventory.meta.BookMeta.Generation",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation"
  },
  {
    "static": true,
    "field": "RAVAGER",
    "id": "org.bukkit.entity.EntityType#RAVAGER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Get the list of ingredients used for this recipe.",
    "param-names": ["ShapelessRecipe"],
    "param-types": ["org.bukkit.inventory.ShapelessRecipe"],
    "method": "getIngredientList",
    "id": "org.bukkit.inventory.ShapelessRecipe#getIngredientList()",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "java.util.List"
  },
  {
    "descr": "Gets whether the furnace's fuel is burning or not.",
    "method": "isBurning",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#isBurning()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets whether this server allows the Nether or not.",
    "static": true,
    "method": "getAllowNether",
    "id": "org.bukkit.Bukkit#getAllowNether()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Gets the y coordinate of the center of the bounding box.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getCenterY",
    "id": "org.bukkit.util.BoundingBox#getCenterY()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "This make the current allay duplicate itself without dance or item\\nnecessary.\\nNote: this will fire a CreatureSpawnEvent",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "duplicateAllay",
    "id": "org.bukkit.entity.Allay#duplicateAllay()",
    "class": "org.bukkit.entity.Allay",
    "return": "org.bukkit.entity.Allay"
  },
  {
    "static": true,
    "field": "TRADED_WITH_VILLAGER",
    "id": "org.bukkit.Statistic#TRADED_WITH_VILLAGER",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the maximum allowed value of the 'delay' property.",
    "param-names": ["Repeater"],
    "param-types": ["org.bukkit.block.data.type.Repeater"],
    "method": "getMaximumDelay",
    "id": "org.bukkit.block.data.type.Repeater#getMaximumDelay()",
    "class": "org.bukkit.block.data.type.Repeater",
    "return": "int"
  },
  {
    "descr": "Gets the current target of this Mob",
    "param-names": ["Mob"],
    "param-types": ["org.bukkit.entity.Mob"],
    "method": "getTarget",
    "id": "org.bukkit.entity.Mob#getTarget()",
    "class": "org.bukkit.entity.Mob",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Sets whether the zombie is a baby",
    "param-names": [
      "Zombie",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Zombie",
      "boolean"
    ],
    "method": "setBaby",
    "id": "org.bukkit.entity.Zombie#setBaby(boolean)",
    "class": "org.bukkit.entity.Zombie"
  },
  {
    "static": true,
    "field": "CREEPER_SPAWN_EGG",
    "id": "org.bukkit.Material#CREEPER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: MultipleFacing",
    "static": true,
    "field": "CHORUS_PLANT",
    "id": "org.bukkit.Material#CHORUS_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns if the player is in sneak mode",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isSneaking",
    "id": "org.bukkit.entity.Player#isSneaking()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "Returns true if the Piston in the event is sticky.",
    "method": "isSticky",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#isSticky()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PURPLE_WALL_BANNER",
    "id": "org.bukkit.Material#PURPLE_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns a list of items which would drop by the entity destroying this\\nblock with a specific tool",
    "param-names": [
      "Block",
      "Tool",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.entity.Entity"
    ],
    "method": "getDrops",
    "id": "org.bukkit.block.Block#getDrops(org.bukkit.inventory.ItemStack,org.bukkit.entity.Entity)",
    "class": "org.bukkit.block.Block",
    "return": "java.util.Collection"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ItemMergeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ITEM_SHOVEL_FLATTEN",
    "id": "org.bukkit.Sound#ITEM_SHOVEL_FLATTEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "RED_SANDSTONE_WALL",
    "id": "org.bukkit.Material#RED_SANDSTONE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GRAY_TERRACOTTA",
    "id": "org.bukkit.Material#GRAY_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_LAPIS_BLOCK",
    "id": "org.bukkit.Material#LEGACY_LAPIS_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityInteractEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the smelted ItemStack for this event",
    "method": "getSource",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "STONE_PRESSURE_PLATE",
    "id": "org.bukkit.Material#STONE_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Rabbit",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Rabbit",
      "org.bukkit.entity.Rabbit.Type"
    ],
    "method": "setRabbitType",
    "id": "org.bukkit.entity.Rabbit#setRabbitType(org.bukkit.entity.Rabbit.Type)",
    "class": "org.bukkit.entity.Rabbit"
  },
  {
    "descr": "Gets the Objective being tracked by this Score",
    "param-names": ["Score"],
    "param-types": ["org.bukkit.scoreboard.Score"],
    "method": "getObjective",
    "id": "org.bukkit.scoreboard.Score#getObjective()",
    "class": "org.bukkit.scoreboard.Score",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "Sets whether this gateway will teleport entities directly to\\nthe exit location instead of finding a nearby location.",
    "param-names": [
      "EndGateway",
      "Exact"
    ],
    "param-types": [
      "org.bukkit.block.EndGateway",
      "boolean"
    ],
    "method": "setExactTeleport",
    "id": "org.bukkit.block.EndGateway#setExactTeleport(boolean)",
    "class": "org.bukkit.block.EndGateway"
  },
  {
    "descr": "Moves a potion effect to the top of the potion effect list.\\n\\nThis causes the client to display the potion effect in the potion's name.",
    "param-names": [
      "PotionMeta",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.PotionMeta",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "setMainEffect",
    "id": "org.bukkit.inventory.meta.PotionMeta#setMainEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "descr": "Sets the world's ticks per water mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn water mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water mobs in\\nthis world on every tick.\\nA value of 400 will mean the server will attempt to spawn water mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, water mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Ticks Per Water Spawns"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setTicksPerWaterSpawns",
    "id": "org.bukkit.World#setTicksPerWaterSpawns(int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_FROG_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_LEASH_KNOT_BREAK",
    "id": "org.bukkit.Sound#ENTITY_LEASH_KNOT_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current border warning time in seconds.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getWarningTime",
    "id": "org.bukkit.WorldBorder#getWarningTime()",
    "class": "org.bukkit.WorldBorder",
    "return": "int"
  },
  {
    "descr": "Armor durability bonus of an Entity.",
    "static": true,
    "field": "GENERIC_ARMOR_TOUGHNESS",
    "id": "org.bukkit.attribute.Attribute#GENERIC_ARMOR_TOUGHNESS",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Statistic#values()",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic[]"
  },
  {
    "static": true,
    "method": "getInitialDisabledPacks",
    "id": "org.bukkit.Bukkit#getInitialDisabledPacks()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_CHERRY_WOOD",
    "id": "org.bukkit.Material#STRIPPED_CHERRY_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether or not this potion effect has an infinite duration. Potion\\neffects with infinite durations will display an infinite symbol and never\\nexpire unless manually removed.",
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "isInfinite",
    "id": "org.bukkit.potion.PotionEffect#isInfinite()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "boolean"
  },
  {
    "descr": "Check if the Guardian is an elder Guardian",
    "param-names": ["Guardian"],
    "param-types": ["org.bukkit.entity.Guardian"],
    "method": "isElder",
    "id": "org.bukkit.entity.Guardian#isElder()",
    "class": "org.bukkit.entity.Guardian",
    "return": "boolean"
  },
  {
    "descr": "Capture thread-safe read-only snapshot of chunk data",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getChunkSnapshot",
    "id": "org.bukkit.Chunk#getChunkSnapshot()",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.ChunkSnapshot"
  },
  {
    "descr": "Gets whether the brewing stand's fuel will be reduced / consumed or not.",
    "method": "isConsuming",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#isConsuming()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_LECTERN",
    "id": "org.bukkit.Statistic#INTERACT_WITH_LECTERN",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Decrements the given statistic for this player for the given entity.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Entity Type",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType",
      "int"
    ],
    "method": "decrementStatistic",
    "id": "org.bukkit.OfflinePlayer#decrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "HONEY_BOTTLE",
    "id": "org.bukkit.Material#HONEY_BOTTLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_LIBRARIAN",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_LIBRARIAN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Yellow, or (0xFF,0xFF,0x00) in (R,G,B)",
    "static": true,
    "field": "YELLOW",
    "id": "org.bukkit.Color#YELLOW",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "CREEPER",
    "id": "org.bukkit.entity.EntityType#CREEPER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "MANGROVE_WOOD",
    "id": "org.bukkit.Material#MANGROVE_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "SMOOTH_QUARTZ_SLAB",
    "id": "org.bukkit.Material#SMOOTH_QUARTZ_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHICKEN",
    "id": "org.bukkit.loot.LootTables#CHICKEN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_PURPUR_DOUBLE_SLAB",
    "id": "org.bukkit.Material#LEGACY_PURPUR_DOUBLE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_HURT",
    "id": "org.bukkit.Sound#ENTITY_WITHER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_GLOWSTONE",
    "id": "org.bukkit.Material#LEGACY_GLOWSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_RED_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_RED_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the amount of ticks until this entity will be converted to a Zoglin.\\nWhen this reaches 0, the entity will be converted. A value of less than 0\\nwill stop the current conversion process without converting the current\\nentity.",
    "param-names": [
      "Hoglin",
      "Time"
    ],
    "param-types": [
      "org.bukkit.entity.Hoglin",
      "int"
    ],
    "method": "setConversionTime",
    "id": "org.bukkit.entity.Hoglin#setConversionTime(int)",
    "class": "org.bukkit.entity.Hoglin"
  },
  {
    "static": true,
    "field": "ENTITY_DIE",
    "id": "org.bukkit.GameEvent#ENTITY_DIE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Get a key in the Minecraft namespace.",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "minecraft",
    "id": "org.bukkit.NamespacedKey#minecraft(java.lang.String)",
    "class": "org.bukkit.NamespacedKey",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "Tree with large roots which grows above lush caves",
    "static": true,
    "field": "AZALEA",
    "id": "org.bukkit.TreeType#AZALEA",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Sound keys.",
    "static": true,
    "field": "SOUNDS",
    "id": "org.bukkit.Registry#SOUNDS",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Cherry tree",
    "static": true,
    "field": "CHERRY",
    "id": "org.bukkit.TreeType#CHERRY",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets the last vibration frequency of this sensor.\\nDifferent activities detected by the sensor will produce different\\nfrequencies and dictate the output of connected comparators.",
    "param-names": ["SculkSensor"],
    "param-types": ["org.bukkit.block.SculkSensor"],
    "method": "getLastVibrationFrequency",
    "id": "org.bukkit.block.SculkSensor#getLastVibrationFrequency()",
    "class": "org.bukkit.block.SculkSensor",
    "return": "int"
  },
  {
    "descr": "BlockData: Levelled",
    "static": true,
    "field": "POWDER_SNOW_CAULDRON",
    "id": "org.bukkit.Material#POWDER_SNOW_CAULDRON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the type of the world that will be created or loaded",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "type",
    "id": "org.bukkit.WorldCreator#type()",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.BrewEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets a copy of all worn armor",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getArmorContents",
    "id": "org.bukkit.inventory.EntityEquipment#getArmorContents()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_11",
    "id": "org.bukkit.Sound#MUSIC_DISC_11",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increments automatically when a player kills another player on the aqua team.",
    "static": true,
    "field": "TEAM_KILL_AQUA",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_AQUA",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the item in the main hand.",
    "param-names": ["Main Hand Item"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setMainHandItem",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#setMainHandItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent"
  },
  {
    "descr": "Returns a collection of PotionEffect that would be applied from\\na potion with the given data value.",
    "param-names": [
      "PotionBrewer",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.potion.PotionBrewer",
      "int"
    ],
    "method": "getEffectsFromDamage",
    "id": "org.bukkit.potion.PotionBrewer#getEffectsFromDamage(int)",
    "class": "org.bukkit.potion.PotionBrewer",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "LEGACY_MELON",
    "id": "org.bukkit.Material#LEGACY_MELON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MINECART_FURNACE",
    "id": "org.bukkit.entity.EntityType#MINECART_FURNACE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the value of the 'berries' property.",
    "param-names": ["CaveVinesPlant"],
    "param-types": ["org.bukkit.block.data.type.CaveVinesPlant"],
    "method": "isBerries",
    "id": "org.bukkit.block.data.type.CaveVinesPlant#isBerries()",
    "class": "org.bukkit.block.data.type.CaveVinesPlant",
    "return": "boolean"
  },
  {
    "descr": "Tests if this snapshot contains the specified block.",
    "param-names": [
      "ChunkSnapshot",
      "Block"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "contains",
    "id": "org.bukkit.ChunkSnapshot#contains(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "boolean"
  },
  {
    "descr": "Brown axolotl.",
    "static": true,
    "field": "WILD",
    "id": "org.bukkit.entity.Axolotl.Variant#WILD",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "Adds the specified enchantments to this item stack in an unsafe manner.\\n\\nThis method is the same as calling #addUnsafeEnchantment(org.bukkit.enchantments.Enchantment, int) for\\neach element of the map.",
    "param-names": [
      "ItemStack",
      "Enchantments"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "java.util.Map"
    ],
    "method": "addUnsafeEnchantments",
    "id": "org.bukkit.inventory.ItemStack#addUnsafeEnchantments(java.util.Map<org.bukkit.enchantments.Enchantment,java.lang.Integer>)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "BLOCK_GRINDSTONE_USE",
    "id": "org.bukkit.Sound#BLOCK_GRINDSTONE_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HUSK_STEP",
    "id": "org.bukkit.Sound#ENTITY_HUSK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the new current of this block",
    "param-names": ["New Current"],
    "param-types": ["int"],
    "method": "setNewCurrent",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#setNewCurrent(int)",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent"
  },
  {
    "static": true,
    "field": "LEGACY_CONCRETE",
    "id": "org.bukkit.Material#LEGACY_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_RED_NETHER_BRICK",
    "id": "org.bukkit.Material#LEGACY_RED_NETHER_BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Block ignition caused by dynamic spreading of fire.",
    "static": true,
    "field": "SPREAD",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#SPREAD",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "static": true,
    "field": "ICE",
    "id": "org.bukkit.Material#ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "SANDSTONE_STAIRS",
    "id": "org.bukkit.Material#SANDSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the players current exhaustion level.\\n\\nExhaustion controls how fast the food level drops. While you have a\\ncertain amount of exhaustion, your saturation will drop to zero, and\\nthen your food will drop to zero.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getExhaustion",
    "id": "org.bukkit.entity.HumanEntity#getExhaustion()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "float"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent"
  },
  {
    "static": true,
    "field": "DRINKING_FINISH",
    "id": "org.bukkit.GameEvent#DRINKING_FINISH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_STANDING_BANNER",
    "id": "org.bukkit.Material#LEGACY_STANDING_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "DEAD_HORN_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#DEAD_HORN_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the default ticks per monster spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn monsters\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn monsters\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, monsters spawning will be disabled. We\\nrecommend using spawn-monsters to control this instead.\\n\\nMinecraft default: 1.",
    "static": true,
    "method": "getTicksPerMonsterSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerMonsterSpawns()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Set the remaining time in ticks of the current conditions.",
    "param-names": [
      "World",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setWeatherDuration",
    "id": "org.bukkit.World#setWeatherDuration(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the entity that removed the hanging entity.\\nMay be null, for example when broken by an explosion.",
    "method": "getRemover",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#getRemover()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_HURT",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MANSION",
    "id": "org.bukkit.map.MapCursor.Type#MANSION",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.TabCompleteEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Whether vines will spread.",
    "static": true,
    "field": "DO_VINES_SPREAD",
    "id": "org.bukkit.GameRule#DO_VINES_SPREAD",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "All game logic is processed.",
    "static": true,
    "field": "ENTITY_TICKING",
    "id": "org.bukkit.Chunk.LoadLevel#ENTITY_TICKING",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "static": true,
    "field": "PILLAGER",
    "id": "org.bukkit.loot.LootTables#PILLAGER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "SOUL_TORCH",
    "id": "org.bukkit.Material#SOUL_TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_COMPARATOR_ON",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_COMPARATOR_ON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Cat.Type#values()",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type[]"
  },
  {
    "descr": "Sets the fuel power for this fuel. Each unit of power can fuel one\\nbrewing operation.",
    "param-names": ["Fuel Power"],
    "param-types": ["int"],
    "method": "setFuelPower",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#setFuelPower(int)",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent"
  },
  {
    "descr": "Returns a list of entities within a bounding box centered around a\\nLocation.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the size of the\\nsearch bounding box.",
    "param-names": [
      "World",
      "Location",
      "X",
      "Y",
      "Z",
      "Filter"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "double",
      "double",
      "double",
      "java.util.function.Predicate"
    ],
    "method": "getNearbyEntities",
    "id": "org.bukkit.World#getNearbyEntities(org.bukkit.Location,double,double,double,java.util.function.Predicate<org.bukkit.entity.Entity>)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "descr": "Set the number of times this trade has been used.",
    "param-names": [
      "MerchantRecipe",
      "Uses"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "int"
    ],
    "method": "setUses",
    "id": "org.bukkit.inventory.MerchantRecipe#setUses(int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "CLOUD",
    "id": "org.bukkit.Particle#CLOUD",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "CYAN_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#CYAN_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the age in ticks of the gateway.\\n\\nIf the age is less than 200 ticks a magenta beam will be emitted, whilst\\nif it is a multiple of 2400 ticks a purple beam will be emitted.",
    "param-names": ["EndGateway"],
    "param-types": ["org.bukkit.block.EndGateway"],
    "method": "getAge",
    "id": "org.bukkit.block.EndGateway#getAge()",
    "class": "org.bukkit.block.EndGateway",
    "return": "long"
  },
  {
    "static": true,
    "field": "FROG",
    "id": "org.bukkit.entity.EntityType#FROG",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "The highest block that blocks motion or contains a fluid or is in the\\nTag#LEAVES.",
    "static": true,
    "field": "MOTION_BLOCKING_NO_LEAVES",
    "id": "org.bukkit.HeightMap#MOTION_BLOCKING_NO_LEAVES",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "POTTED_FERN",
    "id": "org.bukkit.Material#POTTED_FERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "static": true,
    "field": "BLOCK_LODESTONE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_LODESTONE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Sets the velocity of the item being dispensed in meters per tick.",
    "param-names": ["Vel"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "setVelocity",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#setVelocity(org.bukkit.util.Vector)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SOIL_FALL",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SOIL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The hand used to perform this interaction.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Pure white rabbit.",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.entity.Rabbit.Type#WHITE",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "static": true,
    "field": "CAULDRON_FILLED",
    "id": "org.bukkit.Statistic#CAULDRON_FILLED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the DataPack Manager.",
    "static": true,
    "method": "getDataPackManager",
    "id": "org.bukkit.Bukkit#getDataPackManager()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.packs.DataPackManager"
  },
  {
    "descr": "Cause this firework to explode at earliest opportunity, as if it has no\\nremaining fuse.",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "detonate",
    "id": "org.bukkit.entity.Firework#detonate()",
    "class": "org.bukkit.entity.Firework"
  },
  {
    "static": true,
    "field": "DIAMOND_BLOCK",
    "id": "org.bukkit.Material#DIAMOND_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the death message that will appear to everyone on the server.",
    "param-names": ["Death Message"],
    "param-types": ["java.lang.String"],
    "method": "setDeathMessage",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setDeathMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_QUICK_CHARGE_3",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_QUICK_CHARGE_3",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the living entity's current maximum no damage ticks.",
    "param-names": [
      "LivingEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setMaximumNoDamageTicks",
    "id": "org.bukkit.entity.LivingEntity#setMaximumNoDamageTicks(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Get the item cost (in amount) to complete the current repair.",
    "param-names": ["AnvilInventory"],
    "param-types": ["org.bukkit.inventory.AnvilInventory"],
    "method": "getRepairCostAmount",
    "id": "org.bukkit.inventory.AnvilInventory#getRepairCostAmount()",
    "class": "org.bukkit.inventory.AnvilInventory",
    "return": "int"
  },
  {
    "static": true,
    "field": "EAT",
    "id": "org.bukkit.GameEvent#EAT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Gray",
    "static": true,
    "field": "GRAY",
    "id": "org.bukkit.entity.Horse.Color#GRAY",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "static": true,
    "field": "LEGACY_GRAY_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_GRAY_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "NETHER_BRICK_STAIRS",
    "id": "org.bukkit.Material#NETHER_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the raid wave that this raider was spawned as part of.",
    "param-names": [
      "Raider",
      "Wave"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "int"
    ],
    "method": "setWave",
    "id": "org.bukkit.entity.Raider#setWave(int)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "static": true,
    "field": "SHEEP_BLUE",
    "id": "org.bukkit.loot.LootTables#SHEEP_BLUE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Get the scale given the raw value.",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["byte"],
    "method": "valueOf",
    "id": "org.bukkit.map.MapView.Scale#valueOf(byte)",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "descr": "Gets the brightness override of the entity.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getBrightness",
    "id": "org.bukkit.entity.Display#getBrightness()",
    "class": "org.bukkit.entity.Display",
    "return": "org.bukkit.entity.Display.Brightness"
  },
  {
    "descr": "Get whether this firework has any effects.",
    "param-names": ["FireworkMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkMeta"],
    "method": "hasEffects",
    "id": "org.bukkit.inventory.meta.FireworkMeta#hasEffects()",
    "class": "org.bukkit.inventory.meta.FireworkMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "WEEPING_VINES_PLANT",
    "id": "org.bukkit.Material#WEEPING_VINES_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Starts the jukebox playing if there is a record.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "startPlaying",
    "id": "org.bukkit.block.Jukebox#startPlaying()",
    "class": "org.bukkit.block.Jukebox",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Bamboo.Leaves#values()",
    "class": "org.bukkit.block.data.type.Bamboo.Leaves",
    "return": "org.bukkit.block.data.type.Bamboo.Leaves[]"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WHITE_STAINED_GLASS",
    "id": "org.bukkit.Material#WHITE_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TRADER_LLAMA_SPAWN_EGG",
    "id": "org.bukkit.Material#TRADER_LLAMA_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PLAYER",
    "id": "org.bukkit.entity.EntityType#PLAYER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "GHAST",
    "id": "org.bukkit.loot.LootTables#GHAST",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the hit block face.",
    "param-names": ["RayTraceResult"],
    "param-types": ["org.bukkit.util.RayTraceResult"],
    "method": "getHitBlockFace",
    "id": "org.bukkit.util.RayTraceResult#getHitBlockFace()",
    "class": "org.bukkit.util.RayTraceResult",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the floored value of the Z component, indicating the block that\\nthis location is contained with.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getBlockZ",
    "id": "org.bukkit.Location#getBlockZ()",
    "class": "org.bukkit.Location",
    "return": "int"
  },
  {
    "static": true,
    "field": "TRIANGLES_TOP",
    "id": "org.bukkit.block.banner.PatternType#TRIANGLES_TOP",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "EXPLODE",
    "id": "org.bukkit.GameEvent#EXPLODE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_3",
    "id": "org.bukkit.Material#LEGACY_RECORD_3",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.BlockSupport#values()",
    "class": "org.bukkit.block.BlockSupport",
    "return": "org.bukkit.block.BlockSupport[]"
  },
  {
    "descr": "Gets a list of whitelisted players.",
    "static": true,
    "method": "getWhitelistedPlayers",
    "id": "org.bukkit.Bukkit#getWhitelistedPlayers()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason#UNKNOWN",
    "class": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "descr": "Whether mobs will target all player entities once angered.",
    "static": true,
    "field": "UNIVERSAL_ANGER",
    "id": "org.bukkit.GameRule#UNIVERSAL_ANGER",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "BLOCK_GRAVEL_HIT",
    "id": "org.bukkit.Sound#BLOCK_GRAVEL_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the command that this CommandBlock will run when powered.\\nSetting the command to null is the same as setting it to an empty\\nString.",
    "param-names": [
      "CommandBlock",
      "Command"
    ],
    "param-types": [
      "org.bukkit.block.CommandBlock",
      "java.lang.String"
    ],
    "method": "setCommand",
    "id": "org.bukkit.block.CommandBlock#setCommand(java.lang.String)",
    "class": "org.bukkit.block.CommandBlock"
  },
  {
    "descr": "Gets if the Player should keep all EXP at respawn.\\n\\nThis flag overrides other EXP settings",
    "method": "getKeepLevel",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getKeepLevel()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockBreakEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Returns whether the armor stand should be visible or not.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "isVisible",
    "id": "org.bukkit.entity.ArmorStand#isVisible()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_LEVELUP",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_LEVELUP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.SignChangeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ITEM_INTERACT_START",
    "id": "org.bukkit.GameEvent#ITEM_INTERACT_START",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "PRISMARINE_CRYSTALS",
    "id": "org.bukkit.Material#PRISMARINE_CRYSTALS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_LONG_JUMP",
    "id": "org.bukkit.Sound#ENTITY_GOAT_LONG_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the player is now sprinting or not.",
    "method": "isSprinting",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#isSprinting()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Get a list of MapRenderers currently in effect.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "getRenderers",
    "id": "org.bukkit.map.MapView#getRenderers()",
    "class": "org.bukkit.map.MapView",
    "return": "java.util.List"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "JAGGED_PEAKS",
    "id": "org.bukkit.block.Biome#JAGGED_PEAKS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "STAGE",
    "id": "org.bukkit.Art#STAGE",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_BREAK",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if the entity has visual fire (it will always appear to be on fire).",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isVisualFire",
    "id": "org.bukkit.entity.Entity#isVisualFire()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityTameEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Removes the specified target from this list, therefore indicating a\\n\"not banned\" status.",
    "param-names": [
      "BanList",
      "Target"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.Object"
    ],
    "method": "pardon",
    "id": "org.bukkit.BanList#pardon(T)",
    "class": "org.bukkit.BanList"
  },
  {
    "static": true,
    "field": "CALL",
    "id": "org.bukkit.MusicInstrument#CALL",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "descr": "Gets the type of the boat.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getBoatType",
    "id": "org.bukkit.entity.Boat#getBoatType()",
    "class": "org.bukkit.entity.Boat",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Gets the value of the 'stage' property.",
    "param-names": ["Sapling"],
    "param-types": ["org.bukkit.block.data.type.Sapling"],
    "method": "getStage",
    "id": "org.bukkit.block.data.type.Sapling#getStage()",
    "class": "org.bukkit.block.data.type.Sapling",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_BARDING",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_BARDING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_FROGLIGHT_HIT",
    "id": "org.bukkit.Sound#BLOCK_FROGLIGHT_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_OCELOT_HURT",
    "id": "org.bukkit.Sound#ENTITY_OCELOT_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if players with the bad omen effect in this world will trigger a\\nraid.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "hasRaids",
    "id": "org.bukkit.World#hasRaids()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_ORE_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHER_ORE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Can pivot around horizontal axis.",
    "static": true,
    "field": "HORIZONTAL",
    "id": "org.bukkit.entity.Display.Billboard#HORIZONTAL",
    "class": "org.bukkit.entity.Display.Billboard",
    "return": "org.bukkit.entity.Display.Billboard"
  },
  {
    "static": true,
    "field": "LEGACY_STORAGE_MINECART",
    "id": "org.bukkit.Material#LEGACY_STORAGE_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.server.ServerCommandEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MUD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Do not use for any reason.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getId",
    "id": "org.bukkit.Material#getId()",
    "class": "org.bukkit.Material",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent"
  },
  {
    "descr": "Sets the value of the 'half' property.",
    "param-names": [
      "Bisected",
      "Half"
    ],
    "param-types": [
      "org.bukkit.block.data.Bisected",
      "org.bukkit.block.data.Bisected.Half"
    ],
    "method": "setHalf",
    "id": "org.bukkit.block.data.Bisected#setHalf(org.bukkit.block.data.Bisected.Half)",
    "class": "org.bukkit.block.data.Bisected"
  },
  {
    "descr": "Returns the clicked block",
    "method": "getClickedBlock",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getClickedBlock()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Get the origin of the vibration.",
    "param-names": ["Vibration"],
    "param-types": ["org.bukkit.Vibration"],
    "method": "getOrigin",
    "id": "org.bukkit.Vibration#getOrigin()",
    "class": "org.bukkit.Vibration",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Performs a ray trace that checks for block collisions using the blocks'\\nprecise collision shapes.\\n\\nIf collisions with passable blocks are ignored, fluid collisions are\\nignored as well regardless of the fluid collision mode.\\n\\nPortal blocks are only considered passable if the ray starts within\\nthem. Apart from that collisions with portal blocks will be considered\\neven if collisions with passable blocks are otherwise ignored.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance",
      "Fluid Collision Mode",
      "Ignore Passable Blocks"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "org.bukkit.FluidCollisionMode",
      "boolean"
    ],
    "method": "rayTraceBlocks",
    "id": "org.bukkit.World#rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Gets the hand used to shear the entity.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "The list of completions which will be offered to the sender, in order.\\nThis list is mutable and reflects what will be offered.",
    "method": "getCompletions",
    "id": "org.bukkit.event.server.TabCompleteEvent#getCompletions()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "PACKED_ICE",
    "id": "org.bukkit.Material#PACKED_ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Required method for deserialization",
    "param-names": ["Args"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.Location#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_IRON_GOLEM_DAMAGE",
    "id": "org.bukkit.Sound#ENTITY_IRON_GOLEM_DAMAGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the bolt which is striking the earth.",
    "method": "getLightning",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#getLightning()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "org.bukkit.entity.LightningStrike"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMAN_SCREAM",
    "id": "org.bukkit.Sound#ENTITY_ENDERMAN_SCREAM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HUSK_CONVERTED_TO_ZOMBIE",
    "id": "org.bukkit.Sound#ENTITY_HUSK_CONVERTED_TO_ZOMBIE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents events with a source block and a destination block, currently\\nonly applies to liquid (lava and water) and teleporting dragon eggs.\\n\\nIf a Block From To event is cancelled, the block will not move (the liquid\\nwill not flow).",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "BLUE_BED",
    "id": "org.bukkit.Material#BLUE_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Allows the Enchantment to be placed on feet slot armor",
    "static": true,
    "field": "ARMOR_FEET",
    "id": "org.bukkit.enchantments.EnchantmentTarget#ARMOR_FEET",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#values()",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason[]"
  },
  {
    "descr": "This method will get the target of individual heads Head of the\\nwither.",
    "param-names": [
      "Wither",
      "Head"
    ],
    "param-types": [
      "org.bukkit.entity.Wither",
      "org.bukkit.entity.Wither.Head"
    ],
    "method": "getTarget",
    "id": "org.bukkit.entity.Wither#getTarget(org.bukkit.entity.Wither.Head)",
    "class": "org.bukkit.entity.Wither",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Triggered by a Plugin.",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#CUSTOM",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "static": true,
    "field": "BLOCK_COPPER_FALL",
    "id": "org.bukkit.Sound#BLOCK_COPPER_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "IRON_GOLEM",
    "id": "org.bukkit.loot.LootTables#IRON_GOLEM",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_CHORUS_PLANT",
    "id": "org.bukkit.Material#LEGACY_CHORUS_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PILLAGER_OUTPOST",
    "id": "org.bukkit.loot.LootTables#PILLAGER_OUTPOST",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PURPLE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#PURPLE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: BrewingStand",
    "static": true,
    "field": "BREWING_STAND",
    "id": "org.bukkit.Material#BREWING_STAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WOLF",
    "id": "org.bukkit.entity.EntityType#WOLF",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Checks if the inventory contains any ItemStacks matching the given\\nItemStack.\\n\\nThis will only return true if both the type and the amount of the stack\\nmatch.",
    "param-names": [
      "Inventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "contains",
    "id": "org.bukkit.inventory.Inventory#contains(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "boolean"
  },
  {
    "descr": "Gets the category which this recipe will appear in the recipe book under.\\nDefaults to CraftingBookCategory#MISC if not set.",
    "param-names": ["ShapelessRecipe"],
    "param-types": ["org.bukkit.inventory.ShapelessRecipe"],
    "method": "getCategory",
    "id": "org.bukkit.inventory.ShapelessRecipe#getCategory()",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.recipe.CraftingBookCategory"
  },
  {
    "descr": "Particles displayed when a villager grows a plant, data\\nis the number of particles",
    "static": true,
    "field": "VILLAGER_PLANT_GROW",
    "id": "org.bukkit.Effect#VILLAGER_PLANT_GROW",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Gets the temperature for the given block coordinates.\\n\\nIt is safe to run this method when the block does not exist, it will\\nnot create the block.\\n\\nThis method will return the raw temperature without adjusting for block\\nheight effects.",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "int"
    ],
    "method": "getTemperature",
    "id": "org.bukkit.World#getTemperature(int,int,int)",
    "class": "org.bukkit.World",
    "return": "double"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Decrements the given statistic for this player.\\n\\nThis is equivalent to the following code:\\ndecrementStatistic(Statistic, 1)",
    "param-names": [
      "OfflinePlayer",
      "Statistic"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic"
    ],
    "method": "decrementStatistic",
    "id": "org.bukkit.OfflinePlayer#decrementStatistic(org.bukkit.Statistic)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_DROP_SEED",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_DROP_SEED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Prevents removing or changing the respective equipment - players\\ncannot take an item from the slot or swap the items between\\nthemselves and the ArmorStand.",
    "static": true,
    "field": "REMOVING_OR_CHANGING",
    "id": "org.bukkit.entity.ArmorStand.LockType#REMOVING_OR_CHANGING",
    "class": "org.bukkit.entity.ArmorStand.LockType",
    "return": "org.bukkit.entity.ArmorStand.LockType"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "DEEPSLATE_TILE_SLAB",
    "id": "org.bukkit.Material#DEEPSLATE_TILE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_GUARDIAN",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_GUARDIAN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the item in this frame",
    "param-names": [
      "ItemFrame",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ItemFrame",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.entity.ItemFrame#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ItemFrame"
  },
  {
    "descr": "Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.",
    "param-names": [
      "WorldBorder",
      "Seconds"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "int"
    ],
    "method": "setWarningTime",
    "id": "org.bukkit.WorldBorder#setWarningTime(int)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "JUMP",
    "id": "org.bukkit.potion.PotionType#JUMP",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Send a health update to the player. This will adjust the health, food, and\\nsaturation on the client and will not affect the player's actual values on\\nthe server. As soon as any of these values change on the server, changes sent\\nby this method will no longer be visible.",
    "param-names": [
      "Player",
      "Health",
      "Food Level",
      "Saturation"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "double",
      "int",
      "float"
    ],
    "method": "sendHealthUpdate",
    "id": "org.bukkit.entity.Player#sendHealthUpdate(double,int,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "POTTED_POPPY",
    "id": "org.bukkit.Material#POTTED_POPPY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents the common tree species.",
    "static": true,
    "field": "GENERIC",
    "id": "org.bukkit.TreeSpecies#GENERIC",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Chest.Type#values()",
    "class": "org.bukkit.block.data.type.Chest.Type",
    "return": "org.bukkit.block.data.type.Chest.Type[]"
  },
  {
    "descr": "All of the items on the cursor are moved to the clicked slot.",
    "static": true,
    "field": "PLACE_ALL",
    "id": "org.bukkit.event.inventory.InventoryAction#PLACE_ALL",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Set the Z component.",
    "param-names": [
      "Vector",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "int"
    ],
    "method": "setZ",
    "id": "org.bukkit.util.Vector#setZ(int)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerCommandSendEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "NETHERITE_UPGRADE_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#NETHERITE_UPGRADE_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DIODE_BLOCK_ON",
    "id": "org.bukkit.Material#LEGACY_DIODE_BLOCK_ON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the x-coordinate of this location",
    "param-names": [
      "Location",
      "X"
    ],
    "param-types": [
      "org.bukkit.Location",
      "double"
    ],
    "method": "setX",
    "id": "org.bukkit.Location#setX(double)",
    "class": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_JUMP",
    "id": "org.bukkit.Sound#ENTITY_SLIME_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_JUMP_SMALL",
    "id": "org.bukkit.Sound#ENTITY_SLIME_JUMP_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the first trusted player.\\n\\nThe first trusted player may only be removed after the second.",
    "param-names": [
      "Fox",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Fox",
      "org.bukkit.entity.AnimalTamer"
    ],
    "method": "setFirstTrustedPlayer",
    "id": "org.bukkit.entity.Fox#setFirstTrustedPlayer(org.bukkit.entity.AnimalTamer)",
    "class": "org.bukkit.entity.Fox"
  },
  {
    "static": true,
    "field": "CREEPER",
    "id": "org.bukkit.SkullType#CREEPER",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "descr": "The sound played when an anvil breaks",
    "static": true,
    "field": "ANVIL_BREAK",
    "id": "org.bukkit.Effect#ANVIL_BREAK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "BLACK_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#BLACK_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_NO",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_NO",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the location that this player will move to",
    "param-names": ["To"],
    "param-types": ["org.bukkit.Location"],
    "method": "setTo",
    "id": "org.bukkit.event.player.PlayerPortalEvent#setTo(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "param-names": ["CommandSender"],
    "param-types": ["org.bukkit.command.CommandSender"],
    "method": "spigot",
    "id": "org.bukkit.command.CommandSender#spigot()",
    "class": "org.bukkit.command.CommandSender",
    "return": "org.bukkit.command.CommandSender.Spigot"
  },
  {
    "descr": "Removes multiple instances of an ingredient from the list. If there are\\nless instances then specified, all will be removed. If the data value\\nis -1, only ingredients with a -1 data value will be removed.",
    "param-names": [
      "ShapelessRecipe",
      "Count",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "int",
      "org.bukkit.material.MaterialData"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(int,org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Navy, or (0x00,0x00,0x80) in (R,G,B)",
    "static": true,
    "field": "NAVY",
    "id": "org.bukkit.Color#NAVY",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "LEGACY_MAGMA_CREAM",
    "id": "org.bukkit.Material#LEGACY_MAGMA_CREAM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The mode used when saving a structure.",
    "static": true,
    "field": "SAVE",
    "id": "org.bukkit.block.structure.UsageMode#SAVE",
    "class": "org.bukkit.block.structure.UsageMode",
    "return": "org.bukkit.block.structure.UsageMode"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ZOGLIN",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ZOGLIN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When TNT is primed by a player interacting with it directly.",
    "static": true,
    "field": "PLAYER",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#PLAYER",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "POLISHED_BLACKSTONE_BRICK_STAIRS",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the fade colors of the firework effect.",
    "param-names": ["FireworkEffect"],
    "param-types": ["org.bukkit.FireworkEffect"],
    "method": "getFadeColors",
    "id": "org.bukkit.FireworkEffect#getFadeColors()",
    "class": "org.bukkit.FireworkEffect",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the source of this ban.\\n\\nNote: A source is considered any String, although this is generally a\\nplayer name.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "getSource",
    "id": "org.bukkit.BanEntry#getSource()",
    "class": "org.bukkit.BanEntry",
    "return": "java.lang.String"
  },
  {
    "descr": "Return the namespaced identifier for this object.",
    "param-names": ["Keyed"],
    "param-types": ["org.bukkit.Keyed"],
    "method": "getKey",
    "id": "org.bukkit.Keyed#getKey()",
    "class": "org.bukkit.Keyed",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "static": true,
    "field": "LEGACY_WATER_LILY",
    "id": "org.bukkit.Material#LEGACY_WATER_LILY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_STAND",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_STAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": [
      "Block Light",
      "Sky Light"
    ],
    "param-types": [
      "int",
      "int"
    ],
    "id": "org.bukkit.entity.Display.Brightness#Brightness(int,int)",
    "class": "org.bukkit.entity.Display.Brightness"
  },
  {
    "descr": "Gets the default ticks per ambient mob spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn ambient mobs\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn ambient mobs\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, ambient mobs spawning will be disabled.\\n\\nMinecraft default: 1.",
    "static": true,
    "method": "getTicksPerAmbientSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerAmbientSpawns()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Sets the value of the 'delay' property.",
    "param-names": [
      "Repeater",
      "Delay"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Repeater",
      "int"
    ],
    "method": "setDelay",
    "id": "org.bukkit.block.data.type.Repeater#setDelay(int)",
    "class": "org.bukkit.block.data.type.Repeater"
  },
  {
    "static": true,
    "field": "LEGACY_DAYLIGHT_DETECTOR_INVERTED",
    "id": "org.bukkit.Material#LEGACY_DAYLIGHT_DETECTOR_INVERTED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value whether the player would be allowed to build here.\\nDefaults to spawn if the server was going to stop them (such as, the\\nplayer is in Spawn). Note that this is an entirely different check\\nthan BLOCK_CANBUILD, as this refers to a player, not universe-physics\\nrule like cactus on dirt.",
    "method": "canBuild",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#canBuild()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Orange, or (0xFF,0xA5,0x00) in (R,G,B)",
    "static": true,
    "field": "ORANGE",
    "id": "org.bukkit.Color#ORANGE",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Sets the specified page in the book. Pages of the book must be\\ncontiguous.\\n\\nThe data can be up to 256 characters in length, additional characters\\nare truncated.\\n\\nPages are 1-indexed.",
    "param-names": [
      "BookMeta",
      "Page",
      "Data"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "int",
      "java.lang.String"
    ],
    "method": "setPage",
    "id": "org.bukkit.inventory.meta.BookMeta#setPage(int,java.lang.String)",
    "class": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "static": true,
    "field": "LEGACY_LAVA_BUCKET",
    "id": "org.bukkit.Material#LEGACY_LAVA_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_LAVA_EXTINGUISH",
    "id": "org.bukkit.Sound#BLOCK_LAVA_EXTINGUISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_TRADE",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_TRADE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BROWN_MUSHROOM",
    "id": "org.bukkit.Material#BROWN_MUSHROOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_MOSSY_COBBLESTONE",
    "id": "org.bukkit.Material#LEGACY_MOSSY_COBBLESTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Damage caused when an entity that should be in water is not.\\n\\nDamage: 1",
    "static": true,
    "field": "DRYOUT",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#DRYOUT",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Get the name of this structure. This is case-sensitive when used in\\ncommands.",
    "param-names": ["StructureType"],
    "param-types": ["org.bukkit.StructureType"],
    "method": "getName",
    "id": "org.bukkit.StructureType#getName()",
    "class": "org.bukkit.StructureType",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_EMPTY_MAP",
    "id": "org.bukkit.Material#LEGACY_EMPTY_MAP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check if the provided ItemStack is the correct item used for breeding\\nthis entity.",
    "param-names": [
      "Animals",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.entity.Animals",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "isBreedItem",
    "id": "org.bukkit.entity.Animals#isBreedItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.Animals",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerRegisterChannelEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_ARMOR_STAND_PLACE",
    "id": "org.bukkit.Sound#ENTITY_ARMOR_STAND_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get if this structure block should ignore entities.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "isIgnoreEntities",
    "id": "org.bukkit.block.Structure#isIgnoreEntities()",
    "class": "org.bukkit.block.Structure",
    "return": "boolean"
  },
  {
    "descr": "Set the given GameRule's new value.",
    "param-names": [
      "World",
      "Rule",
      "New Value"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.GameRule",
      "java.lang.Object"
    ],
    "method": "setGameRule",
    "id": "org.bukkit.World#<T>setGameRule(org.bukkit.GameRule<T>,T)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Get a GameRule by its name.",
    "param-names": ["Rule"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByName",
    "id": "org.bukkit.GameRule#getByName(java.lang.String)",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "RECORD_PLAYED",
    "id": "org.bukkit.Statistic#RECORD_PLAYED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Returns the percentage of blocks to drop from this explosion",
    "method": "getYield",
    "id": "org.bukkit.event.block.BlockExplodeEvent#getYield()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "float"
  },
  {
    "static": true,
    "field": "LEGACY_DARK_OAK_FENCE",
    "id": "org.bukkit.Material#LEGACY_DARK_OAK_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the state of the fishing",
    "method": "getState",
    "id": "org.bukkit.event.player.PlayerFishEvent#getState()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "descr": "Sets whether or not the block will attempt to drop items as it normally\\nwould.\\nIf and only if this is false then BlockDropItemEvent will not be\\ncalled after this event.",
    "param-names": ["Drop Items"],
    "param-types": ["boolean"],
    "method": "setDropItems",
    "id": "org.bukkit.event.block.BlockBreakEvent#setDropItems(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent"
  },
  {
    "descr": "Attempts to get the ChunkGenerator with the given name.\\n\\nIf the generator is not found, null will be returned and a message will\\nbe printed to the specified CommandSender explaining why.\\n\\nThe name must be in the \"plugin:id\" notation, or optionally just\\n\"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\\noptional unique identifier for the generator you wish to request from\\nthe plugin.",
    "param-names": [
      "World",
      "Name",
      "Output"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.String",
      "org.bukkit.command.CommandSender"
    ],
    "method": "getGeneratorForName",
    "id": "org.bukkit.WorldCreator#getGeneratorForName(java.lang.String,java.lang.String,org.bukkit.command.CommandSender)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.generator.ChunkGenerator"
  },
  {
    "static": true,
    "field": "RED",
    "id": "org.bukkit.entity.Fox.Type#RED",
    "class": "org.bukkit.entity.Fox.Type",
    "return": "org.bukkit.entity.Fox.Type"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.WorldLoadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.WorldLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.attribute.Attribute#values()",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute[]"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CLOSE",
    "id": "org.bukkit.GameEvent#BLOCK_CLOSE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "IRON_SWORD",
    "id": "org.bukkit.Material#IRON_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DARK_OAK",
    "id": "org.bukkit.entity.Boat.Type#DARK_OAK",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PigZapEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent"
  },
  {
    "descr": "Sets the underlying potion data",
    "param-names": [
      "PotionMeta",
      "Data"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.PotionMeta",
      "org.bukkit.potion.PotionData"
    ],
    "method": "setBasePotionData",
    "id": "org.bukkit.inventory.meta.PotionMeta#setBasePotionData(org.bukkit.potion.PotionData)",
    "class": "org.bukkit.inventory.meta.PotionMeta"
  },
  {
    "descr": "Returns a mutable collection of all top level commands to be sent.\\n\\nIt is not legal to add entries to this collection, only remove them.\\nBehaviour of adding entries is undefined.",
    "method": "getCommands",
    "id": "org.bukkit.event.player.PlayerCommandSendEvent#getCommands()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets if this has been tamed. Not necessary if the method setOwner has\\nbeen used, as it tames automatically.\\n\\nIf something is tamed then a player can not tame it through normal\\nmethods, even if it does not belong to anyone in particular.",
    "param-names": [
      "Tameable",
      "Tame"
    ],
    "param-types": [
      "org.bukkit.entity.Tameable",
      "boolean"
    ],
    "method": "setTamed",
    "id": "org.bukkit.entity.Tameable#setTamed(boolean)",
    "class": "org.bukkit.entity.Tameable"
  },
  {
    "descr": "Add another effect to this firework.",
    "param-names": [
      "FireworkMeta",
      "Effect"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.FireworkMeta",
      "org.bukkit.FireworkEffect"
    ],
    "method": "addEffect",
    "id": "org.bukkit.inventory.meta.FireworkMeta#addEffect(org.bukkit.FireworkEffect)",
    "class": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_5",
    "id": "org.bukkit.Sound#MUSIC_DISC_5",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the record inserted into the jukebox.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "getPlaying",
    "id": "org.bukkit.block.Jukebox#getPlaying()",
    "class": "org.bukkit.block.Jukebox",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the despawn delay before this WanderingTrader is forcibly\\ndespawned.\\nIf this is less than or equal to 0, then the trader will not be\\ndespawned.",
    "param-names": [
      "WanderingTrader",
      "Despawn Delay"
    ],
    "param-types": [
      "org.bukkit.entity.WanderingTrader",
      "int"
    ],
    "method": "setDespawnDelay",
    "id": "org.bukkit.entity.WanderingTrader#setDespawnDelay(int)",
    "class": "org.bukkit.entity.WanderingTrader"
  },
  {
    "descr": "Decrements the given statistic for this player for the given material.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Material",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.Material",
      "int"
    ],
    "method": "decrementStatistic",
    "id": "org.bukkit.OfflinePlayer#decrementStatistic(org.bukkit.Statistic,org.bukkit.Material,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Gets the primary passenger of a vehicle. For vehicles that could have\\nmultiple passengers, this will only return the primary passenger.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getPassenger",
    "id": "org.bukkit.entity.Entity#getPassenger()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Called when a player toggles their sneaking state",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent"
  },
  {
    "static": true,
    "field": "CYAN_TERRACOTTA",
    "id": "org.bukkit.Material#CYAN_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets whether the Server hide online players in server status.",
    "static": true,
    "method": "getHideOnlinePlayers",
    "id": "org.bukkit.Bukkit#getHideOnlinePlayers()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Performs a ray trace that checks for entity collisions.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the maximum\\ndistance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rayTraceEntities",
    "id": "org.bukkit.World#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PLAINS",
    "id": "org.bukkit.block.Biome#PLAINS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockGrowEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MAGENTA_CONCRETE",
    "id": "org.bukkit.Material#MAGENTA_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ZOMBIE_HORSE_SPAWN_EGG",
    "id": "org.bukkit.Material#ZOMBIE_HORSE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_HURT",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the repair penalty",
    "param-names": [
      "Repairable",
      "Cost"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.Repairable",
      "int"
    ],
    "method": "setRepairCost",
    "id": "org.bukkit.inventory.meta.Repairable#setRepairCost(int)",
    "class": "org.bukkit.inventory.meta.Repairable"
  },
  {
    "static": true,
    "field": "DROP",
    "id": "org.bukkit.Statistic#DROP",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets all Objectives on this Scoreboard",
    "param-names": ["Scoreboard"],
    "param-types": ["org.bukkit.scoreboard.Scoreboard"],
    "method": "getObjectives",
    "id": "org.bukkit.scoreboard.Scoreboard#getObjectives()",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "IRON_BARS",
    "id": "org.bukkit.Material#IRON_BARS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get whether or not this criteria is read only. If read only, scoreboards with this criteria\\ncannot have their scores changed.",
    "param-names": ["Criteria"],
    "param-types": ["org.bukkit.scoreboard.Criteria"],
    "method": "isReadOnly",
    "id": "org.bukkit.scoreboard.Criteria#isReadOnly()",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "boolean"
  },
  {
    "descr": "Get the maximum amount of entities this block can hold.",
    "param-names": ["EntityBlockStorage"],
    "param-types": ["org.bukkit.block.EntityBlockStorage"],
    "method": "getMaxEntities",
    "id": "org.bukkit.block.EntityBlockStorage#getMaxEntities()",
    "class": "org.bukkit.block.EntityBlockStorage",
    "return": "int"
  },
  {
    "descr": "Gets the color of this arrow.",
    "param-names": ["Arrow"],
    "param-types": ["org.bukkit.entity.Arrow"],
    "method": "getColor",
    "id": "org.bukkit.entity.Arrow#getColor()",
    "class": "org.bukkit.entity.Arrow",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Initialize the map cursor.",
    "param-names": [
      "X",
      "Y",
      "Direction",
      "Type",
      "Visible",
      "Caption"
    ],
    "param-types": [
      "byte",
      "byte",
      "byte",
      "org.bukkit.map.MapCursor.Type",
      "boolean",
      "java.lang.String"
    ],
    "id": "org.bukkit.map.MapCursor#MapCursor(byte,byte,byte,org.bukkit.map.MapCursor.Type,boolean,java.lang.String)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "SPELL_MOB_AMBIENT",
    "id": "org.bukkit.Particle#SPELL_MOB_AMBIENT",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "BIRCH_BUTTON",
    "id": "org.bukkit.Material#BIRCH_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.FireworkEffect.Type#values()",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type[]"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "CHERRY_DOOR",
    "id": "org.bukkit.Material#CHERRY_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "WARPED_SIGN",
    "id": "org.bukkit.Material#WARPED_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GRAY_CONCRETE",
    "id": "org.bukkit.Material#GRAY_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_OTHERSIDE",
    "id": "org.bukkit.Material#MUSIC_DISC_OTHERSIDE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POISONOUS_POTATO",
    "id": "org.bukkit.Material#POISONOUS_POTATO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "If the ClickType is NUMBER_KEY, this method will return the index of\\nthe pressed key (0-8).",
    "method": "getHotbarButton",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getHotbarButton()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "int"
  },
  {
    "descr": "The player is not allowed to log in, due to the server being full",
    "static": true,
    "field": "KICK_FULL",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#KICK_FULL",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "static": true,
    "field": "ITEM_HOE_TILL",
    "id": "org.bukkit.Sound#ITEM_HOE_TILL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The switch is mounted to the wall.",
    "static": true,
    "field": "WALL",
    "id": "org.bukkit.block.data.type.Switch.Face#WALL",
    "class": "org.bukkit.block.data.type.Switch.Face",
    "return": "org.bukkit.block.data.type.Switch.Face"
  },
  {
    "descr": "Sets the time which an entity has to be exposed to the cloud before the\\neffect is applied.",
    "param-names": [
      "AreaEffectCloud",
      "Wait Time"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "int"
    ],
    "method": "setWaitTime",
    "id": "org.bukkit.entity.AreaEffectCloud#setWaitTime(int)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Llama.Color#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Llama.Color",
    "return": "org.bukkit.entity.Llama.Color"
  },
  {
    "static": true,
    "field": "THE_VOID",
    "id": "org.bukkit.block.Biome#THE_VOID",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "DAMAGE_TAKEN",
    "id": "org.bukkit.Statistic#DAMAGE_TAKEN",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "method": "getChannel",
    "id": "org.bukkit.event.player.PlayerUnregisterChannelEvent#getChannel()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Redwood tree, shaped like a pine tree",
    "static": true,
    "field": "REDWOOD",
    "id": "org.bukkit.TreeType#REDWOOD",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "TINTED_GLASS",
    "id": "org.bukkit.Material#TINTED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Rotation#values()",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation[]"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "boolean"
  },
  {
    "descr": "Rotated clockwise by 45 degrees",
    "static": true,
    "field": "CLOCKWISE_45",
    "id": "org.bukkit.Rotation#CLOCKWISE_45",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Sets the age of this mob.",
    "param-names": [
      "Ageable",
      "Age"
    ],
    "param-types": [
      "org.bukkit.entity.Ageable",
      "int"
    ],
    "method": "setAge",
    "id": "org.bukkit.entity.Ageable#setAge(int)",
    "class": "org.bukkit.entity.Ageable"
  },
  {
    "descr": "Light brown",
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.entity.Horse.Color#BROWN",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockBurnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DEAD_TUBE_CORAL_BLOCK",
    "id": "org.bukkit.Material#DEAD_TUBE_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_MILK_BUCKET",
    "id": "org.bukkit.Material#LEGACY_MILK_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_SALMON_FLOP",
    "id": "org.bukkit.Sound#ENTITY_SALMON_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Chunk at the given coordinates",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "getChunkAt",
    "id": "org.bukkit.World#getChunkAt(int,int)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Chunk"
  },
  {
    "descr": "Gets the chunk generator for this world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getGenerator",
    "id": "org.bukkit.World#getGenerator()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.generator.ChunkGenerator"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityTameEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'persistent' property.",
    "param-names": [
      "Leaves",
      "Persistent"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Leaves",
      "boolean"
    ],
    "method": "setPersistent",
    "id": "org.bukkit.block.data.type.Leaves#setPersistent(boolean)",
    "class": "org.bukkit.block.data.type.Leaves"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the damage done to the vehicle",
    "method": "getDamage",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#getDamage()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "double"
  },
  {
    "descr": "Sticks are normally played when a note block is on top of a glass\\nblock.",
    "static": true,
    "field": "STICKS",
    "id": "org.bukkit.Instrument#STICKS",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "boolean"
  },
  {
    "descr": "When the entity has no target, so the entity randomly chooses one.",
    "static": true,
    "field": "RANDOM_TARGET",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#RANDOM_TARGET",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Marks whether this sign can be edited by players.",
    "param-names": [
      "Sign",
      "Editable"
    ],
    "param-types": [
      "org.bukkit.block.Sign",
      "boolean"
    ],
    "method": "setEditable",
    "id": "org.bukkit.block.Sign#setEditable(boolean)",
    "class": "org.bukkit.block.Sign"
  },
  {
    "static": true,
    "field": "GOLDEN_HELMET",
    "id": "org.bukkit.Material#GOLDEN_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the message that the player is attempting to send",
    "method": "getMessage",
    "id": "org.bukkit.event.player.PlayerChatEvent#getMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_BOOTS",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the humidity of the biome of this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getHumidity",
    "id": "org.bukkit.block.Block#getHumidity()",
    "class": "org.bukkit.block.Block",
    "return": "double"
  },
  {
    "descr": "Gets the GrassSpecies with the given data value",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByData",
    "id": "org.bukkit.GrassSpecies#getByData(byte)",
    "class": "org.bukkit.GrassSpecies",
    "return": "org.bukkit.GrassSpecies"
  },
  {
    "static": true,
    "field": "GOAT_SPAWN_EGG",
    "id": "org.bukkit.Material#GOAT_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityCombustEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "boolean"
  },
  {
    "descr": "Black rabbit.",
    "static": true,
    "field": "BLACK",
    "id": "org.bukkit.entity.Rabbit.Type#BLACK",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "When the entity gets effects from a totem item saving it's life.",
    "static": true,
    "field": "TOTEM",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#TOTEM",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the ItemStack being moved; if modified, the original item will not\\nbe removed from the source inventory.",
    "method": "getItem",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the biome for the given block coordinates.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "getBiome",
    "id": "org.bukkit.World#getBiome(int,int)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the biome provider that will be used to create or load the world.\\n\\nThis may be null, in which case the biome provider from the\\nChunkGenerator will be used. If no ChunkGenerator is\\nspecific the \"natural\" biome provider for this environment will be used.\\n\\nIf the biome provider cannot be found for the given name and no\\nChunkGenerator is specific, the natural environment biome\\nprovider will be used instead and a warning will be printed to the\\nspecified output",
    "param-names": [
      "WorldCreator",
      "Biome Provider"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "java.lang.String"
    ],
    "method": "biomeProvider",
    "id": "org.bukkit.WorldCreator#biomeProvider(java.lang.String)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "param-names": ["Type"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "id": "org.bukkit.potion.PotionData#PotionData(org.bukkit.potion.PotionType)",
    "class": "org.bukkit.potion.PotionData"
  },
  {
    "descr": "Round white dots",
    "static": true,
    "field": "WHITE_DOTS",
    "id": "org.bukkit.entity.Horse.Style#WHITE_DOTS",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PANDA_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check whether or not this state requires a specific item to be used to drop\\nitems when broken. For example, diamond ore requires an iron pickaxe and will\\nnot drop diamonds when broken with a wooden or stone pickaxe.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "requiresCorrectToolForDrops",
    "id": "org.bukkit.block.data.BlockData#requiresCorrectToolForDrops()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BellRingEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Loads the chunk.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "load",
    "id": "org.bukkit.Chunk#load()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "UNIVERSAL_ANGER",
    "id": "org.bukkit.entity.memory.MemoryKey#UNIVERSAL_ANGER",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockGrowEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "FERMENTED_SPIDER_EYE",
    "id": "org.bukkit.Material#FERMENTED_SPIDER_EYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.MoistureChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the current light level of the block represented by this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getLightLevel",
    "id": "org.bukkit.block.BlockState#getLightLevel()",
    "class": "org.bukkit.block.BlockState",
    "return": "byte"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockFormEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the data of the block that the Enderman is carrying.",
    "param-names": ["Enderman"],
    "param-types": ["org.bukkit.entity.Enderman"],
    "method": "getCarriedBlock",
    "id": "org.bukkit.entity.Enderman#getCarriedBlock()",
    "class": "org.bukkit.entity.Enderman",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "When a player regains health from regenerating due to Peaceful mode\\n(difficulty=0)",
    "static": true,
    "field": "REGEN",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#REGEN",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "static": true,
    "field": "POTTED_LILY_OF_THE_VALLEY",
    "id": "org.bukkit.Material#POTTED_LILY_OF_THE_VALLEY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "NETHERRACK",
    "id": "org.bukkit.Material#NETHERRACK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_BRICKS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MUD_BRICKS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns if this note is sharped.",
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "isSharped",
    "id": "org.bukkit.Note#isSharped()",
    "class": "org.bukkit.Note",
    "return": "boolean"
  },
  {
    "descr": "Get the object by its key.",
    "param-names": [
      "Registry",
      "Key"
    ],
    "param-types": [
      "org.bukkit.Registry",
      "org.bukkit.NamespacedKey"
    ],
    "method": "get",
    "id": "org.bukkit.Registry#get(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Keyed"
  },
  {
    "descr": "Get the index of the closest matching color in the palette to the given\\ncolor.",
    "param-names": ["Color"],
    "static": true,
    "param-types": ["java.awt.Color"],
    "method": "matchColor",
    "id": "org.bukkit.map.MapPalette#matchColor(java.awt.Color)",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Shoot multiple arrows from crossbows",
    "static": true,
    "field": "MULTISHOT",
    "id": "org.bukkit.enchantments.Enchantment#MULTISHOT",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Gets the Material that the block is changing into",
    "method": "getTo",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "INFESTED_STONE",
    "id": "org.bukkit.Material#INFESTED_STONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityPortalEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_CHAINMAIL_CHESTPLATE",
    "id": "org.bukkit.Material#LEGACY_CHAINMAIL_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_DONKEY_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_DONKEY_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Attempts to dispense the contents of the dispenser.\\n\\nIf the block represented by this state is no longer a dispenser, this\\nwill return false.",
    "param-names": ["Dispenser"],
    "param-types": ["org.bukkit.block.Dispenser"],
    "method": "dispense",
    "id": "org.bukkit.block.Dispenser#dispense()",
    "class": "org.bukkit.block.Dispenser",
    "return": "boolean"
  },
  {
    "descr": "Gets the maximum speed of a boat. The speed is unrelated to the\\nvelocity.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getMaxSpeed",
    "id": "org.bukkit.entity.Boat#getMaxSpeed()",
    "class": "org.bukkit.entity.Boat",
    "return": "double"
  },
  {
    "descr": "Undiscover a recipe for this player such that it has already been\\ndiscovered. This method will remove the key's associated recipe from the\\nplayer's recipe book.",
    "param-names": [
      "HumanEntity",
      "Recipe"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.NamespacedKey"
    ],
    "method": "undiscoverRecipe",
    "id": "org.bukkit.entity.HumanEntity#undiscoverRecipe(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "param-names": [
      "Result",
      "Uses",
      "Max Uses",
      "Experience Reward",
      "Villager Experience",
      "Price Multiplier",
      "Demand",
      "Special Price"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "int",
      "int",
      "boolean",
      "int",
      "float",
      "int",
      "int"
    ],
    "id": "org.bukkit.inventory.MerchantRecipe#MerchantRecipe(org.bukkit.inventory.ItemStack,int,int,boolean,int,float,int,int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_BRUTE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_BRUTE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Create a shaped recipe to craft the specified ItemStack. The\\nconstructor merely determines the result and type; to set the actual\\nrecipe, you'll need to call the appropriate methods.",
    "param-names": [
      "Key",
      "Result"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack"
    ],
    "id": "org.bukkit.inventory.ShapedRecipe#ShapedRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "static": true,
    "field": "RABBIT_HIDE",
    "id": "org.bukkit.Material#RABBIT_HIDE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the limit for number of animals that can spawn in a chunk in this\\nworld\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setAnimalSpawnLimit",
    "id": "org.bukkit.World#setAnimalSpawnLimit(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Whether global level events such as ender dragon, wither, and completed\\nend portal effects will propagate across the entire server.",
    "static": true,
    "field": "GLOBAL_SOUND_EVENTS",
    "id": "org.bukkit.GameRule#GLOBAL_SOUND_EVENTS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_SPRUCE_WOOD",
    "id": "org.bukkit.Material#STRIPPED_SPRUCE_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_STAR",
    "id": "org.bukkit.Material#LEGACY_NETHER_STAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the height of this interaction entity.",
    "param-names": ["Interaction"],
    "param-types": ["org.bukkit.entity.Interaction"],
    "method": "getInteractionHeight",
    "id": "org.bukkit.entity.Interaction#getInteractionHeight()",
    "class": "org.bukkit.entity.Interaction",
    "return": "float"
  },
  {
    "static": true,
    "field": "BLOCK_POLISHED_DEEPSLATE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_POLISHED_DEEPSLATE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.map.MapView.Scale#values()",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale[]"
  },
  {
    "static": true,
    "field": "NAUTILUS",
    "id": "org.bukkit.Particle#NAUTILUS",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "WAXED_WEATHERED_CUT_COPPER",
    "id": "org.bukkit.Material#WAXED_WEATHERED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the record in the jukebox.",
    "param-names": ["JukeboxInventory"],
    "param-types": ["org.bukkit.inventory.JukeboxInventory"],
    "method": "getRecord",
    "id": "org.bukkit.inventory.JukeboxInventory#getRecord()",
    "class": "org.bukkit.inventory.JukeboxInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_JUNGLE_WOOD",
    "id": "org.bukkit.Material#STRIPPED_JUNGLE_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "HORN_CORAL_BLOCK",
    "id": "org.bukkit.Material#HORN_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Chestnut",
    "static": true,
    "field": "CHESTNUT",
    "id": "org.bukkit.entity.Horse.Color#CHESTNUT",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "static": true,
    "field": "BLOCK_CAVE_VINES_HIT",
    "id": "org.bukkit.Sound#BLOCK_CAVE_VINES_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the speed at which a client will fly. Negative values indicate\\nreverse directions.",
    "param-names": [
      "Player",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "float"
    ],
    "method": "setFlySpeed",
    "id": "org.bukkit.entity.Player#setFlySpeed(float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "PINK_BED",
    "id": "org.bukkit.Material#PINK_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This event is called when a org.bukkit.entity.Item is removed from\\nthe world because it has existed for 5 minutes.\\n\\nCancelling the event results in the item being allowed to exist for 5 more\\nminutes. This behavior is not guaranteed and may change in future versions.",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent"
  },
  {
    "descr": "A flying small fireball, such as thrown by a Blaze or player.",
    "static": true,
    "field": "SMALL_FIREBALL",
    "id": "org.bukkit.entity.EntityType#SMALL_FIREBALL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the progress of the bar. Values should be between 0.0 (empty) and\\n1.0 (full)",
    "param-names": [
      "BossBar",
      "Progress"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "double"
    ],
    "method": "setProgress",
    "id": "org.bukkit.boss.BossBar#setProgress(double)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "DROPPER_INSPECTED",
    "id": "org.bukkit.Statistic#DROPPER_INSPECTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_SAND_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SAND_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DRAGON",
    "id": "org.bukkit.Sound#MUSIC_DRAGON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the data for the falling block",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "getBlockData",
    "id": "org.bukkit.entity.FallingBlock#getBlockData()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "field": "ENTITY_LINGERING_POTION_THROW",
    "id": "org.bukkit.Sound#ENTITY_LINGERING_POTION_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether this armor stand is scaled down.",
    "param-names": [
      "ArmorStand",
      "Small"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "boolean"
    ],
    "method": "setSmall",
    "id": "org.bukkit.entity.ArmorStand#setSmall(boolean)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Bit is normally played when a note block is on top of a emerald block.",
    "static": true,
    "field": "BIT",
    "id": "org.bukkit.Instrument#BIT",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "param-names": ["Zombie"],
    "param-types": ["org.bukkit.entity.Zombie"],
    "method": "getVillagerProfession",
    "id": "org.bukkit.entity.Zombie#getVillagerProfession()",
    "class": "org.bukkit.entity.Zombie",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Sets the type of this block state.",
    "param-names": [
      "BlockState",
      "Type"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "org.bukkit.Material"
    ],
    "method": "setType",
    "id": "org.bukkit.block.BlockState#setType(org.bukkit.Material)",
    "class": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Gets the cause of this teleportation event",
    "method": "getCause",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "Gets the block at the given face\\n\\nThis method is equal to getRelative(face, 1)",
    "param-names": [
      "Block",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace"
    ],
    "method": "getRelative",
    "id": "org.bukkit.block.Block#getRelative(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Get a collection of all entities in this World matching the given\\nclass/interface",
    "param-names": [
      "World",
      "Cls"
    ],
    "param-types": [
      "org.bukkit.World",
      "java.lang.Class"
    ],
    "method": "getEntitiesByClass",
    "id": "org.bukkit.World#<T>getEntitiesByClass(java.lang.Class<T>)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "descr": "Get the command sender.",
    "method": "getSender",
    "id": "org.bukkit.event.server.ServerCommandEvent#getSender()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Gets the block that the living entity has targeted.\\n\\nThis takes the blocks' precise collision shapes into account. Fluids are\\nignored.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "LivingEntity",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "getTargetBlockExact",
    "id": "org.bukkit.entity.LivingEntity#getTargetBlockExact(int)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "DREAM",
    "id": "org.bukkit.MusicInstrument#DREAM",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "static": true,
    "field": "DROP_COUNT",
    "id": "org.bukkit.Statistic#DROP_COUNT",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Clarity method for getting the placed block. Not really needed except\\nfor reasons of clarity.",
    "method": "getBlockPlaced",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getBlockPlaced()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ENTITY_IRON_GOLEM_HURT",
    "id": "org.bukkit.Sound#ENTITY_IRON_GOLEM_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SPEED",
    "id": "org.bukkit.potion.PotionType#SPEED",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_HURT",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "PINK_CANDLE_CAKE",
    "id": "org.bukkit.Material#PINK_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "GRANITE_SLAB",
    "id": "org.bukkit.Material#GRANITE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WOODEN_AXE",
    "id": "org.bukkit.Material#WOODEN_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the name displayed to players for this objective.",
    "param-names": [
      "Objective",
      "Display Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Objective",
      "java.lang.String"
    ],
    "method": "setDisplayName",
    "id": "org.bukkit.scoreboard.Objective#setDisplayName(java.lang.String)",
    "class": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "JUNGLE_DOOR",
    "id": "org.bukkit.Material#JUNGLE_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.CropState#valueOf(java.lang.String)",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PARROT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerQuitEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_GRAVEL_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_GRAVEL_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cost (minimum level) which is displayed as a number on the right\\nhand side of the enchantment offer.",
    "param-names": ["Level"],
    "param-types": ["int"],
    "method": "setExpLevelCost",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#setExpLevelCost(int)",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent"
  },
  {
    "descr": "Sets the border to a square region with the specified side length in blocks.",
    "param-names": [
      "WorldBorder",
      "New Size"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "double"
    ],
    "method": "setSize",
    "id": "org.bukkit.WorldBorder#setSize(double)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "descr": "Gets the FurnaceRecipe associated with this event",
    "method": "getRecipe",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "descr": "Returns the World where this event is occurring",
    "method": "getWorld",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "SCUTE",
    "id": "org.bukkit.Material#SCUTE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHAIN_STEP",
    "id": "org.bukkit.Sound#BLOCK_CHAIN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_PURPLE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_PURPLE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a human entity experiences exhaustion.\\nAn exhaustion level greater than 4.0 causes a decrease in saturation by 1.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "LIME_BANNER",
    "id": "org.bukkit.Material#LIME_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a EularAngle with each axis set to the\\npassed angle in radians",
    "param-names": [
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "double",
      "double",
      "double"
    ],
    "id": "org.bukkit.util.EulerAngle#EulerAngle(double,double,double)",
    "class": "org.bukkit.util.EulerAngle"
  },
  {
    "static": true,
    "field": "MOOSHROOM_SPAWN_EGG",
    "id": "org.bukkit.Material#MOOSHROOM_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_STEP",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_BONE_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BONE_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the command that this CommandMinecart will run when activated.\\nSetting the command to null is the same as setting it to an empty\\nString.",
    "param-names": [
      "CommandMinecart",
      "Command"
    ],
    "param-types": [
      "org.bukkit.entity.minecart.CommandMinecart",
      "java.lang.String"
    ],
    "method": "setCommand",
    "id": "org.bukkit.entity.minecart.CommandMinecart#setCommand(java.lang.String)",
    "class": "org.bukkit.entity.minecart.CommandMinecart"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Art#valueOf(java.lang.String)",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Get the value of a pixel of the character.",
    "param-names": [
      "MapFont.CharacterSprite",
      "Row",
      "Col"
    ],
    "param-types": [
      "org.bukkit.map.MapFont.CharacterSprite",
      "int",
      "int"
    ],
    "method": "get",
    "id": "org.bukkit.map.MapFont.CharacterSprite#get(int,int)",
    "class": "org.bukkit.map.MapFont.CharacterSprite",
    "return": "boolean"
  },
  {
    "descr": "Gets the new value of the statistic.",
    "method": "getNewValue",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getNewValue()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "int"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerLocaleChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns true if the entity is supported by a block. This value is a\\nstate updated by the server and is not recalculated unless the entity\\nmoves.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isOnGround",
    "id": "org.bukkit.entity.Entity#isOnGround()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Gets the z coordinate of the center of the bounding box.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getCenterZ",
    "id": "org.bukkit.util.BoundingBox#getCenterZ()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Silverfish entering block, spawner spawning.",
    "static": true,
    "field": "ENTITY_POOF",
    "id": "org.bukkit.EntityEffect#ENTITY_POOF",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Returns a copy the enchantments in this ItemMeta. \\nReturns an empty map if none.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getEnchants",
    "id": "org.bukkit.inventory.meta.ItemMeta#getEnchants()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.util.Map"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_EMPTY_POWDER_SNOW",
    "id": "org.bukkit.Sound#ITEM_BUCKET_EMPTY_POWDER_SNOW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.TimeSkipEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_BRICKS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MUD_BRICKS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Key"],
    "param-types": ["org.bukkit.NamespacedKey"],
    "id": "org.bukkit.enchantments.Enchantment#Enchantment(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Checks whether or not this Minecart will pick up\\nitems into its inventory.",
    "param-names": ["HopperMinecart"],
    "param-types": ["org.bukkit.entity.minecart.HopperMinecart"],
    "method": "isEnabled",
    "id": "org.bukkit.entity.minecart.HopperMinecart#isEnabled()",
    "class": "org.bukkit.entity.minecart.HopperMinecart",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SIDEBAR",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "NETHERITE_AXE",
    "id": "org.bukkit.Material#NETHERITE_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VEX_HURT",
    "id": "org.bukkit.Sound#ENTITY_VEX_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_2",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_2",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the minimum number of ticks one has to wait for a fish appearing.\\n\\nThe default is 100 ticks (5 seconds).\\nNote that this is before applying lure.",
    "param-names": [
      "FishHook",
      "Min Wait Time"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "int"
    ],
    "method": "setMinWaitTime",
    "id": "org.bukkit.entity.FishHook#setMinWaitTime(int)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Sets the quit message to send to all online players",
    "param-names": ["Quit Message"],
    "param-types": ["java.lang.String"],
    "method": "setQuitMessage",
    "id": "org.bukkit.event.player.PlayerQuitEvent#setQuitMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent"
  },
  {
    "descr": "Gets the value of the 'occupied' property.",
    "param-names": ["Bed"],
    "param-types": ["org.bukkit.block.data.type.Bed"],
    "method": "isOccupied",
    "id": "org.bukkit.block.data.type.Bed#isOccupied()",
    "class": "org.bukkit.block.data.type.Bed",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'can_summon' property.",
    "param-names": [
      "SculkShrieker",
      "Can_summon"
    ],
    "param-types": [
      "org.bukkit.block.data.type.SculkShrieker",
      "boolean"
    ],
    "method": "setCanSummon",
    "id": "org.bukkit.block.data.type.SculkShrieker#setCanSummon(boolean)",
    "class": "org.bukkit.block.data.type.SculkShrieker"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Adds a ban to this list. If a previous ban exists, this will\\nupdate the previous entry.",
    "param-names": [
      "BanList",
      "Target",
      "Reason",
      "Expires",
      "Source"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.String",
      "java.lang.String",
      "java.util.Date",
      "java.lang.String"
    ],
    "method": "addBan",
    "id": "org.bukkit.BanList#addBan(java.lang.String,java.lang.String,java.util.Date,java.lang.String)",
    "class": "org.bukkit.BanList",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Get the height of this font.",
    "param-names": ["MapFont"],
    "param-types": ["org.bukkit.map.MapFont"],
    "method": "getHeight",
    "id": "org.bukkit.map.MapFont#getHeight()",
    "class": "org.bukkit.map.MapFont",
    "return": "int"
  },
  {
    "descr": "Gets a list of passengers of this vehicle.\\n\\nThe returned list will not be directly linked to the entity's current\\npassengers, and no guarantees are made as to its mutability.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getPassengers",
    "id": "org.bukkit.entity.Entity#getPassengers()",
    "class": "org.bukkit.entity.Entity",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_OPEN",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERRACK_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHERRACK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the title of the advancement.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "getTitle",
    "id": "org.bukkit.advancement.AdvancementDisplay#getTitle()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the World.Environment type of this world",
    "param-names": ["WorldInfo"],
    "param-types": ["org.bukkit.generator.WorldInfo"],
    "method": "getEnvironment",
    "id": "org.bukkit.generator.WorldInfo#getEnvironment()",
    "class": "org.bukkit.generator.WorldInfo",
    "return": "org.bukkit.World.Environment"
  },
  {
    "static": true,
    "field": "PARROT_SPAWN_EGG",
    "id": "org.bukkit.Material#PARROT_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the data for this block state.",
    "param-names": [
      "BlockState",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.block.BlockState#setBlockData(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Gets the duration which this cloud will exist for (in ticks).",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getDuration",
    "id": "org.bukkit.entity.AreaEffectCloud#getDuration()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_SILVER_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_SILVER_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Red mushroom cow.",
    "static": true,
    "field": "RED",
    "id": "org.bukkit.entity.MushroomCow.Variant#RED",
    "class": "org.bukkit.entity.MushroomCow.Variant",
    "return": "org.bukkit.entity.MushroomCow.Variant"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets if this axolotl is playing dead.\\nAn axolotl may play dead when it is damaged underwater.",
    "param-names": [
      "Axolotl",
      "Playing Dead"
    ],
    "param-types": [
      "org.bukkit.entity.Axolotl",
      "boolean"
    ],
    "method": "setPlayingDead",
    "id": "org.bukkit.entity.Axolotl#setPlayingDead(boolean)",
    "class": "org.bukkit.entity.Axolotl"
  },
  {
    "descr": "Converts this vector to a unit vector (a vector with length of 1).",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "normalize",
    "id": "org.bukkit.util.Vector#normalize()",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "DARK_GRAY",
    "id": "org.bukkit.map.MapPalette#DARK_GRAY",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Sets if this animal is sleeping.",
    "param-names": [
      "Fox",
      "Sleeping"
    ],
    "param-types": [
      "org.bukkit.entity.Fox",
      "boolean"
    ],
    "method": "setSleeping",
    "id": "org.bukkit.entity.Fox#setSleeping(boolean)",
    "class": "org.bukkit.entity.Fox"
  },
  {
    "descr": "Shifts this bounding box by the given amounts.",
    "param-names": [
      "BoundingBox",
      "Shift"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.Location"
    ],
    "method": "shift",
    "id": "org.bukkit.util.BoundingBox#shift(org.bukkit.Location)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_HURT",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Sound this entity will make when eating the given\\nItemStack.",
    "param-names": [
      "LivingEntity",
      "Item Stack"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "getEatingSound",
    "id": "org.bukkit.entity.LivingEntity#getEatingSound(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the generator that will be used to create or load the world.\\n\\nThis may be null, in which case the \"natural\" generator for this\\nenvironment will be used.",
    "param-names": [
      "WorldCreator",
      "Generator"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "org.bukkit.generator.ChunkGenerator"
    ],
    "method": "generator",
    "id": "org.bukkit.WorldCreator#generator(org.bukkit.generator.ChunkGenerator)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "static": true,
    "field": "WARPED_FOREST",
    "id": "org.bukkit.block.Biome#WARPED_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the item that is being consumed. Modifying the returned item will\\nhave no effect, you must use #setItem(org.bukkit.inventory.ItemStack) instead.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Loads an image from a file, and returns a cached image for the specific\\nserver-icon.\\n\\nSize and type are implementation defined. An incompatible file is\\nguaranteed to throw an implementation-defined Exception.",
    "param-names": ["File"],
    "static": true,
    "param-types": ["java.io.File"],
    "method": "loadServerIcon",
    "id": "org.bukkit.Bukkit#loadServerIcon(java.io.File)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.util.CachedServerIcon"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "PRISMARINE_BRICK_SLAB",
    "id": "org.bukkit.Material#PRISMARINE_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "ACACIA_STAIRS",
    "id": "org.bukkit.Material#ACACIA_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the name of the world that is to be loaded or created.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "name",
    "id": "org.bukkit.WorldCreator#name()",
    "class": "org.bukkit.WorldCreator",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.WorldType#values()",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType[]"
  },
  {
    "descr": "Set the Z component.",
    "param-names": [
      "Vector",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "setZ",
    "id": "org.bukkit.util.Vector#setZ(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "BLOCK_SNOW_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SNOW_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "In an beacon inventory, the primary potion effect",
    "static": true,
    "field": "PRIMARY_EFFECT",
    "id": "org.bukkit.inventory.InventoryView.Property#PRIMARY_EFFECT",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Gets the custom model data that is set.\\n\\nCustomModelData is an integer that may be associated client side with a\\ncustom item model.\\n\\nPlugins should check that hasCustomModelData() returns true\\nbefore calling this method.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getCustomModelData",
    "id": "org.bukkit.inventory.meta.ItemMeta#getCustomModelData()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "int"
  },
  {
    "descr": "Sets if this map is scaling or not.",
    "param-names": [
      "MapMeta",
      "Value"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.MapMeta",
      "boolean"
    ],
    "method": "setScaling",
    "id": "org.bukkit.inventory.meta.MapMeta#setScaling(boolean)",
    "class": "org.bukkit.inventory.meta.MapMeta"
  },
  {
    "static": true,
    "field": "CLOSEST",
    "id": "org.bukkit.map.MapView.Scale#CLOSEST",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "descr": "Gets the Effect associated with the given ID.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getById",
    "id": "org.bukkit.Effect#getById(int)",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Represents a generic Mojang game event.\\nSpecific Bukkit events should be used where possible, this event is mainly\\nused internally by Sculk sensors.",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent"
  },
  {
    "descr": "Gets a list of command aliases defined in the server properties.",
    "static": true,
    "method": "getCommandAliases",
    "id": "org.bukkit.Bukkit#getCommandAliases()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Map"
  },
  {
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "getColor",
    "id": "org.bukkit.potion.PotionEffect#getColor()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Checks for existence of lore.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "hasLore",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasLore()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "END_CITY_TREASURE",
    "id": "org.bukkit.loot.LootTables#END_CITY_TREASURE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Indicates that the block can only be pushed by pistons, not pulled.",
    "static": true,
    "field": "PUSH_ONLY",
    "id": "org.bukkit.block.PistonMoveReaction#PUSH_ONLY",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Request that the player's client download and switch texture packs.\\n\\nThe player's client will download the new texture pack asynchronously\\nin the background, and will automatically switch to it once the\\ndownload is complete. If the client has downloaded and cached the same\\ntexture pack in the past, it will perform a file size check against\\nthe response content to determine if the texture pack has changed and\\nneeds to be downloaded again. When this request is sent for the very\\nfirst time from a given server, the client will first display a\\nconfirmation GUI to the player before proceeding with the download.\\n\\nNotes:\\n\\nPlayers can disable server textures on their client, in which\\ncase this method will have no affect on them. Use the\\nPlayerResourcePackStatusEvent to figure out whether or not\\nthe player loaded the pack!\\nThere is no concept of resetting texture packs back to default\\nwithin Minecraft, so players will have to relog to do so or you\\nhave to send an empty pack.\\nThe request is send with \"null\" as the hash. This might result\\nin newer versions not loading the pack correctly.\\n",
    "param-names": [
      "Player",
      "Url"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "setTexturePack",
    "id": "org.bukkit.entity.Player#setTexturePack(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.map.MapCursor.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Returns the entity that is holding the leash.",
    "method": "getLeashHolder",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getLeashHolder()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_ENDER_CHEST_OPEN",
    "id": "org.bukkit.Sound#BLOCK_ENDER_CHEST_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "EXPERIENCE_BOTTLE",
    "id": "org.bukkit.Material#EXPERIENCE_BOTTLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "VILLAGE_FISHER",
    "id": "org.bukkit.loot.LootTables#VILLAGE_FISHER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets whether this mob can join an active raid.",
    "param-names": [
      "Raider",
      "Join"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "boolean"
    ],
    "method": "setCanJoinRaid",
    "id": "org.bukkit.entity.Raider#setCanJoinRaid(boolean)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_LEAVES_BREAK",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_LEAVES_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_CHESTPLATE",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent"
  },
  {
    "descr": "Checks for the existence of generation level in the book.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "hasGeneration",
    "id": "org.bukkit.inventory.meta.BookMeta#hasGeneration()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the world from the given Unique ID.",
    "param-names": ["Uid"],
    "static": true,
    "param-types": ["java.util.UUID"],
    "method": "getWorld",
    "id": "org.bukkit.Bukkit#getWorld(java.util.UUID)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "The spell that makes the casting entity invisible.",
    "static": true,
    "field": "DISAPPEAR",
    "id": "org.bukkit.entity.Spellcaster.Spell#DISAPPEAR",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "static": true,
    "field": "CREEPER",
    "id": "org.bukkit.loot.LootTables#CREEPER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerShowEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SHULKER_OPEN",
    "id": "org.bukkit.GameEvent#SHULKER_OPEN",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityInteractEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the value of the 'mode' property.",
    "param-names": ["Comparator"],
    "param-types": ["org.bukkit.block.data.type.Comparator"],
    "method": "getMode",
    "id": "org.bukkit.block.data.type.Comparator#getMode()",
    "class": "org.bukkit.block.data.type.Comparator",
    "return": "org.bukkit.block.data.type.Comparator.Mode"
  },
  {
    "descr": "Ocean monuments are underwater structures.\\n\\nThey are usually composed on all three different prismarine types and sea\\nlanterns. They are the only place guardians and elder guardians spawn\\nnaturally.",
    "static": true,
    "field": "OCEAN_MONUMENT",
    "id": "org.bukkit.StructureType#OCEAN_MONUMENT",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "POTTED_CRIMSON_ROOTS",
    "id": "org.bukkit.Material#POTTED_CRIMSON_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Snowable",
    "static": true,
    "field": "MYCELIUM",
    "id": "org.bukkit.Material#MYCELIUM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerChatEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the location to mark as where the player moved from",
    "param-names": ["From"],
    "param-types": ["org.bukkit.Location"],
    "method": "setFrom",
    "id": "org.bukkit.event.player.PlayerPortalEvent#setFrom(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_HORSE_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the number of ticks until the TNT blows up after being primed.",
    "param-names": [
      "TNTPrimed",
      "Fuse Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.TNTPrimed",
      "int"
    ],
    "method": "setFuseTicks",
    "id": "org.bukkit.entity.TNTPrimed#setFuseTicks(int)",
    "class": "org.bukkit.entity.TNTPrimed"
  },
  {
    "descr": "Gets the highest non-empty (impassable) block at the given coordinates.",
    "param-names": [
      "World",
      "Location"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location"
    ],
    "method": "getHighestBlockAt",
    "id": "org.bukkit.World#getHighestBlockAt(org.bukkit.Location)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.structure.UsageMode#values()",
    "class": "org.bukkit.block.structure.UsageMode",
    "return": "org.bukkit.block.structure.UsageMode[]"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_SIGN_STEP",
    "id": "org.bukkit.Sound#BLOCK_HANGING_SIGN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block face that was hit, if it was a block that was hit and the\\nface was provided in the vent.",
    "method": "getHitBlockFace",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getHitBlockFace()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "The particles shown when a dripstone drips lava or water.\\nThis effect requires a dripstone at the location as well as lava or water\\nat the root of the dripstone.",
    "static": true,
    "field": "DRIPPING_DRIPSTONE",
    "id": "org.bukkit.Effect#DRIPPING_DRIPSTONE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "SHULKER",
    "id": "org.bukkit.loot.LootTables#SHULKER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_HOE",
    "id": "org.bukkit.Material#LEGACY_IRON_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the entity's current freeze ticks (amount of ticks the entity has\\nbeen in powdered snow).",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getFreezeTicks",
    "id": "org.bukkit.entity.Entity#getFreezeTicks()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "descr": "Sets whether the world will be hardcore or not.\\nIn a hardcore world the difficulty will be locked to hard.",
    "param-names": [
      "WorldCreator",
      "Hardcore"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "boolean"
    ],
    "method": "hardcore",
    "id": "org.bukkit.WorldCreator#hardcore(boolean)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "static": true,
    "field": "SNOWY_PLAINS",
    "id": "org.bukkit.block.Biome#SNOWY_PLAINS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the chest plate worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Chestplate",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setChestplate",
    "id": "org.bukkit.inventory.EntityEquipment#setChestplate(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the value of the 'short' property.",
    "param-names": ["PistonHead"],
    "param-types": ["org.bukkit.block.data.type.PistonHead"],
    "method": "isShort",
    "id": "org.bukkit.block.data.type.PistonHead#isShort()",
    "class": "org.bukkit.block.data.type.PistonHead",
    "return": "boolean"
  },
  {
    "descr": "Sets the level of this villager.\\nA villager with a level of 1 and no experience is liable to lose its\\nprofession.",
    "param-names": [
      "Villager",
      "Level"
    ],
    "param-types": [
      "org.bukkit.entity.Villager",
      "int"
    ],
    "method": "setVillagerLevel",
    "id": "org.bukkit.entity.Villager#setVillagerLevel(int)",
    "class": "org.bukkit.entity.Villager"
  },
  {
    "descr": "Creates an empty inventory of type InventoryType#CHEST with the\\nspecified size and title.",
    "param-names": [
      "Owner",
      "Size",
      "Title"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.inventory.InventoryHolder",
      "int",
      "java.lang.String"
    ],
    "method": "createInventory",
    "id": "org.bukkit.Bukkit#createInventory(org.bukkit.inventory.InventoryHolder,int,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "ARMS_UP_POTTERY_SHERD",
    "id": "org.bukkit.Material#ARMS_UP_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_ARMORER",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_ARMORER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "STRIPE_CENTER",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_CENTER",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Set the item powering the beacon.",
    "param-names": [
      "BeaconInventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.BeaconInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.BeaconInventory#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.BeaconInventory"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.MapInitializeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.MapInitializeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_LIGHT_BLUE_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_LIGHT_BLUE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BASALT_STEP",
    "id": "org.bukkit.Sound#BLOCK_BASALT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_COMMAND_CHAIN",
    "id": "org.bukkit.Material#LEGACY_COMMAND_CHAIN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_FALL",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_SEA_LANTERN",
    "id": "org.bukkit.Material#LEGACY_SEA_LANTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the final amount of arrows in the entity's body.",
    "param-names": ["New Amount"],
    "param-types": ["int"],
    "method": "setNewAmount",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#setNewAmount(int)",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent"
  },
  {
    "descr": "Get the previously set compass target.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getCompassTarget",
    "id": "org.bukkit.entity.Player#getCompassTarget()",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_EAT",
    "id": "org.bukkit.Sound#ENTITY_FOX_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the pitch these sounds are played at.\\nNote that this pitch does not always represent the actual pitch received\\nby the client.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getPitch",
    "id": "org.bukkit.SoundGroup#getPitch()",
    "class": "org.bukkit.SoundGroup",
    "return": "float"
  },
  {
    "descr": "Represents purple dye.",
    "static": true,
    "field": "PURPLE",
    "id": "org.bukkit.DyeColor#PURPLE",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "TUBE_CORAL",
    "id": "org.bukkit.Material#TUBE_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_CHIRP",
    "id": "org.bukkit.Sound#MUSIC_DISC_CHIRP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creative mode may fly, build instantly, become invulnerable and create\\nfree items.",
    "static": true,
    "field": "CREATIVE",
    "id": "org.bukkit.GameMode#CREATIVE",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode"
  },
  {
    "param-names": [
      "Width",
      "Height",
      "Data"
    ],
    "param-types": [
      "int",
      "int",
      "boolean[]"
    ],
    "id": "org.bukkit.map.MapFont.CharacterSprite#CharacterSprite(int,int,boolean[])",
    "class": "org.bukkit.map.MapFont.CharacterSprite"
  },
  {
    "descr": "Gets the height of the living entity's eyes above its Location.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getEyeHeight",
    "id": "org.bukkit.entity.LivingEntity#getEyeHeight()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "double"
  },
  {
    "descr": "Player takes damage",
    "static": true,
    "field": "DAMAGED",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#DAMAGED",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "A mule",
    "static": true,
    "field": "MULE",
    "id": "org.bukkit.entity.Horse.Variant#MULE",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.PigZapEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.raid.RaidFinishEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called when a chunk is unloaded",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent"
  },
  {
    "descr": "Set the Z component.",
    "param-names": [
      "Vector",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "float"
    ],
    "method": "setZ",
    "id": "org.bukkit.util.Vector#setZ(float)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Just the tip.",
    "static": true,
    "field": "TIP",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#TIP",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_HURT",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "CHERRY_SAPLING",
    "id": "org.bukkit.Material#CHERRY_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the variant of this parrot.",
    "param-names": ["Parrot"],
    "param-types": ["org.bukkit.entity.Parrot"],
    "method": "getVariant",
    "id": "org.bukkit.entity.Parrot#getVariant()",
    "class": "org.bukkit.entity.Parrot",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "descr": "Creates a new bounding box using the coordinates of the given blocks as\\ncorners.\\n\\nThe bounding box will be sized to fully contain both blocks.",
    "param-names": [
      "Corner1",
      "Corner2"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.Block"
    ],
    "method": "of",
    "id": "org.bukkit.util.BoundingBox#of(org.bukkit.block.Block,org.bukkit.block.Block)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Gets the current ItemStack on the lectern.",
    "method": "getBook",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#getBook()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_BREWING_STAND_ITEM",
    "id": "org.bukkit.Material#LEGACY_BREWING_STAND_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLAZE_POWDER",
    "id": "org.bukkit.Material#BLAZE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the amount of experience granted by breeding.",
    "method": "getExperience",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getExperience()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "int"
  },
  {
    "descr": "Apply the provided meta to the fireworks",
    "param-names": [
      "Firework",
      "Meta"
    ],
    "param-types": [
      "org.bukkit.entity.Firework",
      "org.bukkit.inventory.meta.FireworkMeta"
    ],
    "method": "setFireworkMeta",
    "id": "org.bukkit.entity.Firework#setFireworkMeta(org.bukkit.inventory.meta.FireworkMeta)",
    "class": "org.bukkit.entity.Firework"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "BAMBOO_BLOCK",
    "id": "org.bukkit.Material#BAMBOO_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: AmethystCluster",
    "static": true,
    "field": "MEDIUM_AMETHYST_BUD",
    "id": "org.bukkit.Material#MEDIUM_AMETHYST_BUD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the ClickType for this event indicates that the key was\\npressed down when the click was made.",
    "method": "isShiftClick",
    "id": "org.bukkit.event.inventory.CraftItemEvent#isShiftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the type of the boat.",
    "param-names": [
      "Boat",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Boat",
      "org.bukkit.entity.Boat.Type"
    ],
    "method": "setBoatType",
    "id": "org.bukkit.entity.Boat#setBoatType(org.bukkit.entity.Boat.Type)",
    "class": "org.bukkit.entity.Boat"
  },
  {
    "descr": "Gets the generator settings of the world that will be created or loaded.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "generatorSettings",
    "id": "org.bukkit.WorldCreator#generatorSettings()",
    "class": "org.bukkit.WorldCreator",
    "return": "java.lang.String"
  },
  {
    "descr": "Get a list of trades currently available from this merchant.",
    "param-names": ["Merchant"],
    "param-types": ["org.bukkit.inventory.Merchant"],
    "method": "getRecipes",
    "id": "org.bukkit.inventory.Merchant#getRecipes()",
    "class": "org.bukkit.inventory.Merchant",
    "return": "java.util.List"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Rotation#valueOf(java.lang.String)",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.FishHook.HookState#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.FishHook.HookState",
    "return": "org.bukkit.entity.FishHook.HookState"
  },
  {
    "descr": "Get the addition recipe item.",
    "param-names": ["SmithingRecipe"],
    "param-types": ["org.bukkit.inventory.SmithingRecipe"],
    "method": "getAddition",
    "id": "org.bukkit.inventory.SmithingRecipe#getAddition()",
    "class": "org.bukkit.inventory.SmithingRecipe",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "descr": "Sets the color of the fish's body",
    "param-names": [
      "TropicalFish",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.TropicalFish",
      "org.bukkit.DyeColor"
    ],
    "method": "setBodyColor",
    "id": "org.bukkit.entity.TropicalFish#setBodyColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.entity.TropicalFish"
  },
  {
    "descr": "Returns the reason for the unleashing.",
    "method": "getReason",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "static": true,
    "field": "POTTED_CORNFLOWER",
    "id": "org.bukkit.Material#POTTED_CORNFLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LODESTONE",
    "id": "org.bukkit.Material#LODESTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_PICKAXE",
    "id": "org.bukkit.Material#LEGACY_GOLD_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BellResonateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent",
    "return": "boolean"
  },
  {
    "descr": "Player filling the cauldron by emptying their bucket.",
    "static": true,
    "field": "BUCKET_EMPTY",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#BUCKET_EMPTY",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "boolean"
  },
  {
    "descr": "The player is not allowed to log in, due to them not being on the\\nwhite list",
    "static": true,
    "field": "KICK_WHITELIST",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#KICK_WHITELIST",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "descr": "Sets the tongue target of this frog.",
    "param-names": [
      "Frog",
      "Target"
    ],
    "param-types": [
      "org.bukkit.entity.Frog",
      "org.bukkit.entity.Entity"
    ],
    "method": "setTongueTarget",
    "id": "org.bukkit.entity.Frog#setTongueTarget(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Frog"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_ARMOR",
    "id": "org.bukkit.Sound#ENTITY_HORSE_ARMOR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a copy of the item the entity is currently holding",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getItemInHand",
    "id": "org.bukkit.inventory.EntityEquipment#getItemInHand()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": [
      "Result",
      "Max Uses"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "int"
    ],
    "id": "org.bukkit.inventory.MerchantRecipe#MerchantRecipe(org.bukkit.inventory.ItemStack,int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "BUNDLE",
    "id": "org.bukkit.Material#BUNDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Resize an image to 128x128.",
    "param-names": ["Image"],
    "static": true,
    "param-types": ["java.awt.Image"],
    "method": "resizeImage",
    "id": "org.bukkit.map.MapPalette#resizeImage(java.awt.Image)",
    "class": "org.bukkit.map.MapPalette",
    "return": "java.awt.image.BufferedImage"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_DOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_DOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BROWN_DYE",
    "id": "org.bukkit.Material#BROWN_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_REAPPEARED",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_REAPPEARED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "VILLAGE_TEMPLE",
    "id": "org.bukkit.loot.LootTables#VILLAGE_TEMPLE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the MaterialData for this stack of items",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getData",
    "id": "org.bukkit.inventory.ItemStack#getData()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "org.bukkit.material.MaterialData"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "WAXED_OXIDIZED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#WAXED_OXIDIZED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOAT",
    "id": "org.bukkit.entity.EntityType#GOAT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the new phase for the ender dragon.",
    "param-names": ["New Phase"],
    "param-types": ["org.bukkit.entity.EnderDragon.Phase"],
    "method": "setNewPhase",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#setNewPhase(org.bukkit.entity.EnderDragon.Phase)",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent"
  },
  {
    "static": true,
    "field": "HUSK",
    "id": "org.bukkit.loot.LootTables#HUSK",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the base color for this banner.\\nOnly valid for shield pseudo banners, otherwise base depends on block\\ntype",
    "param-names": [
      "Banner",
      "Color"
    ],
    "param-types": [
      "org.bukkit.block.Banner",
      "org.bukkit.DyeColor"
    ],
    "method": "setBaseColor",
    "id": "org.bukkit.block.Banner#setBaseColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.block.Banner"
  },
  {
    "descr": "The number of blocks outward from the world spawn coordinates that a\\nplayer will spawn in when first joining a server or when dying without a\\nspawnpoint.",
    "static": true,
    "field": "SPAWN_RADIUS",
    "id": "org.bukkit.GameRule#SPAWN_RADIUS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "This event is called when a service is registered.\\n\\nWarning: The order in which register and unregister events are called\\nshould not be relied upon.",
    "event": true,
    "class": "org.bukkit.event.server.ServiceRegisterEvent"
  },
  {
    "descr": "Sets the total cook time for this event",
    "param-names": ["Cook Time"],
    "param-types": ["int"],
    "method": "setTotalCookTime",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#setTotalCookTime(int)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_BOOTS",
    "id": "org.bukkit.Material#LEGACY_GOLD_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Strength with which a horse will jump.",
    "static": true,
    "field": "HORSE_JUMP_STRENGTH",
    "id": "org.bukkit.attribute.Attribute#HORSE_JUMP_STRENGTH",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "field": "BLOCK_BONE_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_BONE_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityInteractEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.inventory.InventoryType#values()",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType[]"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "PRIME_FUSE",
    "id": "org.bukkit.GameEvent#PRIME_FUSE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "The raw slot number clicked, ready for passing to InventoryView #getItem(int) This slot number is unique for the view.",
    "method": "getRawSlot",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getRawSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_HONEY_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_HONEY_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_WET_GRASS_STEP",
    "id": "org.bukkit.Sound#BLOCK_WET_GRASS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_COMPOSTER_FILL",
    "id": "org.bukkit.Sound#BLOCK_COMPOSTER_FILL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets whether a position cursor should be shown when the map is near its\\ncenter.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "isTrackingPosition",
    "id": "org.bukkit.map.MapView#isTrackingPosition()",
    "class": "org.bukkit.map.MapView",
    "return": "boolean"
  },
  {
    "descr": "Whether players can regenerate health naturally through their hunger bar.",
    "static": true,
    "field": "NATURAL_REGENERATION",
    "id": "org.bukkit.GameRule#NATURAL_REGENERATION",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Gets the repair penalty",
    "param-names": ["Repairable"],
    "param-types": ["org.bukkit.inventory.meta.Repairable"],
    "method": "getRepairCost",
    "id": "org.bukkit.inventory.meta.Repairable#getRepairCost()",
    "class": "org.bukkit.inventory.meta.Repairable",
    "return": "int"
  },
  {
    "descr": "Gets the maximum z value.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMaxZ",
    "id": "org.bukkit.util.BoundingBox#getMaxZ()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "The switch is mounted to the wall.",
    "static": true,
    "field": "WALL",
    "id": "org.bukkit.block.data.FaceAttachable.AttachedFace#WALL",
    "class": "org.bukkit.block.data.FaceAttachable.AttachedFace",
    "return": "org.bukkit.block.data.FaceAttachable.AttachedFace"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.WorldInitEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.WorldInitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "IRON_LEGGINGS",
    "id": "org.bukkit.Material#IRON_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents dark purple",
    "static": true,
    "field": "DARK_PURPLE",
    "id": "org.bukkit.ChatColor#DARK_PURPLE",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Returns an immutable list contains all winners.\\n\\nNote: Players who are considered as heroes but were not online at the\\nend would not be included in this list.",
    "method": "getWinners",
    "id": "org.bukkit.event.raid.RaidFinishEvent#getWinners()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the amount of ticks since this bell has been resonating, or 0 if the\\nbell is not currently resonating.\\n\\nA bell will typically resonate for 40 ticks.",
    "param-names": ["Bell"],
    "param-types": ["org.bukkit.block.Bell"],
    "method": "getResonatingTicks",
    "id": "org.bukkit.block.Bell#getResonatingTicks()",
    "class": "org.bukkit.block.Bell",
    "return": "int"
  },
  {
    "descr": "Send a multi-block change. This fakes a block change packet for a user\\nat multiple locations. This will not actually change the world in any\\nway.\\n\\nThis method may send multiple packets to the client depending on the\\nblocks in the collection. A packet must be sent for each chunk section\\nmodified, meaning one packet for each 16x16x16 block area. Even if only\\none block is changed in two different chunk sections, two packets will\\nbe sent.\\n\\nAdditionally, this method cannot guarantee the functionality of changes\\nbeing sent to the player in chunks not loaded by the client. It is the\\nresponsibility of the caller to ensure that the client is within range\\nof the changed blocks or to handle any side effects caused as a result.",
    "param-names": [
      "Player",
      "Blocks"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.util.Collection"
    ],
    "method": "sendBlockChanges",
    "id": "org.bukkit.entity.Player#sendBlockChanges(java.util.Collection<org.bukkit.block.BlockState>)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IMITATE_SKELETON",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IMITATE_SKELETON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.inventory.DragType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.inventory.DragType",
    "return": "org.bukkit.event.inventory.DragType"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "MANGROVE_FENCE_GATE",
    "id": "org.bukkit.Material#MANGROVE_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CLOCK",
    "id": "org.bukkit.Material#CLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Performs scalar multiplication, multiplying all components with a\\nscalar.",
    "param-names": [
      "Vector",
      "M"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "int"
    ],
    "method": "multiply",
    "id": "org.bukkit.util.Vector#multiply(int)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Adds this scalar of amount to the base value.",
    "static": true,
    "field": "ADD_SCALAR",
    "id": "org.bukkit.attribute.AttributeModifier.Operation#ADD_SCALAR",
    "class": "org.bukkit.attribute.AttributeModifier.Operation",
    "return": "org.bukkit.attribute.AttributeModifier.Operation"
  },
  {
    "static": true,
    "field": "ORANGE_TERRACOTTA",
    "id": "org.bukkit.Material#ORANGE_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When all effects are removed due to a bucket of milk.",
    "static": true,
    "field": "MILK",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#MILK",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the block the vehicle collided with",
    "method": "getBlock",
    "id": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.inventory.InventoryView.Property#values()",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property[]"
  },
  {
    "static": true,
    "field": "LIGHTNING_STRIKE",
    "id": "org.bukkit.GameEvent#LIGHTNING_STRIKE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Get the maximum number of ticks one has to wait for a fish to bite\\nafter appearing.\\n\\nThe default is 80 ticks (4 second).\\nLure does not affect this value.\\nThis will also effect the radius (0.1 * lureTime) of where\\nthe fish will appear.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getMaxLureTime",
    "id": "org.bukkit.entity.FishHook#getMaxLureTime()",
    "class": "org.bukkit.entity.FishHook",
    "return": "int"
  },
  {
    "descr": "Checks if the inventory contains any ItemStacks with the given\\nmaterial, adding to at least the minimum amount specified.",
    "param-names": [
      "Inventory",
      "Material",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.Material",
      "int"
    ],
    "method": "contains",
    "id": "org.bukkit.inventory.Inventory#contains(org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "DARK_PRISMARINE_SLAB",
    "id": "org.bukkit.Material#DARK_PRISMARINE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get result item, may be null.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Server enchantments.",
    "static": true,
    "field": "ENCHANTMENT",
    "id": "org.bukkit.Registry#ENCHANTMENT",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "static": true,
    "field": "BLOCK_FUNGUS_FALL",
    "id": "org.bukkit.Sound#BLOCK_FUNGUS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Effect#values()",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect[]"
  },
  {
    "descr": "Gets all of this faces which may be set on this block.",
    "param-names": ["MultipleFacing"],
    "param-types": ["org.bukkit.block.data.MultipleFacing"],
    "method": "getAllowedFaces",
    "id": "org.bukkit.block.data.MultipleFacing#getAllowedFaces()",
    "class": "org.bukkit.block.data.MultipleFacing",
    "return": "java.util.Set"
  },
  {
    "descr": "Sets the WorldBorder visible to this Player.",
    "param-names": [
      "Player",
      "Border"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.WorldBorder"
    ],
    "method": "setWorldBorder",
    "id": "org.bukkit.entity.Player#setWorldBorder(org.bukkit.WorldBorder)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Adds the specified Enchantment to this item stack.\\n\\nIf this item stack already contained the given enchantment (at any\\nlevel), it will be replaced.",
    "param-names": [
      "ItemStack",
      "Ench",
      "Level"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.enchantments.Enchantment",
      "int"
    ],
    "method": "addEnchantment",
    "id": "org.bukkit.inventory.ItemStack#addEnchantment(org.bukkit.enchantments.Enchantment,int)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the block the entity is changing",
    "method": "getBlock",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Get if this event should set the new spawn location for the\\nPlayer.\\n\\nThis does not remove any existing spawn location, only prevent it from\\nbeing changed (if true).\\n\\nTo change a Player's spawn location, use\\nPlayer#setBedSpawnLocation(Location).",
    "method": "shouldSetSpawnLocation",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#shouldSetSpawnLocation()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "boolean"
  },
  {
    "descr": "Decreases damage dealt by an entity.",
    "static": true,
    "field": "WEAKNESS",
    "id": "org.bukkit.potion.PotionEffectType#WEAKNESS",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "ENDER_DRAGON_SPAWN_EGG",
    "id": "org.bukkit.Material#ENDER_DRAGON_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WEAK",
    "id": "org.bukkit.entity.Panda.Gene#WEAK",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "descr": "Get a list of all blocks to be removed by the sponge.\\n\\nThis list is mutable and contains the blocks in their removed state, i.e.\\nhaving a type of Material#AIR.",
    "method": "getBlocks",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CATALYST_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CATALYST_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Strikes lightning when a mob is hit with a trident if conditions are\\nstormy",
    "static": true,
    "field": "CHANNELING",
    "id": "org.bukkit.enchantments.Enchantment#CHANNELING",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Checks if this Material can be used as fuel in a Furnace",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isFuel",
    "id": "org.bukkit.Material#isFuel()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Gets the first trusted player.",
    "param-names": ["Fox"],
    "param-types": ["org.bukkit.entity.Fox"],
    "method": "getFirstTrustedPlayer",
    "id": "org.bukkit.entity.Fox#getFirstTrustedPlayer()",
    "class": "org.bukkit.entity.Fox",
    "return": "org.bukkit.entity.AnimalTamer"
  },
  {
    "static": true,
    "field": "PALE_BLUE",
    "id": "org.bukkit.map.MapPalette#PALE_BLUE",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "static": true,
    "field": "ITEM_FRAME",
    "id": "org.bukkit.Material#ITEM_FRAME",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_RABBIT",
    "id": "org.bukkit.Material#LEGACY_RABBIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Pose#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "MANGROVE_STAIRS",
    "id": "org.bukkit.Material#MANGROVE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks for a specific custom potion effect type on this arrow.",
    "param-names": [
      "Arrow",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Arrow",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "hasCustomEffect",
    "id": "org.bukkit.entity.Arrow#hasCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.Arrow",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent"
  },
  {
    "descr": "Retrieves a list of all effected entities",
    "method": "getAffectedEntities",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getAffectedEntities()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "java.util.Collection"
  },
  {
    "descr": "Returns the item held by the armor stand.\\n\\nIf this item is empty and the player's item is also empty, there will be no\\ntransaction between the player and the armor stand. If the player's item is empty\\nbut the armor stand item is not, then the player will obtain the armor stand item.\\nIn the case that the player's item is not empty but the armor stand item is empty,\\nthe player's item will be placed on the armor stand. If both items are not empty,\\nthe items will be swapped.\\n\\nIn the case that the event is cancelled the original items will remain the same.",
    "method": "getArmorStandItem",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getArmorStandItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "The client refused to accept the resource pack.",
    "static": true,
    "field": "DECLINED",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#DECLINED",
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status"
  },
  {
    "descr": "Gets the amount of ticks that the animal will fall in love for.",
    "method": "getTicksInLove",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getTicksInLove()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "int"
  },
  {
    "descr": "BlockData: Brushable",
    "static": true,
    "field": "SUSPICIOUS_GRAVEL",
    "id": "org.bukkit.Material#SUSPICIOUS_GRAVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the total brew time for this event.",
    "param-names": ["Brew Time"],
    "param-types": ["int"],
    "method": "setTotalBrewTime",
    "id": "org.bukkit.event.block.BrewingStartEvent#setTotalBrewTime(int)",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENCHANT_THORNS_HIT",
    "id": "org.bukkit.Sound#ENCHANT_THORNS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Statistics of this type require an Item Material qualifier.",
    "static": true,
    "field": "ITEM",
    "id": "org.bukkit.Statistic.Type#ITEM",
    "class": "org.bukkit.Statistic.Type",
    "return": "org.bukkit.Statistic.Type"
  },
  {
    "static": true,
    "field": "PILLAGER",
    "id": "org.bukkit.entity.EntityType#PILLAGER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Left-clicking a block",
    "static": true,
    "field": "LEFT_CLICK_BLOCK",
    "id": "org.bukkit.event.block.Action#LEFT_CLICK_BLOCK",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "descr": "Gets the width of this interaction entity.",
    "param-names": ["Interaction"],
    "param-types": ["org.bukkit.entity.Interaction"],
    "method": "getInteractionWidth",
    "id": "org.bukkit.entity.Interaction#getInteractionWidth()",
    "class": "org.bukkit.entity.Interaction",
    "return": "float"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The sound played when a husk converts to a zombie.",
    "static": true,
    "field": "HUSK_CONVERTED_TO_ZOMBIE",
    "id": "org.bukkit.Effect#HUSK_CONVERTED_TO_ZOMBIE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "BLOCK_NYLIUM_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NYLIUM_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CARROT",
    "id": "org.bukkit.Material#CARROT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_CYAN_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_CYAN_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the value of the 'locked' property.",
    "param-names": [
      "Repeater",
      "Locked"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Repeater",
      "boolean"
    ],
    "method": "setLocked",
    "id": "org.bukkit.block.data.type.Repeater#setLocked(boolean)",
    "class": "org.bukkit.block.data.type.Repeater"
  },
  {
    "descr": "Gets the level of this villager.\\nA villager with a level of 1 and no experience is liable to lose its\\nprofession.",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "getVillagerLevel",
    "id": "org.bukkit.entity.Villager#getVillagerLevel()",
    "class": "org.bukkit.entity.Villager",
    "return": "int"
  },
  {
    "descr": "Gets a map containing all enchantments and their levels on this item.",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getEnchantments",
    "id": "org.bukkit.inventory.ItemStack#getEnchantments()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "java.util.Map"
  },
  {
    "static": true,
    "field": "AZURE_BLUET",
    "id": "org.bukkit.Material#AZURE_BLUET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Stairs.Shape#values()",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape[]"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent"
  },
  {
    "descr": "Get the DyeColor corresponding to this ShulkerBox",
    "param-names": ["ShulkerBox"],
    "param-types": ["org.bukkit.block.ShulkerBox"],
    "method": "getColor",
    "id": "org.bukkit.block.ShulkerBox#getColor()",
    "class": "org.bukkit.block.ShulkerBox",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Whether or not wait and lure time will be impacted by rain.\\nTrue by default, causes a 25% time decrease on average.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "isRainInfluenced",
    "id": "org.bukkit.entity.FishHook#isRainInfluenced()",
    "class": "org.bukkit.entity.FishHook",
    "return": "boolean"
  },
  {
    "descr": "Returns whether the item has any charged projectiles.",
    "param-names": ["CrossbowMeta"],
    "param-types": ["org.bukkit.inventory.meta.CrossbowMeta"],
    "method": "hasChargedProjectiles",
    "id": "org.bukkit.inventory.meta.CrossbowMeta#hasChargedProjectiles()",
    "class": "org.bukkit.inventory.meta.CrossbowMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SIDEBAR_AQUA",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_AQUA",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_SIGN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_HANGING_SIGN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_DEATH",
    "id": "org.bukkit.Sound#ENTITY_WOLF_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the number of times this arrow can pierce through an entity.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "getPierceLevel",
    "id": "org.bukkit.entity.AbstractArrow#getPierceLevel()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "int"
  },
  {
    "descr": "Gets the current allowed speed that a client can fly.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getFlySpeed",
    "id": "org.bukkit.entity.Player#getFlySpeed()",
    "class": "org.bukkit.entity.Player",
    "return": "float"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockDamageEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.SignChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_STEP",
    "id": "org.bukkit.Sound#ENTITY_GOAT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if this goat has its right horn.",
    "param-names": ["Goat"],
    "param-types": ["org.bukkit.entity.Goat"],
    "method": "hasRightHorn",
    "id": "org.bukkit.entity.Goat#hasRightHorn()",
    "class": "org.bukkit.entity.Goat",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the HelpMap providing help topics for this server.",
    "static": true,
    "method": "getHelpMap",
    "id": "org.bukkit.Bukkit#getHelpMap()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.help.HelpMap"
  },
  {
    "static": true,
    "field": "TORCHFLOWER",
    "id": "org.bukkit.Material#TORCHFLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "LEGACY_WHITE_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_WHITE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increases damage against arthropod targets",
    "static": true,
    "field": "DAMAGE_ARTHROPODS",
    "id": "org.bukkit.enchantments.Enchantment#DAMAGE_ARTHROPODS",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Called when a plugin is enabled.",
    "event": true,
    "class": "org.bukkit.event.server.PluginEnableEvent"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "EXPOSED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#EXPOSED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Performs a ray trace that checks for entity collisions.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the maximum\\ndistance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance",
      "Ray Size"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "double"
    ],
    "method": "rayTraceEntities",
    "id": "org.bukkit.World#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Block ignition caused by lightning.",
    "static": true,
    "field": "LIGHTNING",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#LIGHTNING",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "descr": "Set the message to broadcast.",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent"
  },
  {
    "descr": "Sets if this animal is sitting. Will remove any path that the animal\\nwas following beforehand.",
    "param-names": [
      "Sittable",
      "Sitting"
    ],
    "param-types": [
      "org.bukkit.entity.Sittable",
      "boolean"
    ],
    "method": "setSitting",
    "id": "org.bukkit.entity.Sittable#setSitting(boolean)",
    "class": "org.bukkit.entity.Sittable"
  },
  {
    "descr": "The player is not allowed to log in, due to them not being on the\\nwhite list",
    "static": true,
    "field": "KICK_WHITELIST",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#KICK_WHITELIST",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "static": true,
    "field": "VILLAGE_CARTOGRAPHER",
    "id": "org.bukkit.loot.LootTables#VILLAGE_CARTOGRAPHER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "REINFORCED_DEEPSLATE",
    "id": "org.bukkit.Material#REINFORCED_DEEPSLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the reason for the conversion that has occurred.",
    "method": "getTransformReason",
    "id": "org.bukkit.event.entity.PigZapEvent#getTransformReason()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "static": true,
    "field": "ENTITY_PILLAGER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PILLAGER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current result of the login, as an enum",
    "method": "getLoginResult",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getLoginResult()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "static": true,
    "field": "BLOCK_MANGROVE_ROOTS_FALL",
    "id": "org.bukkit.Sound#BLOCK_MANGROVE_ROOTS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Entity responsible for breeding. Breeder is null for spontaneous\\nconception.",
    "method": "getBreeder",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getBreeder()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "field": "PUFFERFISH_BUCKET",
    "id": "org.bukkit.Material#PUFFERFISH_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'age' property.",
    "param-names": [
      "Ageable",
      "Age"
    ],
    "param-types": [
      "org.bukkit.block.data.Ageable",
      "int"
    ],
    "method": "setAge",
    "id": "org.bukkit.block.data.Ageable#setAge(int)",
    "class": "org.bukkit.block.data.Ageable"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_DOOR",
    "id": "org.bukkit.Material#LEGACY_IRON_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Lock the age of the animal, setting this will prevent the animal from\\nmaturing or getting ready for mating.",
    "param-names": [
      "Breedable",
      "Lock"
    ],
    "param-types": [
      "org.bukkit.entity.Breedable",
      "boolean"
    ],
    "method": "setAgeLock",
    "id": "org.bukkit.entity.Breedable#setAgeLock(boolean)",
    "class": "org.bukkit.entity.Breedable"
  },
  {
    "descr": "Block ignition caused by lava.",
    "static": true,
    "field": "LAVA",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#LAVA",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the target involved.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "getBanTarget",
    "id": "org.bukkit.BanEntry#getBanTarget()",
    "class": "org.bukkit.BanEntry",
    "return": "java.lang.Object"
  },
  {
    "descr": "Called when a block spreads based on world conditions.\\n\\nUse BlockFormEvent to catch blocks that \"randomly\" form instead of\\nactually spread.\\n\\nExamples:\\n\\nMushrooms spreading.\\nFire spreading.\\n\\n\\nIf a Block Spread event is cancelled, the block will not spread.",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#NONE",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "static": true,
    "field": "RHOMBUS_MIDDLE",
    "id": "org.bukkit.block.banner.PatternType#RHOMBUS_MIDDLE",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "BAMBOO_MOSAIC_SLAB",
    "id": "org.bukkit.Material#BAMBOO_MOSAIC_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_SPLASH",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_SPLASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "PURPUR_SLAB",
    "id": "org.bukkit.Material#PURPUR_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the item held by the player.\\n\\nIf this item is empty and the armor stand item is also empty, there will be no\\ntransaction between the player and the armor stand. If the player's item is empty\\nbut the armor stand item is not, the player's item will be placed on the armor\\nstand. If both items are not empty, the items will be swapped.\\n\\nIn the case that this event is cancelled, the original items will remain the same.",
    "method": "getPlayerItem",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getPlayerItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets a single item stack representative of this stack choice.",
    "param-names": ["RecipeChoice"],
    "param-types": ["org.bukkit.inventory.RecipeChoice"],
    "method": "getItemStack",
    "id": "org.bukkit.inventory.RecipeChoice#getItemStack()",
    "class": "org.bukkit.inventory.RecipeChoice",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityPortalEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_HORSE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_HORSE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks the current thread against the expected primary thread for the\\nserver.\\n\\nNote: this method should not be used to indicate the current\\nsynchronized state of the runtime. A current thread matching the main\\nthread indicates that it is synchronized, but a mismatch does not\\npreclude the same assumption.",
    "static": true,
    "method": "isPrimaryThread",
    "id": "org.bukkit.Bukkit#isPrimaryThread()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Almost ripe stage",
    "static": true,
    "field": "VERY_TALL",
    "id": "org.bukkit.CropState#VERY_TALL",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "Returns the type of weather the player is currently experiencing.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPlayerWeather",
    "id": "org.bukkit.entity.Player#getPlayerWeather()",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.WeatherType"
  },
  {
    "descr": "Gets the slots to be changed in this drag.",
    "method": "getInventorySlots",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getInventorySlots()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "java.util.Set"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets if the spawn position will be used regardless of bed obstruction\\nrules.",
    "param-names": ["Forced"],
    "param-types": ["boolean"],
    "method": "setForced",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#setForced(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent"
  },
  {
    "param-names": ["Item"],
    "static": true,
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "fromItemStack",
    "id": "org.bukkit.potion.Potion#fromItemStack(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Returns a copy of this BlockData.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "clone",
    "id": "org.bukkit.block.data.BlockData#clone()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "BlockData: Hatchable",
    "static": true,
    "field": "SNIFFER_EGG",
    "id": "org.bukkit.Material#SNIFFER_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_VINDICATOR",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_VINDICATOR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the map view that is associated with this map item.\\n\\nPlugins should check that hasMapView() returns true before\\ncalling this method.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "getMapView",
    "id": "org.bukkit.inventory.meta.MapMeta#getMapView()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "org.bukkit.map.MapView"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Damage caused by running out of air while in water\\n\\nDamage: 2",
    "static": true,
    "field": "DROWNING",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#DROWNING",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Set the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": [
      "ShapelessRecipe",
      "Group"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "java.lang.String"
    ],
    "method": "setGroup",
    "id": "org.bukkit.inventory.ShapelessRecipe#setGroup(java.lang.String)",
    "class": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "method": "getDuration",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getDuration()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_HURT",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SPARSE_JUNGLE",
    "id": "org.bukkit.block.Biome#SPARSE_JUNGLE",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the value of the 'snowy' property.",
    "param-names": ["Snowable"],
    "param-types": ["org.bukkit.block.data.Snowable"],
    "method": "isSnowy",
    "id": "org.bukkit.block.data.Snowable#isSnowy()",
    "class": "org.bukkit.block.data.Snowable",
    "return": "boolean"
  },
  {
    "descr": "Get the X position of this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "getX",
    "id": "org.bukkit.map.MapCursor#getX()",
    "class": "org.bukkit.map.MapCursor",
    "return": "byte"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "CRIMSON_PRESSURE_PLATE",
    "id": "org.bukkit.Material#CRIMSON_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the structure reference that is generated.",
    "method": "getStructure",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getStructure()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "org.bukkit.generator.structure.Structure"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_BEG_FOR_FOOD",
    "id": "org.bukkit.Sound#ENTITY_CAT_BEG_FOR_FOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Ignites this Creeper, beginning its fuse.\\nThe amount of time the Creeper takes to explode will depend on what\\n#setMaxFuseTicks is set as.\\nThe resulting explosion can be cancelled by an\\norg.bukkit.event.entity.ExplosionPrimeEvent and obeys the mob\\ngriefing gamerule.",
    "param-names": ["Creeper"],
    "param-types": ["org.bukkit.entity.Creeper"],
    "method": "ignite",
    "id": "org.bukkit.entity.Creeper#ignite()",
    "class": "org.bukkit.entity.Creeper"
  },
  {
    "static": true,
    "field": "HEAD",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#HEAD",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.PluginDisableEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.PluginDisableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the reason for why the villager's career is changing.",
    "method": "getReason",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason"
  },
  {
    "static": true,
    "field": "ENTITY_BEE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_BEE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the Panda is scared",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "isScared",
    "id": "org.bukkit.entity.Panda#isScared()",
    "class": "org.bukkit.entity.Panda",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SIDEBAR_DARK_GRAY",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_DARK_GRAY",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Adds a new pattern on top of the existing\\npatterns",
    "param-names": [
      "Banner",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.block.Banner",
      "org.bukkit.block.banner.Pattern"
    ],
    "method": "addPattern",
    "id": "org.bukkit.block.Banner#addPattern(org.bukkit.block.banner.Pattern)",
    "class": "org.bukkit.block.Banner"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "SMOOTH_SANDSTONE_STAIRS",
    "id": "org.bukkit.Material#SMOOTH_SANDSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A beacon inventory, with 1 CRAFTING slot",
    "static": true,
    "field": "BEACON",
    "id": "org.bukkit.event.inventory.InventoryType#BEACON",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Set the amount of ticks that have elapsed since this guardian has initiated\\na laser attack. If set to #getLaserDuration() or greater, the guardian\\nwill inflict damage upon its target and the laser attack will complete.\\n\\nFor this value to have any effect, the guardian must have an active target\\n(see #setTarget(LivingEntity)) and be charging a laser attack (where\\n#hasLaser() is true). The client may display a different animation of\\nthe guardian laser than the set ticks.",
    "param-names": [
      "Guardian",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Guardian",
      "int"
    ],
    "method": "setLaserTicks",
    "id": "org.bukkit.entity.Guardian#setLaserTicks(int)",
    "class": "org.bukkit.entity.Guardian"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockFadeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent"
  },
  {
    "descr": "Sound of a door opening.",
    "static": true,
    "field": "IRON_DOOR_TOGGLE",
    "id": "org.bukkit.Effect#IRON_DOOR_TOGGLE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "STONE_PICKAXE",
    "id": "org.bukkit.Material#STONE_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the pattern at the specified index",
    "param-names": [
      "BannerMeta",
      "I"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BannerMeta",
      "int"
    ],
    "method": "getPattern",
    "id": "org.bukkit.inventory.meta.BannerMeta#getPattern(int)",
    "class": "org.bukkit.inventory.meta.BannerMeta",
    "return": "org.bukkit.block.banner.Pattern"
  },
  {
    "descr": "Gets the amount of time this entity has been alive (in ticks).\\n\\nWhen this number is greater than 80, it will despawn on the next tick.",
    "param-names": ["EnderSignal"],
    "param-types": ["org.bukkit.entity.EnderSignal"],
    "method": "getDespawnTimer",
    "id": "org.bukkit.entity.EnderSignal#getDespawnTimer()",
    "class": "org.bukkit.entity.EnderSignal",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.SignChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the primary Scoreboard controlled by the server.\\n\\nThis Scoreboard is saved by the server, is affected by the /scoreboard\\ncommand, and is the scoreboard shown by default to players.",
    "param-names": ["ScoreboardManager"],
    "param-types": ["org.bukkit.scoreboard.ScoreboardManager"],
    "method": "getMainScoreboard",
    "id": "org.bukkit.scoreboard.ScoreboardManager#getMainScoreboard()",
    "class": "org.bukkit.scoreboard.ScoreboardManager",
    "return": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIGHT_BLUE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LIGHT_BLUE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Create a Stonecutting recipe to craft the specified ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Source"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material"
    ],
    "id": "org.bukkit.inventory.StonecuttingRecipe#StonecuttingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material)",
    "class": "org.bukkit.inventory.StonecuttingRecipe"
  },
  {
    "descr": "Stores data for thunder state changing in a world",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent"
  },
  {
    "descr": "Creates or loads a world with the given name using the specified\\noptions.\\n\\nIf the world is already loaded, it will just return the equivalent of\\ngetWorld(creator.name()).",
    "param-names": ["Creator"],
    "static": true,
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "createWorld",
    "id": "org.bukkit.Bukkit#createWorld(org.bukkit.WorldCreator)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.World"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "SKELETON_SKULL",
    "id": "org.bukkit.Material#SKELETON_SKULL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the velocity of the item being dispensed in meters per tick.",
    "param-names": ["Vel"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "setVelocity",
    "id": "org.bukkit.event.block.BlockDispenseEvent#setVelocity(org.bukkit.util.Vector)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent"
  },
  {
    "descr": "Returns true if the entity gets persisted.\\n\\nBy default all entities are persistent. An entity will also not get\\npersisted, if it is riding an entity that is not persistent.\\n\\nThe persistent flag on players controls whether or not to save their\\nplayerdata file when they quit. If a player is directly or indirectly\\nriding a non-persistent entity, the vehicle at the root and all its\\npassengers won't get persisted.\\n\\nThis should not be confused with\\nLivingEntity#setRemoveWhenFarAway(boolean) which controls\\ndespawning of living entities. ",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isPersistent",
    "id": "org.bukkit.entity.Entity#isPersistent()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Gets a copy of the item the player is currently holding\\nin their off hand.",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getItemInOffHand",
    "id": "org.bukkit.inventory.PlayerInventory#getItemInOffHand()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the block that the living entity has targeted.\\n\\nThis method considers all blocks as 1x1x1 in size. To take exact block\\ncollision shapes into account, see #getTargetBlockExact(int,\\nFluidCollisionMode).",
    "param-names": [
      "LivingEntity",
      "Transparent",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "java.util.Set",
      "int"
    ],
    "method": "getTargetBlock",
    "id": "org.bukkit.entity.LivingEntity#getTargetBlock(java.util.Set<org.bukkit.Material>,int)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the entity that was hit, if it was an entity that was hit.",
    "method": "getHitEntity",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getHitEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the world's ticks per SpawnCategory mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn SpawnCategory mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn SpawnCategory mobs in\\nthis world on every tick.\\nA value of 400 will mean the server will attempt to spawn SpawnCategory mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, SpawnCategory mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Spawn Category",
      "Ticks Per Category Spawn"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.SpawnCategory",
      "int"
    ],
    "method": "setTicksPerSpawns",
    "id": "org.bukkit.World#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Returns whether the armor stand has a base plate.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "hasBasePlate",
    "id": "org.bukkit.entity.ArmorStand#hasBasePlate()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "COMMAND_BLOCK_MINECART",
    "id": "org.bukkit.Material#COMMAND_BLOCK_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the world's ticks per water ambient mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn water ambient mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water ambient mobs in\\nthis world on every tick.\\nA value of 400 will mean the server will attempt to spawn water ambient mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, water ambient mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Ticks Per Ambient Spawns"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setTicksPerWaterAmbientSpawns",
    "id": "org.bukkit.World#setTicksPerWaterAmbientSpawns(int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_TROPICAL_FISH_HURT",
    "id": "org.bukkit.Sound#ENTITY_TROPICAL_FISH_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the secondary item being used for the enchant.",
    "param-names": ["EnchantingInventory"],
    "param-types": ["org.bukkit.inventory.EnchantingInventory"],
    "method": "getSecondary",
    "id": "org.bukkit.inventory.EnchantingInventory#getSecondary()",
    "class": "org.bukkit.inventory.EnchantingInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Returns the tone of this note.",
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "getTone",
    "id": "org.bukkit.Note#getTone()",
    "class": "org.bukkit.Note",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "descr": "Get the experience dropped by the block after the event has processed",
    "method": "getExpToDrop",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getExpToDrop()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "PURPLE_CONCRETE",
    "id": "org.bukkit.Material#PURPLE_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TOTAL_WORLD_TIME",
    "id": "org.bukkit.Statistic#TOTAL_WORLD_TIME",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ZOMBIFIED_PIGLIN",
    "id": "org.bukkit.loot.LootTables#ZOMBIFIED_PIGLIN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "PINK_CONCRETE",
    "id": "org.bukkit.Material#PINK_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether this camel is dashing (sprinting).",
    "param-names": ["Camel"],
    "param-types": ["org.bukkit.entity.Camel"],
    "method": "isDashing",
    "id": "org.bukkit.entity.Camel#isDashing()",
    "class": "org.bukkit.entity.Camel",
    "return": "boolean"
  },
  {
    "descr": "Gets the location name that is set.\\n\\nPlugins should check that hasLocationName() returns true\\nbefore calling this method.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "getLocationName",
    "id": "org.bukkit.inventory.meta.MapMeta#getLocationName()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "PORKCHOP",
    "id": "org.bukkit.Material#PORKCHOP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A large ball effect.",
    "static": true,
    "field": "BALL_LARGE",
    "id": "org.bukkit.FireworkEffect.Type#BALL_LARGE",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "descr": "Returns the raid involved with this event.",
    "method": "getRaid",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getRaid()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "org.bukkit.Raid"
  },
  {
    "descr": "Gets the age of this mob.",
    "param-names": ["Tadpole"],
    "param-types": ["org.bukkit.entity.Tadpole"],
    "method": "getAge",
    "id": "org.bukkit.entity.Tadpole#getAge()",
    "class": "org.bukkit.entity.Tadpole",
    "return": "int"
  },
  {
    "descr": "Sets the reason why the player is getting kicked",
    "param-names": ["Kick Reason"],
    "param-types": ["java.lang.String"],
    "method": "setReason",
    "id": "org.bukkit.event.player.PlayerKickEvent#setReason(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "BUBBLE_CORAL_FAN",
    "id": "org.bukkit.Material#BUBBLE_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Like #FIREBALL but with added effects.",
    "static": true,
    "field": "DRAGON_FIREBALL",
    "id": "org.bukkit.entity.EntityType#DRAGON_FIREBALL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the other parent of the newly born entity.",
    "method": "getFather",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getFather()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Gets the maximum allowed value of the 'level' property.",
    "param-names": ["Levelled"],
    "param-types": ["org.bukkit.block.data.Levelled"],
    "method": "getMaximumLevel",
    "id": "org.bukkit.block.data.Levelled#getMaximumLevel()",
    "class": "org.bukkit.block.data.Levelled",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Instrument#values()",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument[]"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_ACACIA_WOOD",
    "id": "org.bukkit.Material#STRIPPED_ACACIA_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COD",
    "id": "org.bukkit.Material#COD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RED",
    "id": "org.bukkit.entity.Cat.Type#RED",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Gets the firework color that this dye represents.",
    "param-names": ["DyeColor"],
    "param-types": ["org.bukkit.DyeColor"],
    "method": "getFireworkColor",
    "id": "org.bukkit.DyeColor#getFireworkColor()",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Gets the llama's color.",
    "param-names": ["Llama"],
    "param-types": ["org.bukkit.entity.Llama"],
    "method": "getColor",
    "id": "org.bukkit.entity.Llama#getColor()",
    "class": "org.bukkit.entity.Llama",
    "return": "org.bukkit.entity.Llama.Color"
  },
  {
    "static": true,
    "field": "LEGACY_WATER",
    "id": "org.bukkit.Material#LEGACY_WATER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_AGGRESSIVE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PANDA_AGGRESSIVE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player that triggered the fertilization.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "RAW_IRON_BLOCK",
    "id": "org.bukkit.Material#RAW_IRON_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Inventory that picked up the item",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets the display name that is set.\\n\\nPlugins should check that hasDisplayName() returns true\\nbefore calling this method.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getDisplayName",
    "id": "org.bukkit.inventory.meta.ItemMeta#getDisplayName()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the ItemStack the thrown projectile will display.",
    "param-names": ["ThrowableProjectile"],
    "param-types": ["org.bukkit.entity.ThrowableProjectile"],
    "method": "getItem",
    "id": "org.bukkit.entity.ThrowableProjectile#getItem()",
    "class": "org.bukkit.entity.ThrowableProjectile",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets whether this Endermite was spawned by a player.\\nAn Endermite spawned by a player will be attacked by nearby Enderman.",
    "param-names": ["Endermite"],
    "param-types": ["org.bukkit.entity.Endermite"],
    "method": "isPlayerSpawned",
    "id": "org.bukkit.entity.Endermite#isPlayerSpawned()",
    "class": "org.bukkit.entity.Endermite",
    "return": "boolean"
  },
  {
    "descr": "Because the difficulty has been changed to peaceful.",
    "static": true,
    "field": "PEACE",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#PEACE",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "static": true,
    "field": "BLOCK_POWDER_SNOW_FALL",
    "id": "org.bukkit.Sound#BLOCK_POWDER_SNOW_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Thrown whenever a Player dies",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_LAND",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SOUL_SAND",
    "id": "org.bukkit.Material#SOUL_SAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'has_book' property.",
    "param-names": ["Lectern"],
    "param-types": ["org.bukkit.block.data.type.Lectern"],
    "method": "hasBook",
    "id": "org.bukkit.block.data.type.Lectern#hasBook()",
    "class": "org.bukkit.block.data.type.Lectern",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.GameMode#valueOf(java.lang.String)",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IMITATE_PIGLIN",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IMITATE_PIGLIN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents jungle trees.",
    "static": true,
    "field": "JUNGLE",
    "id": "org.bukkit.TreeSpecies#JUNGLE",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "static": true,
    "field": "SELF",
    "id": "org.bukkit.block.BlockFace#SELF",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Immediately explode this minecart with the power assumed by its current\\nmovement.",
    "param-names": ["ExplosiveMinecart"],
    "param-types": ["org.bukkit.entity.minecart.ExplosiveMinecart"],
    "method": "explode",
    "id": "org.bukkit.entity.minecart.ExplosiveMinecart#explode()",
    "class": "org.bukkit.entity.minecart.ExplosiveMinecart"
  },
  {
    "descr": "Server fluids.",
    "static": true,
    "field": "FLUID",
    "id": "org.bukkit.Registry#FLUID",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerChatEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent"
  },
  {
    "descr": "Gets if this chunk was newly created or not.\\n\\nNote: Do not use this to generated blocks in a newly generated chunk.\\nUse a BlockPopulator instead.",
    "method": "isNewChunk",
    "id": "org.bukkit.event.world.ChunkLoadEvent#isNewChunk()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "WARPED_TRAPDOOR",
    "id": "org.bukkit.Material#WARPED_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the current fuel.",
    "param-names": [
      "FurnaceInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.FurnaceInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setFuel",
    "id": "org.bukkit.inventory.FurnaceInventory#setFuel(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.FurnaceInventory"
  },
  {
    "static": true,
    "field": "ENTITY_VINDICATOR_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_VINDICATOR_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Strikes lightning at the given Location",
    "param-names": [
      "World",
      "Loc"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location"
    ],
    "method": "strikeLightning",
    "id": "org.bukkit.World#strikeLightning(org.bukkit.Location)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.LightningStrike"
  },
  {
    "descr": "BlockData: Rail",
    "static": true,
    "field": "RAIL",
    "id": "org.bukkit.Material#RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the limit for number of monsters that can spawn in a chunk in this\\nworld\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setMonsterSpawnLimit",
    "id": "org.bukkit.World#setMonsterSpawnLimit(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Maximum health of an Entity.",
    "static": true,
    "field": "GENERIC_MAX_HEALTH",
    "id": "org.bukkit.attribute.Attribute#GENERIC_MAX_HEALTH",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "field": "LEGACY_WALL_SIGN",
    "id": "org.bukkit.Material#LEGACY_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the duration which this cloud will exist for (in ticks).",
    "param-names": [
      "AreaEffectCloud",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "int"
    ],
    "method": "setDuration",
    "id": "org.bukkit.entity.AreaEffectCloud#setDuration(int)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "descr": "Gets whether the turtle has an egg",
    "param-names": ["Turtle"],
    "param-types": ["org.bukkit.entity.Turtle"],
    "method": "hasEgg",
    "id": "org.bukkit.entity.Turtle#hasEgg()",
    "class": "org.bukkit.entity.Turtle",
    "return": "boolean"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the team's ability to see name tags",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getNameTagVisibility",
    "id": "org.bukkit.scoreboard.Team#getNameTagVisibility()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "org.bukkit.scoreboard.NameTagVisibility"
  },
  {
    "static": true,
    "field": "BLOCK_LANTERN_STEP",
    "id": "org.bukkit.Sound#BLOCK_LANTERN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.EntityEffect#valueOf(java.lang.String)",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "BLOCK_POLISHED_DEEPSLATE_HIT",
    "id": "org.bukkit.Sound#BLOCK_POLISHED_DEEPSLATE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_TRIPWIRE_HOOK",
    "id": "org.bukkit.Material#LEGACY_TRIPWIRE_HOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_ACTIVATOR_RAIL",
    "id": "org.bukkit.Material#LEGACY_ACTIVATOR_RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_MONSTER_EGGS",
    "id": "org.bukkit.Material#LEGACY_MONSTER_EGGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent"
  },
  {
    "descr": "Gets the location this player moved from",
    "method": "getFrom",
    "id": "org.bukkit.event.player.PlayerMoveEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the height of the specified face.",
    "param-names": [
      "Wall",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Wall",
      "org.bukkit.block.BlockFace"
    ],
    "method": "getHeight",
    "id": "org.bukkit.block.data.type.Wall#getHeight(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.data.type.Wall",
    "return": "org.bukkit.block.data.type.Wall.Height"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WANDERING_TRADER",
    "id": "org.bukkit.entity.EntityType#WANDERING_TRADER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns the color of the pattern",
    "param-names": ["Pattern"],
    "param-types": ["org.bukkit.block.banner.Pattern"],
    "method": "getColor",
    "id": "org.bukkit.block.banner.Pattern#getColor()",
    "class": "org.bukkit.block.banner.Pattern",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "SHEEP_YELLOW",
    "id": "org.bukkit.loot.LootTables#SHEEP_YELLOW",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "DEEP_COLD_OCEAN",
    "id": "org.bukkit.block.Biome#DEEP_COLD_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "SMOOTH_STONE",
    "id": "org.bukkit.Material#SMOOTH_STONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_MULE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_MULE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get if the falling block will not become a block upon landing and not drop\\nan item.\\n\\nUnlike #setDropItem(boolean), this property will prevent the block\\nfrom forming into a block when it lands, causing it to disappear. If this\\nproperty is true and #getDropItem() is true, an item will\\nNOT be dropped.",
    "param-names": [
      "FallingBlock",
      "Cancel Drop"
    ],
    "param-types": [
      "org.bukkit.entity.FallingBlock",
      "boolean"
    ],
    "method": "setCancelDrop",
    "id": "org.bukkit.entity.FallingBlock#setCancelDrop(boolean)",
    "class": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the state of the block where it will form or spread to.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.BlockGrowEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Gets the Entity being put into the bucket.",
    "method": "getEntity",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sound of a door closing.",
    "static": true,
    "field": "IRON_TRAPDOOR_CLOSE",
    "id": "org.bukkit.Effect#IRON_TRAPDOOR_CLOSE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "PRISMARINE_WALL",
    "id": "org.bukkit.Material#PRISMARINE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SKULL",
    "id": "org.bukkit.Material#LEGACY_SKULL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Determine the type of inventory involved in the transaction. This\\nindicates the window style being shown. It will never return PLAYER,\\nsince that is common to all windows.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getType",
    "id": "org.bukkit.inventory.InventoryView#getType()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Source",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.CampfireRecipe#CampfireRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material,float,int)",
    "class": "org.bukkit.inventory.CampfireRecipe"
  },
  {
    "static": true,
    "field": "ENTITY_SPIDER_STEP",
    "id": "org.bukkit.Sound#ENTITY_SPIDER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether this ClickType represents a right click.",
    "param-names": ["ClickType"],
    "param-types": ["org.bukkit.event.inventory.ClickType"],
    "method": "isRightClick",
    "id": "org.bukkit.event.inventory.ClickType#isRightClick()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "boolean"
  },
  {
    "descr": "Sets the result of this event. This will change whether or not this\\nevent is considered cancelled.",
    "param-names": ["New Result"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.SmithItemEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent"
  },
  {
    "descr": "Gets the chance of the chest plate being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getChestplateDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getChestplateDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_BUTTON_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_BUTTON_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLACK_CONCRETE",
    "id": "org.bukkit.Material#BLACK_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BUBBLE_CORAL_BLOCK",
    "id": "org.bukkit.Material#BUBBLE_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the profile of the player who owns the skull. This player profile\\nmay appear as the texture depending on skull type.\\n\\nThe profile must contain both a unique id and a skin texture. If either\\nof these is missing, the profile must contain a name by which the server\\nwill then attempt to look up the unique id and skin texture.",
    "param-names": [
      "SkullMeta",
      "Profile"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SkullMeta",
      "org.bukkit.profile.PlayerProfile"
    ],
    "method": "setOwnerProfile",
    "id": "org.bukkit.inventory.meta.SkullMeta#setOwnerProfile(org.bukkit.profile.PlayerProfile)",
    "class": "org.bukkit.inventory.meta.SkullMeta"
  },
  {
    "static": true,
    "field": "BLOCK_WOOD_STEP",
    "id": "org.bukkit.Sound#BLOCK_WOOD_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_FRAME_BREAK",
    "id": "org.bukkit.Sound#ENTITY_ITEM_FRAME_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the world that this location resides in",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getWorld",
    "id": "org.bukkit.Location#getWorld()",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets whether the entity is invisible or not.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isInvisible",
    "id": "org.bukkit.entity.LivingEntity#isInvisible()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Large plant native to The End",
    "static": true,
    "field": "CHORUS_PLANT",
    "id": "org.bukkit.TreeType#CHORUS_PLANT",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "PARTICLE_SOUL_ESCAPE",
    "id": "org.bukkit.Sound#PARTICLE_SOUL_ESCAPE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BOOK",
    "id": "org.bukkit.Material#BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "WALL_TORCH",
    "id": "org.bukkit.Material#WALL_TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the player's selected main hand",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getMainHand",
    "id": "org.bukkit.entity.HumanEntity#getMainHand()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.MainHand"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerRegisterChannelEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Check if this is tamed\\n\\nIf something is tamed then a player can not tame it through normal\\nmethods, even if it does not belong to anyone in particular.",
    "param-names": ["Tameable"],
    "param-types": ["org.bukkit.entity.Tameable"],
    "method": "isTamed",
    "id": "org.bukkit.entity.Tameable#isTamed()",
    "class": "org.bukkit.entity.Tameable",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "STRIDER",
    "id": "org.bukkit.loot.LootTables#STRIDER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the amount of damage caused by the event after all damage\\nreduction is applied.",
    "method": "getFinalDamage",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getFinalDamage()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "double"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the Biome at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location"
    ],
    "method": "getBiome",
    "id": "org.bukkit.RegionAccessor#getBiome(org.bukkit.Location)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Returns the simulation distance used for this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getSimulationDistance",
    "id": "org.bukkit.World#getSimulationDistance()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "CHERRY_STAIRS",
    "id": "org.bukkit.Material#CHERRY_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the caption on this cursor.",
    "param-names": [
      "MapCursor",
      "Caption"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "java.lang.String"
    ],
    "method": "setCaption",
    "id": "org.bukkit.map.MapCursor#setCaption(java.lang.String)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "COOKED_RABBIT",
    "id": "org.bukkit.Material#COOKED_RABBIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when an ItemStack is successfully burned as fuel in a furnace.",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Damage caused by /kill command\\n\\nDamage: Float#MAX_VALUE",
    "static": true,
    "field": "KILL",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#KILL",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Sets the new result of the login, as an enum",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"],
    "method": "setLoginResult",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#setLoginResult(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "descr": "Gets the class of values associated with this memory.",
    "param-names": ["MemoryKey"],
    "param-types": ["org.bukkit.entity.memory.MemoryKey"],
    "method": "getMemoryClass",
    "id": "org.bukkit.entity.memory.MemoryKey#getMemoryClass()",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "java.lang.Class"
  },
  {
    "descr": "A EulerAngle with every axis set to 0",
    "static": true,
    "field": "ZERO",
    "id": "org.bukkit.util.EulerAngle#ZERO",
    "class": "org.bukkit.util.EulerAngle",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_CAST_SPELL",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_CAST_SPELL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the level of current fuel for brewing.",
    "param-names": ["BrewingStand"],
    "param-types": ["org.bukkit.block.BrewingStand"],
    "method": "getFuelLevel",
    "id": "org.bukkit.block.BrewingStand#getFuelLevel()",
    "class": "org.bukkit.block.BrewingStand",
    "return": "int"
  },
  {
    "static": true,
    "field": "RED_NETHER_BRICKS",
    "id": "org.bukkit.Material#RED_NETHER_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Play a sound for a player at the location of the entity.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "Player",
      "Entity",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Entity",
      "java.lang.String",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.entity.Entity,java.lang.String,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.SpawnChangeEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "GRAY_CARPET",
    "id": "org.bukkit.Material#GRAY_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerJoinEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_GRASS",
    "id": "org.bukkit.Material#LEGACY_GRASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds a ban to this list. If a previous ban exists, this will\\nupdate the previous entry.",
    "param-names": [
      "BanList",
      "Target",
      "Reason",
      "Duration",
      "Source"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.Object",
      "java.lang.String",
      "java.time.Duration",
      "java.lang.String"
    ],
    "method": "addBan",
    "id": "org.bukkit.BanList#addBan(T,java.lang.String,java.time.Duration,java.lang.String)",
    "class": "org.bukkit.BanList",
    "return": "org.bukkit.BanEntry"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Event fired when a dispenser shears a nearby sheep.",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent"
  },
  {
    "static": true,
    "field": "ENTITY_POLAR_BEAR_HURT",
    "id": "org.bukkit.Sound#ENTITY_POLAR_BEAR_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Resets the title displayed to the player. This will clear the displayed\\ntitle / subtitle and reset timings to their default values.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "resetTitle",
    "id": "org.bukkit.entity.Player#resetTitle()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_RABBIT_JUMP",
    "id": "org.bukkit.Sound#ENTITY_RABBIT_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Barrel",
    "static": true,
    "field": "BARREL",
    "id": "org.bukkit.Material#BARREL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WINDSWEPT_SAVANNA",
    "id": "org.bukkit.block.Biome#WINDSWEPT_SAVANNA",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "clone",
    "id": "org.bukkit.inventory.meta.ItemMeta#clone()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_EAT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the org.bukkit.event.Event.Result of this event. The Result describes the\\nbehavior that will be applied to the inventory in relation to this\\nevent.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "descr": "Gets the value of the 'type' property.",
    "param-names": ["Chest"],
    "param-types": ["org.bukkit.block.data.type.Chest"],
    "method": "getType",
    "id": "org.bukkit.block.data.type.Chest#getType()",
    "class": "org.bukkit.block.data.type.Chest",
    "return": "org.bukkit.block.data.type.Chest.Type"
  },
  {
    "descr": "Gets the total cook time associated with this event.",
    "method": "getTotalCookTime",
    "id": "org.bukkit.event.block.CampfireStartEvent#getTotalCookTime()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_BANNER",
    "id": "org.bukkit.Material#LEGACY_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DOWN",
    "id": "org.bukkit.block.BlockFace#DOWN",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the display block for this minecart.\\nThis function will return the type AIR if none is set.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getDisplayBlock",
    "id": "org.bukkit.entity.Minecart#getDisplayBlock()",
    "class": "org.bukkit.entity.Minecart",
    "return": "org.bukkit.material.MaterialData"
  },
  {
    "descr": "Get the type of the firework effect.",
    "param-names": ["FireworkEffect"],
    "param-types": ["org.bukkit.FireworkEffect"],
    "method": "getType",
    "id": "org.bukkit.FireworkEffect#getType()",
    "class": "org.bukkit.FireworkEffect",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.SculkSensor.Phase#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.SculkSensor.Phase",
    "return": "org.bukkit.block.data.type.SculkSensor.Phase"
  },
  {
    "descr": "Finished the raid.",
    "static": true,
    "field": "FINISHED",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#FINISHED",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "descr": "Sets the radius, in blocks, around each worlds spawn point to protect.",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["int"],
    "method": "setSpawnRadius",
    "id": "org.bukkit.Bukkit#setSpawnRadius(int)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Sets if the client is displayed a 'scaled' health, that is, health on a\\nscale from 0-#getHealthScale().\\n\\nDisplayed health follows a simple formula displayedHealth =\\ngetHealth() / getMaxHealth() * getHealthScale().",
    "param-names": [
      "Player",
      "Scale"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "boolean"
    ],
    "method": "setHealthScaled",
    "id": "org.bukkit.entity.Player#setHealthScaled(boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the player's current timestamp.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPlayerTime",
    "id": "org.bukkit.entity.Player#getPlayerTime()",
    "class": "org.bukkit.entity.Player",
    "return": "long"
  },
  {
    "descr": "Adds this user to the ProfileBanList. If a previous ban exists, this will\\nupdate the entry.",
    "param-names": [
      "Player",
      "Reason",
      "Expires",
      "Source",
      "Kick Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.time.Instant",
      "java.lang.String",
      "boolean"
    ],
    "method": "ban",
    "id": "org.bukkit.entity.Player#ban(java.lang.String,java.time.Instant,java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Set whether or not this explosive's explosion causes fire",
    "param-names": [
      "Explosive",
      "Is Incendiary"
    ],
    "param-types": [
      "org.bukkit.entity.Explosive",
      "boolean"
    ],
    "method": "setIsIncendiary",
    "id": "org.bukkit.entity.Explosive#setIsIncendiary(boolean)",
    "class": "org.bukkit.entity.Explosive"
  },
  {
    "descr": "Gets the date this ban expires on, or null for no defined end date.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "getExpiration",
    "id": "org.bukkit.BanEntry#getExpiration()",
    "class": "org.bukkit.BanEntry",
    "return": "java.util.Date"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the LivingEntity to which this firework is attached.\\n\\nWhen attached to an entity, the firework effect will act as normal but\\nremain positioned on the entity. If the entity LivingEntity#isGliding()\\nis gliding, then the entity will receive a boost in the direction that\\nthey are looking.",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "getAttachedTo",
    "id": "org.bukkit.entity.Firework#getAttachedTo()",
    "class": "org.bukkit.entity.Firework",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Add a trail to the firework effect.",
    "param-names": ["FireworkEffect.Builder"],
    "param-types": ["org.bukkit.FireworkEffect.Builder"],
    "method": "withTrail",
    "id": "org.bukkit.FireworkEffect.Builder#withTrail()",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "This event is called when a command is run by a non-player. It is\\ncalled early in the command handling process, and modifications in this\\nevent (via #setCommand(String)) will be shown in the behavior.\\n\\nMany plugins will have no use for this event, and you should\\nattempt to avoid using it if it is not necessary.\\n\\nSome examples of valid uses for this event are:\\n\\nLogging executed commands to a separate file\\nVariable substitution. For example, replacing ${ip:Steve}\\nwith the connection IP of the player named Steve, or simulating the\\n@a and @p decorators used by Command Blocks\\nfor plugins that do not handle it.\\nConditionally blocking commands belonging to other plugins.\\nPer-sender command aliases. For example, after the console runs the\\ncommand /calias cr gamemode creative, the next time they\\nrun /cr, it gets replaced into\\n/gamemode creative. (Global command aliases should be\\ndone by registering the alias.)\\n\\n\\nExamples of incorrect uses are:\\n\\nUsing this event to run command logic\\n\\n\\nIf the event is cancelled, processing of the command will halt.\\n\\nThe state of whether or not there is a slash (/) at the\\nbeginning of the message should be preserved. If a slash is added or\\nremoved, unexpected behavior may result.",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent"
  },
  {
    "descr": "Get the type of entity this egg will spawn.",
    "param-names": ["SpawnEggMeta"],
    "param-types": ["org.bukkit.inventory.meta.SpawnEggMeta"],
    "method": "getSpawnedType",
    "id": "org.bukkit.inventory.meta.SpawnEggMeta#getSpawnedType()",
    "class": "org.bukkit.inventory.meta.SpawnEggMeta",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.NotePlayEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.inventory.InventoryAction#valueOf(java.lang.String)",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Returns an array of all the registered PotionEffectTypes.\\nThis array is not necessarily in any particular order.",
    "static": true,
    "method": "values",
    "id": "org.bukkit.potion.PotionEffectType#values()",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType[]"
  },
  {
    "descr": "In an enchanting inventory, the bottom button's enchantment's id",
    "static": true,
    "field": "ENCHANT_ID3",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_ID3",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "LEGACY_GREEN_RECORD",
    "id": "org.bukkit.Material#LEGACY_GREEN_RECORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the new current of this block",
    "method": "getNewCurrent",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#getNewCurrent()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "int"
  },
  {
    "descr": "Gets the player's name.",
    "method": "getName",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets whether the block can be built here or not.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setBuildable",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#setBuildable(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "MANGROVE_SIGN",
    "id": "org.bukkit.Material#MANGROVE_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the llama's strength. A higher strength llama will have more\\ninventory slots and be more threatening to entities.",
    "param-names": ["Llama"],
    "param-types": ["org.bukkit.entity.Llama"],
    "method": "getStrength",
    "id": "org.bukkit.entity.Llama#getStrength()",
    "class": "org.bukkit.entity.Llama",
    "return": "int"
  },
  {
    "descr": "Gets the value of the given statistic for this player.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Material"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.Material"
    ],
    "method": "getStatistic",
    "id": "org.bukkit.OfflinePlayer#getStatistic(org.bukkit.Statistic,org.bukkit.Material)",
    "class": "org.bukkit.OfflinePlayer",
    "return": "int"
  },
  {
    "static": true,
    "field": "CREEPER_BANNER_PATTERN",
    "id": "org.bukkit.Material#CREEPER_BANNER_PATTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether the armor stand has a base plate.",
    "param-names": [
      "ArmorStand",
      "Base Plate"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "boolean"
    ],
    "method": "setBasePlate",
    "id": "org.bukkit.entity.ArmorStand#setBasePlate(boolean)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Sets the value of the 'orientation' property.",
    "param-names": [
      "Jigsaw",
      "Orientation"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Jigsaw",
      "org.bukkit.block.data.type.Jigsaw.Orientation"
    ],
    "method": "setOrientation",
    "id": "org.bukkit.block.data.type.Jigsaw#setOrientation(org.bukkit.block.data.type.Jigsaw.Orientation)",
    "class": "org.bukkit.block.data.type.Jigsaw"
  },
  {
    "descr": "Gets the value of the connection throttle setting.",
    "static": true,
    "method": "getConnectionThrottle",
    "id": "org.bukkit.Bukkit#getConnectionThrottle()",
    "class": "org.bukkit.Bukkit",
    "return": "long"
  },
  {
    "descr": "Get the maximum amount of bottles present on this stand.",
    "param-names": ["BrewingStand"],
    "param-types": ["org.bukkit.block.data.type.BrewingStand"],
    "method": "getMaximumBottles",
    "id": "org.bukkit.block.data.type.BrewingStand#getMaximumBottles()",
    "class": "org.bukkit.block.data.type.BrewingStand",
    "return": "int"
  },
  {
    "descr": "Gets the value of the 'persistent' property.",
    "param-names": ["Leaves"],
    "param-types": ["org.bukkit.block.data.type.Leaves"],
    "method": "isPersistent",
    "id": "org.bukkit.block.data.type.Leaves#isPersistent()",
    "class": "org.bukkit.block.data.type.Leaves",
    "return": "boolean"
  },
  {
    "descr": "Sets the remaining lifespan of this entity.",
    "param-names": [
      "Vex",
      "Life Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Vex",
      "int"
    ],
    "method": "setLifeTicks",
    "id": "org.bukkit.entity.Vex#setLifeTicks(int)",
    "class": "org.bukkit.entity.Vex"
  },
  {
    "descr": "Set the spawner mob type.",
    "param-names": [
      "CreatureSpawner",
      "Creature Type"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "java.lang.String"
    ],
    "method": "setCreatureTypeByName",
    "id": "org.bukkit.block.CreatureSpawner#setCreatureTypeByName(java.lang.String)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "Send multiple equipment changes for the target entity. This will not\\nactually change the entity's equipment in any way.",
    "param-names": [
      "Player",
      "Entity",
      "Items"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.LivingEntity",
      "java.util.Map"
    ],
    "method": "sendEquipmentChange",
    "id": "org.bukkit.entity.Player#sendEquipmentChange(org.bukkit.entity.LivingEntity,java.util.Map<org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack>)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Whether a message appears in chat when a player dies.",
    "static": true,
    "field": "SHOW_DEATH_MESSAGES",
    "id": "org.bukkit.GameRule#SHOW_DEATH_MESSAGES",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "LEGACY_DISPENSER",
    "id": "org.bukkit.Material#LEGACY_DISPENSER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_PREPARE_RAM",
    "id": "org.bukkit.Sound#ENTITY_GOAT_PREPARE_RAM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.SpawnChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "ORANGE_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#ORANGE_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_BADLANDS",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_BADLANDS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_BEACON",
    "id": "org.bukkit.Material#LEGACY_BEACON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This method checks the item meta to confirm that it is applicable (no\\ndata lost if applied) to the specified Material.\\n\\nA SkullMeta would not be valid for a sword, but a normal ItemMeta from an enchanted dirt block would.",
    "param-names": [
      "ItemFactory",
      "Meta",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.Material"
    ],
    "method": "isApplicable",
    "id": "org.bukkit.inventory.ItemFactory#isApplicable(org.bukkit.inventory.meta.ItemMeta,org.bukkit.Material)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SWAMP",
    "id": "org.bukkit.block.Biome#SWAMP",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the maximum number of uses this trade has.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getMaxUses",
    "id": "org.bukkit.inventory.MerchantRecipe#getMaxUses()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_SQUID_DEATH",
    "id": "org.bukkit.Sound#ENTITY_GLOW_SQUID_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Instrument"],
    "param-types": ["org.bukkit.Instrument"],
    "method": "getType",
    "id": "org.bukkit.Instrument#getType()",
    "class": "org.bukkit.Instrument",
    "return": "byte"
  },
  {
    "descr": "The sound played when a book page is being turned.",
    "static": true,
    "field": "BOOK_PAGE_TURN",
    "id": "org.bukkit.Effect#BOOK_PAGE_TURN",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "BAMBOO_FENCE_GATE",
    "id": "org.bukkit.Material#BAMBOO_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "descr": "Sets the resultant ItemStack for this event",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#setResult(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent"
  },
  {
    "descr": "Get a list of all entities in this RegionAccessor",
    "param-names": ["RegionAccessor"],
    "param-types": ["org.bukkit.RegionAccessor"],
    "method": "getEntities",
    "id": "org.bukkit.RegionAccessor#getEntities()",
    "class": "org.bukkit.RegionAccessor",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BLOCK_LADDER_STEP",
    "id": "org.bukkit.Sound#BLOCK_LADDER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_HURT",
    "id": "org.bukkit.Sound#ENTITY_PARROT_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#values()",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform[]"
  },
  {
    "descr": "Get the level of the enchantment that was displayed as a hint to the\\nplayer on the selected enchantment offer.",
    "method": "getLevelHint",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getLevelHint()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "int"
  },
  {
    "descr": "Get the current item in the result slot.",
    "param-names": ["FurnaceInventory"],
    "param-types": ["org.bukkit.inventory.FurnaceInventory"],
    "method": "getResult",
    "id": "org.bukkit.inventory.FurnaceInventory#getResult()",
    "class": "org.bukkit.inventory.FurnaceInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Get the simulation distance from this server.",
    "static": true,
    "method": "getSimulationDistance",
    "id": "org.bukkit.Bukkit#getSimulationDistance()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Get the entities which are being loaded.",
    "method": "getEntities",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#getEntities()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Sets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\\nboats. Setting this to a higher value allows for quicker deceleration\\nof boats when a player disembarks. The default is -1. Values below 0\\nindicate that no additional deceleration is imposed.",
    "param-names": [
      "Boat",
      "Rate"
    ],
    "param-types": [
      "org.bukkit.entity.Boat",
      "double"
    ],
    "method": "setUnoccupiedDeceleration",
    "id": "org.bukkit.entity.Boat#setUnoccupiedDeceleration(double)",
    "class": "org.bukkit.entity.Boat"
  },
  {
    "descr": "Fifth growth stage",
    "static": true,
    "field": "TALL",
    "id": "org.bukkit.CropState#TALL",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "Check the total number of slots in this view, combining the upper and\\nlower inventories.\\n\\nNote though that it's possible for this to be greater than the sum of\\nthe two inventories if for example some slots are not being used.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "countSlots",
    "id": "org.bukkit.inventory.InventoryView#countSlots()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "int"
  },
  {
    "static": true,
    "field": "SIDEBAR_DARK_GREEN",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_DARK_GREEN",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Gets the maximum durability of this material",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getMaxDurability",
    "id": "org.bukkit.Material#getMaxDurability()",
    "class": "org.bukkit.Material",
    "return": "short"
  },
  {
    "descr": "Sets the chance of the helmet being dropped upon this creature's death.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setHelmetDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setHelmetDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "param-names": [
      "Result",
      "Source",
      "Experience"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.material.MaterialData",
      "float"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.material.MaterialData,float)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if this world has skylight access.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "hasSkyLight",
    "id": "org.bukkit.World#hasSkyLight()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "STONE_BRICK_SLAB",
    "id": "org.bukkit.Material#STONE_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent"
  },
  {
    "descr": "Remove custom chat completion suggestions shown to the player while\\ntyping a message.\\nOnline player names cannot be removed with this method. This will affect\\nonly custom completions added by #addCustomChatCompletions(Collection)\\nor #setCustomChatCompletions(Collection).",
    "param-names": [
      "Player",
      "Completions"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.util.Collection"
    ],
    "method": "removeCustomChatCompletions",
    "id": "org.bukkit.entity.Player#removeCustomChatCompletions(java.util.Collection<java.lang.String>)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_FROGSPAWN_HATCH",
    "id": "org.bukkit.Sound#BLOCK_FROGSPAWN_HATCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the hit block.",
    "param-names": ["RayTraceResult"],
    "param-types": ["org.bukkit.util.RayTraceResult"],
    "method": "getHitBlock",
    "id": "org.bukkit.util.RayTraceResult#getHitBlock()",
    "class": "org.bukkit.util.RayTraceResult",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_JEALOUS",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_JEALOUS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This method modifies the current waking state of this bat.\\n\\nThis does not prevent a bat from spontaneously awaking itself, or from\\nreattaching itself to a block.",
    "param-names": [
      "Bat",
      "State"
    ],
    "param-types": [
      "org.bukkit.entity.Bat",
      "boolean"
    ],
    "method": "setAwake",
    "id": "org.bukkit.entity.Bat#setAwake(boolean)",
    "class": "org.bukkit.entity.Bat"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_HIT",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the biome provider that will be used to create or load the world.\\n\\nThis may be null, in which case the biome provider from the\\nChunkGenerator will be used. If no ChunkGenerator is\\nspecific the \"natural\" biome provider for this environment will be used.",
    "param-names": [
      "WorldCreator",
      "Biome Provider"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "org.bukkit.generator.BiomeProvider"
    ],
    "method": "biomeProvider",
    "id": "org.bukkit.WorldCreator#biomeProvider(org.bukkit.generator.BiomeProvider)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityCombustEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether fire should spread and naturally extinguish.",
    "static": true,
    "field": "DO_FIRE_TICK",
    "id": "org.bukkit.GameRule#DO_FIRE_TICK",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Sets if this animal is crouching.",
    "param-names": [
      "Fox",
      "Crouching"
    ],
    "param-types": [
      "org.bukkit.entity.Fox",
      "boolean"
    ],
    "method": "setCrouching",
    "id": "org.bukkit.entity.Fox#setCrouching(boolean)",
    "class": "org.bukkit.entity.Fox"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityDamageEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "static": true,
    "field": "LEGACY_PORTAL",
    "id": "org.bukkit.Material#LEGACY_PORTAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A block that is going to or is about to fall.",
    "static": true,
    "field": "FALLING_BLOCK",
    "id": "org.bukkit.entity.EntityType#FALLING_BLOCK",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.entity.Panda.Gene#NORMAL",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "descr": "Any action done with the Creative inventory open.",
    "static": true,
    "field": "CREATIVE",
    "id": "org.bukkit.event.inventory.ClickType#CREATIVE",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "DARK_OAK_BOAT",
    "id": "org.bukkit.Material#DARK_OAK_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'flower_amount' property.",
    "param-names": [
      "PinkPetals",
      "Flower_amount"
    ],
    "param-types": [
      "org.bukkit.block.data.type.PinkPetals",
      "int"
    ],
    "method": "setFlowerAmount",
    "id": "org.bukkit.block.data.type.PinkPetals#setFlowerAmount(int)",
    "class": "org.bukkit.block.data.type.PinkPetals"
  },
  {
    "descr": "Sets the current type of this fox.",
    "param-names": [
      "Fox",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Fox",
      "org.bukkit.entity.Fox.Type"
    ],
    "method": "setFoxType",
    "id": "org.bukkit.entity.Fox#setFoxType(org.bukkit.entity.Fox.Type)",
    "class": "org.bukkit.entity.Fox"
  },
  {
    "descr": "Hostile mobs spawn, enemies deal less damage than on normal difficulty,\\nthe hunger bar does deplete and starving deals up to 5 hearts of\\ndamage. (Default value)",
    "static": true,
    "field": "EASY",
    "id": "org.bukkit.Difficulty#EASY",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty"
  },
  {
    "descr": "Gets the block that was hit, if it was a block that was hit.",
    "method": "getHitBlock",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getHitBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.NotePlayEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the EquipmentSlot in which the repaired ItemStack\\nmay be found.",
    "method": "getSlot",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Sets if the server is whitelisted.",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["boolean"],
    "method": "setWhitelist",
    "id": "org.bukkit.Bukkit#setWhitelist(boolean)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "BlockData: GlowLichen",
    "static": true,
    "field": "GLOW_LICHEN",
    "id": "org.bukkit.Material#GLOW_LICHEN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When the entity's leashholder attempts to unleash it",
    "static": true,
    "field": "PLAYER_UNLEASH",
    "id": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason#PLAYER_UNLEASH",
    "class": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "static": true,
    "field": "SNOWFLAKE",
    "id": "org.bukkit.Particle#SNOWFLAKE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the Block at the given Location",
    "param-names": [
      "World",
      "Location"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location"
    ],
    "method": "getBlockAt",
    "id": "org.bukkit.World#getBlockAt(org.bukkit.Location)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Set the loot table for a container or entity.\\n\\nTo remove a loot table use null. Do not use LootTables#EMPTY to\\nclear a LootTable.",
    "param-names": [
      "Lootable",
      "Table"
    ],
    "param-types": [
      "org.bukkit.loot.Lootable",
      "org.bukkit.loot.LootTable"
    ],
    "method": "setLootTable",
    "id": "org.bukkit.loot.Lootable#setLootTable(org.bukkit.loot.LootTable)",
    "class": "org.bukkit.loot.Lootable"
  },
  {
    "descr": "Checks if this object is a server operator",
    "param-names": ["ServerOperator"],
    "param-types": ["org.bukkit.permissions.ServerOperator"],
    "method": "isOp",
    "id": "org.bukkit.permissions.ServerOperator#isOp()",
    "class": "org.bukkit.permissions.ServerOperator",
    "return": "boolean"
  },
  {
    "descr": "This event is called when the list of available server commands is sent to\\nthe player.\\n\\nCommands may be removed from display using this event, but implementations\\nare not required to securely remove all traces of the command. If secure\\nremoval of commands is required, then the command should be assigned a\\npermission which is not granted to the player.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent"
  },
  {
    "descr": "Show the player's nametag only to his own team members.",
    "static": true,
    "field": "HIDE_FOR_OTHER_TEAMS",
    "id": "org.bukkit.scoreboard.NameTagVisibility#HIDE_FOR_OTHER_TEAMS",
    "class": "org.bukkit.scoreboard.NameTagVisibility",
    "return": "org.bukkit.scoreboard.NameTagVisibility"
  },
  {
    "static": true,
    "field": "FLUID_PLACE",
    "id": "org.bukkit.GameEvent#FLUID_PLACE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_BRICKS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_BRICKS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "GREEN_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#GREEN_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOLDEN_BOOTS",
    "id": "org.bukkit.Material#GOLDEN_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_LODESTONE_STEP",
    "id": "org.bukkit.Sound#BLOCK_LODESTONE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "BLACK_CANDLE",
    "id": "org.bukkit.Material#BLACK_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_ITEM_FRAME_BREAK",
    "id": "org.bukkit.Sound#ENTITY_GLOW_ITEM_FRAME_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the ItemStack currently in your hand, can be empty.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getItemInHand",
    "id": "org.bukkit.entity.HumanEntity#getItemInHand()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ILLUSIONER",
    "id": "org.bukkit.entity.EntityType#ILLUSIONER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Overrides the Instrument to be used.",
    "param-names": ["Instrument"],
    "param-types": ["org.bukkit.Instrument"],
    "method": "setInstrument",
    "id": "org.bukkit.event.block.NotePlayEvent#setInstrument(org.bukkit.Instrument)",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_DETACH",
    "id": "org.bukkit.GameEvent#BLOCK_DETACH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "BURIED_TREASURE",
    "id": "org.bukkit.loot.LootTables#BURIED_TREASURE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_TRADE",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_TRADE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Leatherworker profession. Wears a white apron. Leatherworkers\\nprimarily trade for leather, and leather armor, as well as saddles.",
    "static": true,
    "field": "LEATHERWORKER",
    "id": "org.bukkit.entity.Villager.Profession#LEATHERWORKER",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Get the starvation rate (1 health per x ticks) of\\nthe HumanEntity. Default is 80.",
    "param-names": [
      "HumanEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "int"
    ],
    "method": "setStarvationRate",
    "id": "org.bukkit.entity.HumanEntity#setStarvationRate(int)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_FRAME_ROTATE_ITEM",
    "id": "org.bukkit.Sound#ENTITY_ITEM_FRAME_ROTATE_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "No spell is being used..",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.entity.Spellcaster.Spell#NONE",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "static": true,
    "field": "GIANT",
    "id": "org.bukkit.entity.EntityType#GIANT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockGrowEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "boolean"
  },
  {
    "descr": "Add an Attribute and it's Modifier.\\nAttributeModifiers can now support EquipmentSlots.\\nIf not set, the AttributeModifier will be active in ALL slots.\\n\\nTwo AttributeModifiers that have the same java.util.UUID\\ncannot exist on the same Attribute.",
    "param-names": [
      "ItemMeta",
      "Attribute",
      "Modifier"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.attribute.Attribute",
      "org.bukkit.attribute.AttributeModifier"
    ],
    "method": "addAttributeModifier",
    "id": "org.bukkit.inventory.meta.ItemMeta#addAttributeModifier(org.bukkit.attribute.Attribute,org.bukkit.attribute.AttributeModifier)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Get the number of players sent.",
    "method": "getNumPlayers",
    "id": "org.bukkit.event.server.ServerListPingEvent#getNumPlayers()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "int"
  },
  {
    "descr": "Gets the maximum allowed value of the 'candles' property.",
    "param-names": ["Candle"],
    "param-types": ["org.bukkit.block.data.type.Candle"],
    "method": "getMaximumCandles",
    "id": "org.bukkit.block.data.type.Candle#getMaximumCandles()",
    "class": "org.bukkit.block.data.type.Candle",
    "return": "int"
  },
  {
    "descr": "BlockData: Dispenser",
    "static": true,
    "field": "DISPENSER",
    "id": "org.bukkit.Material#DISPENSER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Frog variants.",
    "static": true,
    "field": "FROG_VARIANT",
    "id": "org.bukkit.Registry#FROG_VARIANT",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "static": true,
    "field": "CURLY_BORDER",
    "id": "org.bukkit.block.banner.PatternType#CURLY_BORDER",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_HURT_SMALL",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_HURT_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if the jukebox is playing a record.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "isPlaying",
    "id": "org.bukkit.block.Jukebox#isPlaying()",
    "class": "org.bukkit.block.Jukebox",
    "return": "boolean"
  },
  {
    "descr": "Stores data for weather changing in a world",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent"
  },
  {
    "descr": "Allows the player to log in",
    "method": "allow",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#allow()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM",
    "id": "org.bukkit.Sound#ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_BROWN_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_BROWN_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TROPICAL_FISH_BUCKET",
    "id": "org.bukkit.Material#TROPICAL_FISH_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the given statistic for this player.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Entity Type"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType"
    ],
    "method": "getStatistic",
    "id": "org.bukkit.OfflinePlayer#getStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
    "class": "org.bukkit.OfflinePlayer",
    "return": "int"
  },
  {
    "static": true,
    "field": "GOAT",
    "id": "org.bukkit.loot.LootTables#GOAT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Set the seed used when this Loot Table generates loot.",
    "param-names": [
      "Lootable",
      "Seed"
    ],
    "param-types": [
      "org.bukkit.loot.Lootable",
      "long"
    ],
    "method": "setSeed",
    "id": "org.bukkit.loot.Lootable#setSeed(long)",
    "class": "org.bukkit.loot.Lootable"
  },
  {
    "static": true,
    "field": "LEGACY_POTATO",
    "id": "org.bukkit.Material#LEGACY_POTATO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the InetAddress for the Player associated with this event.\\nThis method is provided as a workaround for player.getAddress()\\nreturning null during PlayerLoginEvent.",
    "method": "getAddress",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getAddress()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "java.net.InetAddress"
  },
  {
    "descr": "An item stack with no extra data.\\n\\nIMPORTANT: An ItemStack is only designed to contain\\nitems. Do not use this class to encapsulate Materials for which\\nMaterial#isItem() returns false.",
    "param-names": [
      "Type",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.Material",
      "int"
    ],
    "id": "org.bukkit.inventory.ItemStack#ItemStack(org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Called when an ItemStack is successfully enchanted (currently at\\nenchantment table)",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerRegisterChannelEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "STONE_BRICKS",
    "id": "org.bukkit.Material#STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the map ID that is set. This is used to determine what map is\\ndisplayed.\\n\\nPlugins should check that hasMapId() returns true before\\ncalling this method.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "getMapId",
    "id": "org.bukkit.inventory.meta.MapMeta#getMapId()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_BIG_FALL",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_BIG_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Wall.Height#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Wall.Height",
    "return": "org.bukkit.block.data.type.Wall.Height"
  },
  {
    "descr": "Gets the Spell the entity is currently using.",
    "param-names": ["Spellcaster"],
    "param-types": ["org.bukkit.entity.Spellcaster"],
    "method": "getSpell",
    "id": "org.bukkit.entity.Spellcaster#getSpell()",
    "class": "org.bukkit.entity.Spellcaster",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "descr": "When an entity is spawned as a result of the entity it is being\\nperched on jumping or being damaged",
    "static": true,
    "field": "SHOULDER_ENTITY",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SHOULDER_ENTITY",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Indicates the teleportation was caused by a player entering an End\\nportal",
    "static": true,
    "field": "END_PORTAL",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#END_PORTAL",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "static": true,
    "field": "DAMAGE_ABSORBED",
    "id": "org.bukkit.Statistic#DAMAGE_ABSORBED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the raw slot ids to be changed in this drag.",
    "method": "getRawSlots",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getRawSlots()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "java.util.Set"
  },
  {
    "descr": "Called when a LootTable is generated in the world for an\\nInventoryHolder.\\nThis event is NOT currently called when an entity's loot table has been\\ngenerated (use EntityDeathEvent#getDrops(), but WILL be called by\\nplugins invoking\\nLootTable#fillInventory(org.bukkit.inventory.Inventory, java.util.Random, LootContext).",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent"
  },
  {
    "descr": "Sets the spawn location of the world.\\n\\nThe location provided must be equal to this world.",
    "param-names": [
      "World",
      "Location"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location"
    ],
    "method": "setSpawnLocation",
    "id": "org.bukkit.World#setSpawnLocation(org.bukkit.Location)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the current border damage amount.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getDamageAmount",
    "id": "org.bukkit.WorldBorder#getDamageAmount()",
    "class": "org.bukkit.WorldBorder",
    "return": "double"
  },
  {
    "static": true,
    "field": "DIAMOND_SHOVEL",
    "id": "org.bukkit.Material#DIAMOND_SHOVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This event is called whenever a player runs a command (by placing a slash\\nat the start of their message). It is called early in the command handling\\nprocess, and modifications in this event (via #setMessage(String))\\nwill be shown in the behavior.\\n\\nMany plugins will have no use for this event, and you should\\nattempt to avoid using it if it is not necessary.\\n\\nSome examples of valid uses for this event are:\\n\\nLogging executed commands to a separate file\\nVariable substitution. For example, replacing\\n${nearbyPlayer} with the name of the nearest other\\nplayer, or simulating the @a and @p\\ndecorators used by Command Blocks in plugins that do not handle it.\\nConditionally blocking commands belonging to other plugins. For\\nexample, blocking the use of the /home command in a\\ncombat arena.\\nPer-sender command aliases. For example, after a player runs the\\ncommand /calias cr gamemode creative, the next time they\\nrun /cr, it gets replaced into\\n/gamemode creative. (Global command aliases should be\\ndone by registering the alias.)\\n\\n\\nExamples of incorrect uses are:\\n\\nUsing this event to run command logic\\n\\n\\nIf the event is cancelled, processing of the command will halt.\\n\\nThe state of whether or not there is a slash (/) at the\\nbeginning of the message should be preserved. If a slash is added or\\nremoved, unexpected behavior may result.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_PILLAGER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_PILLAGER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether or not the world will automatically save",
    "param-names": [
      "World",
      "Value"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "setAutoSave",
    "id": "org.bukkit.World#setAutoSave(boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the initial radius of the cloud.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getRadius",
    "id": "org.bukkit.entity.AreaEffectCloud#getRadius()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "float"
  },
  {
    "descr": "Gets the block face that was hit, if it was a block that was hit and the\\nface was provided in the vent.",
    "method": "getHitBlockFace",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getHitBlockFace()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Checks if this bounding box contains the specified position.\\n\\nPositions exactly on the minimum borders of the bounding box are\\nconsidered to be inside the bounding box, while positions exactly on the\\nmaximum borders are considered to be outside. This allows bounding boxes\\nto reside directly next to each other with positions always only residing\\nin exactly one of them.",
    "param-names": [
      "BoundingBox",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double"
    ],
    "method": "contains",
    "id": "org.bukkit.util.BoundingBox#contains(double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "boolean"
  },
  {
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "id": "org.bukkit.Vibration.Destination.EntityDestination#EntityDestination(org.bukkit.entity.Entity)",
    "class": "org.bukkit.Vibration.Destination.EntityDestination"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerHideEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.PortalCreateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Remove all effects from this firework.",
    "param-names": ["FireworkMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkMeta"],
    "method": "clearEffects",
    "id": "org.bukkit.inventory.meta.FireworkMeta#clearEffects()",
    "class": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "descr": "Get an array containing the names of all the GameRules.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getGameRules",
    "id": "org.bukkit.World#getGameRules()",
    "class": "org.bukkit.World",
    "return": "java.lang.String[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the X-coordinate of this chunk",
    "param-names": ["ChunkSnapshot"],
    "param-types": ["org.bukkit.ChunkSnapshot"],
    "method": "getX",
    "id": "org.bukkit.ChunkSnapshot#getX()",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "int"
  },
  {
    "descr": "Set the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": [
      "StonecuttingRecipe",
      "Group"
    ],
    "param-types": [
      "org.bukkit.inventory.StonecuttingRecipe",
      "java.lang.String"
    ],
    "method": "setGroup",
    "id": "org.bukkit.inventory.StonecuttingRecipe#setGroup(java.lang.String)",
    "class": "org.bukkit.inventory.StonecuttingRecipe"
  },
  {
    "descr": "Checks for the existence of any AttributeModifiers.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "hasAttributeModifiers",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasAttributeModifiers()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMAN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ENDERMAN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Constructs a MaterialChoice with the current values of the specified\\ntag.",
    "param-names": ["Choices"],
    "param-types": ["org.bukkit.Tag"],
    "id": "org.bukkit.inventory.RecipeChoice.MaterialChoice#MaterialChoice(org.bukkit.Tag<org.bukkit.Material>)",
    "class": "org.bukkit.inventory.RecipeChoice.MaterialChoice"
  },
  {
    "static": true,
    "field": "VILLAGE_MASON",
    "id": "org.bukkit.loot.LootTables#VILLAGE_MASON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the red team.",
    "static": true,
    "field": "KILLED_BY_TEAM_RED",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_RED",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.server.ServerLoadEvent.LoadType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.server.ServerLoadEvent.LoadType",
    "return": "org.bukkit.event.server.ServerLoadEvent.LoadType"
  },
  {
    "descr": "Checks if this wolf is angry",
    "param-names": ["Wolf"],
    "param-types": ["org.bukkit.entity.Wolf"],
    "method": "isAngry",
    "id": "org.bukkit.entity.Wolf#isAngry()",
    "class": "org.bukkit.entity.Wolf",
    "return": "boolean"
  },
  {
    "descr": "Called when there is a bite on the hook and it is ready to be reeled\\nin.",
    "static": true,
    "field": "BITE",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#BITE",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "static": true,
    "field": "WANDERER",
    "id": "org.bukkit.Art#WANDERER",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "When an entity gets the effect from a warden.",
    "static": true,
    "field": "WARDEN",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#WARDEN",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.scoreboard.Team.OptionStatus#values()",
    "class": "org.bukkit.scoreboard.Team.OptionStatus",
    "return": "org.bukkit.scoreboard.Team.OptionStatus[]"
  },
  {
    "descr": "Return the ItemStack from the chestplate slot",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getChestplate",
    "id": "org.bukkit.inventory.PlayerInventory#getChestplate()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Get the inventory holder in which the loot was generated.\\nIf the loot was generated as a result of the block being broken, the\\ninventory holder will be null as this event is called post block break.",
    "method": "getInventoryHolder",
    "id": "org.bukkit.event.world.LootGenerateEvent#getInventoryHolder()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.inventory.InventoryHolder"
  },
  {
    "descr": "Gets the radius, in blocks, around each worlds spawn point to protect.",
    "static": true,
    "method": "getSpawnRadius",
    "id": "org.bukkit.Bukkit#getSpawnRadius()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "DEAD_BRAIN_CORAL_BLOCK",
    "id": "org.bukkit.Material#DEAD_BRAIN_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.PortalCreateEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets whether this minecart will slow down faster without a passenger\\noccupying it",
    "param-names": [
      "Minecart",
      "Slow"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "boolean"
    ],
    "method": "setSlowWhenEmpty",
    "id": "org.bukkit.entity.Minecart#setSlowWhenEmpty(boolean)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityDamageEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the entity this EntityEquipment belongs to",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getHolder",
    "id": "org.bukkit.inventory.EntityEquipment#getHolder()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_DOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_DOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a snowman is spawned by being built",
    "static": true,
    "field": "BUILD_SNOWMAN",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#BUILD_SNOWMAN",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "LEGACY_LEAVES",
    "id": "org.bukkit.Material#LEGACY_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a player gets bad omen after killing a patrol captain.",
    "static": true,
    "field": "PATROL_CAPTAIN",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#PATROL_CAPTAIN",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the ItemStack at the given equipment slot in the inventory.",
    "param-names": [
      "EntityEquipment",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.EquipmentSlot"
    ],
    "method": "getItem",
    "id": "org.bukkit.inventory.EntityEquipment#getItem(org.bukkit.inventory.EquipmentSlot)",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_FENCE_GATE",
    "id": "org.bukkit.Material#LEGACY_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The spell that makes the casting entity invisible.",
    "static": true,
    "field": "DISAPPEAR",
    "id": "org.bukkit.entity.Evoker.Spell#DISAPPEAR",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "static": true,
    "field": "DRINK",
    "id": "org.bukkit.GameEvent#DRINK",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Dolphin has been fed and is locating a structure.",
    "static": true,
    "field": "DOLPHIN_FED",
    "id": "org.bukkit.EntityEffect#DOLPHIN_FED",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Checks if a state's BlockFace is capable of providing a given level\\nof BlockSupport for neighbouring block states.\\n\\nAny given state may support either none, one, or more than one level of block\\nsupport depending on its states. A common example would be a wall's ability to support\\ntorches only on the center of the upper block face, whereas a grass block would\\nsupport all levels of block support on all block faces.",
    "param-names": [
      "BlockData",
      "Face",
      "Support"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.block.BlockFace",
      "org.bukkit.block.BlockSupport"
    ],
    "method": "isFaceSturdy",
    "id": "org.bukkit.block.data.BlockData#isFaceSturdy(org.bukkit.block.BlockFace,org.bukkit.block.BlockSupport)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "descr": "Gets whether the witch is drinking a potion",
    "param-names": ["Witch"],
    "param-types": ["org.bukkit.entity.Witch"],
    "method": "isDrinkingPotion",
    "id": "org.bukkit.entity.Witch#isDrinkingPotion()",
    "class": "org.bukkit.entity.Witch",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Cat.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "static": true,
    "field": "CRIMSON_PLANKS",
    "id": "org.bukkit.Material#CRIMSON_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_IDLE_WATER",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_IDLE_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether the entity has a team colored (default: white) glow.\\nnb: this refers to the 'Glowing' entity property, not whether a\\nglowing potion effect is applied",
    "param-names": [
      "Entity",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setGlowing",
    "id": "org.bukkit.entity.Entity#setGlowing(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ZOMBIE_VILLAGER",
    "id": "org.bukkit.entity.EntityType#ZOMBIE_VILLAGER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "IRON_AXE",
    "id": "org.bukkit.Material#IRON_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LILY_PAD",
    "id": "org.bukkit.Material#LILY_PAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the number of raider groups which have spawned.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getSpawnedGroups",
    "id": "org.bukkit.Raid#getSpawnedGroups()",
    "class": "org.bukkit.Raid",
    "return": "int"
  },
  {
    "static": true,
    "field": "ANDESITE",
    "id": "org.bukkit.Material#ANDESITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerAdvancementDoneEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Whether players should only be able to craft recipes they've unlocked\\nfirst.",
    "static": true,
    "field": "DO_LIMITED_CRAFTING",
    "id": "org.bukkit.GameRule#DO_LIMITED_CRAFTING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Checks if the specified block is empty (air) or not.",
    "param-names": [
      "BlockChangeDelegate",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.BlockChangeDelegate",
      "int",
      "int",
      "int"
    ],
    "method": "isEmpty",
    "id": "org.bukkit.BlockChangeDelegate#isEmpty(int,int,int)",
    "class": "org.bukkit.BlockChangeDelegate",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.map.MapPalette#BROWN",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BEDROCK",
    "id": "org.bukkit.Material#BEDROCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns a immutable set of materials the piglins will pickup.\\n\\nNote: This set will not include the items that are set\\nby default. To interact with those items see\\norg.bukkit.event.entity.EntityPickupItemEvent.",
    "param-names": ["Piglin"],
    "param-types": ["org.bukkit.entity.Piglin"],
    "method": "getInterestList",
    "id": "org.bukkit.entity.Piglin#getInterestList()",
    "class": "org.bukkit.entity.Piglin",
    "return": "java.util.Set"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.WorldInitEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.WorldInitEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the BossBar of the Boss",
    "param-names": ["Boss"],
    "param-types": ["org.bukkit.entity.Boss"],
    "method": "getBossBar",
    "id": "org.bukkit.entity.Boss#getBossBar()",
    "class": "org.bukkit.entity.Boss",
    "return": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_HURT",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum allowed value of the 'pickles' property.",
    "param-names": ["SeaPickle"],
    "param-types": ["org.bukkit.block.data.type.SeaPickle"],
    "method": "getMaximumPickles",
    "id": "org.bukkit.block.data.type.SeaPickle#getMaximumPickles()",
    "class": "org.bukkit.block.data.type.SeaPickle",
    "return": "int"
  },
  {
    "descr": "Classic parrot - red with colored wingtips.",
    "static": true,
    "field": "RED",
    "id": "org.bukkit.entity.Parrot.Variant#RED",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "descr": "Gets the material of the boat type.",
    "param-names": ["Boat.Type"],
    "param-types": ["org.bukkit.entity.Boat.Type"],
    "method": "getMaterial",
    "id": "org.bukkit.entity.Boat.Type#getMaterial()",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "RED_BED",
    "id": "org.bukkit.Material#RED_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Whether the weather will change from the current moment.",
    "static": true,
    "field": "DO_WEATHER_CYCLE",
    "id": "org.bukkit.GameRule#DO_WEATHER_CYCLE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerChangedMainHandEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_DEATH_LAND",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_DEATH_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the advancement specified by this key.",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getAdvancement",
    "id": "org.bukkit.Bukkit#getAdvancement(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.advancement.Advancement"
  },
  {
    "descr": "The sound played by brewing stands when brewing",
    "static": true,
    "field": "BREWING_STAND_BREW",
    "id": "org.bukkit.Effect#BREWING_STAND_BREW",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "LEGACY_POTION",
    "id": "org.bukkit.Material#LEGACY_POTION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the underlying potion data",
    "param-names": [
      "AreaEffectCloud",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.potion.PotionData"
    ],
    "method": "setBasePotionData",
    "id": "org.bukkit.entity.AreaEffectCloud#setBasePotionData(org.bukkit.potion.PotionData)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "descr": "Increments automatically when a player kills another player on the dark blue team.",
    "static": true,
    "field": "TEAM_KILL_DARK_BLUE",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_DARK_BLUE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'attachment' property.",
    "param-names": ["Bell"],
    "param-types": ["org.bukkit.block.data.type.Bell"],
    "method": "getAttachment",
    "id": "org.bukkit.block.data.type.Bell#getAttachment()",
    "class": "org.bukkit.block.data.type.Bell",
    "return": "org.bukkit.block.data.type.Bell.Attachment"
  },
  {
    "descr": "Request that the player's client download and switch resource packs.\\n\\nThe player's client will download the new resource pack asynchronously\\nin the background, and will automatically switch to it once the\\ndownload is complete. If the client has downloaded and cached a\\nresource pack with the same hash in the past it will not download but\\ndirectly apply the cached pack. If the hash is null and the client has\\ndownloaded and cached the same resource pack in the past, it will\\nperform a file size check against the response content to determine if\\nthe resource pack has changed and needs to be downloaded again. When\\nthis request is sent for the very first time from a given server, the\\nclient will first display a confirmation GUI to the player before\\nproceeding with the download.\\n\\nNotes:\\n\\nPlayers can disable server resources on their client, in which\\ncase this method will have no affect on them. Use the\\nPlayerResourcePackStatusEvent to figure out whether or not\\nthe player loaded the pack!\\nThere is no concept of resetting resource packs back to default\\nwithin Minecraft, so players will have to relog to do so or you\\nhave to send an empty pack.\\nThe request is sent with empty string as the hash when the hash is\\nnot provided. This might result in newer versions not loading the\\npack correctly.\\n",
    "param-names": [
      "Player",
      "Url",
      "Hash",
      "Prompt",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "byte[]",
      "java.lang.String",
      "boolean"
    ],
    "method": "setResourcePack",
    "id": "org.bukkit.entity.Player#setResourcePack(java.lang.String,byte[],java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_MUDDY_MANGROVE_ROOTS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MUDDY_MANGROVE_ROOTS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the amount of ticks remaining for this entity in love mode.\\nIf the entity is not in love mode, 0 will be returned.",
    "param-names": ["Animals"],
    "param-types": ["org.bukkit.entity.Animals"],
    "method": "getLoveModeTicks",
    "id": "org.bukkit.entity.Animals#getLoveModeTicks()",
    "class": "org.bukkit.entity.Animals",
    "return": "int"
  },
  {
    "descr": "Gets whether the hoglin is immune to zombification.",
    "param-names": ["Hoglin"],
    "param-types": ["org.bukkit.entity.Hoglin"],
    "method": "isImmuneToZombification",
    "id": "org.bukkit.entity.Hoglin#isImmuneToZombification()",
    "class": "org.bukkit.entity.Hoglin",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PigZapEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "BLUE_CANDLE",
    "id": "org.bukkit.Material#BLUE_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Player filling the cauldron by emptying their bottle.",
    "static": true,
    "field": "BOTTLE_EMPTY",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#BOTTLE_EMPTY",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Creates a potion effect with no defined color.",
    "param-names": [
      "Type",
      "Duration",
      "Amplifier",
      "Ambient",
      "Particles"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffectType",
      "int",
      "int",
      "boolean",
      "boolean"
    ],
    "id": "org.bukkit.potion.PotionEffect#PotionEffect(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean)",
    "class": "org.bukkit.potion.PotionEffect"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_SQUID_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_GLOW_SQUID_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the particle which this cloud will be composed of",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getParticle",
    "id": "org.bukkit.entity.AreaEffectCloud#getParticle()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Checks to see if this map is scaling.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "isScaling",
    "id": "org.bukkit.inventory.meta.MapMeta#isScaling()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerLocaleChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "RECORDS",
    "id": "org.bukkit.SoundCategory#RECORDS",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Villager.Profession#values()",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession[]"
  },
  {
    "static": true,
    "field": "LEGACY_PURPUR_STAIRS",
    "id": "org.bukkit.Material#LEGACY_PURPUR_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the angle between this vector and another in radians.",
    "param-names": [
      "Vector",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "angle",
    "id": "org.bukkit.util.Vector#angle(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "float"
  },
  {
    "descr": "Indicates that the block will resist being pushed or pulled.",
    "static": true,
    "field": "BLOCK",
    "id": "org.bukkit.block.PistonMoveReaction#BLOCK",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Get the cooldown time in ticks remaining for the specified material.",
    "param-names": [
      "HumanEntity",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Material"
    ],
    "method": "getCooldown",
    "id": "org.bukkit.entity.HumanEntity#getCooldown(org.bukkit.Material)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_ZOGLIN_HURT",
    "id": "org.bukkit.Sound#ENTITY_ZOGLIN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Expands this bounding box uniformly by the given values in both positive\\nand negative directions.\\n\\nNegative values will shrink the bounding box. Shrinking will be limited\\nto the bounding box's current size.",
    "param-names": [
      "BoundingBox",
      "Expansion"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "SKELETON",
    "id": "org.bukkit.Art#SKELETON",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Gets a string, which when passed into a method such as\\nServer#createBlockData(java.lang.String) will unambiguously\\nrecreate this instance.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "getAsString",
    "id": "org.bukkit.block.data.BlockData#getAsString()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the Item created by the entity",
    "method": "getItemDrop",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#getItemDrop()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the recipe that has been formed. If this event was triggered by a\\ntool repair, this will be a temporary shapeless recipe representing the\\nrepair.",
    "method": "getRecipe",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "org.bukkit.inventory.Recipe"
  },
  {
    "descr": "The head is the upper part of the bed containing the pillow.",
    "static": true,
    "field": "HEAD",
    "id": "org.bukkit.block.data.type.Bed.Part#HEAD",
    "class": "org.bukkit.block.data.type.Bed.Part",
    "return": "org.bukkit.block.data.type.Bed.Part"
  },
  {
    "descr": "Sets the value of the 'mode' property.",
    "param-names": [
      "Comparator",
      "Mode"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Comparator",
      "org.bukkit.block.data.type.Comparator.Mode"
    ],
    "method": "setMode",
    "id": "org.bukkit.block.data.type.Comparator#setMode(org.bukkit.block.data.type.Comparator.Mode)",
    "class": "org.bukkit.block.data.type.Comparator"
  },
  {
    "descr": "Fisherman profession. Wears a brown robe. Fisherman primarily trade\\nfor fish, as well as possibly selling string and/or coal.",
    "static": true,
    "field": "FISHERMAN",
    "id": "org.bukkit.entity.Villager.Profession#FISHERMAN",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "static": true,
    "field": "SUSPENDED_DEPTH",
    "id": "org.bukkit.Particle#SUSPENDED_DEPTH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "NETHERITE_HELMET",
    "id": "org.bukkit.Material#NETHERITE_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the CreativeCategory to which this material belongs.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getCreativeCategory",
    "id": "org.bukkit.Material#getCreativeCategory()",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "static": true,
    "field": "DEEPSLATE_EMERALD_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_EMERALD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the default ticks per water underground creature spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water underground creature\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn water underground creature\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, water underground creature spawning will be disabled.\\n\\nMinecraft default: 1.",
    "static": true,
    "method": "getTicksPerWaterUndergroundCreatureSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerWaterUndergroundCreatureSpawns()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_DARK_OAK_STAIRS",
    "id": "org.bukkit.Material#LEGACY_DARK_OAK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "OAK_WOOD",
    "id": "org.bukkit.Material#OAK_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BROWN_WALL_BANNER",
    "id": "org.bukkit.Material#BROWN_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a painting by its numeric ID",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getById",
    "id": "org.bukkit.Art#getById(int)",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Evaporating due to biome dryness.",
    "static": true,
    "field": "EVAPORATE",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#EVAPORATE",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_IDLE",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_IDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_INK_SAC_USE",
    "id": "org.bukkit.Sound#ITEM_INK_SAC_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the org.bukkit.event.Event.Result of this event. The Result describes the\\nbehavior that will be applied to the inventory in relation to this\\nevent.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_HURT",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets whether or not this sign has been waxed. If a sign has been waxed, it\\ncannot be edited by a player.",
    "param-names": [
      "Sign",
      "Waxed"
    ],
    "param-types": [
      "org.bukkit.block.Sign",
      "boolean"
    ],
    "method": "setWaxed",
    "id": "org.bukkit.block.Sign#setWaxed(boolean)",
    "class": "org.bukkit.block.Sign"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_STEP",
    "id": "org.bukkit.Sound#ENTITY_WOLF_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allow the Enchantment to be placed on crossbows.",
    "static": true,
    "field": "CROSSBOW",
    "id": "org.bukkit.enchantments.EnchantmentTarget#CROSSBOW",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Sets the profile of the player who owns the skull. This player profile\\nmay appear as the texture depending on skull type.\\n\\nThe profile must contain both a unique id and a skin texture. If either\\nof these is missing, the profile must contain a name by which the server\\nwill then attempt to look up the unique id and skin texture.",
    "param-names": [
      "Skull",
      "Profile"
    ],
    "param-types": [
      "org.bukkit.block.Skull",
      "org.bukkit.profile.PlayerProfile"
    ],
    "method": "setOwnerProfile",
    "id": "org.bukkit.block.Skull#setOwnerProfile(org.bukkit.profile.PlayerProfile)",
    "class": "org.bukkit.block.Skull"
  },
  {
    "descr": "Sets the amount that the duration of this cloud will decrease by when it\\napplies an effect to an entity.",
    "param-names": [
      "AreaEffectCloud",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "int"
    ],
    "method": "setDurationOnUse",
    "id": "org.bukkit.entity.AreaEffectCloud#setDurationOnUse(int)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the entity's current bounding box.\\n\\nThe returned bounding box reflects the entity's current location and\\nsize.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getBoundingBox",
    "id": "org.bukkit.entity.Entity#getBoundingBox()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "boolean"
  },
  {
    "descr": "Attempts to make this villager sleep at the given location.\\n\\nThe location must be in the current world and have a bed placed at the\\nlocation. The villager will put its head on the specified block while\\nsleeping.",
    "param-names": [
      "Villager",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Villager",
      "org.bukkit.Location"
    ],
    "method": "sleep",
    "id": "org.bukkit.entity.Villager#sleep(org.bukkit.Location)",
    "class": "org.bukkit.entity.Villager",
    "return": "boolean"
  },
  {
    "descr": "Gets the reason why the time has skipped.",
    "method": "getSkipReason",
    "id": "org.bukkit.event.world.TimeSkipEvent#getSkipReason()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "org.bukkit.event.world.TimeSkipEvent.SkipReason"
  },
  {
    "descr": "Raised when a living entity exits a vehicle.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent"
  },
  {
    "static": true,
    "field": "UI_LOOM_TAKE_RESULT",
    "id": "org.bukkit.Sound#UI_LOOM_TAKE_RESULT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.LeavesDecayEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Spectator mode cannot interact with the world in anyway and is\\ninvisible to normal players. This grants the player the\\nability to no-clip through the world.",
    "static": true,
    "field": "SPECTATOR",
    "id": "org.bukkit.GameMode#SPECTATOR",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode"
  },
  {
    "static": true,
    "field": "RIGHT",
    "id": "org.bukkit.entity.Wither.Head#RIGHT",
    "class": "org.bukkit.entity.Wither.Head",
    "return": "org.bukkit.entity.Wither.Head"
  },
  {
    "descr": "Called when an item is put in a slot for repair by an anvil.",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent"
  },
  {
    "static": true,
    "field": "PINK_WOOL",
    "id": "org.bukkit.Material#PINK_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A max-size stack of the clicked item is put on the cursor.",
    "static": true,
    "field": "CLONE_STACK",
    "id": "org.bukkit.event.inventory.InventoryAction#CLONE_STACK",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_GALLOP",
    "id": "org.bukkit.Sound#ENTITY_HORSE_GALLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get whether the piglin is able to hunt hoglins.",
    "param-names": ["Piglin"],
    "param-types": ["org.bukkit.entity.Piglin"],
    "method": "isAbleToHunt",
    "id": "org.bukkit.entity.Piglin#isAbleToHunt()",
    "class": "org.bukkit.entity.Piglin",
    "return": "boolean"
  },
  {
    "descr": "Stores data for damage events",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "descr": "Check whether or not this fish hook is in open water.\\n\\nOpen water is defined by a 5x4x5 area of water, air and lily pads. If in\\nopen water, treasure items may be caught.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "isInOpenWater",
    "id": "org.bukkit.entity.FishHook#isInOpenWater()",
    "class": "org.bukkit.entity.FishHook",
    "return": "boolean"
  },
  {
    "descr": "Gets the age of this mob.",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.entity.Ageable"],
    "method": "getAge",
    "id": "org.bukkit.entity.Ageable#getAge()",
    "class": "org.bukkit.entity.Ageable",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Mega redwood tree; 4 blocks wide and tall",
    "static": true,
    "field": "MEGA_REDWOOD",
    "id": "org.bukkit.TreeType#MEGA_REDWOOD",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets the InventoryAction that triggered this event.\\n\\nThis action cannot be changed, and represents what the normal outcome\\nof the event will be. To change the behavior of this\\nInventoryClickEvent, changes must be manually applied.",
    "method": "getAction",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getAction()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "BLOCK_WOOL_FALL",
    "id": "org.bukkit.Sound#BLOCK_WOOL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the location this player moved from",
    "method": "getFrom",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.Location"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.WorldUnloadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LIKED_NOTEBLOCK_COOLDOWN_TICKS",
    "id": "org.bukkit.entity.memory.MemoryKey#LIKED_NOTEBLOCK_COOLDOWN_TICKS",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "static": true,
    "field": "BLOCK_BEEHIVE_WORK",
    "id": "org.bukkit.Sound#BLOCK_BEEHIVE_WORK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an entity targets another entity after colliding with it.",
    "static": true,
    "field": "COLLISION",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#COLLISION",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Entities related to Water Animals, eg: Squid or Dolphin.",
    "static": true,
    "field": "WATER_ANIMAL",
    "id": "org.bukkit.entity.SpawnCategory#WATER_ANIMAL",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockGrowEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerPortalEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the player IP address.",
    "method": "getAddress",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getAddress()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "java.net.InetAddress"
  },
  {
    "static": true,
    "field": "ITEM_LODESTONE_COMPASS_LOCK",
    "id": "org.bukkit.Sound#ITEM_LODESTONE_COMPASS_LOCK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LARGE_BIOMES",
    "id": "org.bukkit.WorldType#LARGE_BIOMES",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_HIT_GROUND",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_HIT_GROUND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks for existence of the specified enchantment.",
    "param-names": [
      "ItemMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "hasEnchant",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasEnchant(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Sets the given statistic for this player for the given entity.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Entity Type",
      "New Value"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType",
      "int"
    ],
    "method": "setStatistic",
    "id": "org.bukkit.OfflinePlayer#setStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#values()",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType[]"
  },
  {
    "descr": "Gets if various water/lava mechanics will be triggered in this world, eg:\\n\\n\\nWater is evaporated\\nSponges dry\\nLava spreads faster and further\\n",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isUltraWarm",
    "id": "org.bukkit.World#isUltraWarm()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "The z axis.",
    "static": true,
    "field": "Z",
    "id": "org.bukkit.Axis#Z",
    "class": "org.bukkit.Axis",
    "return": "org.bukkit.Axis"
  },
  {
    "descr": "Checks for the existence of recipes in the book.",
    "param-names": ["KnowledgeBookMeta"],
    "param-types": ["org.bukkit.inventory.meta.KnowledgeBookMeta"],
    "method": "hasRecipes",
    "id": "org.bukkit.inventory.meta.KnowledgeBookMeta#hasRecipes()",
    "class": "org.bukkit.inventory.meta.KnowledgeBookMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_PISTON_CONTRACT",
    "id": "org.bukkit.Sound#BLOCK_PISTON_CONTRACT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum height to which chorus fruits and nether portals can\\nbring players within this dimension.\\nThis excludes portals that were already built above the limit as they\\nstill connect normally. May not be greater than #getMaxHeight().",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getLogicalHeight",
    "id": "org.bukkit.World#getLogicalHeight()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "static": true,
    "field": "DEBUG_STICK",
    "id": "org.bukkit.Material#DEBUG_STICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Bad Omen level of this raid.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getBadOmenLevel",
    "id": "org.bukkit.Raid#getBadOmenLevel()",
    "class": "org.bukkit.Raid",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_FLINTANDSTEEL_USE",
    "id": "org.bukkit.Sound#ITEM_FLINTANDSTEEL_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Mark the entity's removal.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "remove",
    "id": "org.bukkit.entity.Entity#remove()",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the default ticks per SpawnCategory spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn SpawnCategory mobs\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn SpawnCategory mobs\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, SpawnCategory mobs spawning will be disabled.\\n\\nMinecraft default: 1.\\n\\nNote:  the SpawnCategory#MISC are not consider.",
    "param-names": ["Spawn Category"],
    "static": true,
    "param-types": ["org.bukkit.entity.SpawnCategory"],
    "method": "getTicksPerSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerSpawns(org.bukkit.entity.SpawnCategory)",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "UNDERWATER_RUIN_SMALL",
    "id": "org.bukkit.loot.LootTables#UNDERWATER_RUIN_SMALL",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_GRAVEL_FALL",
    "id": "org.bukkit.Sound#BLOCK_GRAVEL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the pattern at the specified index",
    "param-names": [
      "BannerMeta",
      "I",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BannerMeta",
      "int",
      "org.bukkit.block.banner.Pattern"
    ],
    "method": "setPattern",
    "id": "org.bukkit.inventory.meta.BannerMeta#setPattern(int,org.bukkit.block.banner.Pattern)",
    "class": "org.bukkit.inventory.meta.BannerMeta"
  },
  {
    "static": true,
    "field": "BLOCK_WET_GRASS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_WET_GRASS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets all of this faces which may be set on this block.",
    "param-names": ["RedstoneWire"],
    "param-types": ["org.bukkit.block.data.type.RedstoneWire"],
    "method": "getAllowedFaces",
    "id": "org.bukkit.block.data.type.RedstoneWire#getAllowedFaces()",
    "class": "org.bukkit.block.data.type.RedstoneWire",
    "return": "java.util.Set"
  },
  {
    "descr": "Sets the color of this boss bar.",
    "param-names": [
      "BossBar",
      "Color"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.boss.BarColor"
    ],
    "method": "setColor",
    "id": "org.bukkit.boss.BossBar#setColor(org.bukkit.boss.BarColor)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "Checks if this animal is crouching",
    "param-names": ["Fox"],
    "param-types": ["org.bukkit.entity.Fox"],
    "method": "isCrouching",
    "id": "org.bukkit.entity.Fox#isCrouching()",
    "class": "org.bukkit.entity.Fox",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_COD_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_COD_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: NoteBlock",
    "static": true,
    "field": "NOTE_BLOCK",
    "id": "org.bukkit.Material#NOTE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets an immutable list containing all custom potion effects applied to\\nthis potion.\\n\\nPlugins should check that hasCustomEffects() returns true before calling\\nthis method.",
    "param-names": ["PotionMeta"],
    "param-types": ["org.bukkit.inventory.meta.PotionMeta"],
    "method": "getCustomEffects",
    "id": "org.bukkit.inventory.meta.PotionMeta#getCustomEffects()",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "CYAN_CARPET",
    "id": "org.bukkit.Material#CYAN_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_CARPET_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MOSS_CARPET_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_COW_STEP",
    "id": "org.bukkit.Sound#ENTITY_COW_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get an iterator through all advancements. Advancements cannot be removed\\nfrom this iterator,",
    "static": true,
    "method": "advancementIterator",
    "id": "org.bukkit.Bukkit#advancementIterator()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Iterator"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "SQUARE_TOP_RIGHT",
    "id": "org.bukkit.block.banner.PatternType#SQUARE_TOP_RIGHT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Horse.Variant#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_HORSE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_HORSE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NYLIUM_STEP",
    "id": "org.bukkit.Sound#BLOCK_NYLIUM_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Rotates the vector around a given arbitrary axis in 3 dimensional space.\\n\\nRotation will follow the general Right-Hand-Rule, which means rotation\\nwill be counterclockwise when the axis is pointing towards the observer.\\n\\nThis method will always make sure the provided axis is a unit vector, to\\nnot modify the length of the vector when rotating. If you are experienced\\nwith the scaling of a non-unit axis vector, you can use\\nVector#rotateAroundNonUnitAxis(Vector, double).",
    "param-names": [
      "Vector",
      "Axis",
      "Angle"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rotateAroundAxis",
    "id": "org.bukkit.util.Vector#rotateAroundAxis(org.bukkit.util.Vector,double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "FIRE_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#FIRE_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_FROGLIGHT_BREAK",
    "id": "org.bukkit.Sound#BLOCK_FROGLIGHT_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Raised when a vehicle receives damage.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "Player",
      "Particle",
      "Location",
      "Count"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityTameEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Represents light purple",
    "static": true,
    "field": "LIGHT_PURPLE",
    "id": "org.bukkit.ChatColor#LIGHT_PURPLE",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Computes whether or not this skeleton is currently in the process of\\nconverting to a Stray due to it being frozen by powdered snow.",
    "param-names": ["Skeleton"],
    "param-types": ["org.bukkit.entity.Skeleton"],
    "method": "isConverting",
    "id": "org.bukkit.entity.Skeleton#isConverting()",
    "class": "org.bukkit.entity.Skeleton",
    "return": "boolean"
  },
  {
    "descr": "Clicking the left mouse button on the grey area around the inventory.",
    "static": true,
    "field": "WINDOW_BORDER_LEFT",
    "id": "org.bukkit.event.inventory.ClickType#WINDOW_BORDER_LEFT",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "HAND",
    "id": "org.bukkit.inventory.EquipmentSlot#HAND",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "ENTITY_PILLAGER_HURT",
    "id": "org.bukkit.Sound#ENTITY_PILLAGER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_EAT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check what item is in the result slot of this smithing table.",
    "param-names": ["SmithingInventory"],
    "param-types": ["org.bukkit.inventory.SmithingInventory"],
    "method": "getResult",
    "id": "org.bukkit.inventory.SmithingInventory#getResult()",
    "class": "org.bukkit.inventory.SmithingInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the text background color.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "getBackgroundColor",
    "id": "org.bukkit.entity.TextDisplay#getBackgroundColor()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "org.bukkit.Color"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.LootGenerateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the LootTable corresponding to this constant. This is\\nequivalent to calling Bukkit.getLootTable(this.getKey());.",
    "param-names": ["LootTables"],
    "param-types": ["org.bukkit.loot.LootTables"],
    "method": "getLootTable",
    "id": "org.bukkit.loot.LootTables#getLootTable()",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTable"
  },
  {
    "descr": "Copies the options from the specified world",
    "param-names": [
      "WorldCreator",
      "World"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "org.bukkit.World"
    ],
    "method": "copy",
    "id": "org.bukkit.WorldCreator#copy(org.bukkit.World)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Gets the players current experience level",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getLevel",
    "id": "org.bukkit.entity.Player#getLevel()",
    "class": "org.bukkit.entity.Player",
    "return": "int"
  },
  {
    "descr": "Gets the raw amount of damage caused by the event",
    "method": "getDamage",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getDamage()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "double"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.SkullType#valueOf(java.lang.String)",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WAXED_COPPER_BLOCK",
    "id": "org.bukkit.Material#WAXED_COPPER_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_RED_MUSHROOM",
    "id": "org.bukkit.Material#POTTED_RED_MUSHROOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SAND_HIT",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SAND_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the bee's flower location.",
    "param-names": ["Bee"],
    "param-types": ["org.bukkit.entity.Bee"],
    "method": "getFlower",
    "id": "org.bukkit.entity.Bee#getFlower()",
    "class": "org.bukkit.entity.Bee",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the \"friendly\" name to display of this player. This may include\\ncolor.\\n\\nNote that this name will not be displayed in game, only in chat and\\nplaces defined by plugins.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getDisplayName",
    "id": "org.bukkit.entity.Player#getDisplayName()",
    "class": "org.bukkit.entity.Player",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets if this world allow to piglins to survive without shaking and\\ntransforming to zombified piglins.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isPiglinSafe",
    "id": "org.bukkit.World#isPiglinSafe()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_FISHERMAN",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_FISHERMAN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns a immutable set of materials the piglins will barter with.\\nNote: This set will not include the items that are set\\nby default. To interact with those items see\\norg.bukkit.event.entity.PiglinBarterEvent.",
    "param-names": ["Piglin"],
    "param-types": ["org.bukkit.entity.Piglin"],
    "method": "getBarterList",
    "id": "org.bukkit.entity.Piglin#getBarterList()",
    "class": "org.bukkit.entity.Piglin",
    "return": "java.util.Set"
  },
  {
    "descr": "Get the experience dropped by the block after the event has processed",
    "method": "getExpToDrop",
    "id": "org.bukkit.event.block.BlockBreakEvent#getExpToDrop()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "int"
  },
  {
    "descr": "Sets the chance of the chest plate being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setChestplateDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setChestplateDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "BASTION_HOGLIN_STABLE",
    "id": "org.bukkit.loot.LootTables#BASTION_HOGLIN_STABLE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "OXEYE_DAISY",
    "id": "org.bukkit.Material#OXEYE_DAISY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the age of the mob to a baby",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.entity.Ageable"],
    "method": "setBaby",
    "id": "org.bukkit.entity.Ageable#setBaby()",
    "class": "org.bukkit.entity.Ageable"
  },
  {
    "descr": "Sets the value of the 'note' property.",
    "param-names": [
      "NoteBlock",
      "Note"
    ],
    "param-types": [
      "org.bukkit.block.data.type.NoteBlock",
      "org.bukkit.Note"
    ],
    "method": "setNote",
    "id": "org.bukkit.block.data.type.NoteBlock#setNote(org.bukkit.Note)",
    "class": "org.bukkit.block.data.type.NoteBlock"
  },
  {
    "static": true,
    "field": "YELLOW_CARPET",
    "id": "org.bukkit.Material#YELLOW_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.RedstoneWire.Connection#values()",
    "class": "org.bukkit.block.data.type.RedstoneWire.Connection",
    "return": "org.bukkit.block.data.type.RedstoneWire.Connection[]"
  },
  {
    "static": true,
    "field": "ENTITY_KILLED",
    "id": "org.bukkit.GameEvent#ENTITY_KILLED",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockCookEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the arrow being picked up by the player",
    "method": "getArrow",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getArrow()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "org.bukkit.entity.AbstractArrow"
  },
  {
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "hasParticles",
    "id": "org.bukkit.potion.PotionEffect#hasParticles()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PIGLIN_BRUTE",
    "id": "org.bukkit.loot.LootTables#PIGLIN_BRUTE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the Objective currently displayed in a DisplaySlot on this\\nScoreboard",
    "param-names": [
      "Scoreboard",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "org.bukkit.scoreboard.DisplaySlot"
    ],
    "method": "getObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#getObjective(org.bukkit.scoreboard.DisplaySlot)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "static": true,
    "field": "POWDER_SNOW",
    "id": "org.bukkit.Material#POWDER_SNOW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the bucket used to capture the Entity.\\nThis refers to the bucket clicked with, eg Material#WATER_BUCKET.",
    "method": "getOriginalBucket",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getOriginalBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Check if the block is completely full of entities.",
    "param-names": ["EntityBlockStorage"],
    "param-types": ["org.bukkit.block.EntityBlockStorage"],
    "method": "isFull",
    "id": "org.bukkit.block.EntityBlockStorage#isFull()",
    "class": "org.bukkit.block.EntityBlockStorage",
    "return": "boolean"
  },
  {
    "descr": "The sound played when a pointed dripstone drips water into a cauldron.",
    "static": true,
    "field": "POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON",
    "id": "org.bukkit.Effect#POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "FLAT",
    "id": "org.bukkit.WorldType#FLAT",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType"
  },
  {
    "descr": "Get the title of this inventory window.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getTitle",
    "id": "org.bukkit.inventory.InventoryView#getTitle()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current type of this skeleton.",
    "param-names": ["AbstractSkeleton"],
    "param-types": ["org.bukkit.entity.AbstractSkeleton"],
    "method": "getSkeletonType",
    "id": "org.bukkit.entity.AbstractSkeleton#getSkeletonType()",
    "class": "org.bukkit.entity.AbstractSkeleton",
    "return": "org.bukkit.entity.Skeleton.SkeletonType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.banner.PatternType#valueOf(java.lang.String)",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Spawn an entity of a specific class at the given Location, with\\nthe supplied function run before the entity is added to the world.\\n\\nNote that when the function is run, the entity will not be actually in\\nthe world. Any operation involving such as teleporting the entity is undefined\\nuntil after this function returns.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Clazz",
      "Function"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "java.lang.Class",
      "org.bukkit.util.Consumer"
    ],
    "method": "spawn",
    "id": "org.bukkit.RegionAccessor#<T>spawn(org.bukkit.Location,java.lang.Class<T>,org.bukkit.util.Consumer<T>)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Returns the World where this event is occurring",
    "method": "getWorld",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Returns the number of patterns on this\\nbanner",
    "param-names": ["BannerMeta"],
    "param-types": ["org.bukkit.inventory.meta.BannerMeta"],
    "method": "numberOfPatterns",
    "id": "org.bukkit.inventory.meta.BannerMeta#numberOfPatterns()",
    "class": "org.bukkit.inventory.meta.BannerMeta",
    "return": "int"
  },
  {
    "descr": "Returns the potion data about the base potion",
    "param-names": ["Arrow"],
    "param-types": ["org.bukkit.entity.Arrow"],
    "method": "getBasePotionData",
    "id": "org.bukkit.entity.Arrow#getBasePotionData()",
    "class": "org.bukkit.entity.Arrow",
    "return": "org.bukkit.potion.PotionData"
  },
  {
    "static": true,
    "field": "SMALL_FLAME",
    "id": "org.bukkit.Particle#SMALL_FLAME",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the players current food level",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getFoodLevel",
    "id": "org.bukkit.entity.HumanEntity#getFoodLevel()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "Get the death message that will appear to everyone on the server.",
    "method": "getDeathMessage",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getDeathMessage()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENDER_DRAGON",
    "id": "org.bukkit.loot.LootTables#ENDER_DRAGON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the pitch of this location, measured in degrees.\\n\\nA pitch of 0 represents level forward facing.\\nA pitch of 90 represents downward facing, or negative y\\ndirection.\\nA pitch of -90 represents upward facing, or positive y direction.\\n\\nIncreasing pitch values the equivalent of looking down.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getPitch",
    "id": "org.bukkit.Location#getPitch()",
    "class": "org.bukkit.Location",
    "return": "float"
  },
  {
    "static": true,
    "field": "SKELETON_HORSE_SPAWN_EGG",
    "id": "org.bukkit.Material#SKELETON_HORSE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHIPWRECK_MAP",
    "id": "org.bukkit.loot.LootTables#SHIPWRECK_MAP",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "DRAGON_WALL_HEAD",
    "id": "org.bukkit.Material#DRAGON_WALL_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SOIL_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SOIL_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the hand that was used in this event.\\n\\nThe hand used is only present when the event state is State#FISHING.\\nIn all other states, the hand is null.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerFishEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Sets the item the player is holding in their off hand.",
    "param-names": [
      "PlayerInventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInOffHand",
    "id": "org.bukkit.inventory.PlayerInventory#setItemInOffHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_5",
    "id": "org.bukkit.Material#LEGACY_RECORD_5",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_SHOOT",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Triggered when a hanging entity is created in the world",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.PluginEnableEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.PluginEnableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_STONECUTTER",
    "id": "org.bukkit.Statistic#INTERACT_WITH_STONECUTTER",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Get the item being enchanted.",
    "param-names": ["EnchantingInventory"],
    "param-types": ["org.bukkit.inventory.EnchantingInventory"],
    "method": "getItem",
    "id": "org.bukkit.inventory.EnchantingInventory#getItem()",
    "class": "org.bukkit.inventory.EnchantingInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "The rail ascends in the south (positive Z) direction.",
    "static": true,
    "field": "ASCENDING_SOUTH",
    "id": "org.bukkit.block.data.Rail.Shape#ASCENDING_SOUTH",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "The rail forms a curve connecting the south and east faces of the\\nblock.",
    "static": true,
    "field": "SOUTH_EAST",
    "id": "org.bukkit.block.data.Rail.Shape#SOUTH_EAST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "No markings",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.entity.Horse.Style#NONE",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_SILVERFISH_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SILVERFISH_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Green colored parrot.",
    "static": true,
    "field": "GREEN",
    "id": "org.bukkit.entity.Parrot.Variant#GREEN",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "descr": "Set the entity that you want the mob to target instead.\\n\\nIt is possible to be null, null will cause the entity to be\\ntarget-less.\\n\\nThis is different from cancelling the event. Cancelling the event will\\ncause the entity to keep an original target, while setting to be null\\nwill cause the entity to be reset.",
    "param-names": ["Target"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "setTarget",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#setTarget(org.bukkit.entity.Entity)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent"
  },
  {
    "descr": "Set the relative position from the structure block. Maximum allowed\\ndistance is 48 blocks in any direction.",
    "param-names": [
      "Structure",
      "Vector"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "org.bukkit.util.BlockVector"
    ],
    "method": "setRelativePosition",
    "id": "org.bukkit.block.Structure#setRelativePosition(org.bukkit.util.BlockVector)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Sets the data of the block that the Enderman is carrying.",
    "param-names": [
      "Enderman",
      "Block Data"
    ],
    "param-types": [
      "org.bukkit.entity.Enderman",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setCarriedBlock",
    "id": "org.bukkit.entity.Enderman#setCarriedBlock(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.entity.Enderman"
  },
  {
    "static": true,
    "field": "BLOCK_CROP_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CROP_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The raw slot number clicked, ready for passing to InventoryView #getItem(int) This slot number is unique for the view.",
    "method": "getRawSlot",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getRawSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "int"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the limit for number of SpawnCategory entities that can spawn in a chunk in\\nthis world\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Spawn Category",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.SpawnCategory",
      "int"
    ],
    "method": "setSpawnLimit",
    "id": "org.bukkit.World#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Get world full time when chunk snapshot was captured",
    "param-names": ["ChunkSnapshot"],
    "param-types": ["org.bukkit.ChunkSnapshot"],
    "method": "getCaptureFullTime",
    "id": "org.bukkit.ChunkSnapshot#getCaptureFullTime()",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "long"
  },
  {
    "descr": "Make the warden sense a disturbance in the force at the location given.",
    "param-names": [
      "Warden",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Warden",
      "org.bukkit.Location"
    ],
    "method": "setDisturbanceLocation",
    "id": "org.bukkit.entity.Warden#setDisturbanceLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.Warden"
  },
  {
    "descr": "Sets the value of the 'lit' property.",
    "param-names": [
      "Lightable",
      "Lit"
    ],
    "param-types": [
      "org.bukkit.block.data.Lightable",
      "boolean"
    ],
    "method": "setLit",
    "id": "org.bukkit.block.data.Lightable#setLit(boolean)",
    "class": "org.bukkit.block.data.Lightable"
  },
  {
    "descr": "Server materials.",
    "static": true,
    "field": "MATERIAL",
    "id": "org.bukkit.Registry#MATERIAL",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Gets the Item picked up by the entity.",
    "method": "getItem",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Gets the Level the Player should have at respawn.",
    "method": "getNewLevel",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getNewLevel()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "int"
  },
  {
    "descr": "Any uncategorized entity. No additional effects are applied to these\\nentities relating to a categorization.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.entity.EntityCategory#NONE",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "static": true,
    "field": "HOGLIN_SPAWN_EGG",
    "id": "org.bukkit.Material#HOGLIN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_GOLD_ORE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_GOLD_ORE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Attempts to get the Material with the given name.\\n\\nThis is a normal lookup, names must be the precise name they are given\\nin the enum.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getMaterial",
    "id": "org.bukkit.Material#getMaterial(java.lang.String)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "BAMBOO_SIGN",
    "id": "org.bukkit.Material#BAMBOO_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WEST",
    "id": "org.bukkit.block.BlockFace#WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Get the index of the closest matching color in the palette to the given\\ncolor.",
    "param-names": [
      "R",
      "G",
      "B"
    ],
    "static": true,
    "param-types": [
      "int",
      "int",
      "int"
    ],
    "method": "matchColor",
    "id": "org.bukkit.map.MapPalette#matchColor(int,int,int)",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "ACACIA_PRESSURE_PLATE",
    "id": "org.bukkit.Material#ACACIA_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called when a player's experience cooldown changes.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SMOOTH_BASALT",
    "id": "org.bukkit.Material#SMOOTH_BASALT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#values()",
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status[]"
  },
  {
    "static": true,
    "field": "END_BARRENS",
    "id": "org.bukkit.block.Biome#END_BARRENS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Attempts to update the block represented by this state, setting it to\\nthe new values as defined by this state.\\n\\nThis has the same effect as calling update(force, true). That is to\\nsay, this will trigger a physics update to surrounding blocks.",
    "param-names": [
      "BlockState",
      "Force"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "boolean"
    ],
    "method": "update",
    "id": "org.bukkit.block.BlockState#update(boolean)",
    "class": "org.bukkit.block.BlockState",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SPELL",
    "id": "org.bukkit.Particle#SPELL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets a list of all applied BlockPopulators for this World",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getPopulators",
    "id": "org.bukkit.World#getPopulators()",
    "class": "org.bukkit.World",
    "return": "java.util.List"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerItemBreakEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_SPADE",
    "id": "org.bukkit.Material#LEGACY_STONE_SPADE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the ItemStack to be displayed while in the air and to be\\ndropped on death.",
    "param-names": ["EnderSignal"],
    "param-types": ["org.bukkit.entity.EnderSignal"],
    "method": "getItem",
    "id": "org.bukkit.entity.EnderSignal#getItem()",
    "class": "org.bukkit.entity.EnderSignal",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "VEX",
    "id": "org.bukkit.loot.LootTables#VEX",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns the armor stand's left leg's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getLeftLegPose",
    "id": "org.bukkit.entity.ArmorStand#getLeftLegPose()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_WART_BLOCK",
    "id": "org.bukkit.Material#LEGACY_NETHER_WART_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DIRT",
    "id": "org.bukkit.Material#DIRT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_GOLD_ORE_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHER_GOLD_ORE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the state of weather that the world is being set to",
    "method": "toWeatherState",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#toWeatherState()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks for storage of the specified enchantment.",
    "param-names": [
      "EnchantmentStorageMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.EnchantmentStorageMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "hasStoredEnchant",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#hasStoredEnchant(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "boolean"
  },
  {
    "descr": "Returns the title of this boss bar",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "getTitle",
    "id": "org.bukkit.boss.BossBar#getTitle()",
    "class": "org.bukkit.boss.BossBar",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when a Pig Zombie is angered by another entity.\\n\\nIf the event is cancelled, the pig zombie will not be angered.",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent"
  },
  {
    "static": true,
    "field": "SUSPICIOUS_STEW",
    "id": "org.bukkit.Material#SUSPICIOUS_STEW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SCULK_CHARGE_POP",
    "id": "org.bukkit.Particle#SCULK_CHARGE_POP",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_DISPENSER_LAUNCH",
    "id": "org.bukkit.Sound#BLOCK_DISPENSER_LAUNCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'mode' property.",
    "param-names": ["StructureBlock"],
    "param-types": ["org.bukkit.block.data.type.StructureBlock"],
    "method": "getMode",
    "id": "org.bukkit.block.data.type.StructureBlock#getMode()",
    "class": "org.bukkit.block.data.type.StructureBlock",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode"
  },
  {
    "descr": "Get a list of offered experience level costs of the enchantment.",
    "method": "getExpLevelCostsOffered",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getExpLevelCostsOffered()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "int[]"
  },
  {
    "static": true,
    "field": "STRIDER_SPAWN_EGG",
    "id": "org.bukkit.Material#STRIDER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_ORE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_ORE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check if a vehicle has passengers.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isEmpty",
    "id": "org.bukkit.entity.Entity#isEmpty()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Entity is long jumping.",
    "static": true,
    "field": "LONG_JUMPING",
    "id": "org.bukkit.entity.Pose#LONG_JUMPING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Leave the current vehicle. If the entity is currently in a vehicle (and\\nis removed from it), true will be returned, otherwise false will be\\nreturned.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "leaveVehicle",
    "id": "org.bukkit.entity.Entity#leaveVehicle()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block at the given distance of the given face\\n\\nFor example, the following method places water at 100,102,100; two\\nblocks above 100,100,100.\\n\\nBlock block = world.getBlockAt(100, 100, 100);\\nBlock shower = block.getRelative(BlockFace.UP, 2);\\nshower.setType(Material.WATER);\\n",
    "param-names": [
      "Block",
      "Face",
      "Distance"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace",
      "int"
    ],
    "method": "getRelative",
    "id": "org.bukkit.block.Block#getRelative(org.bukkit.block.BlockFace,int)",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerKickEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Art#values()",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art[]"
  },
  {
    "descr": "This chunk is not loaded.",
    "static": true,
    "field": "UNLOADED",
    "id": "org.bukkit.Chunk.LoadLevel#UNLOADED",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "SMOOTH_RED_SANDSTONE_STAIRS",
    "id": "org.bukkit.Material#SMOOTH_RED_SANDSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MELON_SEEDS",
    "id": "org.bukkit.Material#MELON_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Villager lost their job due to too little experience.",
    "static": true,
    "field": "LOSING_JOB",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason#LOSING_JOB",
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason",
    "return": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason"
  },
  {
    "descr": "Creates explosion at given coordinates with given power and optionally\\nsetting blocks on fire or breaking blocks.",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Power",
      "Set Fire",
      "Break Blocks"
    ],
    "param-types": [
      "org.bukkit.World",
      "double",
      "double",
      "double",
      "float",
      "boolean",
      "boolean"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(double,double,double,float,boolean,boolean)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Play a Sound at the provided Location in the World.\\n\\nThis function will fail silently if Location or Sound are null. No\\nsound will be heard by the players if their clients do not have the\\nrespective sound for the value passed.",
    "param-names": [
      "World",
      "Location",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "java.lang.String",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.Location,java.lang.String,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.HorseJumpEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the maximum x value.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMaxX",
    "id": "org.bukkit.util.BoundingBox#getMaxX()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Sets if the Player is allowed to fly via jump key double-tap like in\\ncreative mode.",
    "param-names": [
      "Player",
      "Flight"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "boolean"
    ],
    "method": "setAllowFlight",
    "id": "org.bukkit.entity.Player#setAllowFlight(boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Set the amount the item will be repaired.\\nHalf of this value will be subtracted from the experience orb which initiated this event.",
    "param-names": ["Amount"],
    "param-types": ["int"],
    "method": "setRepairAmount",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#setRepairAmount(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent"
  },
  {
    "descr": "Clears out a particular slot in the index.",
    "param-names": [
      "Inventory",
      "Index"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "int"
    ],
    "method": "clear",
    "id": "org.bukkit.inventory.Inventory#clear(int)",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "CHERRY_WOOD",
    "id": "org.bukkit.Material#CHERRY_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the player is ignored as not sleeping. If everyone is\\neither sleeping or has this flag set, then time will advance to the\\nnext day. If everyone has this flag set but no one is actually in bed,\\nthen nothing will happen.",
    "param-names": [
      "Player",
      "Is Sleeping"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "boolean"
    ],
    "method": "setSleepingIgnored",
    "id": "org.bukkit.entity.Player#setSleepingIgnored(boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "PLANT",
    "id": "org.bukkit.Art#PLANT",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Server structure types.",
    "static": true,
    "field": "STRUCTURE_TYPE",
    "id": "org.bukkit.Registry#STRUCTURE_TYPE",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_FALL",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The source container the hopper is looking for.\\nThis is the Inventory above the Hopper where it extracts items from.",
    "static": true,
    "field": "SOURCE",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType#SOURCE",
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType",
    "return": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType"
  },
  {
    "descr": "Setting to show/hide armor trim from leather armor.",
    "static": true,
    "field": "HIDE_ARMOR_TRIM",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_ARMOR_TRIM",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockCookEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the percentage of blocks to drop from this explosion",
    "param-names": ["Yield"],
    "param-types": ["float"],
    "method": "setYield",
    "id": "org.bukkit.event.block.BlockExplodeEvent#setYield(float)",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent"
  },
  {
    "descr": "Creates a new Color object with specified component",
    "param-names": [
      "Color",
      "Green"
    ],
    "param-types": [
      "org.bukkit.Color",
      "int"
    ],
    "method": "setGreen",
    "id": "org.bukkit.Color#setGreen(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "UI_CARTOGRAPHY_TABLE_TAKE_RESULT",
    "id": "org.bukkit.Sound#UI_CARTOGRAPHY_TABLE_TAKE_RESULT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "AMBIENT_SOUL_SAND_VALLEY_LOOP",
    "id": "org.bukkit.Sound#AMBIENT_SOUL_SAND_VALLEY_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Send a health update to the player using its known server values. This will\\nsynchronize the health, food, and saturation on the client and therefore may\\nbe useful when changing a player's maximum health attribute.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "sendHealthUpdate",
    "id": "org.bukkit.entity.Player#sendHealthUpdate()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets whether the world is hardcore or not.\\nIn a hardcore world the difficulty is locked to hard.",
    "param-names": [
      "World",
      "Hardcore"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "setHardcore",
    "id": "org.bukkit.World#setHardcore(boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.BrewEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the variant of this axolotl.",
    "param-names": [
      "Axolotl",
      "Variant"
    ],
    "param-types": [
      "org.bukkit.entity.Axolotl",
      "org.bukkit.entity.Axolotl.Variant"
    ],
    "method": "setVariant",
    "id": "org.bukkit.entity.Axolotl#setVariant(org.bukkit.entity.Axolotl.Variant)",
    "class": "org.bukkit.entity.Axolotl"
  },
  {
    "static": true,
    "field": "LEGACY_BOAT_ACACIA",
    "id": "org.bukkit.Material#LEGACY_BOAT_ACACIA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_THUNDER",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_THUNDER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DROWNED",
    "id": "org.bukkit.entity.EntityType#DROWNED",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "SNOOPER",
    "id": "org.bukkit.entity.TropicalFish.Pattern#SNOOPER",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Finds the first slot in the inventory containing an ItemStack with the\\ngiven material",
    "param-names": [
      "Inventory",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.Material"
    ],
    "method": "first",
    "id": "org.bukkit.inventory.Inventory#first(org.bukkit.Material)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "int"
  },
  {
    "descr": "Gets the cause of block ignite.",
    "method": "getCause",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_BOOTS",
    "id": "org.bukkit.Material#LEGACY_IRON_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PINK_WALL_BANNER",
    "id": "org.bukkit.Material#PINK_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether this mob can join an active raid.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "isCanJoinRaid",
    "id": "org.bukkit.entity.Raider#isCanJoinRaid()",
    "class": "org.bukkit.entity.Raider",
    "return": "boolean"
  },
  {
    "descr": "Get the variant of this frog.",
    "param-names": ["Frog"],
    "param-types": ["org.bukkit.entity.Frog"],
    "method": "getVariant",
    "id": "org.bukkit.entity.Frog#getVariant()",
    "class": "org.bukkit.entity.Frog",
    "return": "org.bukkit.entity.Frog.Variant"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_JUNGLE_DOOR",
    "id": "org.bukkit.Material#LEGACY_JUNGLE_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_END_PORTAL_SPAWN",
    "id": "org.bukkit.Sound#BLOCK_END_PORTAL_SPAWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the charging state of this entity.\\nWhen this entity is charging it will having a glowing red texture.",
    "param-names": ["Vex"],
    "param-types": ["org.bukkit.entity.Vex"],
    "method": "isCharging",
    "id": "org.bukkit.entity.Vex#isCharging()",
    "class": "org.bukkit.entity.Vex",
    "return": "boolean"
  },
  {
    "descr": "Set the type of entity this egg will spawn.",
    "param-names": [
      "SpawnEggMeta",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SpawnEggMeta",
      "org.bukkit.entity.EntityType"
    ],
    "method": "setSpawnedType",
    "id": "org.bukkit.inventory.meta.SpawnEggMeta#setSpawnedType(org.bukkit.entity.EntityType)",
    "class": "org.bukkit.inventory.meta.SpawnEggMeta"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerChangedWorldEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent"
  },
  {
    "descr": "Returns the player dyeing the sheep, if available.",
    "method": "getPlayer",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Indicates the teleportation was caused by a player entering a\\nNether portal",
    "static": true,
    "field": "NETHER_PORTAL",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#NETHER_PORTAL",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "White, or (0xFF,0xFF,0xFF) in (R,G,B)",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.Color#WHITE",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Get the Sound this entity will make when drinking the given\\nItemStack.",
    "param-names": [
      "LivingEntity",
      "Item Stack"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "getDrinkingSound",
    "id": "org.bukkit.entity.LivingEntity#getDrinkingSound(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a copy of the velocity that the entity will have after exiting the\\nportal.",
    "method": "getAfter",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getAfter()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.raid.RaidFinishEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets if the Player keeps inventory on death.\\n\\nThis doesn't prevent the items from dropping.\\ngetDrops().clear() should be used stop the\\nitems from dropping.",
    "param-names": ["Keep Inventory"],
    "param-types": ["boolean"],
    "method": "setKeepInventory",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setKeepInventory(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "descr": "Sets the PVP setting for this world.",
    "param-names": [
      "World",
      "Pvp"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "setPVP",
    "id": "org.bukkit.World#setPVP(boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Dummy block used to run a custom function during world generation\\nbefore being removed.",
    "static": true,
    "field": "DATA",
    "id": "org.bukkit.block.data.type.StructureBlock.Mode#DATA",
    "class": "org.bukkit.block.data.type.StructureBlock.Mode",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "FLOWERING_AZALEA",
    "id": "org.bukkit.Material#FLOWERING_AZALEA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_CAMPFIRE",
    "id": "org.bukkit.Statistic#INTERACT_WITH_CAMPFIRE",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the maximum allowed value of the 'charges' property.",
    "param-names": ["RespawnAnchor"],
    "param-types": ["org.bukkit.block.data.type.RespawnAnchor"],
    "method": "getMaximumCharges",
    "id": "org.bukkit.block.data.type.RespawnAnchor#getMaximumCharges()",
    "class": "org.bukkit.block.data.type.RespawnAnchor",
    "return": "int"
  },
  {
    "descr": "Gets the damage change for some modifier",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "getDamage",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "double"
  },
  {
    "static": true,
    "field": "ENTITY_MINECART_RIDING",
    "id": "org.bukkit.Sound#ENTITY_MINECART_RIDING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.boss.BarColor#WHITE",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "descr": "Gets the captured inventory snapshot of this container.\\n\\nThe returned inventory is not linked to any block. Any modifications to\\nthe returned inventory will not be applied to the block represented by\\nthis block state up until #update(boolean, boolean) has been\\ncalled.",
    "param-names": ["Container"],
    "param-types": ["org.bukkit.block.Container"],
    "method": "getSnapshotInventory",
    "id": "org.bukkit.block.Container#getSnapshotInventory()",
    "class": "org.bukkit.block.Container",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Skeleton.SkeletonType#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Skeleton.SkeletonType",
    "return": "org.bukkit.entity.Skeleton.SkeletonType"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERITE_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHERITE_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets limit for number of monsters that can spawn in a chunk in this\\nworld",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getMonsterSpawnLimit",
    "id": "org.bukkit.World#getMonsterSpawnLimit()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "Get if the bee has stung.",
    "param-names": ["Bee"],
    "param-types": ["org.bukkit.entity.Bee"],
    "method": "hasStung",
    "id": "org.bukkit.entity.Bee#hasStung()",
    "class": "org.bukkit.entity.Bee",
    "return": "boolean"
  },
  {
    "descr": "Hostile mobs spawn, enemies deal greater damage than on normal\\ndifficulty, the hunger bar does deplete and starving can kill players.",
    "static": true,
    "field": "HARD",
    "id": "org.bukkit.Difficulty#HARD",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cost (minimum level) which is displayed as a number on the right\\nhand side of the enchantment offer.",
    "param-names": ["EnchantmentOffer"],
    "param-types": ["org.bukkit.enchantments.EnchantmentOffer"],
    "method": "getCost",
    "id": "org.bukkit.enchantments.EnchantmentOffer#getCost()",
    "class": "org.bukkit.enchantments.EnchantmentOffer",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_BRUSH_BRUSHING_SAND",
    "id": "org.bukkit.Sound#ITEM_BRUSH_BRUSHING_SAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_STEP",
    "id": "org.bukkit.Sound#ENTITY_FROG_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'in_wall' property.",
    "param-names": ["Gate"],
    "param-types": ["org.bukkit.block.data.type.Gate"],
    "method": "isInWall",
    "id": "org.bukkit.block.data.type.Gate#isInWall()",
    "class": "org.bukkit.block.data.type.Gate",
    "return": "boolean"
  },
  {
    "descr": "Crossbow projectiles pierce entities",
    "static": true,
    "field": "PIERCING",
    "id": "org.bukkit.enchantments.Enchantment#PIERCING",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Determines if the Player is allowed to fly via jump key double-tap like\\nin creative mode.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getAllowFlight",
    "id": "org.bukkit.entity.Player#getAllowFlight()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "The player is allowed to log in",
    "static": true,
    "field": "ALLOWED",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#ALLOWED",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "descr": "Get the input choice.",
    "param-names": ["CookingRecipe"],
    "param-types": ["org.bukkit.inventory.CookingRecipe"],
    "method": "getInputChoice",
    "id": "org.bukkit.inventory.CookingRecipe#getInputChoice()",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_FENCE",
    "id": "org.bukkit.Material#LEGACY_IRON_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the percentage of blocks to drop from this explosion",
    "param-names": ["Yield"],
    "param-types": ["float"],
    "method": "setYield",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#setYield(float)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent"
  },
  {
    "static": true,
    "field": "SNOWMAN",
    "id": "org.bukkit.entity.EntityType#SNOWMAN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockCookEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SNOW",
    "id": "org.bukkit.entity.Villager.Type#SNOW",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerRiptideEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Spellcaster.Spell#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "descr": "Villages are naturally generating structures that form above ground.\\n\\nThey are usually generated in desert, plains, taiga, and savanna biomes\\nand are a site for villager spawns, with whom the player can trade.",
    "static": true,
    "field": "VILLAGE",
    "id": "org.bukkit.StructureType#VILLAGE",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Pressing the left mouse button twice in quick succession.",
    "static": true,
    "field": "DOUBLE_CLICK",
    "id": "org.bukkit.event.inventory.ClickType#DOUBLE_CLICK",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Returns the not sharped id of this tone.",
    "param-names": ["Note.Tone"],
    "param-types": ["org.bukkit.Note.Tone"],
    "method": "getId",
    "id": "org.bukkit.Note.Tone#getId()",
    "class": "org.bukkit.Note.Tone",
    "return": "byte"
  },
  {
    "descr": "Sets the projectiles charged on this item.\\nRemoves all projectiles when given null.",
    "param-names": [
      "CrossbowMeta",
      "Projectiles"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.CrossbowMeta",
      "java.util.List"
    ],
    "method": "setChargedProjectiles",
    "id": "org.bukkit.inventory.meta.CrossbowMeta#setChargedProjectiles(java.util.List<org.bukkit.inventory.ItemStack>)",
    "class": "org.bukkit.inventory.meta.CrossbowMeta"
  },
  {
    "static": true,
    "field": "BLUE_ORCHID",
    "id": "org.bukkit.Material#BLUE_ORCHID",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Disallows the player from logging in, with the given reason",
    "param-names": [
      "Result",
      "Message"
    ],
    "param-types": [
      "org.bukkit.event.player.PlayerLoginEvent.Result",
      "java.lang.String"
    ],
    "method": "disallow",
    "id": "org.bukkit.event.player.PlayerLoginEvent#disallow(org.bukkit.event.player.PlayerLoginEvent.Result,java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "RED_NETHER_BRICK_WALL",
    "id": "org.bukkit.Material#RED_NETHER_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets if the Material is enabled by the features in a world.",
    "param-names": [
      "Material",
      "World"
    ],
    "param-types": [
      "org.bukkit.Material",
      "org.bukkit.World"
    ],
    "method": "isEnabledByFeature",
    "id": "org.bukkit.Material#isEnabledByFeature(org.bukkit.World)",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DEEPSLATE_IRON_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_IRON_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The seed used to determine how many blocks are removed upon loading of\\nthis structure.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getSeed",
    "id": "org.bukkit.block.Structure#getSeed()",
    "class": "org.bukkit.block.Structure",
    "return": "long"
  },
  {
    "descr": "Sets the value of the 'sculk_sensor_phase' property.",
    "param-names": [
      "SculkSensor",
      "Phase"
    ],
    "param-types": [
      "org.bukkit.block.data.type.SculkSensor",
      "org.bukkit.block.data.type.SculkSensor.Phase"
    ],
    "method": "setPhase",
    "id": "org.bukkit.block.data.type.SculkSensor#setPhase(org.bukkit.block.data.type.SculkSensor.Phase)",
    "class": "org.bukkit.block.data.type.SculkSensor"
  },
  {
    "static": true,
    "field": "ROOTED_DIRT",
    "id": "org.bukkit.Material#ROOTED_DIRT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_STONY_PEAKS",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_STONY_PEAKS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "descr": "Called when a hidden entity is shown to a player.\\n\\nThis event is only called when the entity's visibility status is actually\\nchanged.\\n\\nThis event is called regardless of whether the entity was within tracking\\nrange.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_STRAY_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_CAT_STRAY_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the material that a character in the recipe shape refers to.\\n\\nNote that before an ingredient can be set, the recipe's shape must be defined\\nwith #shape(String...).",
    "param-names": [
      "ShapedRecipe",
      "Key",
      "Ingredient",
      "Raw"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "char",
      "org.bukkit.Material",
      "int"
    ],
    "method": "setIngredient",
    "id": "org.bukkit.inventory.ShapedRecipe#setIngredient(char,org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockBreakEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the Location where the player will spawn at their bed.",
    "param-names": [
      "Player",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location"
    ],
    "method": "setBedSpawnLocation",
    "id": "org.bukkit.entity.Player#setBedSpawnLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Villager.Type#values()",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type[]"
  },
  {
    "static": true,
    "field": "ENTITY_POLAR_BEAR_WARNING",
    "id": "org.bukkit.Sound#ENTITY_POLAR_BEAR_WARNING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum allowed value of the 'flower_amount' property.",
    "param-names": ["PinkPetals"],
    "param-types": ["org.bukkit.block.data.type.PinkPetals"],
    "method": "getMaximumFlowerAmount",
    "id": "org.bukkit.block.data.type.PinkPetals#getMaximumFlowerAmount()",
    "class": "org.bukkit.block.data.type.PinkPetals",
    "return": "int"
  },
  {
    "descr": "Represents green",
    "static": true,
    "field": "GREEN",
    "id": "org.bukkit.ChatColor#GREEN",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent"
  },
  {
    "static": true,
    "field": "LEGACY_PRISMARINE",
    "id": "org.bukkit.Material#LEGACY_PRISMARINE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the chest plate worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Chestplate"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setChestplate",
    "id": "org.bukkit.inventory.EntityEquipment#setChestplate(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_HIT",
    "id": "org.bukkit.Sound#BLOCK_STONE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current border warning distance.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getWarningDistance",
    "id": "org.bukkit.WorldBorder#getWarningDistance()",
    "class": "org.bukkit.WorldBorder",
    "return": "int"
  },
  {
    "descr": "Entering the bed is prevented due to there being some other problem.",
    "static": true,
    "field": "OTHER_PROBLEM",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#OTHER_PROBLEM",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.TextDisplay.TextAlignment#values()",
    "class": "org.bukkit.entity.TextDisplay.TextAlignment",
    "return": "org.bukkit.entity.TextDisplay.TextAlignment[]"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_SNEEZE",
    "id": "org.bukkit.Sound#ENTITY_PANDA_SNEEZE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityInteractEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Extended tip.",
    "static": true,
    "field": "TIP_MERGE",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#TIP_MERGE",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "descr": "Gets the default GameMode for new players.",
    "static": true,
    "method": "getDefaultGameMode",
    "id": "org.bukkit.Bukkit#getDefaultGameMode()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.GameMode"
  },
  {
    "descr": "Expands this bounding box uniformly by the given values in both positive\\nand negative directions.\\n\\nNegative values will shrink the bounding box. Shrinking will be limited\\nto the bounding box's current size.",
    "param-names": [
      "BoundingBox",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "ENTITY_INTERACT",
    "id": "org.bukkit.GameEvent#ENTITY_INTERACT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockBurnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent"
  },
  {
    "descr": "Get the direction of this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "getDirection",
    "id": "org.bukkit.map.MapCursor#getDirection()",
    "class": "org.bukkit.map.MapCursor",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_ROOTS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_HANGING_ROOTS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the second trusted player.\\n\\nThe second trusted player may only be added after the first.",
    "param-names": [
      "Fox",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Fox",
      "org.bukkit.entity.AnimalTamer"
    ],
    "method": "setSecondTrustedPlayer",
    "id": "org.bukkit.entity.Fox#setSecondTrustedPlayer(org.bukkit.entity.AnimalTamer)",
    "class": "org.bukkit.entity.Fox"
  },
  {
    "descr": "Gets the book meta that the player is attempting to add to the book.\\n\\nNote: this is a copy of the proposed new book meta. Use #setNewBookMeta(BookMeta) to change what will actually be added to the\\nbook.",
    "method": "getNewBookMeta",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getNewBookMeta()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "descr": "Anger level 0-39.",
    "static": true,
    "field": "CALM",
    "id": "org.bukkit.entity.Warden.AngerLevel#CALM",
    "class": "org.bukkit.entity.Warden.AngerLevel",
    "return": "org.bukkit.entity.Warden.AngerLevel"
  },
  {
    "descr": "Get the experience given by this recipe.",
    "param-names": ["CookingRecipe"],
    "param-types": ["org.bukkit.inventory.CookingRecipe"],
    "method": "getExperience",
    "id": "org.bukkit.inventory.CookingRecipe#getExperience()",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "float"
  },
  {
    "param-names": ["Map"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.Color#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "The sound played when an anvil lands after\\nfalling",
    "static": true,
    "field": "ANVIL_LAND",
    "id": "org.bukkit.Effect#ANVIL_LAND",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Sets this entity's velocity in meters per tick",
    "param-names": [
      "Entity",
      "Velocity"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.util.Vector"
    ],
    "method": "setVelocity",
    "id": "org.bukkit.entity.Entity#setVelocity(org.bukkit.util.Vector)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "CHICKEN_SPAWN_EGG",
    "id": "org.bukkit.Material#CHICKEN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the wood type of the boat.",
    "param-names": [
      "Boat",
      "Species"
    ],
    "param-types": [
      "org.bukkit.entity.Boat",
      "org.bukkit.TreeSpecies"
    ],
    "method": "setWoodType",
    "id": "org.bukkit.entity.Boat#setWoodType(org.bukkit.TreeSpecies)",
    "class": "org.bukkit.entity.Boat"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "BIRCH_LEAVES",
    "id": "org.bukkit.Material#BIRCH_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_SPADE",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_SPADE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get an iterator through the list of crafting recipes.",
    "static": true,
    "method": "recipeIterator",
    "id": "org.bukkit.Bukkit#recipeIterator()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Iterator"
  },
  {
    "descr": "Remove specific set of itemFlags. This tells the Client it should render it again. This Method does silently ignore double removed itemFlags.",
    "param-names": [
      "ItemMeta",
      "Item Flags"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.ItemFlag[]"
    ],
    "method": "removeItemFlags",
    "id": "org.bukkit.inventory.meta.ItemMeta#removeItemFlags(org.bukkit.inventory.ItemFlag...)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "Gets the displayed text.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "getText",
    "id": "org.bukkit.entity.TextDisplay#getText()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "java.lang.String"
  },
  {
    "descr": "When a villager gets infected and a zombie villager spawns.",
    "static": true,
    "field": "INFECTION",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#INFECTION",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "This method will set the target of individual heads Head of the\\nwither.",
    "param-names": [
      "Wither",
      "Head",
      "Target"
    ],
    "param-types": [
      "org.bukkit.entity.Wither",
      "org.bukkit.entity.Wither.Head",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "setTarget",
    "id": "org.bukkit.entity.Wither#setTarget(org.bukkit.entity.Wither.Head,org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.entity.Wither"
  },
  {
    "descr": "Gets an unmodifiable iterator through all persistent bossbars.\\n\\nnot bound to a org.bukkit.entity.Boss\\n\\nnot created using\\n#createBossBar(String, BarColor, BarStyle, BarFlag...)\\n\\n\\ne.g. bossbars created using the bossbar command",
    "static": true,
    "method": "getBossBars",
    "id": "org.bukkit.Bukkit#getBossBars()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Iterator"
  },
  {
    "descr": "Get all of the faces which are enabled on this block.",
    "param-names": ["MultipleFacing"],
    "param-types": ["org.bukkit.block.data.MultipleFacing"],
    "method": "getFaces",
    "id": "org.bukkit.block.data.MultipleFacing#getFaces()",
    "class": "org.bukkit.block.data.MultipleFacing",
    "return": "java.util.Set"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get an immutable collection of GameRules.",
    "static": true,
    "method": "values",
    "id": "org.bukkit.GameRule#values()",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule[]"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_PICKAXE",
    "id": "org.bukkit.Material#LEGACY_STONE_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the item on the cursor of one of the viewing players.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getCursor",
    "id": "org.bukkit.inventory.InventoryView#getCursor()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ENTITY_IRON_GOLEM_REPAIR",
    "id": "org.bukkit.Sound#ENTITY_IRON_GOLEM_REPAIR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "FLUID_PICKUP",
    "id": "org.bukkit.GameEvent#FLUID_PICKUP",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Called when a human entity's food level changes",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Adds this user's current IP address to the IpBanList. If a previous ban exists, this will\\nupdate the entry. If #getAddress() is null this method will throw an exception.",
    "param-names": [
      "Player",
      "Reason",
      "Duration",
      "Source",
      "Kick Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.time.Duration",
      "java.lang.String",
      "boolean"
    ],
    "method": "banIp",
    "id": "org.bukkit.entity.Player#banIp(java.lang.String,java.time.Duration,java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the damage",
    "param-names": ["Damageable"],
    "param-types": ["org.bukkit.inventory.meta.Damageable"],
    "method": "getDamage",
    "id": "org.bukkit.inventory.meta.Damageable#getDamage()",
    "class": "org.bukkit.inventory.meta.Damageable",
    "return": "int"
  },
  {
    "descr": "Standard jungle tree; 4 blocks wide and tall",
    "static": true,
    "field": "JUNGLE",
    "id": "org.bukkit.TreeType#JUNGLE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets a services manager.",
    "static": true,
    "method": "getServicesManager",
    "id": "org.bukkit.Bukkit#getServicesManager()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.plugin.ServicesManager"
  },
  {
    "descr": "Sets the level of the enchantment.",
    "param-names": [
      "EnchantmentOffer",
      "Enchantment Level"
    ],
    "param-types": [
      "org.bukkit.enchantments.EnchantmentOffer",
      "int"
    ],
    "method": "setEnchantmentLevel",
    "id": "org.bukkit.enchantments.EnchantmentOffer#setEnchantmentLevel(int)",
    "class": "org.bukkit.enchantments.EnchantmentOffer"
  },
  {
    "descr": "Sets how much EXP should be dropped from this death.\\n\\nThis does not indicate how much EXP should be taken from the entity in\\nquestion, merely how much should be created after its death.",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setDroppedExp",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setDroppedExp(int)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "descr": "Gets the most recent warning level of this block.\\nWhen the warning level reaches 4, the shrieker will attempt to spawn a\\nWarden.",
    "param-names": ["SculkShrieker"],
    "param-types": ["org.bukkit.block.SculkShrieker"],
    "method": "getWarningLevel",
    "id": "org.bukkit.block.SculkShrieker#getWarningLevel()",
    "class": "org.bukkit.block.SculkShrieker",
    "return": "int"
  },
  {
    "descr": "Sets the armor stand's right arm's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": [
      "ArmorStand",
      "Pose"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.util.EulerAngle"
    ],
    "method": "setRightArmPose",
    "id": "org.bukkit.entity.ArmorStand#setRightArmPose(org.bukkit.util.EulerAngle)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CATALYST_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CATALYST_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the minimum number of ticks one has to wait for a fish appearing.\\n\\nThe default is 100 ticks (5 seconds).\\nNote that this is before applying lure.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getMinWaitTime",
    "id": "org.bukkit.entity.FishHook#getMinWaitTime()",
    "class": "org.bukkit.entity.FishHook",
    "return": "int"
  },
  {
    "descr": "Stores data for pigs being zapped",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent"
  },
  {
    "descr": "A dropper inventory, with 9 slots of type CONTAINER.",
    "static": true,
    "field": "DROPPER",
    "id": "org.bukkit.event.inventory.InventoryType#DROPPER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Set the time in ticks this firework will exist until it is detonated.",
    "param-names": [
      "Firework",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Firework",
      "int"
    ],
    "method": "setMaxLife",
    "id": "org.bukkit.entity.Firework#setMaxLife(int)",
    "class": "org.bukkit.entity.Firework",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.WorldInitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.WorldInitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Remove all Attributes and AttributeModifiers for a\\ngiven EquipmentSlot.\\nIf the given EquipmentSlot is null, this will remove all\\nAttributeModifiers that do not have an EquipmentSlot set.",
    "param-names": [
      "ItemMeta",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.EquipmentSlot"
    ],
    "method": "removeAttributeModifier",
    "id": "org.bukkit.inventory.meta.ItemMeta#removeAttributeModifier(org.bukkit.inventory.EquipmentSlot)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.WorldLoadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.WorldLoadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Checks for the existence of any stored enchantments.",
    "param-names": ["EnchantmentStorageMeta"],
    "param-types": ["org.bukkit.inventory.meta.EnchantmentStorageMeta"],
    "method": "hasStoredEnchants",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#hasStoredEnchants()",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NETHERITE_LEGGINGS",
    "id": "org.bukkit.Material#NETHERITE_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a creature is spawned by the \"/summon\" command",
    "static": true,
    "field": "COMMAND",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#COMMAND",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets the Z-coordinate of this chunk",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getZ",
    "id": "org.bukkit.Chunk#getZ()",
    "class": "org.bukkit.Chunk",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_HOGLIN",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_HOGLIN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a entries Team on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "getEntryTeam",
    "id": "org.bukkit.scoreboard.Scoreboard#getEntryTeam(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Team"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_BOWL",
    "id": "org.bukkit.Material#LEGACY_BOWL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "MANGROVE_PRESSURE_PLATE",
    "id": "org.bukkit.Material#MANGROVE_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PIGSCENE",
    "id": "org.bukkit.Art#PIGSCENE",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the threshold used for equals().",
    "static": true,
    "method": "getEpsilon",
    "id": "org.bukkit.util.Vector#getEpsilon()",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "descr": "Attempts to add all of the given PotionEffect to the living\\nentity.",
    "param-names": [
      "LivingEntity",
      "Effects"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "java.util.Collection"
    ],
    "method": "addPotionEffects",
    "id": "org.bukkit.entity.LivingEntity#addPotionEffects(java.util.Collection<org.bukkit.potion.PotionEffect>)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Check whether this target includes the specified item.",
    "param-names": [
      "EnchantmentTarget",
      "Item"
    ],
    "param-types": [
      "org.bukkit.enchantments.EnchantmentTarget",
      "org.bukkit.Material"
    ],
    "method": "includes",
    "id": "org.bukkit.enchantments.EnchantmentTarget#includes(org.bukkit.Material)",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "OUTSIDE",
    "id": "org.bukkit.inventory.InventoryView#OUTSIDE",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "int"
  },
  {
    "static": true,
    "field": "IRON_HOE",
    "id": "org.bukkit.Material#IRON_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Anger level 80 or above.",
    "static": true,
    "field": "ANGRY",
    "id": "org.bukkit.entity.Warden.AngerLevel#ANGRY",
    "class": "org.bukkit.entity.Warden.AngerLevel",
    "return": "org.bukkit.entity.Warden.AngerLevel"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether mobs should naturally spawn.",
    "static": true,
    "field": "DO_MOB_SPAWNING",
    "id": "org.bukkit.GameRule#DO_MOB_SPAWNING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "DEEPSLATE_TILE_STAIRS",
    "id": "org.bukkit.Material#DEEPSLATE_TILE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "boolean"
  },
  {
    "descr": "Bell is normally played when a note block is on top of a gold block.",
    "static": true,
    "field": "BELL",
    "id": "org.bukkit.Instrument#BELL",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Checks if the inventory contains at least the minimum amount specified\\nof exactly matching ItemStacks.\\n\\nAn ItemStack only counts if both the type and the amount of the stack\\nmatch.",
    "param-names": [
      "Inventory",
      "Item",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack",
      "int"
    ],
    "method": "contains",
    "id": "org.bukkit.inventory.Inventory#contains(org.bukkit.inventory.ItemStack,int)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PINK_CARPET",
    "id": "org.bukkit.Material#PINK_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_SWORD",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_STEP",
    "id": "org.bukkit.Sound#ENTITY_PANDA_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the hive's flower location.",
    "param-names": ["Beehive"],
    "param-types": ["org.bukkit.block.Beehive"],
    "method": "getFlower",
    "id": "org.bukkit.block.Beehive#getFlower()",
    "class": "org.bukkit.block.Beehive",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ItemMergeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_SQUID_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SQUID_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The seed used to determine which blocks will be removed upon loading.\\n#getIntegrity() and seed are used together to determine which\\nblocks are randomly removed to mimic \"decay.\"",
    "param-names": [
      "Structure",
      "Seed"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "long"
    ],
    "method": "setSeed",
    "id": "org.bukkit.block.Structure#setSeed(long)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Sets the type of this block",
    "param-names": [
      "Block",
      "Type"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.Material"
    ],
    "method": "setType",
    "id": "org.bukkit.block.Block#setType(org.bukkit.Material)",
    "class": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets whether or not the book is being signed. If a book is signed the\\nMaterial changes from BOOK_AND_QUILL to WRITTEN_BOOK.",
    "param-names": ["Signing"],
    "param-types": ["boolean"],
    "method": "setSigning",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#setSigning(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.Rail.Shape#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "static": true,
    "field": "BLOCK_POLISHED_DEEPSLATE_STEP",
    "id": "org.bukkit.Sound#BLOCK_POLISHED_DEEPSLATE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the new respawn location",
    "param-names": ["Respawn Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "setRespawnLocation",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#setRespawnLocation(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent"
  },
  {
    "static": true,
    "field": "WHITE_TERRACOTTA",
    "id": "org.bukkit.Material#WHITE_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BAMBOO_JUNGLE",
    "id": "org.bukkit.block.Biome#BAMBOO_JUNGLE",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "BASALT_DELTAS",
    "id": "org.bukkit.block.Biome#BASALT_DELTAS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the state of the block where it will form or spread to.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_STEP_SAND",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_STEP_SAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LIME_CARPET",
    "id": "org.bukkit.Material#LIME_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the domestication level of this horse.\\n\\nA higher domestication level indicates that the horse is closer to\\nbecoming tame. As the domestication level gets closer to the max\\ndomestication level, the chance of the horse becoming tame increases.",
    "param-names": ["AbstractHorse"],
    "param-types": ["org.bukkit.entity.AbstractHorse"],
    "method": "getDomestication",
    "id": "org.bukkit.entity.AbstractHorse#getDomestication()",
    "class": "org.bukkit.entity.AbstractHorse",
    "return": "int"
  },
  {
    "descr": "Called when a firework explodes.",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent"
  },
  {
    "static": true,
    "field": "LEGACY_STATIONARY_LAVA",
    "id": "org.bukkit.Material#LEGACY_STATIONARY_LAVA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the enchantment bound to this wrapper",
    "param-names": ["EnchantmentWrapper"],
    "param-types": ["org.bukkit.enchantments.EnchantmentWrapper"],
    "method": "getEnchantment",
    "id": "org.bukkit.enchantments.EnchantmentWrapper#getEnchantment()",
    "class": "org.bukkit.enchantments.EnchantmentWrapper",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "TADPOLE",
    "id": "org.bukkit.entity.EntityType#TADPOLE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WARM_OCEAN",
    "id": "org.bukkit.block.Biome#WARM_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the resulting items in the Brewing Stand.\\nThe returned list, in case of a server-created event instance, is\\nmutable. Any changes in the returned list will reflect in the brewing\\nresult if the event is not cancelled. If the size of the list is reduced,\\nremaining items will be set to air.",
    "method": "getResults",
    "id": "org.bukkit.event.inventory.BrewEvent#getResults()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Adds a custom potion effect to this cloud.",
    "param-names": [
      "AreaEffectCloud",
      "Effect",
      "Overwrite"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.potion.PotionEffect",
      "boolean"
    ],
    "method": "addCustomEffect",
    "id": "org.bukkit.entity.AreaEffectCloud#addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "CHERRY_LOG",
    "id": "org.bukkit.Material#CHERRY_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_DRAGON_FLAP",
    "id": "org.bukkit.Sound#ENTITY_ENDER_DRAGON_FLAP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum speed of a minecart. The speed is unrelated to the\\nvelocity.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getMaxSpeed",
    "id": "org.bukkit.entity.Minecart#getMaxSpeed()",
    "class": "org.bukkit.entity.Minecart",
    "return": "double"
  },
  {
    "descr": "Gray colored parrot.",
    "static": true,
    "field": "GRAY",
    "id": "org.bukkit.entity.Parrot.Variant#GRAY",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "param-names": ["Effect Type"],
    "static": true,
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "getByEffect",
    "id": "org.bukkit.potion.PotionType#getByEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "SLIME_SPAWN_EGG",
    "id": "org.bukkit.Material#SLIME_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The rail ascends in the east (positive X) direction.",
    "static": true,
    "field": "ASCENDING_EAST",
    "id": "org.bukkit.block.data.Rail.Shape#ASCENDING_EAST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_MAGENTA_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_MAGENTA_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a new BlockData instance for the specified Material, with\\nall properties initialized to unspecified defaults.",
    "param-names": ["Material"],
    "static": true,
    "param-types": ["org.bukkit.Material"],
    "method": "createBlockData",
    "id": "org.bukkit.Bukkit#createBlockData(org.bukkit.Material)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Sets the Difficulty of the world.",
    "param-names": [
      "World",
      "Difficulty"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Difficulty"
    ],
    "method": "setDifficulty",
    "id": "org.bukkit.World#setDifficulty(org.bukkit.Difficulty)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SCULK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ZOGLIN_STEP",
    "id": "org.bukkit.Sound#ENTITY_ZOGLIN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.EnderDragon.Phase#values()",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase[]"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_BUTTON_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_STONE_BUTTON_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether or not the mob's custom name is displayed client side.\\n\\nThis value has no effect on players, they will always display their\\nname.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isCustomNameVisible",
    "id": "org.bukkit.entity.Entity#isCustomNameVisible()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Gets the number of raider groups which would spawn.\\n\\nThis also includes the group which spawns in the additional wave (if\\npresent).",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getTotalGroups",
    "id": "org.bukkit.Raid#getTotalGroups()",
    "class": "org.bukkit.Raid",
    "return": "int"
  },
  {
    "descr": "Temperate (brown-orange) frog.",
    "static": true,
    "field": "TEMPERATE",
    "id": "org.bukkit.entity.Frog.Variant#TEMPERATE",
    "class": "org.bukkit.entity.Frog.Variant",
    "return": "org.bukkit.entity.Frog.Variant"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BLUE_WALL_BANNER",
    "id": "org.bukkit.Material#BLUE_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if the inventory contains ItemStacks matching the given\\nItemStack whose amounts sum to at least the minimum amount specified.",
    "param-names": [
      "Inventory",
      "Item",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack",
      "int"
    ],
    "method": "containsAtLeast",
    "id": "org.bukkit.inventory.Inventory#containsAtLeast(org.bukkit.inventory.ItemStack,int)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "boolean"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "LEGACY_SOUL_SAND",
    "id": "org.bukkit.Material#LEGACY_SOUL_SAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the raid involved with this event.",
    "method": "getRaid",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#getRaid()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "org.bukkit.Raid"
  },
  {
    "descr": "Gets whether the world will be hardcore or not.\\nIn a hardcore world the difficulty will be locked to hard.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "hardcore",
    "id": "org.bukkit.WorldCreator#hardcore()",
    "class": "org.bukkit.WorldCreator",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityTransformEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "boolean"
  },
  {
    "descr": "Set a new state for the sniffer.\\n\\nThis will also make the sniffer make the transition to the new state.",
    "param-names": [
      "Sniffer",
      "State"
    ],
    "param-types": [
      "org.bukkit.entity.Sniffer",
      "org.bukkit.entity.Sniffer.State"
    ],
    "method": "setState",
    "id": "org.bukkit.entity.Sniffer#setState(org.bukkit.entity.Sniffer.State)",
    "class": "org.bukkit.entity.Sniffer"
  },
  {
    "static": true,
    "field": "POLISHED_GRANITE",
    "id": "org.bukkit.Material#POLISHED_GRANITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Whether phantoms will appear without sleeping or not.",
    "static": true,
    "field": "DO_INSOMNIA",
    "id": "org.bukkit.GameRule#DO_INSOMNIA",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Material#valueOf(java.lang.String)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the BlockData at the given coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockData",
    "id": "org.bukkit.RegionAccessor#getBlockData(int,int,int)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "field": "LEGACY_SMOOTH_BRICK",
    "id": "org.bukkit.Material#LEGACY_SMOOTH_BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the amount of smaller slimes to spawn",
    "method": "getCount",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#getCount()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_END_GATEWAY_SPAWN",
    "id": "org.bukkit.Sound#BLOCK_END_GATEWAY_SPAWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_MANGROVE_ROOTS_STEP",
    "id": "org.bukkit.Sound#BLOCK_MANGROVE_ROOTS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "EAST",
    "id": "org.bukkit.block.BlockFace#EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ZOMBIE_WALL_HEAD",
    "id": "org.bukkit.Material#ZOMBIE_WALL_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the profile of the player who owns the skull. This player profile\\nmay appear as the texture depending on skull type.",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "getOwnerProfile",
    "id": "org.bukkit.block.Skull#getOwnerProfile()",
    "class": "org.bukkit.block.Skull",
    "return": "org.bukkit.profile.PlayerProfile"
  },
  {
    "static": true,
    "field": "BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES",
    "id": "org.bukkit.Sound#BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SILVERFISH_HURT",
    "id": "org.bukkit.Sound#ENTITY_SILVERFISH_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Used when:\\n\\nA Furnace starts smelting FurnaceStartSmeltEvent\\nA Brewing-Stand starts brewing BrewingStartEvent\\nA Campfire starts cooking CampfireStartEvent\\n",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the resulting item in hand after the bucket event",
    "method": "getItemStack",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getItemStack()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Increments automatically when a player kills another player on the black team.",
    "static": true,
    "field": "TEAM_KILL_BLACK",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_BLACK",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "STONY_PEAKS",
    "id": "org.bukkit.block.Biome#STONY_PEAKS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_AXE",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Chance of a zombie to spawn reinforcements.",
    "static": true,
    "field": "ZOMBIE_SPAWN_REINFORCEMENTS",
    "id": "org.bukkit.attribute.Attribute#ZOMBIE_SPAWN_REINFORCEMENTS",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "SPRUCE_BUTTON",
    "id": "org.bukkit.Material#SPRUCE_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Player emptying the cauldron by filling their bucket.",
    "static": true,
    "field": "BUCKET_FILL",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#BUCKET_FILL",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.WorldSaveEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.WorldSaveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "IRON_BLOCK",
    "id": "org.bukkit.Material#IRON_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the rotation of the skull in the world (or facing direction if this\\nis a wall mounted skull).",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "getRotation",
    "id": "org.bukkit.block.Skull#getRotation()",
    "class": "org.bukkit.block.Skull",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Set itemflags which should be ignored when rendering a ItemStack in the Client. This Method does silently ignore double set itemFlags.",
    "param-names": [
      "ItemMeta",
      "Item Flags"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.ItemFlag[]"
    ],
    "method": "addItemFlags",
    "id": "org.bukkit.inventory.meta.ItemMeta#addItemFlags(org.bukkit.inventory.ItemFlag...)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CARROT_ON_A_STICK",
    "id": "org.bukkit.Material#CARROT_ON_A_STICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether this arrow is critical.\\n\\nCritical arrows have increased damage and cause particle effects.\\n\\nCritical arrows generally occur when a player fully draws a bow before\\nfiring.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "isCritical",
    "id": "org.bukkit.entity.AbstractArrow#isCritical()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BELL_RING",
    "id": "org.bukkit.Statistic#BELL_RING",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Sets the amount of time to apply the glowing effect for.",
    "param-names": [
      "SpectralArrow",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.entity.SpectralArrow",
      "int"
    ],
    "method": "setGlowingTicks",
    "id": "org.bukkit.entity.SpectralArrow#setGlowingTicks(int)",
    "class": "org.bukkit.entity.SpectralArrow"
  },
  {
    "static": true,
    "field": "IN_AIR",
    "id": "org.bukkit.entity.Boat.Status#IN_AIR",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "descr": "A white llama.",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.entity.Llama.Color#WHITE",
    "class": "org.bukkit.entity.Llama.Color",
    "return": "org.bukkit.entity.Llama.Color"
  },
  {
    "static": true,
    "field": "BLOCK_GRAVEL_STEP",
    "id": "org.bukkit.Sound#BLOCK_GRAVEL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "field": "ANCIENT_CITY",
    "id": "org.bukkit.loot.LootTables#ANCIENT_CITY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "RING_BELL",
    "id": "org.bukkit.GameEvent#RING_BELL",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_ENDER_PORTAL_FRAME",
    "id": "org.bukkit.Material#LEGACY_ENDER_PORTAL_FRAME",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TIDE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#TIDE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DRIP_LAVA",
    "id": "org.bukkit.Particle#DRIP_LAVA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Represents the normal grass species.",
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.GrassSpecies#NORMAL",
    "class": "org.bukkit.GrassSpecies",
    "return": "org.bukkit.GrassSpecies"
  },
  {
    "descr": "Stops the jukebox playing without ejecting the record.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "stopPlaying",
    "id": "org.bukkit.block.Jukebox#stopPlaying()",
    "class": "org.bukkit.block.Jukebox"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#values()",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason[]"
  },
  {
    "descr": "Returns the active PotionEffect of the specified type.\\n\\nIf the effect is not present on the entity then null will be returned.",
    "param-names": [
      "LivingEntity",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "getPotionEffect",
    "id": "org.bukkit.entity.LivingEntity#getPotionEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "descr": "Gets the locations explored by the sniffer.\\n\\nNote: the returned locations use sniffer's current world.",
    "param-names": ["Sniffer"],
    "param-types": ["org.bukkit.entity.Sniffer"],
    "method": "getExploredLocations",
    "id": "org.bukkit.entity.Sniffer#getExploredLocations()",
    "class": "org.bukkit.entity.Sniffer",
    "return": "java.util.Collection"
  },
  {
    "descr": "Indicates the teleportation was caused by a player consuming chorus\\nfruit",
    "static": true,
    "field": "CHORUS_FRUIT",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#CHORUS_FRUIT",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "static": true,
    "field": "BLAZE_SPAWN_EGG",
    "id": "org.bukkit.Material#BLAZE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increases the maximum health of an entity with health that cannot be\\nregenerated, but is refilled every 30 seconds.",
    "static": true,
    "field": "ABSORPTION",
    "id": "org.bukkit.potion.PotionEffectType#ABSORPTION",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent"
  },
  {
    "descr": "Gets the Total EXP the Player should have at respawn.",
    "method": "getNewTotalExp",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getNewTotalExp()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "int"
  },
  {
    "descr": "Set the entity that you want the mob to target instead.\\n\\nIt is possible to be null, null will cause the entity to be\\ntarget-less.\\n\\nThis is different from cancelling the event. Cancelling the event will\\ncause the entity to keep an original target, while setting to be null\\nwill cause the entity to be reset.",
    "param-names": ["Target"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "setTarget",
    "id": "org.bukkit.event.entity.EntityTargetEvent#setTarget(org.bukkit.entity.Entity)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent"
  },
  {
    "descr": "Return the ability to breed of the animal.",
    "param-names": ["Breedable"],
    "param-types": ["org.bukkit.entity.Breedable"],
    "method": "canBreed",
    "id": "org.bukkit.entity.Breedable#canBreed()",
    "class": "org.bukkit.entity.Breedable",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SCAFFOLDING_HIT",
    "id": "org.bukkit.Sound#BLOCK_SCAFFOLDING_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when an item is spawned into a world",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent"
  },
  {
    "descr": "BlockData: EndPortalFrame",
    "static": true,
    "field": "END_PORTAL_FRAME",
    "id": "org.bukkit.Material#END_PORTAL_FRAME",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the message of the day message.",
    "method": "getMotd",
    "id": "org.bukkit.event.server.ServerListPingEvent#getMotd()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Play a sound for a player at the location.\\n\\nThis function will fail silently if Location or Sound are null.",
    "param-names": [
      "Player",
      "Location",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.Sound",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.Location,org.bukkit.Sound,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Get the Sound this entity will make when falling from a large\\nheight.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getFallDamageSoundBig",
    "id": "org.bukkit.entity.LivingEntity#getFallDamageSoundBig()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Get the item powering the beacon.",
    "param-names": ["BeaconInventory"],
    "param-types": ["org.bukkit.inventory.BeaconInventory"],
    "method": "getItem",
    "id": "org.bukkit.inventory.BeaconInventory#getItem()",
    "class": "org.bukkit.inventory.BeaconInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the value of the 'in_wall' property.",
    "param-names": [
      "Gate",
      "In Wall"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Gate",
      "boolean"
    ],
    "method": "setInWall",
    "id": "org.bukkit.block.data.type.Gate#setInWall(boolean)",
    "class": "org.bukkit.block.data.type.Gate"
  },
  {
    "descr": "Whether mobs should drop items.",
    "static": true,
    "field": "DO_MOB_LOOT",
    "id": "org.bukkit.GameRule#DO_MOB_LOOT",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Sets the complete data for this block\\n\\nNote that applyPhysics = false is not in general safe. It should only be\\nused when you need to avoid triggering a physics update of neighboring\\nblocks, for example when creating a Bisected block. If you are\\nusing a custom populator, then this parameter may also be required to\\nprevent triggering infinite chunk loads on border blocks. This method\\nshould NOT be used to \"hack\" physics by placing blocks in impossible\\nlocations. Such blocks are liable to be removed on various events such as\\nworld upgrades. Furthermore setting large amounts of such blocks in close\\nproximity may overload the server physics engine if an update is\\ntriggered at a later point. If this occurs, the resulting behavior is\\nundefined.",
    "param-names": [
      "Block",
      "Data",
      "Apply Physics"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.data.BlockData",
      "boolean"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.block.Block#setBlockData(org.bukkit.block.data.BlockData,boolean)",
    "class": "org.bukkit.block.Block"
  },
  {
    "descr": "Adds new recipe to the end of the book.",
    "param-names": [
      "KnowledgeBookMeta",
      "Recipes"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.KnowledgeBookMeta",
      "org.bukkit.NamespacedKey[]"
    ],
    "method": "addRecipe",
    "id": "org.bukkit.inventory.meta.KnowledgeBookMeta#addRecipe(org.bukkit.NamespacedKey...)",
    "class": "org.bukkit.inventory.meta.KnowledgeBookMeta"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.structure.StructureRotation#values()",
    "class": "org.bukkit.block.structure.StructureRotation",
    "return": "org.bukkit.block.structure.StructureRotation[]"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_INSERT",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_INSERT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ILLUSIONER",
    "id": "org.bukkit.loot.LootTables#ILLUSIONER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ACACIA_CHEST_BOAT",
    "id": "org.bukkit.Material#ACACIA_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_MANGROVE_PROPAGULE",
    "id": "org.bukkit.Material#POTTED_MANGROVE_PROPAGULE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_HUSK_DEATH",
    "id": "org.bukkit.Sound#ENTITY_HUSK_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether the piglin is a baby",
    "param-names": [
      "PiglinAbstract",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.PiglinAbstract",
      "boolean"
    ],
    "method": "setBaby",
    "id": "org.bukkit.entity.PiglinAbstract#setBaby(boolean)",
    "class": "org.bukkit.entity.PiglinAbstract"
  },
  {
    "descr": "Walk quicker on soul blocks",
    "static": true,
    "field": "SOUL_SPEED",
    "id": "org.bukkit.enchantments.Enchantment#SOUL_SPEED",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Nether fortresses are very large complexes that mainly consist of\\nnetherbricks.\\n\\nThey contain blaze spawners, nether wart farms, and loot chests. They are\\nonly generated in the nether dimension.",
    "static": true,
    "field": "NETHER_FORTRESS",
    "id": "org.bukkit.StructureType#NETHER_FORTRESS",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Damage caused when an entity steps on Material#MAGMA_BLOCK.\\n\\nDamage: 1",
    "static": true,
    "field": "HOT_FLOOR",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#HOT_FLOOR",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "This controls the action to take with the item the player is holding.\\nThis includes both blocks and items (such as flint and steel or\\nrecords). When this is set to default, it will be allowed if no action\\nis taken on the interacted block.",
    "method": "useItemInHand",
    "id": "org.bukkit.event.player.PlayerInteractEvent#useItemInHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "descr": "Gets the value of the 'delay' property.",
    "param-names": ["Repeater"],
    "param-types": ["org.bukkit.block.data.type.Repeater"],
    "method": "getDelay",
    "id": "org.bukkit.block.data.type.Repeater#getDelay()",
    "class": "org.bukkit.block.data.type.Repeater",
    "return": "int"
  },
  {
    "descr": "Creates a new bounding box from the given corner coordinates.",
    "param-names": [
      "X1",
      "Y1",
      "Z1",
      "X2",
      "Y2",
      "Z2"
    ],
    "param-types": [
      "double",
      "double",
      "double",
      "double",
      "double",
      "double"
    ],
    "id": "org.bukkit.util.BoundingBox#BoundingBox(double,double,double,double,double,double)",
    "class": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Set the collar color of this wolf",
    "param-names": [
      "Wolf",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.Wolf",
      "org.bukkit.DyeColor"
    ],
    "method": "setCollarColor",
    "id": "org.bukkit.entity.Wolf#setCollarColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.entity.Wolf"
  },
  {
    "descr": "Called when a brewing stand starts to brew.",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent"
  },
  {
    "descr": "Checks if entities in this chunk are loaded.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "isEntitiesLoaded",
    "id": "org.bukkit.Chunk#isEntitiesLoaded()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "descr": "BlockData: EnderChest",
    "static": true,
    "field": "ENDER_CHEST",
    "id": "org.bukkit.Material#ENDER_CHEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_BLAZE_BURN",
    "id": "org.bukkit.Sound#ENTITY_BLAZE_BURN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when an item used by the player takes durability damage as a result of\\nbeing used.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerFishEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the new spawn location.",
    "param-names": ["New Spawn"],
    "param-types": ["org.bukkit.Location"],
    "method": "setNewSpawn",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#setNewSpawn(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent"
  },
  {
    "descr": "The sensor is active.",
    "static": true,
    "field": "ACTIVE",
    "id": "org.bukkit.block.data.type.SculkSensor.Phase#ACTIVE",
    "class": "org.bukkit.block.data.type.SculkSensor.Phase",
    "return": "org.bukkit.block.data.type.SculkSensor.Phase"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerInteractEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the chance of the boots being dropped upon this creature's death.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getBootsDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getBootsDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "static": true,
    "field": "LEAVE_GAME",
    "id": "org.bukkit.Statistic#LEAVE_GAME",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Librarian profession. Wears a white robe. Librarians primarily trade\\nfor paper, books, and enchanted books.",
    "static": true,
    "field": "LIBRARIAN",
    "id": "org.bukkit.entity.Villager.Profession#LIBRARIAN",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.inventory.EquipmentSlot#values()",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot[]"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "WHITE_SHULKER_BOX",
    "id": "org.bukkit.Material#WHITE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TOTAL_KILLS",
    "id": "org.bukkit.scoreboard.Criterias#TOTAL_KILLS",
    "class": "org.bukkit.scoreboard.Criterias",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the hand which placed the block",
    "method": "getHand",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_LEATHER",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_LEATHER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WARPED_WART_BLOCK",
    "id": "org.bukkit.Material#WARPED_WART_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the indexes of all the bottles present on this block.",
    "param-names": ["BrewingStand"],
    "param-types": ["org.bukkit.block.data.type.BrewingStand"],
    "method": "getBottles",
    "id": "org.bukkit.block.data.type.BrewingStand#getBottles()",
    "class": "org.bukkit.block.data.type.BrewingStand",
    "return": "java.util.Set"
  },
  {
    "descr": "Check if all criteria for this advancement have been met.",
    "param-names": ["AdvancementProgress"],
    "param-types": ["org.bukkit.advancement.AdvancementProgress"],
    "method": "isDone",
    "id": "org.bukkit.advancement.AdvancementProgress#isDone()",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "boolean"
  },
  {
    "descr": "Creates a new PlayerProfile.",
    "param-names": ["Unique Id"],
    "static": true,
    "param-types": ["java.util.UUID"],
    "method": "createPlayerProfile",
    "id": "org.bukkit.Bukkit#createPlayerProfile(java.util.UUID)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.profile.PlayerProfile"
  },
  {
    "descr": "Get the category to which this entity belongs.\\nCategories may subject this entity to additional effects, benefits or\\ndebuffs.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getCategory",
    "id": "org.bukkit.entity.LivingEntity#getCategory()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "descr": "The spell that summons Vexes.",
    "static": true,
    "field": "SUMMON",
    "id": "org.bukkit.entity.Evoker.Spell#SUMMON",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "descr": "Gets the Z-coordinate of this chunk",
    "param-names": ["ChunkSnapshot"],
    "param-types": ["org.bukkit.ChunkSnapshot"],
    "method": "getZ",
    "id": "org.bukkit.ChunkSnapshot#getZ()",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "int"
  },
  {
    "static": true,
    "field": "CHERRY_BOAT",
    "id": "org.bukkit.Material#CHERRY_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the dark blue team.",
    "static": true,
    "field": "KILLED_BY_TEAM_DARK_BLUE",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_DARK_BLUE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "ENTITY_POLAR_BEAR_DEATH",
    "id": "org.bukkit.Sound#ENTITY_POLAR_BEAR_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When TNT is primed by a nearby explosion.",
    "static": true,
    "field": "EXPLOSION",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#EXPLOSION",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "DARK_OAK_HANGING_SIGN",
    "id": "org.bukkit.Material#DARK_OAK_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the shards which will be dropped when this pot is broken.",
    "param-names": ["DecoratedPot"],
    "param-types": ["org.bukkit.block.DecoratedPot"],
    "method": "getShards",
    "id": "org.bukkit.block.DecoratedPot#getShards()",
    "class": "org.bukkit.block.DecoratedPot",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityBreedEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "SPRUCE_LEAVES",
    "id": "org.bukkit.Material#SPRUCE_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entities related to Monsters, eg: Witch, Zombie, Creeper, etc.",
    "static": true,
    "field": "MONSTER",
    "id": "org.bukkit.entity.SpawnCategory#MONSTER",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Writes loaded players to disk.",
    "static": true,
    "method": "savePlayers",
    "id": "org.bukkit.Bukkit#savePlayers()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "ITEM_SHIELD_BREAK",
    "id": "org.bukkit.Sound#ITEM_SHIELD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This is called immediately after a player registers for a plugin channel.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent"
  },
  {
    "descr": "Get the item in this frame",
    "param-names": ["ItemFrame"],
    "param-types": ["org.bukkit.entity.ItemFrame"],
    "method": "getItem",
    "id": "org.bukkit.entity.ItemFrame#getItem()",
    "class": "org.bukkit.entity.ItemFrame",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "COW",
    "id": "org.bukkit.entity.EntityType#COW",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the price multiplier for the cost of this trade.",
    "param-names": [
      "MerchantRecipe",
      "Price Multiplier"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "float"
    ],
    "method": "setPriceMultiplier",
    "id": "org.bukkit.inventory.MerchantRecipe#setPriceMultiplier(float)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the potion type bound to this wrapper.",
    "param-names": ["PotionEffectTypeWrapper"],
    "param-types": ["org.bukkit.potion.PotionEffectTypeWrapper"],
    "method": "getType",
    "id": "org.bukkit.potion.PotionEffectTypeWrapper#getType()",
    "class": "org.bukkit.potion.PotionEffectTypeWrapper",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "The client accepted the pack and is beginning a download of it.",
    "static": true,
    "field": "ACCEPTED",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#ACCEPTED",
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SPRUCE_CHEST_BOAT",
    "id": "org.bukkit.Material#SPRUCE_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_FENCE",
    "id": "org.bukkit.Material#LEGACY_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "POLAR_BEAR",
    "id": "org.bukkit.entity.EntityType#POLAR_BEAR",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "boolean"
  },
  {
    "descr": "The number of tones including sharped tones.",
    "static": true,
    "field": "TONES_COUNT",
    "id": "org.bukkit.Note.Tone#TONES_COUNT",
    "class": "org.bukkit.Note.Tone",
    "return": "byte"
  },
  {
    "descr": "How many total ticks the current fuel should last.",
    "static": true,
    "field": "TICKS_FOR_CURRENT_FUEL",
    "id": "org.bukkit.inventory.InventoryView.Property#TICKS_FOR_CURRENT_FUEL",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "LEGACY_CLAY",
    "id": "org.bukkit.Material#LEGACY_CLAY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A slot in the crafting matrix, or an 'input' slot.",
    "static": true,
    "field": "CRAFTING",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#CRAFTING",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Gets all Objectives of a Criteria on the Scoreboard",
    "param-names": [
      "Scoreboard",
      "Criteria"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "getObjectivesByCriteria",
    "id": "org.bukkit.scoreboard.Scoreboard#getObjectivesByCriteria(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent"
  },
  {
    "descr": "Adds multiples of the specified ingredient.",
    "param-names": [
      "ShapelessRecipe",
      "Count",
      "Ingredient",
      "Rawdata"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "int",
      "org.bukkit.Material",
      "int"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(int,org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Get the amount of X-coordinates to modify to get the represented block",
    "param-names": ["BlockFace"],
    "param-types": ["org.bukkit.block.BlockFace"],
    "method": "getModX",
    "id": "org.bukkit.block.BlockFace#getModX()",
    "class": "org.bukkit.block.BlockFace",
    "return": "int"
  },
  {
    "descr": "Gets the metadata for this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getData",
    "id": "org.bukkit.block.BlockState#getData()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.material.MaterialData"
  },
  {
    "descr": "Returns the potion data about the base potion",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getBasePotionData",
    "id": "org.bukkit.entity.AreaEffectCloud#getBasePotionData()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "org.bukkit.potion.PotionData"
  },
  {
    "static": true,
    "field": "ZOMBIFIED_PIGLIN",
    "id": "org.bukkit.entity.EntityType#ZOMBIFIED_PIGLIN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent"
  },
  {
    "descr": "Checks to see if any meta data has been defined.",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "hasItemMeta",
    "id": "org.bukkit.inventory.ItemStack#hasItemMeta()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'thickness' property.",
    "param-names": [
      "PointedDripstone",
      "Thickness"
    ],
    "param-types": [
      "org.bukkit.block.data.type.PointedDripstone",
      "org.bukkit.block.data.type.PointedDripstone.Thickness"
    ],
    "method": "setThickness",
    "id": "org.bukkit.block.data.type.PointedDripstone#setThickness(org.bukkit.block.data.type.PointedDripstone.Thickness)",
    "class": "org.bukkit.block.data.type.PointedDripstone"
  },
  {
    "descr": "The special character which prefixes all chat colour codes. Use this if\\nyou need to dynamically convert colour codes from your custom format.",
    "static": true,
    "field": "COLOR_CHAR",
    "id": "org.bukkit.ChatColor#COLOR_CHAR",
    "class": "org.bukkit.ChatColor",
    "return": "char"
  },
  {
    "static": true,
    "field": "SHRIEK",
    "id": "org.bukkit.GameEvent#SHRIEK",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.TreeType#values()",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType[]"
  },
  {
    "descr": "Check whether or not this bell is shaking. A bell is considered to be\\nshaking if it was recently rung.\\n\\nA bell will typically shake for 50 ticks.",
    "param-names": ["Bell"],
    "param-types": ["org.bukkit.block.Bell"],
    "method": "isShaking",
    "id": "org.bukkit.block.Bell#isShaking()",
    "class": "org.bukkit.block.Bell",
    "return": "boolean"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.BrewEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "WAXED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#WAXED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the category which this recipe will appear in the recipe book under.\\nDefaults to CookingBookCategory#MISC if not set.",
    "param-names": [
      "CookingRecipe",
      "Category"
    ],
    "param-types": [
      "org.bukkit.inventory.CookingRecipe",
      "org.bukkit.inventory.recipe.CookingBookCategory"
    ],
    "method": "setCategory",
    "id": "org.bukkit.inventory.CookingRecipe#setCategory(org.bukkit.inventory.recipe.CookingBookCategory)",
    "class": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMITE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ENDERMITE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerRiptideEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Create a furnace recipe to craft the specified ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Input",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,float,int)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "descr": "The sound played when phantom bites.",
    "static": true,
    "field": "PHANTOM_BITE",
    "id": "org.bukkit.Effect#PHANTOM_BITE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "SOUL_FIRE",
    "id": "org.bukkit.Material#SOUL_FIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the owner of the skull\\n\\nInvolves a potentially blocking web request to acquire the profile data for\\nthe provided name.",
    "param-names": [
      "Skull",
      "Name"
    ],
    "param-types": [
      "org.bukkit.block.Skull",
      "java.lang.String"
    ],
    "method": "setOwner",
    "id": "org.bukkit.block.Skull#setOwner(java.lang.String)",
    "class": "org.bukkit.block.Skull",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RABBIT",
    "id": "org.bukkit.entity.EntityType#RABBIT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Adds a plugin ticket for this chunk, loading this chunk if it is not\\nalready loaded.\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": [
      "Chunk",
      "Plugin"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "addPluginChunkTicket",
    "id": "org.bukkit.Chunk#addPluginChunkTicket(org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SCAFFOLDING_STEP",
    "id": "org.bukkit.Sound#BLOCK_SCAFFOLDING_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "POTTED_DANDELION",
    "id": "org.bukkit.Material#POTTED_DANDELION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the entity that was hit, if it was an entity that was hit.",
    "method": "getHitEntity",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getHitEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the player's last death location.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getLastDeathLocation",
    "id": "org.bukkit.entity.HumanEntity#getLastDeathLocation()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Expands this bounding box in the specified direction.\\n\\nNegative values will expand the bounding box in the negative direction,\\npositive values will expand it in the positive direction. The magnitude\\nof the direction vector determines the amount of expansion.",
    "param-names": [
      "BoundingBox",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector"
    ],
    "method": "expandDirectional",
    "id": "org.bukkit.util.BoundingBox#expandDirectional(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_CRIMSON_HYPHAE",
    "id": "org.bukkit.Material#STRIPPED_CRIMSON_HYPHAE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The number of seconds the combustee should be alight for.\\n\\nThis value will only ever increase the combustion time, not decrease\\nexisting combustion times.",
    "param-names": ["Duration"],
    "param-types": ["int"],
    "method": "setDuration",
    "id": "org.bukkit.event.entity.EntityCombustEvent#setDuration(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent"
  },
  {
    "descr": "Gets the humidity for the given block coordinates.\\n\\nIt is safe to run this method when the block does not exist, it will\\nnot create the block.",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "int"
    ],
    "method": "getHumidity",
    "id": "org.bukkit.World#getHumidity(int,int,int)",
    "class": "org.bukkit.World",
    "return": "double"
  },
  {
    "descr": "Locks the equipment slot with the specified\\nLockType locking mechanism.",
    "param-names": [
      "ArmorStand",
      "Slot",
      "Lock Type"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.entity.ArmorStand.LockType"
    ],
    "method": "addEquipmentLock",
    "id": "org.bukkit.entity.ArmorStand#addEquipmentLock(org.bukkit.inventory.EquipmentSlot,org.bukkit.entity.ArmorStand.LockType)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockDispenseEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Starts a trade between the player and the merchant.\\nNote that only one player may trade with a merchant at once. You must use\\nthe force parameter for this.",
    "param-names": [
      "HumanEntity",
      "Merchant",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.Merchant",
      "boolean"
    ],
    "method": "openMerchant",
    "id": "org.bukkit.entity.HumanEntity#openMerchant(org.bukkit.inventory.Merchant,boolean)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Get the center Z position of this map.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "getCenterZ",
    "id": "org.bukkit.map.MapView#getCenterZ()",
    "class": "org.bukkit.map.MapView",
    "return": "int"
  },
  {
    "static": true,
    "field": "ELYTRA",
    "id": "org.bukkit.Material#ELYTRA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the context in which the server was loaded.",
    "method": "getType",
    "id": "org.bukkit.event.server.ServerLoadEvent#getType()",
    "event": true,
    "class": "org.bukkit.event.server.ServerLoadEvent",
    "return": "org.bukkit.event.server.ServerLoadEvent.LoadType"
  },
  {
    "descr": "Find the closest nearby structure of a given StructureType.\\nFinding unexplored structures can, and will, block if the world is\\nlooking in chunks that gave not generated yet. This can lead to the world\\ntemporarily freezing while locating an unexplored structure.\\n\\nThe radius is not a rigid square radius. Each structure may alter\\nhow many chunks to check for each iteration. Do not assume that only a\\nradius x radius chunk area will be checked. For example,\\nStructureType#WOODLAND_MANSION can potentially check up to 20,000\\nblocks away (or more) regardless of the radius used.\\n\\nThis will not load or generate chunks. This can also lead to\\ninstances where the server can hang if you are only looking for\\nunexplored structures. This is because it will keep looking further and\\nfurther out in order to find the structure.\\n\\nThe difference between searching for a StructureType and a\\nStructure is, that a StructureType can refer to multiple\\nStructure Structures while searching for a Structure\\nwhile only search for the given Structure.",
    "param-names": [
      "World",
      "Origin",
      "Structure Type",
      "Radius",
      "Find Unexplored"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.generator.structure.StructureType",
      "int",
      "boolean"
    ],
    "method": "locateNearestStructure",
    "id": "org.bukkit.World#locateNearestStructure(org.bukkit.Location,org.bukkit.generator.structure.StructureType,int,boolean)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.StructureSearchResult"
  },
  {
    "descr": "Gets the associated data value representing this growth state",
    "param-names": ["CropState"],
    "param-types": ["org.bukkit.CropState"],
    "method": "getData",
    "id": "org.bukkit.CropState#getData()",
    "class": "org.bukkit.CropState",
    "return": "byte"
  },
  {
    "static": true,
    "field": "LEGACY_ENDER_STONE",
    "id": "org.bukkit.Material#LEGACY_ENDER_STONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entity is gliding.",
    "static": true,
    "field": "FALL_FLYING",
    "id": "org.bukkit.entity.Pose#FALL_FLYING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "B",
    "id": "org.bukkit.Note.Tone#B",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_HELMET",
    "id": "org.bukkit.Material#LEGACY_IRON_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_IDLE_AIR",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_IDLE_AIR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_DISPLAY",
    "id": "org.bukkit.entity.EntityType#BLOCK_DISPLAY",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "GHAST_TEAR",
    "id": "org.bukkit.Material#GHAST_TEAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Smaller jungle tree; 1 block wide",
    "static": true,
    "field": "SMALL_JUNGLE",
    "id": "org.bukkit.TreeType#SMALL_JUNGLE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets the value of the 'thickness' property.",
    "param-names": ["PointedDripstone"],
    "param-types": ["org.bukkit.block.data.type.PointedDripstone"],
    "method": "getThickness",
    "id": "org.bukkit.block.data.type.PointedDripstone#getThickness()",
    "class": "org.bukkit.block.data.type.PointedDripstone",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "descr": "Sets the wither's current invulnerability ticks.\\nWhen invulnerability ticks reach 0, the wither will trigger an explosion.",
    "param-names": [
      "Wither",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Wither",
      "int"
    ],
    "method": "setInvulnerabilityTicks",
    "id": "org.bukkit.entity.Wither#setInvulnerabilityTicks(int)",
    "class": "org.bukkit.entity.Wither"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "REDSTONE_LAMP",
    "id": "org.bukkit.Material#REDSTONE_LAMP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the resultant ItemStack for this event",
    "method": "getResult",
    "id": "org.bukkit.event.block.BlockCookEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "When the target attacks the entity, so entity targets it",
    "static": true,
    "field": "TARGET_ATTACKED_ENTITY",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#TARGET_ATTACKED_ENTITY",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Creates a new item stack derived from the specified stack",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "id": "org.bukkit.inventory.ItemStack#ItemStack(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "FISHING_FISH",
    "id": "org.bukkit.loot.LootTables#FISHING_FISH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the value of the 'up' property.",
    "param-names": [
      "Wall",
      "Up"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Wall",
      "boolean"
    ],
    "method": "setUp",
    "id": "org.bukkit.block.data.type.Wall#setUp(boolean)",
    "class": "org.bukkit.block.data.type.Wall"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#values()",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause[]"
  },
  {
    "static": true,
    "field": "UI_STONECUTTER_SELECT_RECIPE",
    "id": "org.bukkit.Sound#UI_STONECUTTER_SELECT_RECIPE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'face' property.",
    "param-names": ["Switch"],
    "param-types": ["org.bukkit.block.data.type.Switch"],
    "method": "getFace",
    "id": "org.bukkit.block.data.type.Switch#getFace()",
    "class": "org.bukkit.block.data.type.Switch",
    "return": "org.bukkit.block.data.type.Switch.Face"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_CHEST",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_CHEST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Blinds an entity.",
    "static": true,
    "field": "BLINDNESS",
    "id": "org.bukkit.potion.PotionEffectType#BLINDNESS",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the amount of experience the player will receive",
    "method": "getAmount",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#getAmount()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerAnimationType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerAnimationType",
    "return": "org.bukkit.event.player.PlayerAnimationType"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "WARPED_STAIRS",
    "id": "org.bukkit.Material#WARPED_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "FALLING_SPORE_BLOSSOM",
    "id": "org.bukkit.Particle#FALLING_SPORE_BLOSSOM",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the Spell the Evoker is currently using.",
    "param-names": ["Evoker"],
    "param-types": ["org.bukkit.entity.Evoker"],
    "method": "getCurrentSpell",
    "id": "org.bukkit.entity.Evoker#getCurrentSpell()",
    "class": "org.bukkit.entity.Evoker",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "descr": "How to display the name tags of players on this team.",
    "static": true,
    "field": "NAME_TAG_VISIBILITY",
    "id": "org.bukkit.scoreboard.Team.Option#NAME_TAG_VISIBILITY",
    "class": "org.bukkit.scoreboard.Team.Option",
    "return": "org.bukkit.scoreboard.Team.Option"
  },
  {
    "static": true,
    "field": "BLOCK_LARGE_AMETHYST_BUD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_LARGE_AMETHYST_BUD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an iron golem is spawned to defend a village",
    "static": true,
    "field": "VILLAGE_DEFENSE",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#VILLAGE_DEFENSE",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets a copy of the item the entity is currently holding\\nin their off hand.",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getItemInOffHand",
    "id": "org.bukkit.inventory.EntityEquipment#getItemInOffHand()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "SNOWY_BEACH",
    "id": "org.bukkit.block.Biome#SNOWY_BEACH",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerKickEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Sets the value of the 'part' property.",
    "param-names": [
      "Bed",
      "Part"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Bed",
      "org.bukkit.block.data.type.Bed.Part"
    ],
    "method": "setPart",
    "id": "org.bukkit.block.data.type.Bed#setPart(org.bukkit.block.data.type.Bed.Part)",
    "class": "org.bukkit.block.data.type.Bed"
  },
  {
    "descr": "One of the number keys 1-9, correspond to slots on the hotbar.",
    "static": true,
    "field": "NUMBER_KEY",
    "id": "org.bukkit.event.inventory.ClickType#NUMBER_KEY",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Iron golem puts away rose.",
    "static": true,
    "field": "IRON_GOLEM_SHEATH",
    "id": "org.bukkit.EntityEffect#IRON_GOLEM_SHEATH",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "ACACIA_BOAT",
    "id": "org.bukkit.Material#ACACIA_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CAKE_ADD_CANDLE",
    "id": "org.bukkit.Sound#BLOCK_CAKE_ADD_CANDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns whether the item has a block state currently\\nattached to it.",
    "param-names": ["BlockStateMeta"],
    "param-types": ["org.bukkit.inventory.meta.BlockStateMeta"],
    "method": "hasBlockState",
    "id": "org.bukkit.inventory.meta.BlockStateMeta#hasBlockState()",
    "class": "org.bukkit.inventory.meta.BlockStateMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the Seed for this world.",
    "param-names": ["WorldInfo"],
    "param-types": ["org.bukkit.generator.WorldInfo"],
    "method": "getSeed",
    "id": "org.bukkit.generator.WorldInfo#getSeed()",
    "class": "org.bukkit.generator.WorldInfo",
    "return": "long"
  },
  {
    "descr": "Called when entities are unloaded.\\nThe provided chunk may or may not be loaded.",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_SADDLE",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_SADDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets all raids that are going on over this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getRaids",
    "id": "org.bukkit.World#getRaids()",
    "class": "org.bukkit.World",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the old level of the player",
    "method": "getOldLevel",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#getOldLevel()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "int"
  },
  {
    "descr": "Returns the reason for the unleashing.",
    "method": "getReason",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Effect.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.Effect.Type",
    "return": "org.bukkit.Effect.Type"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "DARK_OAK_WOOD",
    "id": "org.bukkit.Material#DARK_OAK_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the world's ticks per water underground creature spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn water underground creature.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water underground creature in\\nthis world on every tick.\\nA value of 400 will mean the server will attempt to spawn water underground creature\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, water underground creature spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Ticks Per Water Underground Creature Spawns"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setTicksPerWaterUndergroundCreatureSpawns",
    "id": "org.bukkit.World#setTicksPerWaterUndergroundCreatureSpawns(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Sets the value of the 'type' property.",
    "param-names": [
      "Slab",
      "Type"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Slab",
      "org.bukkit.block.data.type.Slab.Type"
    ],
    "method": "setType",
    "id": "org.bukkit.block.data.type.Slab#setType(org.bukkit.block.data.type.Slab.Type)",
    "class": "org.bukkit.block.data.type.Slab"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_PIGSTEP",
    "id": "org.bukkit.Sound#MUSIC_DISC_PIGSTEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the cursor collection associated with this canvas.",
    "param-names": ["MapCanvas"],
    "param-types": ["org.bukkit.map.MapCanvas"],
    "method": "getCursors",
    "id": "org.bukkit.map.MapCanvas#getCursors()",
    "class": "org.bukkit.map.MapCanvas",
    "return": "org.bukkit.map.MapCursorCollection"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ENDERMITE",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ENDERMITE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The switch is mounted to the ceiling and pointing dowanrds.",
    "static": true,
    "field": "CEILING",
    "id": "org.bukkit.block.data.FaceAttachable.AttachedFace#CEILING",
    "class": "org.bukkit.block.data.FaceAttachable.AttachedFace",
    "return": "org.bukkit.block.data.FaceAttachable.AttachedFace"
  },
  {
    "descr": "Gets a random vector with components having a random value between 0\\nand 1.",
    "static": true,
    "method": "getRandom",
    "id": "org.bukkit.util.Vector#getRandom()",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.scoreboard.Team.Option#valueOf(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team.Option",
    "return": "org.bukkit.scoreboard.Team.Option"
  },
  {
    "descr": "Set the Raid that this raider is participating in.",
    "param-names": [
      "Raider",
      "Raid"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "org.bukkit.Raid"
    ],
    "method": "setRaid",
    "id": "org.bukkit.entity.Raider#setRaid(org.bukkit.Raid)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "descr": "Subtracts a vector from this one.",
    "param-names": [
      "Vector",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "subtract",
    "id": "org.bukkit.util.Vector#subtract(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the player with the exact given name, case insensitive.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getPlayerExact",
    "id": "org.bukkit.Bukkit#getPlayerExact(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "MOB_KILLS",
    "id": "org.bukkit.Statistic#MOB_KILLS",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Sets the leggings worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Leggings"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setLeggings",
    "id": "org.bukkit.inventory.EntityEquipment#setLeggings(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Sets the cost (minimum level) which is displayed as a number on the right\\nhand side of the enchantment offer.",
    "param-names": [
      "EnchantmentOffer",
      "Cost"
    ],
    "param-types": [
      "org.bukkit.enchantments.EnchantmentOffer",
      "int"
    ],
    "method": "setCost",
    "id": "org.bukkit.enchantments.EnchantmentOffer#setCost(int)",
    "class": "org.bukkit.enchantments.EnchantmentOffer"
  },
  {
    "static": true,
    "field": "ENTITY_ROAR",
    "id": "org.bukkit.GameEvent#ENTITY_ROAR",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "BlockData: Snowable",
    "static": true,
    "field": "GRASS_BLOCK",
    "id": "org.bukkit.Material#GRASS_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GREEN_WOOL",
    "id": "org.bukkit.Material#GREEN_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the ClickType for this event.\\n\\nThis is insulated against changes to the inventory by other plugins.",
    "method": "getClick",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Aqua, or (0x00,0xFF,0xFF) in (R,G,B)",
    "static": true,
    "field": "AQUA",
    "id": "org.bukkit.Color#AQUA",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "BLOCK_HONEY_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_HONEY_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the slot number of the currently held item",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getHeldItemSlot",
    "id": "org.bukkit.inventory.PlayerInventory#getHeldItemSlot()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "CREEPER_HEAD",
    "id": "org.bukkit.Material#CREEPER_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_CLOSE",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A flying splash potion.",
    "static": true,
    "field": "SPLASH_POTION",
    "id": "org.bukkit.entity.EntityType#SPLASH_POTION",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "SHULKER",
    "id": "org.bukkit.entity.EntityType#SHULKER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_NYLIUM_HIT",
    "id": "org.bukkit.Sound#BLOCK_NYLIUM_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allows the Enchantment to be placed on weapons (swords)",
    "static": true,
    "field": "WEAPON",
    "id": "org.bukkit.enchantments.EnchantmentTarget#WEAPON",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "static": true,
    "field": "ZOGLIN",
    "id": "org.bukkit.entity.EntityType#ZOGLIN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Campfire",
    "static": true,
    "field": "SOUL_CAMPFIRE",
    "id": "org.bukkit.Material#SOUL_CAMPFIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Raised when a vehicle is destroyed, which could be caused by either a\\nplayer or the environment. This is not raised if the boat is simply\\n'removed' due to other means.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent"
  },
  {
    "descr": "Set the Y component.",
    "param-names": [
      "Vector",
      "Y"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "float"
    ],
    "method": "setY",
    "id": "org.bukkit.util.Vector#setY(float)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerQuitEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerRegisterChannelEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WARD_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#WARD_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether the Panda is on its back",
    "param-names": [
      "Panda",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Panda",
      "boolean"
    ],
    "method": "setOnBack",
    "id": "org.bukkit.entity.Panda#setOnBack(boolean)",
    "class": "org.bukkit.entity.Panda"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_GRINDSTONE",
    "id": "org.bukkit.Statistic#INTERACT_WITH_GRINDSTONE",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_SNOW_GOLEM_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SNOW_GOLEM_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents blue",
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.ChatColor#BLUE",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Gets the x-coordinate of this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getX",
    "id": "org.bukkit.block.Block#getX()",
    "class": "org.bukkit.block.Block",
    "return": "int"
  },
  {
    "descr": "Sets the billboard setting of this entity.\\nThe billboard setting controls the automatic rotation of the entity to\\nface the player.",
    "param-names": [
      "Display",
      "Billboard"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "org.bukkit.entity.Display.Billboard"
    ],
    "method": "setBillboard",
    "id": "org.bukkit.entity.Display#setBillboard(org.bukkit.entity.Display.Billboard)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "descr": "Sets the players current exhaustion level",
    "param-names": [
      "HumanEntity",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "float"
    ],
    "method": "setExhaustion",
    "id": "org.bukkit.entity.HumanEntity#setExhaustion(float)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Whether the debug screen shows all or reduced information.",
    "static": true,
    "field": "REDUCED_DEBUG_INFO",
    "id": "org.bukkit.GameRule#REDUCED_DEBUG_INFO",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "ORANGE_CANDLE_CAKE",
    "id": "org.bukkit.Material#ORANGE_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The spell that makes the target blind.",
    "static": true,
    "field": "BLINDNESS",
    "id": "org.bukkit.entity.Spellcaster.Spell#BLINDNESS",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_DROWNED",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_DROWNED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_VINDICATOR_DEATH",
    "id": "org.bukkit.Sound#ENTITY_VINDICATOR_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_HISS",
    "id": "org.bukkit.Sound#ENTITY_CAT_HISS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "ZOMBIE_HEAD",
    "id": "org.bukkit.Material#ZOMBIE_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the Strider's new shivering state.",
    "method": "isShivering",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#isShivering()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the target involved. This may be in the form of an IP or a player\\nname.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "getTarget",
    "id": "org.bukkit.BanEntry#getTarget()",
    "class": "org.bukkit.BanEntry",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_WATCH",
    "id": "org.bukkit.Material#LEGACY_WATCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BellResonateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the players current experience points towards the next level.\\n\\nThis is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getExp",
    "id": "org.bukkit.entity.Player#getExp()",
    "class": "org.bukkit.entity.Player",
    "return": "float"
  },
  {
    "descr": "Increments automatically when a player kills another player on the dark purple team.",
    "static": true,
    "field": "TEAM_KILL_DARK_PURPLE",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_DARK_PURPLE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "This represents  the damage reduction caused by blocking, only present for\\nPlayer Players.",
    "static": true,
    "field": "BLOCKING",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#BLOCKING",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "descr": "Set the specified gamerule to specified value.\\n\\nThe rule may attempt to validate the value passed, will return true if\\nvalue was set.\\n\\nIf rule is null, the function will return false.",
    "param-names": [
      "World",
      "Rule",
      "Value"
    ],
    "param-types": [
      "org.bukkit.World",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "setGameRuleValue",
    "id": "org.bukkit.World#setGameRuleValue(java.lang.String,java.lang.String)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "IRON_SHOVEL",
    "id": "org.bukkit.Material#IRON_SHOVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "BIRCH_STAIRS",
    "id": "org.bukkit.Material#BIRCH_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Rotates the vector around the z axis\\n\\nThis piece of math is based on the standard rotation matrix for vectors\\nin three dimensional space. This matrix can be found here:\\nRotation\\nMatrix.",
    "param-names": [
      "Vector",
      "Angle"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rotateAroundZ",
    "id": "org.bukkit.util.Vector#rotateAroundZ(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_CARTOGRAPHER",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_CARTOGRAPHER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_BUTTON",
    "id": "org.bukkit.Material#LEGACY_STONE_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the height if this display.",
    "param-names": [
      "Display",
      "Height"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "float"
    ],
    "method": "setDisplayHeight",
    "id": "org.bukkit.entity.Display#setDisplayHeight(float)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "static": true,
    "field": "CONTAINER_OPEN",
    "id": "org.bukkit.GameEvent#CONTAINER_OPEN",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "BAMBOO_CHEST_RAFT",
    "id": "org.bukkit.Material#BAMBOO_CHEST_RAFT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Damage caused when an entity contacts a block such as a Cactus,\\nDripstone (Stalagmite) or Berry Bush.\\n\\nDamage: variable",
    "static": true,
    "field": "CONTACT",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#CONTACT",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "WANDERING_TRADER_SPAWN_EGG",
    "id": "org.bukkit.Material#WANDERING_TRADER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerQuitEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BAMBOO",
    "id": "org.bukkit.entity.Boat.Type#BAMBOO",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Stores the ItemStack at the given index of the inventory.",
    "param-names": [
      "Inventory",
      "Index",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "int",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.Inventory#setItem(int,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "LANDING_OBSIDIAN_TEAR",
    "id": "org.bukkit.Particle#LANDING_OBSIDIAN_TEAR",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Mirrors the player's experience points.",
    "static": true,
    "field": "XP",
    "id": "org.bukkit.scoreboard.Criteria#XP",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "POTATOES",
    "id": "org.bukkit.Material#POTATOES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SQUARE_BOTTOM_RIGHT",
    "id": "org.bukkit.block.banner.PatternType#SQUARE_BOTTOM_RIGHT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Adds a material the piglin will pickup and store in his inventory.",
    "param-names": [
      "Piglin",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Piglin",
      "org.bukkit.Material"
    ],
    "method": "addMaterialOfInterest",
    "id": "org.bukkit.entity.Piglin#addMaterialOfInterest(org.bukkit.Material)",
    "class": "org.bukkit.entity.Piglin",
    "return": "boolean"
  },
  {
    "descr": "Returns the World where this event is occurring",
    "method": "getWorld",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Villager gained employment.",
    "static": true,
    "field": "EMPLOYED",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason#EMPLOYED",
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason",
    "return": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason"
  },
  {
    "static": true,
    "field": "ITEM_BRUSH_BRUSHING_GENERIC",
    "id": "org.bukkit.Sound#ITEM_BRUSH_BRUSHING_GENERIC",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SLIME_BLOCK",
    "id": "org.bukkit.Material#SLIME_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A normal piston which does not pull connected blocks backwards on\\nretraction.",
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.block.data.type.TechnicalPiston.Type#NORMAL",
    "class": "org.bukkit.block.data.type.TechnicalPiston.Type",
    "return": "org.bukkit.block.data.type.TechnicalPiston.Type"
  },
  {
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.ChunkPopulateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: RedstoneRail",
    "static": true,
    "field": "POWERED_RAIL",
    "id": "org.bukkit.Material#POWERED_RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "AbstractHorse",
      "Variant"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractHorse",
      "org.bukkit.entity.Horse.Variant"
    ],
    "method": "setVariant",
    "id": "org.bukkit.entity.AbstractHorse#setVariant(org.bukkit.entity.Horse.Variant)",
    "class": "org.bukkit.entity.AbstractHorse"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockFormEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Creates a potion effect. Assumes that particles are visible",
    "param-names": [
      "Type",
      "Duration",
      "Amplifier",
      "Ambient"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffectType",
      "int",
      "int",
      "boolean"
    ],
    "id": "org.bukkit.potion.PotionEffect#PotionEffect(org.bukkit.potion.PotionEffectType,int,int,boolean)",
    "class": "org.bukkit.potion.PotionEffect"
  },
  {
    "static": true,
    "field": "PINK_TULIP",
    "id": "org.bukkit.Material#PINK_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_WEB",
    "id": "org.bukkit.Material#LEGACY_WEB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the power of the jump.\\n\\nPower is a value that defines how much of the horse's jump strength\\nshould be used for the jump. Power is effectively multiplied times\\nthe horse's jump strength to determine how high the jump is; 0\\nrepresents no jump strength while 1 represents full jump strength.\\nSetting power to a value above 1 will use additional jump strength\\nthat the horse does not usually have.\\n\\nPower does not affect how high the horse is capable of jumping, only\\nhow much of its jumping capability will be used in this jump. To set\\nthe horse's overall jump strength, see AbstractHorse#setJumpStrength(double).",
    "method": "getPower",
    "id": "org.bukkit.event.entity.HorseJumpEvent#getPower()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "float"
  },
  {
    "descr": "Set the secondary effect on this beacon, or null to clear. Note that tier\\nmust be &gt;= 4 for this effect to be active.",
    "param-names": [
      "Beacon",
      "Effect"
    ],
    "param-types": [
      "org.bukkit.block.Beacon",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "setSecondaryEffect",
    "id": "org.bukkit.block.Beacon#setSecondaryEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.block.Beacon"
  },
  {
    "descr": "Gets the minimum x value.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMinX",
    "id": "org.bukkit.util.BoundingBox#getMinX()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Called when the moisture level of a soil block changes.",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.NotePlayEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the first slot in the inventory containing an ItemStack with\\nthe given stack. This will only match a slot if both the type and the\\namount of the stack match",
    "param-names": [
      "Inventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "first",
    "id": "org.bukkit.inventory.Inventory#first(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "int"
  },
  {
    "descr": "Returns the raid involved with this event.",
    "method": "getRaid",
    "id": "org.bukkit.event.raid.RaidStopEvent#getRaid()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "org.bukkit.Raid"
  },
  {
    "static": true,
    "field": "BEETROOT",
    "id": "org.bukkit.Material#BEETROOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_BROWN_MUSHROOM",
    "id": "org.bukkit.Material#POTTED_BROWN_MUSHROOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "In an enchanting inventory, the bottom button's level value.",
    "static": true,
    "field": "ENCHANT_LEVEL3",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_LEVEL3",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_PLAY",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_PLAY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the full in-game time on this world since the world generation",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getGameTime",
    "id": "org.bukkit.World#getGameTime()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "static": true,
    "field": "SIDEBAR_WHITE",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_WHITE",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets whether or not this entity is visible by default.\\nIf this entity is not visible by default, then\\nPlayer#showEntity(org.bukkit.plugin.Plugin, org.bukkit.entity.Entity)\\nwill need to be called before the entity is visible to a given player.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isVisibleByDefault",
    "id": "org.bukkit.entity.Entity#isVisibleByDefault()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Gets whether this zombie can break doors",
    "param-names": ["Zombie"],
    "param-types": ["org.bukkit.entity.Zombie"],
    "method": "canBreakDoors",
    "id": "org.bukkit.entity.Zombie#canBreakDoors()",
    "class": "org.bukkit.entity.Zombie",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.CampfireStartEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SIDEBAR_BLUE",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_BLUE",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "ENDERCHEST_OPENED",
    "id": "org.bukkit.Statistic#ENDERCHEST_OPENED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SAND_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SAND_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.PortalCreateEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "The switch is mounted to the floor and pointing upwards.",
    "static": true,
    "field": "FLOOR",
    "id": "org.bukkit.block.data.type.Switch.Face#FLOOR",
    "class": "org.bukkit.block.data.type.Switch.Face",
    "return": "org.bukkit.block.data.type.Switch.Face"
  },
  {
    "static": true,
    "field": "DONKEY",
    "id": "org.bukkit.entity.EntityType#DONKEY",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": [
      "Slime",
      "Sz"
    ],
    "param-types": [
      "org.bukkit.entity.Slime",
      "int"
    ],
    "method": "setSize",
    "id": "org.bukkit.entity.Slime#setSize(int)",
    "class": "org.bukkit.entity.Slime"
  },
  {
    "static": true,
    "field": "LEGACY_LEATHER_BOOTS",
    "id": "org.bukkit.Material#LEGACY_LEATHER_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Allows the Enchantment to be placed on all items",
    "static": true,
    "field": "ALL",
    "id": "org.bukkit.enchantments.EnchantmentTarget#ALL",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "static": true,
    "field": "ADMIRING_ITEM",
    "id": "org.bukkit.entity.memory.MemoryKey#ADMIRING_ITEM",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Gets the value of the specified permission, if set.\\n\\nIf a permission override is not set on this object, the default value\\nof the permission will be returned.",
    "param-names": [
      "Permissible",
      "Name"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "java.lang.String"
    ],
    "method": "hasPermission",
    "id": "org.bukkit.permissions.Permissible#hasPermission(java.lang.String)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "boolean"
  },
  {
    "descr": "The sound played when a skeleton converts to a stray.",
    "static": true,
    "field": "SKELETON_CONVERTED_TO_STRAY",
    "id": "org.bukkit.Effect#SKELETON_CONVERTED_TO_STRAY",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "CHORUS_FLOWER",
    "id": "org.bukkit.Material#CHORUS_FLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_GLASS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_GLASS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the Location where the player will spawn at their bed.",
    "param-names": [
      "Player",
      "Location",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "boolean"
    ],
    "method": "setBedSpawnLocation",
    "id": "org.bukkit.entity.Player#setBedSpawnLocation(org.bukkit.Location,boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "The dragon will charge a player.",
    "static": true,
    "field": "CHARGE_PLAYER",
    "id": "org.bukkit.entity.EnderDragon.Phase#CHARGE_PLAYER",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Sets the value of the 'extended' property.",
    "param-names": [
      "Piston",
      "Extended"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Piston",
      "boolean"
    ],
    "method": "setExtended",
    "id": "org.bukkit.block.data.type.Piston#setExtended(boolean)",
    "class": "org.bukkit.block.data.type.Piston"
  },
  {
    "descr": "Get the maximum amount of players which can login to this server.",
    "static": true,
    "method": "getMaxPlayers",
    "id": "org.bukkit.Bukkit#getMaxPlayers()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ITEM_PICKUP_COOLDOWN_TICKS",
    "id": "org.bukkit.entity.memory.MemoryKey#ITEM_PICKUP_COOLDOWN_TICKS",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Set the current lectern page.\\nIf the page is greater than the number of pages of the book currently in\\nthe inventory, then behavior is undefined.",
    "param-names": [
      "Lectern",
      "Page"
    ],
    "param-types": [
      "org.bukkit.block.Lectern",
      "int"
    ],
    "method": "setPage",
    "id": "org.bukkit.block.Lectern#setPage(int)",
    "class": "org.bukkit.block.Lectern"
  },
  {
    "static": true,
    "field": "BANNER_LIGHT_BLUE",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_LIGHT_BLUE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Get if the falling block will not become a block upon landing and not drop\\nan item.\\n\\nUnlike #getDropItem(), this property will prevent the block from\\nforming into a block when it lands, causing it to disappear. If this property\\nis true and #getDropItem() is true, an item will NOT\\nbe dropped.",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "getCancelDrop",
    "id": "org.bukkit.entity.FallingBlock#getCancelDrop()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LAVA",
    "id": "org.bukkit.Particle#LAVA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_SNIFFER_EGG_PLOP",
    "id": "org.bukkit.Sound#BLOCK_SNIFFER_EGG_PLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the spawner's creature type.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getSpawnedType",
    "id": "org.bukkit.block.CreatureSpawner#getSpawnedType()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Set breedability of the animal, if the animal is a baby and set to\\nbreed it will instantly grow up.",
    "param-names": [
      "Breedable",
      "Breed"
    ],
    "param-types": [
      "org.bukkit.entity.Breedable",
      "boolean"
    ],
    "method": "setBreed",
    "id": "org.bukkit.entity.Breedable#setBreed(boolean)",
    "class": "org.bukkit.entity.Breedable"
  },
  {
    "descr": "When the entity drinks a potion.",
    "static": true,
    "field": "POTION_DRINK",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#POTION_DRINK",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Triggers a raid when the player enters a village.\\noof.",
    "static": true,
    "field": "BAD_OMEN",
    "id": "org.bukkit.potion.PotionEffectType#BAD_OMEN",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_DISAPPEARED",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_DISAPPEARED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityCombustEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BellRingEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the previous position.",
    "method": "getFrom",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "org.bukkit.Location"
  },
  {
    "param-names": ["Stacks"],
    "param-types": ["org.bukkit.inventory.ItemStack[]"],
    "id": "org.bukkit.inventory.RecipeChoice.ExactChoice#ExactChoice(org.bukkit.inventory.ItemStack...)",
    "class": "org.bukkit.inventory.RecipeChoice.ExactChoice"
  },
  {
    "static": true,
    "field": "DARK_OAK_PLANKS",
    "id": "org.bukkit.Material#DARK_OAK_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_EMPTY_TADPOLE",
    "id": "org.bukkit.Sound#ITEM_BUCKET_EMPTY_TADPOLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DIAMOND_HOE",
    "id": "org.bukkit.Material#DIAMOND_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "UP_EAST",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#UP_EAST",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "static": true,
    "field": "LEGACY_ENCHANTMENT_TABLE",
    "id": "org.bukkit.Material#LEGACY_ENCHANTMENT_TABLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_HOE",
    "id": "org.bukkit.Material#LEGACY_GOLD_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets this entity's current velocity",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getVelocity",
    "id": "org.bukkit.entity.Entity#getVelocity()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BEACH",
    "id": "org.bukkit.block.Biome#BEACH",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the DragType that describes the behavior of ItemStacks placed\\nafter this InventoryDragEvent.\\n\\nThe ItemStacks and the raw slots that they're being applied to can be\\nfound using #getNewItems().",
    "method": "getType",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getType()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.event.inventory.DragType"
  },
  {
    "descr": "Gets the cooldown for duplicating the allay.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "getDuplicationCooldown",
    "id": "org.bukkit.entity.Allay#getDuplicationCooldown()",
    "class": "org.bukkit.entity.Allay",
    "return": "long"
  },
  {
    "descr": "Called when an entity explodes",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent"
  },
  {
    "descr": "Sets the delay before this Item is available to be picked up by players",
    "param-names": [
      "Item",
      "Delay"
    ],
    "param-types": [
      "org.bukkit.entity.Item",
      "int"
    ],
    "method": "setPickupDelay",
    "id": "org.bukkit.entity.Item#setPickupDelay(int)",
    "class": "org.bukkit.entity.Item"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.CampfireStartEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.ServiceRegisterEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceRegisterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Increases the rate at which you mine/dig",
    "static": true,
    "field": "DIG_SPEED",
    "id": "org.bukkit.enchantments.Enchantment#DIG_SPEED",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the type of slot that was clicked.",
    "method": "getSlotType",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getSlotType()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "static": true,
    "field": "PURPLE_STAINED_GLASS",
    "id": "org.bukkit.Material#PURPLE_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOAT_HORN",
    "id": "org.bukkit.Material#GOAT_HORN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the maximum allowed value of the 'layers' property.",
    "param-names": ["Snow"],
    "param-types": ["org.bukkit.block.data.type.Snow"],
    "method": "getMaximumLayers",
    "id": "org.bukkit.block.data.type.Snow#getMaximumLayers()",
    "class": "org.bukkit.block.data.type.Snow",
    "return": "int"
  },
  {
    "static": true,
    "field": "OLD_GROWTH_SPRUCE_TAIGA",
    "id": "org.bukkit.block.Biome#OLD_GROWTH_SPRUCE_TAIGA",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the block the raider is targeting to patrol.",
    "param-names": [
      "Raider",
      "Block"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "org.bukkit.block.Block"
    ],
    "method": "setPatrolTarget",
    "id": "org.bukkit.entity.Raider#setPatrolTarget(org.bukkit.block.Block)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "static": true,
    "field": "LEGACY_BREWING_STAND",
    "id": "org.bukkit.Material#LEGACY_BREWING_STAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the highest coordinate corresponding to the HeightMap at the\\ngiven coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Z",
      "Height Map"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "org.bukkit.HeightMap"
    ],
    "method": "getHighestBlockYAt",
    "id": "org.bukkit.RegionAccessor#getHighestBlockYAt(int,int,org.bukkit.HeightMap)",
    "class": "org.bukkit.RegionAccessor",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_SLIME_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_SLIME_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Decreases the rate at which a tool looses durability",
    "static": true,
    "field": "DURABILITY",
    "id": "org.bukkit.enchantments.Enchantment#DURABILITY",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_JUMP",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a sponge absorbs water from the world.\\n\\nThe world will be in its previous state, and #getBlocks() will\\nrepresent the changes to be made to the world, if the event is not cancelled.\\n\\nAs this is a physics based event it may be called multiple times for \"the\\nsame\" changes.",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent"
  },
  {
    "static": true,
    "field": "FALLING_LAVA",
    "id": "org.bukkit.Particle#FALLING_LAVA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "E",
    "id": "org.bukkit.Note.Tone#E",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_AMBIENT_LAND",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_AMBIENT_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SUNSET",
    "id": "org.bukkit.Art#SUNSET",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets manner in which this objective will be rendered.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getRenderType",
    "id": "org.bukkit.scoreboard.Objective#getRenderType()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "org.bukkit.scoreboard.RenderType"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "ACACIA_LOG",
    "id": "org.bukkit.Material#ACACIA_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds the player to this boss bar causing it to display on their screen.",
    "param-names": [
      "BossBar",
      "Player"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.entity.Player"
    ],
    "method": "addPlayer",
    "id": "org.bukkit.boss.BossBar#addPlayer(org.bukkit.entity.Player)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "ACACIA_TRAPDOOR",
    "id": "org.bukkit.Material#ACACIA_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the experience given by this recipe.",
    "param-names": [
      "CookingRecipe",
      "Experience"
    ],
    "param-types": [
      "org.bukkit.inventory.CookingRecipe",
      "float"
    ],
    "method": "setExperience",
    "id": "org.bukkit.inventory.CookingRecipe#setExperience(float)",
    "class": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "CHERRY_LEAVES",
    "id": "org.bukkit.Material#CHERRY_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COAL_ORE",
    "id": "org.bukkit.Material#COAL_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "boolean"
  },
  {
    "descr": "The player is not allowed to log in, due to them being banned",
    "static": true,
    "field": "KICK_BANNED",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#KICK_BANNED",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "descr": "Gets the data value of this EntityEffect",
    "param-names": ["EntityEffect"],
    "param-types": ["org.bukkit.EntityEffect"],
    "method": "getData",
    "id": "org.bukkit.EntityEffect#getData()",
    "class": "org.bukkit.EntityEffect",
    "return": "byte"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BLACK_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#BLACK_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the list of blocks that would have been removed or were removed\\nfrom the explosion event.",
    "method": "blockList",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#blockList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Deals damage to an entity over time and gives the health to the\\nshooter.",
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.potion.PotionEffectType#WITHER",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Whether the event was called because the entity was reset.",
    "method": "isReset",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#isReset()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the player who performed the click.",
    "method": "getWhoClicked",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getWhoClicked()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Gets if this arrow was shot from a crossbow.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "isShotFromCrossbow",
    "id": "org.bukkit.entity.AbstractArrow#isShotFromCrossbow()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "boolean"
  },
  {
    "descr": "Sets the DyeColor the sheep is being dyed",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.DyeColor"],
    "method": "setColor",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#setColor(org.bukkit.DyeColor)",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent"
  },
  {
    "descr": "When mobs get hurt.",
    "static": true,
    "field": "HURT",
    "id": "org.bukkit.EntityEffect#HURT",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "BLOCK_GRASS_STEP",
    "id": "org.bukkit.Sound#BLOCK_GRASS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_STEP",
    "id": "org.bukkit.Sound#ENTITY_PARROT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Very light brown",
    "static": true,
    "field": "CREAMY",
    "id": "org.bukkit.entity.Horse.Color#CREAMY",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PLAYER_WALL_HEAD",
    "id": "org.bukkit.Material#PLAYER_WALL_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get user-specified limit for number of water creature underground that can spawn\\nin a chunk.",
    "static": true,
    "method": "getWaterUndergroundCreatureSpawnLimit",
    "id": "org.bukkit.Bukkit#getWaterUndergroundCreatureSpawnLimit()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Gets default ticks per animal spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn monsters\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn monsters\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, animal spawning will be disabled. We\\nrecommend using spawn-animals to control this instead.\\n\\nMinecraft default: 400.",
    "static": true,
    "method": "getTicksPerAnimalSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerAnimalSpawns()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Adventure mode cannot break blocks without the correct tools.",
    "static": true,
    "field": "ADVENTURE",
    "id": "org.bukkit.GameMode#ADVENTURE",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode"
  },
  {
    "static": true,
    "field": "MINECART_HOPPER",
    "id": "org.bukkit.entity.EntityType#MINECART_HOPPER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_FALL",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "HOGLIN",
    "id": "org.bukkit.entity.EntityType#HOGLIN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Add an optional flag to this boss bar",
    "param-names": [
      "BossBar",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.boss.BarFlag"
    ],
    "method": "addFlag",
    "id": "org.bukkit.boss.BossBar#addFlag(org.bukkit.boss.BarFlag)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "BLOCK_PORTAL_TRIGGER",
    "id": "org.bukkit.Sound#BLOCK_PORTAL_TRIGGER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Flowing lava.",
    "static": true,
    "field": "FLOWING_LAVA",
    "id": "org.bukkit.Fluid#FLOWING_LAVA",
    "class": "org.bukkit.Fluid",
    "return": "org.bukkit.Fluid"
  },
  {
    "static": true,
    "field": "GOLDEN_PICKAXE",
    "id": "org.bukkit.Material#GOLDEN_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "MUD_BRICK_WALL",
    "id": "org.bukkit.Material#MUD_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the wolf is wet",
    "param-names": ["Wolf"],
    "param-types": ["org.bukkit.entity.Wolf"],
    "method": "isWet",
    "id": "org.bukkit.entity.Wolf#isWet()",
    "class": "org.bukkit.entity.Wolf",
    "return": "boolean"
  },
  {
    "descr": "Only collide with source fluid blocks.",
    "static": true,
    "field": "SOURCE_ONLY",
    "id": "org.bukkit.FluidCollisionMode#SOURCE_ONLY",
    "class": "org.bukkit.FluidCollisionMode",
    "return": "org.bukkit.FluidCollisionMode"
  },
  {
    "descr": "Strips the given message of all color codes",
    "param-names": ["Input"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "stripColor",
    "id": "org.bukkit.ChatColor#stripColor(java.lang.String)",
    "class": "org.bukkit.ChatColor",
    "return": "java.lang.String"
  },
  {
    "descr": "A player's inventory, with 9 QUICKBAR slots, 27 CONTAINER slots, 4 ARMOR\\nslots and 1 offhand slot. The ARMOR and offhand slots may not be visible\\nto the player, though.",
    "static": true,
    "field": "PLAYER",
    "id": "org.bukkit.event.inventory.InventoryType#PLAYER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Get the advancement which has been completed.",
    "method": "getAdvancement",
    "id": "org.bukkit.event.player.PlayerAdvancementDoneEvent#getAdvancement()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
    "return": "org.bukkit.advancement.Advancement"
  },
  {
    "descr": "Sets the direction of the hanging entity, potentially overriding rules\\nof placement. Note that if the result is not valid the object would\\nnormally drop as an item.",
    "param-names": [
      "Hanging",
      "Face",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.Hanging",
      "org.bukkit.block.BlockFace",
      "boolean"
    ],
    "method": "setFacingDirection",
    "id": "org.bukkit.entity.Hanging#setFacingDirection(org.bukkit.block.BlockFace,boolean)",
    "class": "org.bukkit.entity.Hanging",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.TNTPrimeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "boolean"
  },
  {
    "descr": "A skeleton horse",
    "static": true,
    "field": "SKELETON_HORSE",
    "id": "org.bukkit.entity.Horse.Variant#SKELETON_HORSE",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockGrowEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_STATIONARY_WATER",
    "id": "org.bukkit.Material#LEGACY_STATIONARY_WATER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increses underwater movement speed.\\nSquee'ek uh'k kk'kkkk squeek eee'eek.",
    "static": true,
    "field": "DOLPHINS_GRACE",
    "id": "org.bukkit.potion.PotionEffectType#DOLPHINS_GRACE",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Subtracts the location by another.",
    "param-names": [
      "Location",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.Location"
    ],
    "method": "subtract",
    "id": "org.bukkit.Location#subtract(org.bukkit.Location)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockDamageEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "USE_ITEM",
    "id": "org.bukkit.Statistic#USE_ITEM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockDamageEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerMoveEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Creates a PotionEffect from this PotionEffectType, applying duration\\nmodifiers and checks.",
    "param-names": [
      "PotionEffectType",
      "Duration",
      "Amplifier"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffectType",
      "int",
      "int"
    ],
    "method": "createEffect",
    "id": "org.bukkit.potion.PotionEffectType#createEffect(int,int)",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "descr": "Whether fire damage is enabled or not.",
    "static": true,
    "field": "FIRE_DAMAGE",
    "id": "org.bukkit.GameRule#FIRE_DAMAGE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_QUICK_CHARGE_1",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_QUICK_CHARGE_1",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the chat message being tab-completed.",
    "method": "getChatMessage",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getChatMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Increments the given statistic for this player for the given material.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Material",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.Material",
      "int"
    ],
    "method": "incrementStatistic",
    "id": "org.bukkit.OfflinePlayer#incrementStatistic(org.bukkit.Statistic,org.bukkit.Material,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Sets the width of this display.",
    "param-names": [
      "Display",
      "Width"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "float"
    ],
    "method": "setDisplayWidth",
    "id": "org.bukkit.entity.Display#setDisplayWidth(float)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "static": true,
    "field": "JUNGLE",
    "id": "org.bukkit.entity.Villager.Type#JUNGLE",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_FURNACE_FIRE_CRACKLE",
    "id": "org.bukkit.Sound#BLOCK_FURNACE_FIRE_CRACKLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Name is misleading, actually records ticks played.",
    "static": true,
    "field": "PLAY_ONE_MINUTE",
    "id": "org.bukkit.Statistic#PLAY_ONE_MINUTE",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Entities that reside primarily underwater (excluding Drowned).\\nThese creatures:\\n\\nTake additional damage from Enchantment#IMPALING.\\nAre immune to drowning (excluding Dolphin dolphins).\\nTake suffocation damage when out of water for extended periods of\\ntime (excluding Guardian guardians and Turtle turtles).\\nAre capable of swimming in water rather than floating or sinking.\\n",
    "static": true,
    "field": "WATER",
    "id": "org.bukkit.entity.EntityCategory#WATER",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "descr": "The progress of the right-pointing arrow in a furnace inventory.",
    "static": true,
    "field": "COOK_TIME",
    "id": "org.bukkit.inventory.InventoryView.Property#COOK_TIME",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "SNOW_ACCUMULATION_HEIGHT",
    "id": "org.bukkit.GameRule#SNOW_ACCUMULATION_HEIGHT",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Called when entities are loaded.\\nThe provided chunk may or may not be loaded.",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent"
  },
  {
    "descr": "Called if a block broken by a player drops an item.\\nIf the block break is cancelled, this event won't be called.\\nIf isDropItems in BlockBreakEvent is set to false, this event won't be\\ncalled.\\nThis event will also be called if the player breaks a multi block structure,\\nfor example a torch on top of a stone. Both items will have an event call.\\nThe Block is already broken as this event is called, so #getBlock() will be\\nAIR in most cases. Use #getBlockState() for more Information about the broken\\nblock.",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the location of the structure.",
    "method": "getLocation",
    "id": "org.bukkit.event.world.StructureGrowEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.TimeSkipEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_WITHER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Loads the Chunk at the specified coordinates.\\n\\nThis method will keep the specified chunk loaded until one of the\\nunload methods is manually called. Callers are advised to instead use\\ngetChunkAt which will only temporarily load the requested chunk.",
    "param-names": [
      "World",
      "X",
      "Z",
      "Generate"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "boolean"
    ],
    "method": "loadChunk",
    "id": "org.bukkit.World#loadChunk(int,int,boolean)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "No game logic is processed, world generation may still occur.",
    "static": true,
    "field": "INACCESSIBLE",
    "id": "org.bukkit.Chunk.LoadLevel#INACCESSIBLE",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "descr": "Gets a set containing all banned players.",
    "static": true,
    "method": "getBannedPlayers",
    "id": "org.bukkit.Bukkit#getBannedPlayers()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Set"
  },
  {
    "descr": "When the entity doesn't have a target, so it attacks the nearest\\nentity",
    "static": true,
    "field": "CLOSEST_ENTITY",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#CLOSEST_ENTITY",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent"
  },
  {
    "static": true,
    "field": "CAMPFIRE_COSY_SMOKE",
    "id": "org.bukkit.Particle#CAMPFIRE_COSY_SMOKE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Get the input material.",
    "param-names": ["StonecuttingRecipe"],
    "param-types": ["org.bukkit.inventory.StonecuttingRecipe"],
    "method": "getInput",
    "id": "org.bukkit.inventory.StonecuttingRecipe#getInput()",
    "class": "org.bukkit.inventory.StonecuttingRecipe",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the color of the team.\\n\\nThis only sets the team outline, other occurrences of colors such as in\\nnames are handled by prefixes / suffixes.",
    "param-names": [
      "Team",
      "Color"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.ChatColor"
    ],
    "method": "setColor",
    "id": "org.bukkit.scoreboard.Team#setColor(org.bukkit.ChatColor)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "Sets the llama's strength. A higher strength llama will have more\\ninventory slots and be more threatening to entities. Inventory slots are\\nequal to strength * 3.",
    "param-names": [
      "Llama",
      "Strength"
    ],
    "param-types": [
      "org.bukkit.entity.Llama",
      "int"
    ],
    "method": "setStrength",
    "id": "org.bukkit.entity.Llama#setStrength(int)",
    "class": "org.bukkit.entity.Llama"
  },
  {
    "descr": "Called when a horse jumps.",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get a collection of all entities in this RegionAccessor matching any of the\\ngiven classes/interfaces",
    "param-names": [
      "RegionAccessor",
      "Classes"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "java.lang.Class[]"
    ],
    "method": "getEntitiesByClasses",
    "id": "org.bukkit.RegionAccessor#getEntitiesByClasses(java.lang.Class<?>...)",
    "class": "org.bukkit.RegionAccessor",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "BLOCK_LARGE_AMETHYST_BUD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_LARGE_AMETHYST_BUD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BellResonateEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTS_HIT",
    "id": "org.bukkit.Sound#BLOCK_ROOTS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SPLASH_POTION_BREAK",
    "id": "org.bukkit.Sound#ENTITY_SPLASH_POTION_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_STEP",
    "id": "org.bukkit.Sound#BLOCK_STONE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.GenericGameEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "boolean"
  },
  {
    "descr": "When another entity tempts this entity by having a desired item such\\nas wheat in it's hand.",
    "static": true,
    "field": "TEMPT",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#TEMPT",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_CLUSTER_STEP",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_CLUSTER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "SCULK",
    "id": "org.bukkit.Material#SCULK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "NETHER_BRICK_FENCE",
    "id": "org.bukkit.Material#NETHER_BRICK_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a new color with its RGB components changed as if it was dyed\\nwith the colors passed in, replicating vanilla workbench dyeing",
    "param-names": [
      "Color",
      "Colors"
    ],
    "param-types": [
      "org.bukkit.Color",
      "org.bukkit.DyeColor[]"
    ],
    "method": "mixDyes",
    "id": "org.bukkit.Color#mixDyes(org.bukkit.DyeColor...)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "LEGACY_STEP",
    "id": "org.bukkit.Material#LEGACY_STEP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerLocaleChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "HORSE_SPAWN_EGG",
    "id": "org.bukkit.Material#HORSE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Obtains the blast resistance value (also known as block \"durability\").\\n\\nThis value is used in explosions to calculate whether a block should be\\nbroken or not.\\n\\nOnly available when #isBlock() is true.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getBlastResistance",
    "id": "org.bukkit.Material#getBlastResistance()",
    "class": "org.bukkit.Material",
    "return": "float"
  },
  {
    "descr": "Returns the item currently being worn by the armor stand on its legs.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getLeggings",
    "id": "org.bukkit.entity.ArmorStand#getLeggings()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "FISHING_ROD",
    "id": "org.bukkit.Material#FISHING_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'distance' property.",
    "param-names": ["Leaves"],
    "param-types": ["org.bukkit.block.data.type.Leaves"],
    "method": "getDistance",
    "id": "org.bukkit.block.data.type.Leaves#getDistance()",
    "class": "org.bukkit.block.data.type.Leaves",
    "return": "int"
  },
  {
    "descr": "Get a list of available EnchantmentOffer for the player. You can\\nmodify the values to change the available offers for the player. An offer\\nmay be null, if there isn't a enchantment offer at a specific slot. There\\nare 3 slots in the enchantment table available to modify.",
    "method": "getOffers",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getOffers()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.enchantments.EnchantmentOffer[]"
  },
  {
    "descr": "Sets the maximum health this entity can have.\\n\\nIf the health of the entity is above the value provided it will be set\\nto that value.\\n\\nNote: An entity with a health bar (Player, EnderDragon,\\nWither, etc...} will have their bar scaled accordingly.",
    "param-names": [
      "Damageable",
      "Health"
    ],
    "param-types": [
      "org.bukkit.entity.Damageable",
      "double"
    ],
    "method": "setMaxHealth",
    "id": "org.bukkit.entity.Damageable#setMaxHealth(double)",
    "class": "org.bukkit.entity.Damageable"
  },
  {
    "descr": "Indicate the spawn was set by the player interacting with a respawn\\nanchor.",
    "static": true,
    "field": "RESPAWN_ANCHOR",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#RESPAWN_ANCHOR",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "descr": "Represents yellow",
    "static": true,
    "field": "YELLOW",
    "id": "org.bukkit.ChatColor#YELLOW",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Whether to log admin commands to server log.",
    "static": true,
    "field": "LOG_ADMIN_COMMANDS",
    "id": "org.bukkit.GameRule#LOG_ADMIN_COMMANDS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "MELON",
    "id": "org.bukkit.Material#MELON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Fox.Type#values()",
    "class": "org.bukkit.entity.Fox.Type",
    "return": "org.bukkit.entity.Fox.Type[]"
  },
  {
    "static": true,
    "field": "LEGACY_BOW",
    "id": "org.bukkit.Material#LEGACY_BOW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether this armor stand is scaled down.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "isSmall",
    "id": "org.bukkit.entity.ArmorStand#isSmall()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "boolean"
  },
  {
    "descr": "Gets the entity currently perched on the right shoulder or null if no\\nentity.\\n\\nThe returned entity will not be spawned within the world, so most\\noperations are invalid unless the entity is first spawned in.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getShoulderEntityRight",
    "id": "org.bukkit.entity.HumanEntity#getShoulderEntityRight()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Remove an existing flag on this boss bar",
    "param-names": [
      "BossBar",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.boss.BarFlag"
    ],
    "method": "removeFlag",
    "id": "org.bukkit.boss.BossBar#removeFlag(org.bukkit.boss.BarFlag)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "When the entity gets water breathing by wearing a turtle helmet.",
    "static": true,
    "field": "TURTLE_HELMET",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#TURTLE_HELMET",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the statistic that is being incremented.",
    "method": "getStatistic",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getStatistic()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ExpBottleEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_HOE",
    "id": "org.bukkit.Material#LEGACY_WOOD_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether there is thunder.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isThundering",
    "id": "org.bukkit.World#isThundering()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.raid.RaidFinishEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "The sound/particles caused by a end gateway spawning",
    "static": true,
    "field": "END_GATEWAY_SPAWN",
    "id": "org.bukkit.Effect#END_GATEWAY_SPAWN",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Sets this objective to display on the specified slot for the\\nscoreboard, removing it from any other display slot.",
    "param-names": [
      "Objective",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Objective",
      "org.bukkit.scoreboard.DisplaySlot"
    ],
    "method": "setDisplaySlot",
    "id": "org.bukkit.scoreboard.Objective#setDisplaySlot(org.bukkit.scoreboard.DisplaySlot)",
    "class": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "Get the amount of light emitted by this state when in the world.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "getLightEmission",
    "id": "org.bukkit.block.data.BlockData#getLightEmission()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "int"
  },
  {
    "static": true,
    "field": "FROG_SPAWN_EGG",
    "id": "org.bukkit.Material#FROG_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_CAKE_BLOCK",
    "id": "org.bukkit.Material#LEGACY_CAKE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the command that the user is attempting to execute from the\\nconsole",
    "method": "getCommand",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#getCommand()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_WOOL_BREAK",
    "id": "org.bukkit.Sound#BLOCK_WOOL_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the current type of this cat.",
    "param-names": [
      "Cat",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Cat",
      "org.bukkit.entity.Cat.Type"
    ],
    "method": "setCatType",
    "id": "org.bukkit.entity.Cat#setCatType(org.bukkit.entity.Cat.Type)",
    "class": "org.bukkit.entity.Cat"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Returns the color of this effect type.",
    "param-names": ["PotionEffectType"],
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "getColor",
    "id": "org.bukkit.potion.PotionEffectType#getColor()",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "ITEM_SHIELD_BLOCK",
    "id": "org.bukkit.Sound#ITEM_SHIELD_BLOCK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLUE_CARPET",
    "id": "org.bukkit.Material#BLUE_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.TreeType#valueOf(java.lang.String)",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "TRADER_LLAMA",
    "id": "org.bukkit.loot.LootTables#TRADER_LLAMA",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ENTITY_PIG_HURT",
    "id": "org.bukkit.Sound#ENTITY_PIG_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Pull the hooked entity to the caster of this fish hook. If no entity is\\nhooked, this method has no effect.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "pullHookedEntity",
    "id": "org.bukkit.entity.FishHook#pullHookedEntity()",
    "class": "org.bukkit.entity.FishHook",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_5",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_5",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerKickEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "PETRIFIED_OAK_SLAB",
    "id": "org.bukkit.Material#PETRIFIED_OAK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the profile of the player who owns the skull. This player profile\\nmay appear as the texture depending on skull type.",
    "param-names": ["SkullMeta"],
    "param-types": ["org.bukkit.inventory.meta.SkullMeta"],
    "method": "getOwnerProfile",
    "id": "org.bukkit.inventory.meta.SkullMeta#getOwnerProfile()",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "org.bukkit.profile.PlayerProfile"
  },
  {
    "static": true,
    "field": "ENTITY_SQUID_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SQUID_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the block's SoundGroup which can be used to get its step\\nsound, hit sound, and others.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "getSoundGroup",
    "id": "org.bukkit.block.data.BlockData#getSoundGroup()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.SoundGroup"
  },
  {
    "static": true,
    "field": "LEGACY_DARK_OAK_DOOR_ITEM",
    "id": "org.bukkit.Material#LEGACY_DARK_OAK_DOOR_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a list of blockstates for all blocks which were replaced by the\\nplacement of the new blocks. Most of these blocks will just have a\\nMaterial type of AIR.",
    "method": "getReplacedBlockStates",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getReplacedBlockStates()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_ORE_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHER_ORE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent"
  },
  {
    "static": true,
    "field": "ELDER_GUARDIAN",
    "id": "org.bukkit.loot.LootTables#ELDER_GUARDIAN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the inventory corresponding to the given raw slot ID.\\nIf the slot ID is #OUTSIDE null will be returned, otherwise\\nbehaviour for illegal and negative slot IDs is undefined.\\nMay be used with #convertSlot(int) to directly index an\\nunderlying inventory.",
    "param-names": [
      "InventoryView",
      "Raw Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "int"
    ],
    "method": "getInventory",
    "id": "org.bukkit.inventory.InventoryView#getInventory(int)",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MAGMA_CUBE",
    "id": "org.bukkit.entity.EntityType#MAGMA_CUBE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Creates a new PlayerProfile.",
    "param-names": [
      "Unique Id",
      "Name"
    ],
    "static": true,
    "param-types": [
      "java.util.UUID",
      "java.lang.String"
    ],
    "method": "createPlayerProfile",
    "id": "org.bukkit.Bukkit#createPlayerProfile(java.util.UUID,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.profile.PlayerProfile"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "boolean"
  },
  {
    "descr": "Attempt to fill an inventory with this LootTable's loot.",
    "param-names": [
      "LootTable",
      "Inventory",
      "Random",
      "Context"
    ],
    "param-types": [
      "org.bukkit.loot.LootTable",
      "org.bukkit.inventory.Inventory",
      "java.util.Random",
      "org.bukkit.loot.LootContext"
    ],
    "method": "fillInventory",
    "id": "org.bukkit.loot.LootTable#fillInventory(org.bukkit.inventory.Inventory,java.util.Random,org.bukkit.loot.LootContext)",
    "class": "org.bukkit.loot.LootTable"
  },
  {
    "descr": "Gets the period of time (in ticks) before this entity can use a portal.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getPortalCooldown",
    "id": "org.bukkit.entity.Entity#getPortalCooldown()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "static": true,
    "field": "PRISMARINE",
    "id": "org.bukkit.Material#PRISMARINE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IRON_XYLOPHONE",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IRON_XYLOPHONE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When TNT with the unstable block state set to true is broken.\\n\\nNote: Canceling a prime event with this cause will stop the primed\\nTNT from spawning but will not stop the block from being broken.",
    "static": true,
    "field": "BLOCK_BREAK",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#BLOCK_BREAK",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMITE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ENDERMITE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an entity spawns as a trap for players approaching",
    "static": true,
    "field": "TRAP",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#TRAP",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_STONE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents the \"normal\"/\"surface world\" map",
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.World.Environment#NORMAL",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment"
  },
  {
    "descr": "Change the type of mob being hatched by the egg",
    "param-names": ["Hatch Type"],
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "setHatchingType",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#setHatchingType(org.bukkit.entity.EntityType)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent"
  },
  {
    "descr": "Get the distance between this vector and another. The value of this\\nmethod is not cached and uses a costly square-root function, so do not\\nrepeatedly call this method to get the vector's magnitude. NaN will be\\nreturned if the inner result of the sqrt() function overflows, which\\nwill be caused if the distance is too long.",
    "param-names": [
      "Vector",
      "O"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "distance",
    "id": "org.bukkit.util.Vector#distance(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "static": true,
    "field": "PLAYER_KILLS",
    "id": "org.bukkit.Statistic#PLAYER_KILLS",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "SWEET_BERRY_BUSH",
    "id": "org.bukkit.Material#SWEET_BERRY_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Origin",
      "Destination",
      "Arrival Time"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.Vibration.Destination",
      "int"
    ],
    "id": "org.bukkit.Vibration#Vibration(org.bukkit.Location,org.bukkit.Vibration.Destination,int)",
    "class": "org.bukkit.Vibration"
  },
  {
    "static": true,
    "field": "AMBIENT_NETHER_WASTES_ADDITIONS",
    "id": "org.bukkit.Sound#AMBIENT_NETHER_WASTES_ADDITIONS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "All the Axolotl are represented by this Category.",
    "static": true,
    "field": "AXOLOTL",
    "id": "org.bukkit.entity.SpawnCategory#AXOLOTL",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Spawn a FallingBlock entity at the given Location of the\\nspecified Material. The material dictates what is falling.\\nWhen the FallingBlock hits the ground, it will place that block.\\n\\nThe Material must be a block type, check with Material#isBlock() material.isBlock(). The Material may not be air.",
    "param-names": [
      "World",
      "Location",
      "Material",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Material",
      "byte"
    ],
    "method": "spawnFallingBlock",
    "id": "org.bukkit.World#spawnFallingBlock(org.bukkit.Location,org.bukkit.Material,byte)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "BlockData: Observer",
    "static": true,
    "field": "OBSERVER",
    "id": "org.bukkit.Material#OBSERVER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_GLOW_INK_SAC_USE",
    "id": "org.bukkit.Sound#ITEM_GLOW_INK_SAC_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When the target end platform is created as a result of a player\\nentering an end portal.",
    "static": true,
    "field": "END_PLATFORM",
    "id": "org.bukkit.event.world.PortalCreateEvent.CreateReason#END_PLATFORM",
    "class": "org.bukkit.event.world.PortalCreateEvent.CreateReason",
    "return": "org.bukkit.event.world.PortalCreateEvent.CreateReason"
  },
  {
    "static": true,
    "field": "CRIMSON_NYLIUM",
    "id": "org.bukkit.Material#CRIMSON_NYLIUM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_DESTROY_EGG",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_DESTROY_EGG",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allows blocks to drop themselves instead of fragments (for example,\\nstone instead of cobblestone)",
    "static": true,
    "field": "SILK_TOUCH",
    "id": "org.bukkit.enchantments.Enchantment#SILK_TOUCH",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Gets the location that this entity moved to",
    "method": "getTo",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "QUARTZ_SLAB",
    "id": "org.bukkit.Material#QUARTZ_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the previous spawn location",
    "method": "getPreviousLocation",
    "id": "org.bukkit.event.world.SpawnChangeEvent#getPreviousLocation()",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sets the current instance of PotionBrewer. Generally not to be\\nused from within a plugin.",
    "param-names": ["Other"],
    "static": true,
    "param-types": ["org.bukkit.potion.PotionBrewer"],
    "method": "setPotionBrewer",
    "id": "org.bukkit.potion.Potion#setPotionBrewer(org.bukkit.potion.PotionBrewer)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_STEP",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set both the minimum (default 100) and maximum (default 600) amount\\nof ticks one has to wait for a fish appearing.",
    "param-names": [
      "FishHook",
      "Min",
      "Max"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "int",
      "int"
    ],
    "method": "setWaitTime",
    "id": "org.bukkit.entity.FishHook#setWaitTime(int,int)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the dark purple team.",
    "static": true,
    "field": "KILLED_BY_TEAM_DARK_PURPLE",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_DARK_PURPLE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Represents dark gray",
    "static": true,
    "field": "DARK_GRAY",
    "id": "org.bukkit.ChatColor#DARK_GRAY",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Sends this sender multiple messages",
    "param-names": [
      "CommandSender",
      "Sender",
      "Messages"
    ],
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.util.UUID",
      "java.lang.String[]"
    ],
    "method": "sendMessage",
    "id": "org.bukkit.command.CommandSender#sendMessage(java.util.UUID,java.lang.String...)",
    "class": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Gets the projectile which will be launched by this event",
    "method": "getProjectile",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getProjectile()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "boolean"
  },
  {
    "descr": "Constructs a new Location with the given coordinates",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "double",
      "double",
      "double"
    ],
    "id": "org.bukkit.Location#Location(org.bukkit.World,double,double,double)",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PINK_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#PINK_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DEEP_DARK",
    "id": "org.bukkit.block.Biome#DEEP_DARK",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "CUT_SANDSTONE",
    "id": "org.bukkit.Material#CUT_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TROPICAL_FISH",
    "id": "org.bukkit.entity.EntityType#TROPICAL_FISH",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Set the explosion radius in which this Creeper's explosion will affect.",
    "param-names": [
      "Creeper",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.entity.Creeper",
      "int"
    ],
    "method": "setExplosionRadius",
    "id": "org.bukkit.entity.Creeper#setExplosionRadius(int)",
    "class": "org.bukkit.entity.Creeper"
  },
  {
    "descr": "When a creature is spawned by nether portal",
    "static": true,
    "field": "NETHER_PORTAL",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#NETHER_PORTAL",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "method": "getLocale",
    "id": "org.bukkit.event.player.PlayerLocaleChangeEvent#getLocale()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SAVANNA",
    "id": "org.bukkit.block.Biome#SAVANNA",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the BlockState of the block involved in this event before it was\\nbroken.",
    "method": "getBlockState",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getBlockState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent"
  },
  {
    "descr": "Gets the cause for the hanging entity's removal",
    "method": "getCause",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "static": true,
    "field": "PLAYER_LIST",
    "id": "org.bukkit.scoreboard.DisplaySlot#PLAYER_LIST",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "SHRIEK",
    "id": "org.bukkit.Particle#SHRIEK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.scoreboard.Team.Option#values()",
    "class": "org.bukkit.scoreboard.Team.Option",
    "return": "org.bukkit.scoreboard.Team.Option[]"
  },
  {
    "static": true,
    "field": "DEEP_OCEAN",
    "id": "org.bukkit.block.Biome#DEEP_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Put the given ItemStacks into the armor slots",
    "param-names": [
      "PlayerInventory",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setArmorContents",
    "id": "org.bukkit.inventory.PlayerInventory#setArmorContents(org.bukkit.inventory.ItemStack[])",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "MANGROVE_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#MANGROVE_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether the chunk at the specified chunk coordinates is force\\nloaded.\\n\\nA force loaded chunk will not be unloaded due to lack of player activity.",
    "param-names": [
      "Chunk",
      "Forced"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "boolean"
    ],
    "method": "setForceLoaded",
    "id": "org.bukkit.Chunk#setForceLoaded(boolean)",
    "class": "org.bukkit.Chunk"
  },
  {
    "descr": "Adds this user to the ProfileBanList. If a previous ban exists, this will\\nupdate the entry.",
    "param-names": [
      "OfflinePlayer",
      "Reason",
      "Expires",
      "Source"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "java.lang.String",
      "java.time.Instant",
      "java.lang.String"
    ],
    "method": "ban",
    "id": "org.bukkit.OfflinePlayer#ban(java.lang.String,java.time.Instant,java.lang.String)",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Set the bee's new anger level.",
    "param-names": [
      "Bee",
      "Anger"
    ],
    "param-types": [
      "org.bukkit.entity.Bee",
      "int"
    ],
    "method": "setAnger",
    "id": "org.bukkit.entity.Bee#setAnger(int)",
    "class": "org.bukkit.entity.Bee"
  },
  {
    "descr": "Gets the current kick message that will be used if getResult() !=\\nResult.ALLOWED",
    "method": "getKickMessage",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getKickMessage()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ADMIRE",
    "id": "org.bukkit.MusicInstrument#ADMIRE",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_BLAZE",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_BLAZE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the entity type id.",
    "param-names": ["EntityType"],
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "getTypeId",
    "id": "org.bukkit.entity.EntityType#getTypeId()",
    "class": "org.bukkit.entity.EntityType",
    "return": "short"
  },
  {
    "descr": "Creates a potion effect.",
    "param-names": [
      "Type",
      "Duration",
      "Amplifier",
      "Ambient",
      "Particles",
      "Icon"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffectType",
      "int",
      "int",
      "boolean",
      "boolean",
      "boolean"
    ],
    "id": "org.bukkit.potion.PotionEffect#PotionEffect(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean,boolean)",
    "class": "org.bukkit.potion.PotionEffect"
  },
  {
    "static": true,
    "field": "WEATHER_RAIN_ABOVE",
    "id": "org.bukkit.Sound#WEATHER_RAIN_ABOVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_LOADING_END",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_LOADING_END",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMAN_HURT",
    "id": "org.bukkit.Sound#ENTITY_ENDERMAN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_MANGROVE_ROOTS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MANGROVE_ROOTS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BAMBOO_SAPLING",
    "id": "org.bukkit.Material#BAMBOO_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_BULLET_HIT",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_BULLET_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLACK_TERRACOTTA",
    "id": "org.bukkit.Material#BLACK_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check if the material is a block and solid (can be built upon)",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isSolid",
    "id": "org.bukkit.Material#isSolid()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_CONCRETE_POWDER",
    "id": "org.bukkit.Material#LEGACY_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds the given PotionEffect to the living entity.",
    "param-names": [
      "LivingEntity",
      "Effect"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.potion.PotionEffect"
    ],
    "method": "addPotionEffect",
    "id": "org.bukkit.entity.LivingEntity#addPotionEffect(org.bukkit.potion.PotionEffect)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Deals more damage to mobs that live in the ocean",
    "static": true,
    "field": "IMPALING",
    "id": "org.bukkit.enchantments.Enchantment#IMPALING",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Set result item, may be null.",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#setResult(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent"
  },
  {
    "static": true,
    "field": "PLAINS",
    "id": "org.bukkit.entity.Villager.Type#PLAINS",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The sound played when a wither breaks a block",
    "static": true,
    "field": "WITHER_BREAK_BLOCK",
    "id": "org.bukkit.Effect#WITHER_BREAK_BLOCK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "hasIcon",
    "id": "org.bukkit.potion.PotionEffect#hasIcon()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "boolean"
  },
  {
    "descr": "Default server loot tables.",
    "static": true,
    "field": "LOOT_TABLES",
    "id": "org.bukkit.Registry#LOOT_TABLES",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Gets the location of this block state.\\n\\nIf this block state is not placed the location's world will be null!",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getLocation",
    "id": "org.bukkit.block.BlockState#getLocation()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the owning AnimalTamer",
    "method": "getOwner",
    "id": "org.bukkit.event.entity.EntityTameEvent#getOwner()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "org.bukkit.entity.AnimalTamer"
  },
  {
    "static": true,
    "field": "POTTED_ORANGE_TULIP",
    "id": "org.bukkit.Material#POTTED_ORANGE_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'part' property.",
    "param-names": ["Bed"],
    "param-types": ["org.bukkit.block.data.type.Bed"],
    "method": "getPart",
    "id": "org.bukkit.block.data.type.Bed#getPart()",
    "class": "org.bukkit.block.data.type.Bed",
    "return": "org.bukkit.block.data.type.Bed.Part"
  },
  {
    "static": true,
    "field": "SPORE_BLOSSOM",
    "id": "org.bukkit.Material#SPORE_BLOSSOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the number of patterns on this\\nbanner",
    "param-names": ["Banner"],
    "param-types": ["org.bukkit.block.Banner"],
    "method": "numberOfPatterns",
    "id": "org.bukkit.block.Banner#numberOfPatterns()",
    "class": "org.bukkit.block.Banner",
    "return": "int"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "CYAN_CANDLE_CAKE",
    "id": "org.bukkit.Material#CYAN_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "G",
    "id": "org.bukkit.Note.Tone#G",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "descr": "Draw a pixel to the canvas.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y",
      "Color"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int",
      "byte"
    ],
    "method": "setPixel",
    "id": "org.bukkit.map.MapCanvas#setPixel(int,int,byte)",
    "class": "org.bukkit.map.MapCanvas"
  },
  {
    "descr": "Sets if this goat has its right horn.",
    "param-names": [
      "Goat",
      "Has Horn"
    ],
    "param-types": [
      "org.bukkit.entity.Goat",
      "boolean"
    ],
    "method": "setRightHorn",
    "id": "org.bukkit.entity.Goat#setRightHorn(boolean)",
    "class": "org.bukkit.entity.Goat"
  },
  {
    "descr": "Performs scalar multiplication, multiplying all components with a\\nscalar. Not world-aware.",
    "param-names": [
      "Location",
      "M"
    ],
    "param-types": [
      "org.bukkit.Location",
      "double"
    ],
    "method": "multiply",
    "id": "org.bukkit.Location#multiply(double)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.FluidCollisionMode#values()",
    "class": "org.bukkit.FluidCollisionMode",
    "return": "org.bukkit.FluidCollisionMode[]"
  },
  {
    "descr": "Returns true if the block is being powered by Redstone.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "isBlockPowered",
    "id": "org.bukkit.block.Block#isBlockPowered()",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Sets the format to use to display this chat message.\\n\\nWhen this event finishes execution, the first format parameter is the\\nPlayer#getDisplayName() and the second parameter is #getMessage()",
    "param-names": ["Format"],
    "param-types": ["java.lang.String"],
    "method": "setFormat",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#setFormat(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent"
  },
  {
    "static": true,
    "method": "getUnsafe",
    "id": "org.bukkit.Bukkit#getUnsafe()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.UnsafeValues"
  },
  {
    "static": true,
    "field": "BLOCK_PACKED_MUD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_PACKED_MUD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Block that is being searched for an inventory.",
    "method": "getSearchBlock",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getSearchBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Stores the ItemStack at the given equipment slot in the inventory.",
    "param-names": [
      "PlayerInventory",
      "Slot",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.PlayerInventory#setItem(org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Adds a vector to this one",
    "param-names": [
      "Vector",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "add",
    "id": "org.bukkit.util.Vector#add(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the current status of the raid.\\n\\nDo not use this method to check if the raid has been started, call\\n#isStarted() instead.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getStatus",
    "id": "org.bukkit.Raid#getStatus()",
    "class": "org.bukkit.Raid",
    "return": "org.bukkit.Raid.RaidStatus"
  },
  {
    "descr": "Gets the location of the bed the player is currently sleeping in",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getBedLocation",
    "id": "org.bukkit.entity.HumanEntity#getBedLocation()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets a copy of the item the player is currently holding",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getItemInHand",
    "id": "org.bukkit.inventory.PlayerInventory#getItemInHand()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ENDERMITE_SPAWN_EGG",
    "id": "org.bukkit.Material#ENDERMITE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the amount of time to skip.",
    "param-names": ["Skip Amount"],
    "param-types": ["long"],
    "method": "setSkipAmount",
    "id": "org.bukkit.event.world.TimeSkipEvent#setSkipAmount(long)",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent"
  },
  {
    "static": true,
    "field": "GREEN_STAINED_GLASS",
    "id": "org.bukkit.Material#GREEN_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.world.TimeSkipEvent.SkipReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.world.TimeSkipEvent.SkipReason",
    "return": "org.bukkit.event.world.TimeSkipEvent.SkipReason"
  },
  {
    "descr": "Create a cooking recipe to craft the specified ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Input",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.CookingRecipe#CookingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,float,int)",
    "class": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_HIT",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Adds the specified enchantments to this item stack.\\n\\nThis method is the same as calling #addEnchantment(org.bukkit.enchantments.Enchantment, int) for each\\nelement of the map.",
    "param-names": [
      "ItemStack",
      "Enchantments"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "java.util.Map"
    ],
    "method": "addEnchantments",
    "id": "org.bukkit.inventory.ItemStack#addEnchantments(java.util.Map<org.bukkit.enchantments.Enchantment,java.lang.Integer>)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "WHITE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#WHITE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the maximum allowed value of the 'age' property.",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.block.data.Ageable"],
    "method": "getMaximumAge",
    "id": "org.bukkit.block.data.Ageable#getMaximumAge()",
    "class": "org.bukkit.block.data.Ageable",
    "return": "int"
  },
  {
    "descr": "Gets a list of players viewing the inventory. Note that a player is\\nconsidered to be viewing their own inventory and internal crafting\\nscreen even when said inventory is not open. They will normally be\\nconsidered to be viewing their inventory even when they have a\\ndifferent inventory screen open, but it's possible for customized\\ninventory screens to exclude the viewer's inventory, so this should\\nnever be assumed to be non-empty.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getViewers",
    "id": "org.bukkit.inventory.Inventory#getViewers()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "WEST_SOUTH_WEST",
    "id": "org.bukkit.block.BlockFace#WEST_SOUTH_WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "MINECART_TNT",
    "id": "org.bukkit.entity.EntityType#MINECART_TNT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Whether blocks should have drops.",
    "static": true,
    "field": "DO_TILE_DROPS",
    "id": "org.bukkit.GameRule#DO_TILE_DROPS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_VILLAGER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Whether or not wait and lure time will be impacted by direct sky access.\\nTrue by default, causes a 50% time increase on average.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "isSkyInfluenced",
    "id": "org.bukkit.entity.FishHook#isSkyInfluenced()",
    "class": "org.bukkit.entity.FishHook",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_HONEY_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_HONEY_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns a set of tags for this entity.\\n\\nEntities can have no more than 1024 tags.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getScoreboardTags",
    "id": "org.bukkit.entity.Entity#getScoreboardTags()",
    "class": "org.bukkit.entity.Entity",
    "return": "java.util.Set"
  },
  {
    "descr": "Get an immutable set of recipes this entity has discovered.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getDiscoveredRecipes",
    "id": "org.bukkit.entity.HumanEntity#getDiscoveredRecipes()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "CHERRY_CHEST_BOAT",
    "id": "org.bukkit.Material#CHERRY_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "AVIATE_ONE_CM",
    "id": "org.bukkit.Statistic#AVIATE_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets whether the zombie is a baby",
    "param-names": ["Zombie"],
    "param-types": ["org.bukkit.entity.Zombie"],
    "method": "isBaby",
    "id": "org.bukkit.entity.Zombie#isBaby()",
    "class": "org.bukkit.entity.Zombie",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_STEP",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the sneak mode the player",
    "param-names": [
      "Player",
      "Sneak"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "boolean"
    ],
    "method": "setSneaking",
    "id": "org.bukkit.entity.Player#setSneaking(boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Creates a new note for a sharp tone, such as A-sharp.",
    "param-names": [
      "Octave",
      "Tone"
    ],
    "static": true,
    "param-types": [
      "int",
      "org.bukkit.Note.Tone"
    ],
    "method": "sharp",
    "id": "org.bukkit.Note#sharp(int,org.bukkit.Note.Tone)",
    "class": "org.bukkit.Note",
    "return": "org.bukkit.Note"
  },
  {
    "static": true,
    "field": "COBBLESTONE",
    "id": "org.bukkit.Material#COBBLESTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a block is formed by entities.\\n\\nExamples:\\n\\nSnow formed by a org.bukkit.entity.Snowman.\\nFrosted Ice formed by the Frost Walker enchantment.\\n",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent"
  },
  {
    "descr": "Power change caused by a lightning bolt\\n\\nPowered state: true",
    "static": true,
    "field": "LIGHTNING",
    "id": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause#LIGHTNING",
    "class": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause",
    "return": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "CAVE_AIR",
    "id": "org.bukkit.Material#CAVE_AIR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the type of block that changed, causing this event",
    "method": "getChangedType",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#getChangedType()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Choices"],
    "param-types": ["org.bukkit.Material[]"],
    "id": "org.bukkit.inventory.RecipeChoice.MaterialChoice#MaterialChoice(org.bukkit.Material...)",
    "class": "org.bukkit.inventory.RecipeChoice.MaterialChoice"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.WorldLoadEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.WorldLoadEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_BRICK_STAIRS",
    "id": "org.bukkit.Material#LEGACY_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'stage' property.",
    "param-names": [
      "Sapling",
      "Stage"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Sapling",
      "int"
    ],
    "method": "setStage",
    "id": "org.bukkit.block.data.type.Sapling#setStage(int)",
    "class": "org.bukkit.block.data.type.Sapling"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerKickEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_LEAVES_FALL",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_LEAVES_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: SeaPickle",
    "static": true,
    "field": "SEA_PICKLE",
    "id": "org.bukkit.Material#SEA_PICKLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'inverted' property.",
    "param-names": [
      "DaylightDetector",
      "Inverted"
    ],
    "param-types": [
      "org.bukkit.block.data.type.DaylightDetector",
      "boolean"
    ],
    "method": "setInverted",
    "id": "org.bukkit.block.data.type.DaylightDetector#setInverted(boolean)",
    "class": "org.bukkit.block.data.type.DaylightDetector"
  },
  {
    "descr": "The hearts when taming a wolf succeeds.",
    "static": true,
    "field": "WOLF_HEARTS",
    "id": "org.bukkit.EntityEffect#WOLF_HEARTS",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "LEGACY_CARROT",
    "id": "org.bukkit.Material#LEGACY_CARROT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Expands this bounding box to contain (or border) the specified position.",
    "param-names": [
      "BoundingBox",
      "Pos X",
      "Pos Y",
      "Pos Z"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double"
    ],
    "method": "union",
    "id": "org.bukkit.util.BoundingBox#union(double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_STRAD",
    "id": "org.bukkit.Material#MUSIC_DISC_STRAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Allows an entity to see in the dark.",
    "static": true,
    "field": "NIGHT_VISION",
    "id": "org.bukkit.potion.PotionEffectType#NIGHT_VISION",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_EXTINGUISH",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_EXTINGUISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Teal, or (0x00,0x80,0x80) in (R,G,B)",
    "static": true,
    "field": "TEAL",
    "id": "org.bukkit.Color#TEAL",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_FAR",
    "id": "org.bukkit.Material#MUSIC_DISC_FAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Allows the player to log in",
    "method": "allow",
    "id": "org.bukkit.event.player.PlayerLoginEvent#allow()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent"
  },
  {
    "descr": "Gets the current allowed speed that a client can walk.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getWalkSpeed",
    "id": "org.bukkit.entity.Player#getWalkSpeed()",
    "class": "org.bukkit.entity.Player",
    "return": "float"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.BanList.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.BanList.Type",
    "return": "org.bukkit.BanList.Type"
  },
  {
    "static": true,
    "field": "ACACIA_PLANKS",
    "id": "org.bukkit.Material#ACACIA_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RABBIT",
    "id": "org.bukkit.loot.LootTables#RABBIT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Internal use only! Do not use under any circumstances!",
    "param-names": [
      "ItemMeta",
      "Version"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "int"
    ],
    "method": "setVersion",
    "id": "org.bukkit.inventory.meta.ItemMeta#setVersion(int)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_PICKAXE",
    "id": "org.bukkit.Material#LEGACY_WOOD_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Large warped fungus native to the nether",
    "static": true,
    "field": "WARPED_FUNGUS",
    "id": "org.bukkit.TreeType#WARPED_FUNGUS",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Called with the block changes resulting from a player fertilizing a given\\nblock with bonemeal. Will be called after the applicable\\nStructureGrowEvent.",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent"
  },
  {
    "descr": "Stores data for health-regain events",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent"
  },
  {
    "static": true,
    "field": "LEGACY_YELLOW_FLOWER",
    "id": "org.bukkit.Material#LEGACY_YELLOW_FLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_OPEN",
    "id": "org.bukkit.GameEvent#BLOCK_OPEN",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "MAGENTA_CANDLE",
    "id": "org.bukkit.Material#MAGENTA_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_DASH",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_DASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if the text has its default background.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "isDefaultBackground",
    "id": "org.bukkit.entity.TextDisplay#isDefaultBackground()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "boolean"
  },
  {
    "descr": "Sets the Total EXP the Player should have at respawn.",
    "param-names": ["Total Exp"],
    "param-types": ["int"],
    "method": "setNewTotalExp",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setNewTotalExp(int)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "static": true,
    "field": "NETHER_WART_BLOCK",
    "id": "org.bukkit.Material#NETHER_WART_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_PACKED_MUD_HIT",
    "id": "org.bukkit.Sound#BLOCK_PACKED_MUD_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allows the Enchantment to be placed on bows.",
    "static": true,
    "field": "BOW",
    "id": "org.bukkit.enchantments.EnchantmentTarget#BOW",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockDropItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_DRIP_LAVA",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the type of this item\\n\\nNote that in doing so you will reset the MaterialData for this stack.\\n\\nIMPORTANT: An ItemStack is only designed to contain\\nitems. Do not use this class to encapsulate Materials for which\\nMaterial#isItem() returns false.",
    "param-names": [
      "ItemStack",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material"
    ],
    "method": "setType",
    "id": "org.bukkit.inventory.ItemStack#setType(org.bukkit.Material)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "SIMPLE_DUNGEON",
    "id": "org.bukkit.loot.LootTables#SIMPLE_DUNGEON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Create a shaped recipe to craft the specified ItemStack. The\\nconstructor merely determines the result and type; to set the actual\\nrecipe, you'll need to call the appropriate methods.",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "id": "org.bukkit.inventory.ShapedRecipe#ShapedRecipe(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_PINK_PETALS_STEP",
    "id": "org.bukkit.Sound#BLOCK_PINK_PETALS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Resistance of an Entity to knockback.",
    "static": true,
    "field": "GENERIC_KNOCKBACK_RESISTANCE",
    "id": "org.bukkit.attribute.Attribute#GENERIC_KNOCKBACK_RESISTANCE",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEATHER_BOOTS",
    "id": "org.bukkit.Material#LEATHER_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates explosion at given coordinates with given power and optionally\\nsetting blocks on fire or breaking blocks.",
    "param-names": [
      "World",
      "Loc",
      "Power",
      "Set Fire",
      "Break Blocks"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "float",
      "boolean",
      "boolean"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(org.bukkit.Location,float,boolean,boolean)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a left\\nclick.",
    "method": "isLeftClick",
    "id": "org.bukkit.event.inventory.CraftItemEvent#isLeftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_HURT_CLOSED",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_HURT_CLOSED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Splits the boss bar into 6 segments",
    "static": true,
    "field": "SEGMENTED_6",
    "id": "org.bukkit.boss.BarStyle#SEGMENTED_6",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the message that the player will send",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "id": "org.bukkit.event.player.PlayerChatEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent"
  },
  {
    "descr": "Silver, or (0xC0,0xC0,0xC0) in (R,G,B)",
    "static": true,
    "field": "SILVER",
    "id": "org.bukkit.Color#SILVER",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the result cursor after the drag is done.\\n\\nChanging this item stack changes the cursor item. Note that changing\\nthe affected \"dragged\" slots does not change this ItemStack, nor does\\nchanging this ItemStack affect the \"dragged\" slots.",
    "param-names": ["New Cursor"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCursor",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#setCursor(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent"
  },
  {
    "descr": "Gets all Objectives of a Criteria on the Scoreboard",
    "param-names": [
      "Scoreboard",
      "Criteria"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "org.bukkit.scoreboard.Criteria"
    ],
    "method": "getObjectivesByCriteria",
    "id": "org.bukkit.scoreboard.Scoreboard#getObjectivesByCriteria(org.bukkit.scoreboard.Criteria)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Checks if the potion type has an upgraded state.\\nThis refers to whether or not the potion type can be Tier 2,\\nsuch as Potion of Fire Resistance II.",
    "param-names": ["PotionType"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "method": "isUpgradeable",
    "id": "org.bukkit.potion.PotionType#isUpgradeable()",
    "class": "org.bukkit.potion.PotionType",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets an Objective on this Scoreboard by name",
    "param-names": [
      "Scoreboard",
      "Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "getObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#getObjective(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Display.Billboard#values()",
    "class": "org.bukkit.entity.Display.Billboard",
    "return": "org.bukkit.entity.Display.Billboard[]"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "GLASS_PANE",
    "id": "org.bukkit.Material#GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the entities that the original entity was transformed to.",
    "method": "getTransformedEntities",
    "id": "org.bukkit.event.entity.PigZapEvent#getTransformedEntities()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "JUNGLE_TEMPLE",
    "id": "org.bukkit.loot.LootTables#JUNGLE_TEMPLE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Warning.WarningState#valueOf(java.lang.String)",
    "class": "org.bukkit.Warning.WarningState",
    "return": "org.bukkit.Warning.WarningState"
  },
  {
    "static": true,
    "field": "PINK_TERRACOTTA",
    "id": "org.bukkit.Material#PINK_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block being used to enchant the item",
    "method": "getEnchantBlock",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getEnchantBlock()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get a Criteria for the specified statistic.\\n\\nAn example would be Criteria.statistic(Statistic.FLY_ONE_CM), returning a Criteria\\nrepresenting \"minecraft.custom:minecraft.aviate_one_cm\" which will increment when the player\\nflies with an elytra.\\n\\nThis method provides no guarantee that any given criteria exists on the vanilla server. All\\nstatistics are accepted, however some may not operate as expected if additional data is\\nrequired. For block/item-related statistics, see #statistic(Statistic, Material),\\nand for entity-related statistics, see #statistic(Statistic, EntityType)",
    "param-names": ["Statistic"],
    "static": true,
    "param-types": ["org.bukkit.Statistic"],
    "method": "statistic",
    "id": "org.bukkit.scoreboard.Criteria#statistic(org.bukkit.Statistic)",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Remove a recipe from the server.\\nNote that removing a recipe may cause permanent loss of data\\nassociated with that recipe (eg whether it has been discovered by\\nplayers).",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "removeRecipe",
    "id": "org.bukkit.Bukkit#removeRecipe(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Checks if this is a substatistic dealing with blocks.\\n\\nThis is a redundant method and equivalent to checking\\ngetType() == Type.BLOCK",
    "param-names": ["Statistic"],
    "param-types": ["org.bukkit.Statistic"],
    "method": "isBlock",
    "id": "org.bukkit.Statistic#isBlock()",
    "class": "org.bukkit.Statistic",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SPRUCE",
    "id": "org.bukkit.entity.Boat.Type#SPRUCE",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Gets the highest coordinate corresponding to the HeightMap at the\\ngiven Location.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Height Map"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "org.bukkit.HeightMap"
    ],
    "method": "getHighestBlockYAt",
    "id": "org.bukkit.RegionAccessor#getHighestBlockYAt(org.bukkit.Location,org.bukkit.HeightMap)",
    "class": "org.bukkit.RegionAccessor",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_GROWL",
    "id": "org.bukkit.Sound#ENTITY_WOLF_GROWL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A flying wither skull projectile.",
    "static": true,
    "field": "WITHER_SKULL",
    "id": "org.bukkit.entity.EntityType#WITHER_SKULL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_LEGGINGS",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the armor stand's right leg's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": [
      "ArmorStand",
      "Pose"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.util.EulerAngle"
    ],
    "method": "setRightLegPose",
    "id": "org.bukkit.entity.ArmorStand#setRightLegPose(org.bukkit.util.EulerAngle)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Gets the hostname that the player used to connect to the server, or\\nblank if unknown",
    "method": "getHostname",
    "id": "org.bukkit.event.server.ServerListPingEvent#getHostname()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SHEEP_ORANGE",
    "id": "org.bukkit.loot.LootTables#SHEEP_ORANGE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_QUARTZ_ORE",
    "id": "org.bukkit.Material#LEGACY_QUARTZ_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FLOWER_POTTED",
    "id": "org.bukkit.Statistic#FLOWER_POTTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_LANTERN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_LANTERN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Difficulty represented by the specified value",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["int"],
    "method": "getByValue",
    "id": "org.bukkit.Difficulty#getByValue(int)",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty"
  },
  {
    "descr": "Breaks the block and spawns items as if a player had digged it regardless\\nof the tool.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "breakNaturally",
    "id": "org.bukkit.block.Block#breakNaturally()",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NORTH_NORTH_EAST",
    "id": "org.bukkit.block.BlockFace#NORTH_NORTH_EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Randomly teleports the Enderman towards the given entity.\\n\\nThe point is selected by drawing a vector between this enderman and the\\ngiven entity. That vector's length is set to 16 blocks.\\nThat point is then moved within a 8x8x8 cuboid region. If the randomly\\nselected point is in the ground, the point is moved 1 block down until\\nair is found or until it goes under\\norg.bukkit.World#getMinHeight().\\n\\nThis method will return false if this Enderman is not alive, or if the\\nteleport location was obstructed, or if the teleport location is in water.",
    "param-names": [
      "Enderman",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Enderman",
      "org.bukkit.entity.Entity"
    ],
    "method": "teleportTowards",
    "id": "org.bukkit.entity.Enderman#teleportTowards(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Enderman",
    "return": "boolean"
  },
  {
    "descr": "When a player regains health from eating consumables",
    "static": true,
    "field": "EATING",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#EATING",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "descr": "Checks if this block has the specified face enabled.",
    "param-names": [
      "MultipleFacing",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.data.MultipleFacing",
      "org.bukkit.block.BlockFace"
    ],
    "method": "hasFace",
    "id": "org.bukkit.block.data.MultipleFacing#hasFace(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.data.MultipleFacing",
    "return": "boolean"
  },
  {
    "descr": "Base.",
    "static": true,
    "field": "BASE",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#BASE",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "descr": "Sets if the text has its default background.",
    "param-names": [
      "TextDisplay",
      "Default Background"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "boolean"
    ],
    "method": "setDefaultBackground",
    "id": "org.bukkit.entity.TextDisplay#setDefaultBackground(boolean)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Called when a redstone current changes",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.LootGenerateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "GRASS",
    "id": "org.bukkit.Material#GRASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BrewingStartEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the item in the result slot of the smithing table",
    "param-names": [
      "SmithingInventory",
      "New Result"
    ],
    "param-types": [
      "org.bukkit.inventory.SmithingInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setResult",
    "id": "org.bukkit.inventory.SmithingInventory#setResult(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.SmithingInventory"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent"
  },
  {
    "static": true,
    "field": "BLOCK_PRESS",
    "id": "org.bukkit.GameEvent#BLOCK_PRESS",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockFromToEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLUE_CONCRETE",
    "id": "org.bukkit.Material#BLUE_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The dragon will fly towards the empty portal (approaching\\nfrom the other side, if applicable).",
    "static": true,
    "field": "FLY_TO_PORTAL",
    "id": "org.bukkit.entity.EnderDragon.Phase#FLY_TO_PORTAL",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Gets the item used to shear this sheep.",
    "method": "getTool",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#getTool()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "EVOKER",
    "id": "org.bukkit.loot.LootTables#EVOKER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "Sets the resultant ItemStack for this event",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setResult",
    "id": "org.bukkit.event.block.BlockCookEvent#setResult(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent"
  },
  {
    "static": true,
    "field": "SKULL_AND_ROSES",
    "id": "org.bukkit.Art#SKULL_AND_ROSES",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_DIGGING",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_DIGGING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "field": "STONE_AXE",
    "id": "org.bukkit.Material#STONE_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getEntity",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerUnregisterChannelEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets whether the world's spawn area should be kept loaded into memory\\nor not.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getKeepSpawnInMemory",
    "id": "org.bukkit.World#getKeepSpawnInMemory()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Breaks the block and spawns items as if a player had digged it with a\\nspecific tool",
    "param-names": [
      "Block",
      "Tool"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "breakNaturally",
    "id": "org.bukkit.block.Block#breakNaturally(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Sets the date this ban expires on. Null values are considered\\n\"infinite\" bans.",
    "param-names": [
      "BanEntry",
      "Expiration"
    ],
    "param-types": [
      "org.bukkit.BanEntry",
      "java.util.Date"
    ],
    "method": "setExpiration",
    "id": "org.bukkit.BanEntry#setExpiration(java.util.Date)",
    "class": "org.bukkit.BanEntry"
  },
  {
    "static": true,
    "field": "WHITE_CROSS",
    "id": "org.bukkit.map.MapCursor.Type#WHITE_CROSS",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "The slab occupies the upper y half of the block.",
    "static": true,
    "field": "TOP",
    "id": "org.bukkit.block.data.type.Slab.Type#TOP",
    "class": "org.bukkit.block.data.type.Slab.Type",
    "return": "org.bukkit.block.data.type.Slab.Type"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.NotePlayEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityTameEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "A song from a record. Needs the record item ID as additional info",
    "static": true,
    "field": "RECORD_PLAY",
    "id": "org.bukkit.Effect#RECORD_PLAY",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Reset the cooldown for duplication.\\nThis will set the cooldown ticks to the same value as is set after an\\nAllay has duplicated.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "resetDuplicationCooldown",
    "id": "org.bukkit.entity.Allay#resetDuplicationCooldown()",
    "class": "org.bukkit.entity.Allay"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the radius to which the event should be broadcast.",
    "param-names": ["Radius"],
    "param-types": ["int"],
    "method": "setRadius",
    "id": "org.bukkit.event.world.GenericGameEvent#setRadius(int)",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent"
  },
  {
    "static": true,
    "field": "GLOW_ITEM_FRAME",
    "id": "org.bukkit.Material#GLOW_ITEM_FRAME",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the entity currently perched on the right shoulder, or null to\\nremove. This method will remove the entity from the world.\\n\\nNote that only a copy of the entity will be set to display on the\\nshoulder.\\n\\nAlso note that the client will currently only render Parrot\\nentities.",
    "param-names": [
      "HumanEntity",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.entity.Entity"
    ],
    "method": "setShoulderEntityRight",
    "id": "org.bukkit.entity.HumanEntity#setShoulderEntityRight(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "BLOCK_DISPENSER_FAIL",
    "id": "org.bukkit.Sound#BLOCK_DISPENSER_FAIL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a block causes an entity to combust.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "BRICK_SLAB",
    "id": "org.bukkit.Material#BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COMPASS",
    "id": "org.bukkit.Material#COMPASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks for the level of the stored enchantment.",
    "param-names": [
      "EnchantmentStorageMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.EnchantmentStorageMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "getStoredEnchantLevel",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#getStoredEnchantLevel(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "int"
  },
  {
    "descr": "Generate the end portal.",
    "param-names": [
      "DragonBattle",
      "With Portals"
    ],
    "param-types": [
      "org.bukkit.boss.DragonBattle",
      "boolean"
    ],
    "method": "generateEndPortal",
    "id": "org.bukkit.boss.DragonBattle#generateEndPortal(boolean)",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.enchantments.EnchantmentTarget#values()",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget[]"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LIGHT_GREEN",
    "id": "org.bukkit.map.MapPalette#LIGHT_GREEN",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "CANDLE",
    "id": "org.bukkit.Material#CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "AMBIENT",
    "id": "org.bukkit.SoundCategory#AMBIENT",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "descr": "Returns the player placing the hanging entity",
    "method": "getPlayer",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "STARTUP",
    "id": "org.bukkit.event.server.ServerLoadEvent.LoadType#STARTUP",
    "class": "org.bukkit.event.server.ServerLoadEvent.LoadType",
    "return": "org.bukkit.event.server.ServerLoadEvent.LoadType"
  },
  {
    "descr": "Gets the OfflinePlayer being tracked by this Score",
    "param-names": ["Score"],
    "param-types": ["org.bukkit.scoreboard.Score"],
    "method": "getPlayer",
    "id": "org.bukkit.scoreboard.Score#getPlayer()",
    "class": "org.bukkit.scoreboard.Score",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "LEGACY_RED_ROSE",
    "id": "org.bukkit.Material#LEGACY_RED_ROSE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CROSS",
    "id": "org.bukkit.block.banner.PatternType#CROSS",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the crafted item using the list of ItemStack provided.\\nThe list is formatted as a crafting matrix where the index follow\\nthe pattern below:\\n\\n[ 0 1 2 ]\\n[ 3 4 5 ]\\n[ 6 7 8 ]\\n\\nThe World and Player arguments are required to fulfill the Bukkit Crafting\\nevents.\\nCalls org.bukkit.event.inventory.PrepareItemCraftEvent to imitate the Player\\ninitiating the crafting event.",
    "param-names": [
      "Crafting Matrix",
      "World",
      "Player"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.inventory.ItemStack[]",
      "org.bukkit.World",
      "org.bukkit.entity.Player"
    ],
    "method": "craftItem",
    "id": "org.bukkit.Bukkit#craftItem(org.bukkit.inventory.ItemStack[],org.bukkit.World,org.bukkit.entity.Player)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockGrowEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent"
  },
  {
    "descr": "Sets the location that this player will move to",
    "param-names": ["To"],
    "param-types": ["org.bukkit.Location"],
    "method": "setTo",
    "id": "org.bukkit.event.player.PlayerMoveEvent#setTo(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_DRIPSTONE_CAVES",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_DRIPSTONE_CAVES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get entity which did this. May be null.",
    "method": "getEntity",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Returns whether this entity is slumbering.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isSleeping",
    "id": "org.bukkit.entity.LivingEntity#isSleeping()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Piano is the standard instrument for a note block.",
    "static": true,
    "field": "PIANO",
    "id": "org.bukkit.Instrument#PIANO",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Sets if this Item should live forever",
    "param-names": [
      "Item",
      "Unlimited"
    ],
    "param-types": [
      "org.bukkit.entity.Item",
      "boolean"
    ],
    "method": "setUnlimitedLifetime",
    "id": "org.bukkit.entity.Item#setUnlimitedLifetime(boolean)",
    "class": "org.bukkit.entity.Item"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "WARPED_STEM",
    "id": "org.bukkit.Material#WARPED_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This puts the specified player onto this team for the scoreboard.\\n\\nThis will remove the player from any other team on the scoreboard.",
    "param-names": [
      "Team",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "addPlayer",
    "id": "org.bukkit.scoreboard.Team#addPlayer(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Book that was copied from a copy of an original. Can't be copied.",
    "static": true,
    "field": "COPY_OF_COPY",
    "id": "org.bukkit.inventory.meta.BookMeta.Generation#COPY_OF_COPY",
    "class": "org.bukkit.inventory.meta.BookMeta.Generation",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation"
  },
  {
    "static": true,
    "field": "INK_SAC",
    "id": "org.bukkit.Material#INK_SAC",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SILVERFISH",
    "id": "org.bukkit.loot.LootTables#SILVERFISH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Creates a tree at the given Location\\n\\nThe provided predicate gets called for every block which gets changed\\nas a result of the tree generation. When the predicate gets called no\\nmodifications to the world are done yet. Which means, that calling\\n#getBlockState(Location) in the predicate will return the state\\nof the block before the generation.\\n\\nIf the predicate returns true the block gets set in the world.\\nIf it returns false the block won't get set in the world.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Random",
      "Type",
      "State Predicate"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "java.util.Random",
      "org.bukkit.TreeType",
      "java.util.function.Predicate"
    ],
    "method": "generateTree",
    "id": "org.bukkit.RegionAccessor#generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType,java.util.function.Predicate<org.bukkit.block.BlockState>)",
    "class": "org.bukkit.RegionAccessor",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_SPROUTS_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHER_SPROUTS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent"
  },
  {
    "static": true,
    "field": "BUDDING_AMETHYST",
    "id": "org.bukkit.Material#BUDDING_AMETHYST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Unbans the specified address from the server.",
    "param-names": ["Address"],
    "static": true,
    "param-types": ["java.net.InetAddress"],
    "method": "unbanIP",
    "id": "org.bukkit.Bukkit#unbanIP(java.net.InetAddress)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Defaults stack size to 1, with no extra data.\\n\\nIMPORTANT: An ItemStack is only designed to contain\\nitems. Do not use this class to encapsulate Materials for which\\nMaterial#isItem() returns false.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.Material"],
    "id": "org.bukkit.inventory.ItemStack#ItemStack(org.bukkit.Material)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "JUNGLE_SLAB",
    "id": "org.bukkit.Material#JUNGLE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOLDEN_SWORD",
    "id": "org.bukkit.Material#GOLDEN_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Opens an inventory window with the specified inventory on the top and\\nthe player's inventory on the bottom.",
    "param-names": [
      "HumanEntity",
      "Inventory"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.Inventory"
    ],
    "method": "openInventory",
    "id": "org.bukkit.entity.HumanEntity#openInventory(org.bukkit.inventory.Inventory)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Damage caused by a dragon breathing fire.\\n\\nDamage: variable",
    "static": true,
    "field": "DRAGON_BREATH",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#DRAGON_BREATH",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "BLOCK_BASALT_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BASALT_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a new midpoint vector between this vector and another.",
    "param-names": [
      "Vector",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "getMidpoint",
    "id": "org.bukkit.util.Vector#getMidpoint(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "ZOMBIE_SPAWN_EGG",
    "id": "org.bukkit.Material#ZOMBIE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Royal blue colored parrot.",
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.entity.Parrot.Variant#BLUE",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_CLUSTER_FALL",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_CLUSTER_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents cyan dye.",
    "static": true,
    "field": "CYAN",
    "id": "org.bukkit.DyeColor#CYAN",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "RED_CANDLE",
    "id": "org.bukkit.Material#RED_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the item currently being worn by the armor stand on its head.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getHelmet",
    "id": "org.bukkit.entity.ArmorStand#getHelmet()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Returns the block that the hanging entity was placed on",
    "method": "getBlock",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "HANGING_ROOTS",
    "id": "org.bukkit.Material#HANGING_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increases the anger level of this warden.\\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\\ntarget it will actively pursue it.",
    "param-names": [
      "Warden",
      "Entity",
      "Increase"
    ],
    "param-types": [
      "org.bukkit.entity.Warden",
      "org.bukkit.entity.Entity",
      "int"
    ],
    "method": "increaseAnger",
    "id": "org.bukkit.entity.Warden#increaseAnger(org.bukkit.entity.Entity,int)",
    "class": "org.bukkit.entity.Warden"
  },
  {
    "descr": "Sets this human's current GameMode",
    "param-names": [
      "HumanEntity",
      "Mode"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.GameMode"
    ],
    "method": "setGameMode",
    "id": "org.bukkit.entity.HumanEntity#setGameMode(org.bukkit.GameMode)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Creates a potion effect. Assumes ambient is true.",
    "param-names": [
      "Type",
      "Duration",
      "Amplifier"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffectType",
      "int",
      "int"
    ],
    "id": "org.bukkit.potion.PotionEffect#PotionEffect(org.bukkit.potion.PotionEffectType,int,int)",
    "class": "org.bukkit.potion.PotionEffect"
  },
  {
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent"
  },
  {
    "descr": "This event is called whenever a player clicks a new trade on the trades\\nsidebar.\\n\\nThis event allows the user to get the index of the trade, letting them get\\nthe MerchantRecipe via the Merchant.",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent"
  },
  {
    "descr": "Reset the crystals located on the obsidian pillars (remove their beam\\ntargets and invulnerability).",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "resetCrystals",
    "id": "org.bukkit.boss.DragonBattle#resetCrystals()",
    "class": "org.bukkit.boss.DragonBattle"
  },
  {
    "param-names": ["RecipeChoice.MaterialChoice"],
    "param-types": ["org.bukkit.inventory.RecipeChoice.MaterialChoice"],
    "method": "getChoices",
    "id": "org.bukkit.inventory.RecipeChoice.MaterialChoice#getChoices()",
    "class": "org.bukkit.inventory.RecipeChoice.MaterialChoice",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_ACACIA_DOOR_ITEM",
    "id": "org.bukkit.Material#LEGACY_ACACIA_DOOR_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_DRAGON_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_ENDER_DRAGON_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_MASON",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_MASON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CLEAN_SHULKER_BOX",
    "id": "org.bukkit.Statistic#CLEAN_SHULKER_BOX",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Set whether or not this projectile should bounce or not when it hits\\nsomething.",
    "param-names": [
      "Projectile",
      "Does Bounce"
    ],
    "param-types": [
      "org.bukkit.entity.Projectile",
      "boolean"
    ],
    "method": "setBounce",
    "id": "org.bukkit.entity.Projectile#setBounce(boolean)",
    "class": "org.bukkit.entity.Projectile"
  },
  {
    "descr": "Sets the kick message to display if getResult() != Result.ALLOWED",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setKickMessage",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#setKickMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent"
  },
  {
    "descr": "Gets the height of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getDisplayHeight",
    "id": "org.bukkit.entity.Display#getDisplayHeight()",
    "class": "org.bukkit.entity.Display",
    "return": "float"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ORANGE_WALL_BANNER",
    "id": "org.bukkit.Material#ORANGE_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Add a cursor to the collection.",
    "param-names": [
      "MapCursorCollection",
      "X",
      "Y",
      "Direction",
      "Type",
      "Visible",
      "Caption"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "int",
      "int",
      "byte",
      "byte",
      "boolean",
      "java.lang.String"
    ],
    "method": "addCursor",
    "id": "org.bukkit.map.MapCursorCollection#addCursor(int,int,byte,byte,boolean,java.lang.String)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "CRAFTING_TABLE",
    "id": "org.bukkit.Material#CRAFTING_TABLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check if the hive is sedated due to smoke from a nearby campfire.",
    "param-names": ["Beehive"],
    "param-types": ["org.bukkit.block.Beehive"],
    "method": "isSedated",
    "id": "org.bukkit.block.Beehive#isSedated()",
    "class": "org.bukkit.block.Beehive",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.EnderDragon.Phase#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Gets the inventory corresponding to the clicked slot.",
    "method": "getClickedInventory",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getClickedInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "DARK_OAK_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#DARK_OAK_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents gray",
    "static": true,
    "field": "GRAY",
    "id": "org.bukkit.ChatColor#GRAY",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "CHIPPED_ANVIL",
    "id": "org.bukkit.Material#CHIPPED_ANVIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The player is not allowed to log in, for reasons undefined",
    "static": true,
    "field": "KICK_OTHER",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#KICK_OTHER",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "static": true,
    "field": "ENTITY_BAT_HURT",
    "id": "org.bukkit.Sound#ENTITY_BAT_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks whether an entity has AI.\\nThe entity will be completely unable to move if it has no AI.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "hasAI",
    "id": "org.bukkit.entity.LivingEntity#hasAI()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Tests if this chunk contains the specified biome.",
    "param-names": [
      "ChunkSnapshot",
      "Biome"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "org.bukkit.block.Biome"
    ],
    "method": "contains",
    "id": "org.bukkit.ChunkSnapshot#contains(org.bukkit.block.Biome)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_DEEP_DARK",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_DEEP_DARK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates a boss bar instance to display to players. The progress defaults\\nto 1.0.\\n\\nThis instance is added to the persistent storage of the server and will\\nbe editable by commands and restored after restart.",
    "param-names": [
      "Key",
      "Title",
      "Color",
      "Style",
      "Flags"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.NamespacedKey",
      "java.lang.String",
      "org.bukkit.boss.BarColor",
      "org.bukkit.boss.BarStyle",
      "org.bukkit.boss.BarFlag[]"
    ],
    "method": "createBossBar",
    "id": "org.bukkit.Bukkit#createBossBar(org.bukkit.NamespacedKey,java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.boss.KeyedBossBar"
  },
  {
    "descr": "Flute is normally played when a note block is on top of a clay block.",
    "static": true,
    "field": "FLUTE",
    "id": "org.bukkit.Instrument#FLUTE",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "SEA_LANTERN",
    "id": "org.bukkit.Material#SEA_LANTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the hive's flower location.",
    "param-names": [
      "Beehive",
      "Location"
    ],
    "param-types": [
      "org.bukkit.block.Beehive",
      "org.bukkit.Location"
    ],
    "method": "setFlower",
    "id": "org.bukkit.block.Beehive#setFlower(org.bukkit.Location)",
    "class": "org.bukkit.block.Beehive"
  },
  {
    "descr": "Gets the value of the 'age' property.",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.block.data.Ageable"],
    "method": "getAge",
    "id": "org.bukkit.block.data.Ageable#getAge()",
    "class": "org.bukkit.block.data.Ageable",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Increments the given statistic for this player for the given entity.\\n\\nThis is equivalent to the following code:\\nincrementStatistic(Statistic, EntityType, 1)",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Entity Type"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType"
    ],
    "method": "incrementStatistic",
    "id": "org.bukkit.OfflinePlayer#incrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Sets the chance of the off hand item being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setItemInOffHandDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInOffHandDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Banned player names",
    "static": true,
    "field": "NAME",
    "id": "org.bukkit.BanList.Type#NAME",
    "class": "org.bukkit.BanList.Type",
    "return": "org.bukkit.BanList.Type"
  },
  {
    "static": true,
    "field": "ITEM_SPYGLASS_STOP_USING",
    "id": "org.bukkit.Sound#ITEM_SPYGLASS_STOP_USING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "VERDANT_FROGLIGHT",
    "id": "org.bukkit.Material#VERDANT_FROGLIGHT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the raid wave that this raider spawned as part of.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "getWave",
    "id": "org.bukkit.entity.Raider#getWave()",
    "class": "org.bukkit.entity.Raider",
    "return": "int"
  },
  {
    "descr": "Whether to reward experience to the player for the trade.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "hasExperienceReward",
    "id": "org.bukkit.inventory.MerchantRecipe#hasExperienceReward()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the map from the given item ID.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getMap",
    "id": "org.bukkit.Bukkit#getMap(int)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.map.MapView"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Door.Hinge#values()",
    "class": "org.bukkit.block.data.type.Door.Hinge",
    "return": "org.bukkit.block.data.type.Door.Hinge[]"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_FALL",
    "id": "org.bukkit.Sound#BLOCK_MUD_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WARPED_SPORE",
    "id": "org.bukkit.Particle#WARPED_SPORE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "The maximum spawn delay amount (in ticks).\\n\\nThis value is used when the spawner resets its delay (for any reason).\\nIt will choose a random number between #getMinSpawnDelay()\\nand #getMaxSpawnDelay() for its next #getDelay().\\n\\nThis value must be greater than 0 and less than or equal to\\n#getMaxSpawnDelay().\\n\\nDefault value is 800 ticks.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getMaxSpawnDelay",
    "id": "org.bukkit.block.CreatureSpawner#getMaxSpawnDelay()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_NETHER_WART_PLANT",
    "id": "org.bukkit.Sound#ITEM_NETHER_WART_PLANT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the current fuel for brewing. Generally only\\nMaterial#BLAZE_POWDER will be of use.",
    "param-names": [
      "BrewerInventory",
      "Fuel"
    ],
    "param-types": [
      "org.bukkit.inventory.BrewerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setFuel",
    "id": "org.bukkit.inventory.BrewerInventory#setFuel(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.BrewerInventory"
  },
  {
    "param-names": ["Args"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.util.BoundingBox#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_PLACE",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "EQUIP",
    "id": "org.bukkit.GameEvent#EQUIP",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "STRENGTH",
    "id": "org.bukkit.potion.PotionType#STRENGTH",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Gets the location this player moved to",
    "method": "getTo",
    "id": "org.bukkit.event.player.PlayerMoveEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_SWIM",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Item entity the main Item is being merged into.",
    "method": "getTarget",
    "id": "org.bukkit.event.entity.ItemMergeEvent#getTarget()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Gets the source block that triggered this event.\\nNote: This will default to block if not set.",
    "method": "getSourceBlock",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#getSourceBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_LILY_PAD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_LILY_PAD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_CHIME",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_CHIME",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the amount of ticks this entity has lived for.\\n\\nThis is the equivalent to \"age\" in entities.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getTicksLived",
    "id": "org.bukkit.entity.Entity#getTicksLived()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "descr": "Set the scale of this map.",
    "param-names": [
      "MapView",
      "Scale"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "org.bukkit.map.MapView.Scale"
    ],
    "method": "setScale",
    "id": "org.bukkit.map.MapView#setScale(org.bukkit.map.MapView.Scale)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "static": true,
    "field": "DRAGON_BREATH",
    "id": "org.bukkit.Material#DRAGON_BREATH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SPIDER",
    "id": "org.bukkit.entity.EntityType#SPIDER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#values()",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness[]"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent"
  },
  {
    "descr": "Gets whether or not this jukebox has a record.\\n\\nA jukebox can have a record but not #isPlaying() be playing\\nif it was stopped with #stopPlaying() or if a record has\\nfinished playing.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "hasRecord",
    "id": "org.bukkit.block.Jukebox#hasRecord()",
    "class": "org.bukkit.block.Jukebox",
    "return": "boolean"
  },
  {
    "descr": "Add several primary colors to the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Colors"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "java.lang.Iterable"
    ],
    "method": "withColor",
    "id": "org.bukkit.FireworkEffect.Builder#withColor(java.lang.Iterable<?>)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Horse.Style#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "static": true,
    "field": "BLOCK_END_PORTAL_FRAME_FILL",
    "id": "org.bukkit.Sound#BLOCK_END_PORTAL_FRAME_FILL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "FROSTED_ICE",
    "id": "org.bukkit.Material#FROSTED_ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item stack associated with this item drop.",
    "param-names": [
      "Item",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.entity.Item",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemStack",
    "id": "org.bukkit.entity.Item#setItemStack(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.Item"
  },
  {
    "descr": "Gets the Set of players on the team",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getPlayers",
    "id": "org.bukkit.scoreboard.Team#getPlayers()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "EARTH",
    "id": "org.bukkit.Art#EARTH",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Checks if this ocelot trusts players.",
    "param-names": ["Ocelot"],
    "param-types": ["org.bukkit.entity.Ocelot"],
    "method": "isTrusting",
    "id": "org.bukkit.entity.Ocelot#isTrusting()",
    "class": "org.bukkit.entity.Ocelot",
    "return": "boolean"
  },
  {
    "descr": "Get the type of this animation event",
    "method": "getAnimationType",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#getAnimationType()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "org.bukkit.event.player.PlayerAnimationType"
  },
  {
    "static": true,
    "field": "LEGACY_ICE",
    "id": "org.bukkit.Material#LEGACY_ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the corresponding breaking sound for this group.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getBreakSound",
    "id": "org.bukkit.SoundGroup#getBreakSound()",
    "class": "org.bukkit.SoundGroup",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the category which this recipe will appear in the recipe book under.\\nDefaults to CraftingBookCategory#MISC if not set.",
    "param-names": [
      "ShapedRecipe",
      "Category"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "org.bukkit.inventory.recipe.CraftingBookCategory"
    ],
    "method": "setCategory",
    "id": "org.bukkit.inventory.ShapedRecipe#setCategory(org.bukkit.inventory.recipe.CraftingBookCategory)",
    "class": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "static": true,
    "field": "ENTITY_COD_HURT",
    "id": "org.bukkit.Sound#ENTITY_COD_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_PREPARE_SUMMON",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_PREPARE_SUMMON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.raid.RaidStopEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PLENTY_POTTERY_SHERD",
    "id": "org.bukkit.Material#PLENTY_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "SCULK_CHARGE",
    "id": "org.bukkit.Particle#SCULK_CHARGE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Entity is digging.",
    "static": true,
    "field": "DIGGING",
    "id": "org.bukkit.entity.Pose#DIGGING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Initialize the map cursor.",
    "param-names": [
      "X",
      "Y",
      "Direction",
      "Type",
      "Visible"
    ],
    "param-types": [
      "byte",
      "byte",
      "byte",
      "org.bukkit.map.MapCursor.Type",
      "boolean"
    ],
    "id": "org.bukkit.map.MapCursor#MapCursor(byte,byte,byte,org.bukkit.map.MapCursor.Type,boolean)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_BRAIN_CORAL_FAN",
    "id": "org.bukkit.Material#DEAD_BRAIN_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Creates a new Color object with specified component",
    "param-names": [
      "Color",
      "Red"
    ],
    "param-types": [
      "org.bukkit.Color",
      "int"
    ],
    "method": "setRed",
    "id": "org.bukkit.Color#setRed(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Never show the player's nametag.",
    "static": true,
    "field": "NEVER",
    "id": "org.bukkit.scoreboard.NameTagVisibility#NEVER",
    "class": "org.bukkit.scoreboard.NameTagVisibility",
    "return": "org.bukkit.scoreboard.NameTagVisibility"
  },
  {
    "descr": "Returns the maximum stack size for an ItemStack in this inventory.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getMaxStackSize",
    "id": "org.bukkit.inventory.Inventory#getMaxStackSize()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "int"
  },
  {
    "static": true,
    "field": "CALICO",
    "id": "org.bukkit.entity.Cat.Type#CALICO",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "static": true,
    "field": "BLOCK_TRIPWIRE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_TRIPWIRE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "If the ClickType is NUMBER_KEY, this method will return the index of\\nthe pressed key (0-8).",
    "method": "getHotbarButton",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getHotbarButton()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "int"
  },
  {
    "descr": "Sets whether this snowman is in \"derp mode\", meaning it is not wearing a\\npumpkin. NOTE: This value is not persisted to disk and will therefore\\nreset when the chunk is reloaded.",
    "param-names": [
      "Snowman",
      "Derp Mode"
    ],
    "param-types": [
      "org.bukkit.entity.Snowman",
      "boolean"
    ],
    "method": "setDerp",
    "id": "org.bukkit.entity.Snowman#setDerp(boolean)",
    "class": "org.bukkit.entity.Snowman"
  },
  {
    "descr": "Get the sender completing this command.",
    "method": "getSender",
    "id": "org.bukkit.event.server.TabCompleteEvent#getSender()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_CARPET",
    "id": "org.bukkit.Material#LIGHT_BLUE_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DIAGONAL_RIGHT_MIRROR",
    "id": "org.bukkit.block.banner.PatternType#DIAGONAL_RIGHT_MIRROR",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Gets the current world this entity resides in",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getWorld",
    "id": "org.bukkit.entity.Entity#getWorld()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BIRCH_CHEST_BOAT",
    "id": "org.bukkit.Material#BIRCH_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_COOKED_BEEF",
    "id": "org.bukkit.Material#LEGACY_COOKED_BEEF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_BUCKET",
    "id": "org.bukkit.Material#LEGACY_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_LAY_SPAWN",
    "id": "org.bukkit.Sound#ENTITY_FROG_LAY_SPAWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "POTTED_CHERRY_SAPLING",
    "id": "org.bukkit.Material#POTTED_CHERRY_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the maximum amount of air the living entity can have, in ticks.",
    "param-names": [
      "LivingEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setMaximumAir",
    "id": "org.bukkit.entity.LivingEntity#setMaximumAir(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_FALL",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets how much experience is contained within this orb",
    "param-names": ["ExperienceOrb"],
    "param-types": ["org.bukkit.entity.ExperienceOrb"],
    "method": "getExperience",
    "id": "org.bukkit.entity.ExperienceOrb#getExperience()",
    "class": "org.bukkit.entity.ExperienceOrb",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.LootGenerateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Check if the specified location is inside this border.",
    "param-names": [
      "WorldBorder",
      "Location"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "org.bukkit.Location"
    ],
    "method": "isInside",
    "id": "org.bukkit.WorldBorder#isInside(org.bukkit.Location)",
    "class": "org.bukkit.WorldBorder",
    "return": "boolean"
  },
  {
    "descr": "Creates a new PlayerProfile.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "createPlayerProfile",
    "id": "org.bukkit.Bukkit#createPlayerProfile(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.profile.PlayerProfile"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_SCREECH",
    "id": "org.bukkit.Sound#ENTITY_FOX_SCREECH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason#values()",
    "class": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason",
    "return": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason[]"
  },
  {
    "descr": "The spell that summons Fangs.",
    "static": true,
    "field": "FANGS",
    "id": "org.bukkit.entity.Evoker.Spell#FANGS",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleUpdateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleUpdateEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "HONEYCOMB",
    "id": "org.bukkit.Material#HONEYCOMB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOLD_INGOT",
    "id": "org.bukkit.Material#GOLD_INGOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Uses Vibration as DataType",
    "static": true,
    "field": "VIBRATION",
    "id": "org.bukkit.Particle#VIBRATION",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_FILL",
    "id": "org.bukkit.Sound#ITEM_BUCKET_FILL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increments the given statistic for this player for the given material.\\n\\nThis is equivalent to the following code:\\nincrementStatistic(Statistic, Material, 1)",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Material"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.Material"
    ],
    "method": "incrementStatistic",
    "id": "org.bukkit.OfflinePlayer#incrementStatistic(org.bukkit.Statistic,org.bukkit.Material)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "JACK_O_LANTERN",
    "id": "org.bukkit.Material#JACK_O_LANTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BROWN_STAINED_GLASS",
    "id": "org.bukkit.Material#BROWN_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_COMMAND_REPEATING",
    "id": "org.bukkit.Material#LEGACY_COMMAND_REPEATING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the collar color of this cat",
    "param-names": ["Cat"],
    "param-types": ["org.bukkit.entity.Cat"],
    "method": "getCollarColor",
    "id": "org.bukkit.entity.Cat#getCollarColor()",
    "class": "org.bukkit.entity.Cat",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_TONGUE",
    "id": "org.bukkit.Sound#ENTITY_FROG_TONGUE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SHIELD",
    "id": "org.bukkit.Material#SHIELD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ATTACHED_PUMPKIN_STEM",
    "id": "org.bukkit.Material#ATTACHED_PUMPKIN_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get if this structure block is currently showing the bounding box.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "isBoundingBoxVisible",
    "id": "org.bukkit.block.Structure#isBoundingBoxVisible()",
    "class": "org.bukkit.block.Structure",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "BAMBOO_FENCE",
    "id": "org.bukkit.Material#BAMBOO_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "CONDUIT",
    "id": "org.bukkit.Material#CONDUIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the trading experience of this villager.",
    "param-names": [
      "Villager",
      "Experience"
    ],
    "param-types": [
      "org.bukkit.entity.Villager",
      "int"
    ],
    "method": "setVillagerExperience",
    "id": "org.bukkit.entity.Villager#setVillagerExperience(int)",
    "class": "org.bukkit.entity.Villager"
  },
  {
    "descr": "Sets one item in this inventory view by its raw slot ID.\\n\\nNote: If slot ID -999 is chosen, it may be expected that the item is\\ndropped on the ground. This is not required behaviour, however.",
    "param-names": [
      "InventoryView",
      "Slot",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "int",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.InventoryView#setItem(int,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets a copy of the velocity that the entity has before entering the\\nportal.",
    "method": "getBefore",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getBefore()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the fuel ItemStack for this event",
    "method": "getFuel",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#getFuel()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "WAXED_OXIDIZED_COPPER",
    "id": "org.bukkit.Material#WAXED_OXIDIZED_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "SMOOTH_QUARTZ_STAIRS",
    "id": "org.bukkit.Material#SMOOTH_QUARTZ_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "WAXED_WEATHERED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#WAXED_WEATHERED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FLOWER_FOREST",
    "id": "org.bukkit.block.Biome#FLOWER_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets all blocks along the living entity's line of sight.\\n\\nThis list contains all blocks from the living entity's eye position to\\ntarget inclusive. This method considers all blocks as 1x1x1 in size.",
    "param-names": [
      "LivingEntity",
      "Transparent",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "java.util.Set",
      "int"
    ],
    "method": "getLineOfSight",
    "id": "org.bukkit.entity.LivingEntity#getLineOfSight(java.util.Set<org.bukkit.Material>,int)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BLOCK_MANGROVE_ROOTS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MANGROVE_ROOTS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the metadata for this block state.",
    "param-names": [
      "BlockState",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "org.bukkit.material.MaterialData"
    ],
    "method": "setData",
    "id": "org.bukkit.block.BlockState#setData(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_COMPARATOR",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_COMPARATOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "An unknown entity without an Entity Class",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.entity.EntityType#UNKNOWN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "SKELETON",
    "id": "org.bukkit.loot.LootTables#SKELETON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "POTTED_WARPED_ROOTS",
    "id": "org.bukkit.Material#POTTED_WARPED_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the chunk being loaded/unloaded",
    "method": "getChunk",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#getChunk()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "org.bukkit.Chunk"
  },
  {
    "descr": "Whether block explosions will destroy dropped items.",
    "static": true,
    "field": "BLOCK_EXPLOSION_DROP_DECAY",
    "id": "org.bukkit.GameRule#BLOCK_EXPLOSION_DROP_DECAY",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Checks if this player is whitelisted or not",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "isWhitelisted",
    "id": "org.bukkit.OfflinePlayer#isWhitelisted()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "boolean"
  },
  {
    "descr": "Check if the material is a block and occludes light in the lighting engine.\\n\\nGenerally speaking, most full blocks will occlude light. Non-full blocks are\\nnot occluding (e.g. anvils, chests, tall grass, stairs, etc.), nor are specific\\nfull blocks such as barriers or spawners which block light despite their texture.\\n\\nAn occluding block will have the following effects:\\n\\nChests cannot be opened if an occluding block is above it.\\nMobs cannot spawn inside of occluding blocks.\\nOnly occluding blocks can be \"powered\" (Block#isBlockPowered()).\\n\\nThis list may be inconclusive. For a full list of the side effects of an occluding\\nblock, see the Minecraft Wiki.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isOccluding",
    "id": "org.bukkit.Material#isOccluding()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "The face is treated as a full block. For example, the side of a stair is\\nnot a full face and cannot support a wall torch, whereas the\\nback and bottom of a stair are considered full.",
    "static": true,
    "field": "FULL",
    "id": "org.bukkit.block.BlockSupport#FULL",
    "class": "org.bukkit.block.BlockSupport",
    "return": "org.bukkit.block.BlockSupport"
  },
  {
    "static": true,
    "field": "STRUCTURE_VOID",
    "id": "org.bukkit.Material#STRUCTURE_VOID",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLADE_POTTERY_SHERD",
    "id": "org.bukkit.Material#BLADE_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Thrown when a block physics check is called.\\n\\nThis event is a high frequency event, it may be called thousands of times per\\na second on a busy server. Plugins are advised to listen to the event with\\ncaution and only perform lightweight checks when using it.\\n\\nIn addition to this, cancelling the event is liable to leave the world in an\\ninconsistent state. For example if you use the event to leave a block\\nfloating in mid air when that block has a requirement to be attached to\\nsomething, there is no guarantee that the floating block will persist across\\nserver restarts or map upgrades.\\n\\nPlugins should also note that where possible this event may only called for\\nthe \"root\" block of physics updates in order to limit event spam. Physics\\nupdates that cause other blocks to change their state may not result in an\\nevent for each of those blocks (usually adjacent). If you are concerned about\\nmonitoring these changes then you should check adjacent blocks yourself.",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "DEEPSLATE_BRICK_SLAB",
    "id": "org.bukkit.Material#DEEPSLATE_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the time that an entity will be immune from subsequent exposure.",
    "param-names": [
      "AreaEffectCloud",
      "Delay"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "int"
    ],
    "method": "setReapplicationDelay",
    "id": "org.bukkit.entity.AreaEffectCloud#setReapplicationDelay(int)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "descr": "Effects granted by a nearby conduit. Includes enhanced underwater abilities.",
    "static": true,
    "field": "CONDUIT_POWER",
    "id": "org.bukkit.potion.PotionEffectType#CONDUIT_POWER",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "POLISHED_BLACKSTONE_BRICK_SLAB",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Repeater",
    "static": true,
    "field": "REPEATER",
    "id": "org.bukkit.Material#REPEATER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether the strike is an effect that does no damage.",
    "param-names": ["LightningStrike"],
    "param-types": ["org.bukkit.entity.LightningStrike"],
    "method": "isEffect",
    "id": "org.bukkit.entity.LightningStrike#isEffect()",
    "class": "org.bukkit.entity.LightningStrike",
    "return": "boolean"
  },
  {
    "descr": "Reload only the Minecraft data for the server. This includes custom\\nadvancements and loot tables.",
    "static": true,
    "method": "reloadData",
    "id": "org.bukkit.Bukkit#reloadData()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "ALL_BLACK",
    "id": "org.bukkit.entity.Cat.Type#ALL_BLACK",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Whether the map will show a smaller position cursor (true), or no\\nposition cursor (false) when cursor is outside of map's range.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "isUnlimitedTracking",
    "id": "org.bukkit.map.MapView#isUnlimitedTracking()",
    "class": "org.bukkit.map.MapView",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_LAVA",
    "id": "org.bukkit.Material#LEGACY_LAVA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_HUGE_MUSHROOM_2",
    "id": "org.bukkit.Material#LEGACY_HUGE_MUSHROOM_2",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BELL_USE",
    "id": "org.bukkit.Sound#BLOCK_BELL_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the reason for why the entity is regaining health",
    "method": "getRegainReason",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getRegainReason()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "static": true,
    "field": "FALLING_DRIPSTONE_LAVA",
    "id": "org.bukkit.Particle#FALLING_DRIPSTONE_LAVA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "RED_WALL_BANNER",
    "id": "org.bukkit.Material#RED_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Expands this bounding box to contain (or border) the specified position.",
    "param-names": [
      "BoundingBox",
      "Position"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector"
    ],
    "method": "union",
    "id": "org.bukkit.util.BoundingBox#union(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.scoreboard.NameTagVisibility#values()",
    "class": "org.bukkit.scoreboard.NameTagVisibility",
    "return": "org.bukkit.scoreboard.NameTagVisibility[]"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLUE_STAINED_GLASS",
    "id": "org.bukkit.Material#BLUE_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a piglin converts to a zombified piglin.",
    "static": true,
    "field": "PIGLIN_ZOMBIFIED",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#PIGLIN_ZOMBIFIED",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "Fox chews the food in its mouth",
    "static": true,
    "field": "FOX_CHEW",
    "id": "org.bukkit.EntityEffect#FOX_CHEW",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Server statistics.",
    "static": true,
    "field": "STATISTIC",
    "id": "org.bukkit.Registry#STATISTIC",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Gets the entity which is followed by the camera when in\\nGameMode#SPECTATOR.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getSpectatorTarget",
    "id": "org.bukkit.entity.Player#getSpectatorTarget()",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "flattened",
    "id": "org.bukkit.Note#flattened()",
    "class": "org.bukkit.Note",
    "return": "org.bukkit.Note"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_PICKUP",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_PICKUP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the default ticks per water mob spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water mobs\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn water mobs\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, water mobs spawning will be disabled.\\n\\nMinecraft default: 1.",
    "static": true,
    "method": "getTicksPerWaterSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerWaterSpawns()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "SCRAPE",
    "id": "org.bukkit.Particle#SCRAPE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "HUSK",
    "id": "org.bukkit.entity.EntityType#HUSK",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Bed.Part#values()",
    "class": "org.bukkit.block.data.type.Bed.Part",
    "return": "org.bukkit.block.data.type.Bed.Part[]"
  },
  {
    "descr": "A brewing stand inventory, with one FUEL slot and four CRAFTING slots.",
    "static": true,
    "field": "BREWING",
    "id": "org.bukkit.event.inventory.InventoryType#BREWING",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_RETREAT",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_RETREAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Stop all sounds from playing.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "stopAllSounds",
    "id": "org.bukkit.entity.Player#stopAllSounds()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the org.bukkit.event.Event.Result of this event. The Result describes the\\nbehavior that will be applied to the inventory in relation to this\\nevent.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_STAINED_GLASS",
    "id": "org.bukkit.Material#LIGHT_BLUE_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check whether or not this item has an armor trim.",
    "param-names": ["ArmorMeta"],
    "param-types": ["org.bukkit.inventory.meta.ArmorMeta"],
    "method": "hasTrim",
    "id": "org.bukkit.inventory.meta.ArmorMeta#hasTrim()",
    "class": "org.bukkit.inventory.meta.ArmorMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ZOMBIE",
    "id": "org.bukkit.entity.EntityType#ZOMBIE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_WARD",
    "id": "org.bukkit.Material#MUSIC_DISC_WARD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the world's ticks per animal spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn animals.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn animals in\\nthis world every tick.\\nA value of 400 will mean the server will attempt to spawn animals\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, animal spawning will be disabled for this world. We\\nrecommend using #setSpawnFlags(boolean, boolean) to control\\nthis instead.\\n\\nMinecraft default: 400.",
    "param-names": [
      "World",
      "Ticks Per Animal Spawns"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setTicksPerAnimalSpawns",
    "id": "org.bukkit.World#setTicksPerAnimalSpawns(int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_HURT",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_EGG_HATCH",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_EGG_HATCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Shutdowns the server, stopping everything.",
    "static": true,
    "method": "shutdown",
    "id": "org.bukkit.Bukkit#shutdown()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "boolean"
  },
  {
    "descr": "Set the name of this structure. This is case-sensitive. The name of the\\nstructure in the UsageMode#SAVE structure block MUST match the\\nname within the UsageMode#CORNER block or the size calculation\\nwill fail.",
    "param-names": [
      "Structure",
      "Name"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "java.lang.String"
    ],
    "method": "setStructureName",
    "id": "org.bukkit.block.Structure#setStructureName(java.lang.String)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "JUNGLE_TEMPLE_DISPENSER",
    "id": "org.bukkit.loot.LootTables#JUNGLE_TEMPLE_DISPENSER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Apply this option only for opposing teams.",
    "static": true,
    "field": "FOR_OTHER_TEAMS",
    "id": "org.bukkit.scoreboard.Team.OptionStatus#FOR_OTHER_TEAMS",
    "class": "org.bukkit.scoreboard.Team.OptionStatus",
    "return": "org.bukkit.scoreboard.Team.OptionStatus"
  },
  {
    "static": true,
    "field": "CRIMSON_FOREST",
    "id": "org.bukkit.block.Biome#CRIMSON_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "SPRUCE_SIGN",
    "id": "org.bukkit.Material#SPRUCE_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Remove all AttributeModifiers associated with the given\\nAttribute.\\nThis will return false if nothing was removed.",
    "param-names": [
      "ItemMeta",
      "Attribute"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.attribute.Attribute"
    ],
    "method": "removeAttributeModifier",
    "id": "org.bukkit.inventory.meta.ItemMeta#removeAttributeModifier(org.bukkit.attribute.Attribute)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the color that this dye represents.",
    "param-names": ["DyeColor"],
    "param-types": ["org.bukkit.DyeColor"],
    "method": "getColor",
    "id": "org.bukkit.DyeColor#getColor()",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.ServerListPingEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Display number of hearts corresponding to value.",
    "static": true,
    "field": "HEARTS",
    "id": "org.bukkit.scoreboard.RenderType#HEARTS",
    "class": "org.bukkit.scoreboard.RenderType",
    "return": "org.bukkit.scoreboard.RenderType"
  },
  {
    "descr": "Called when a players level changes",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent"
  },
  {
    "descr": "Returns whether this vector is within a sphere.",
    "param-names": [
      "Vector",
      "Origin",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "isInSphere",
    "id": "org.bukkit.util.Vector#isInSphere(org.bukkit.util.Vector,double)",
    "class": "org.bukkit.util.Vector",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Some of the items on the clicked slot are moved to the cursor.",
    "static": true,
    "field": "PICKUP_SOME",
    "id": "org.bukkit.event.inventory.InventoryAction#PICKUP_SOME",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Gets the color of the fish's pattern.",
    "param-names": ["TropicalFish"],
    "param-types": ["org.bukkit.entity.TropicalFish"],
    "method": "getPatternColor",
    "id": "org.bukkit.entity.TropicalFish#getPatternColor()",
    "class": "org.bukkit.entity.TropicalFish",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Drops an item at the specified Location\\nNote that functions will run before the entity is spawned",
    "param-names": [
      "World",
      "Location",
      "Item",
      "Function"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.util.Consumer"
    ],
    "method": "dropItem",
    "id": "org.bukkit.World#dropItem(org.bukkit.Location,org.bukkit.inventory.ItemStack,org.bukkit.util.Consumer<org.bukkit.entity.Item>)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Gets the value of the 'conditional' property.",
    "param-names": ["CommandBlock"],
    "param-types": ["org.bukkit.block.data.type.CommandBlock"],
    "method": "isConditional",
    "id": "org.bukkit.block.data.type.CommandBlock#isConditional()",
    "class": "org.bukkit.block.data.type.CommandBlock",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CAKE_SLICES_EATEN",
    "id": "org.bukkit.Statistic#CAKE_SLICES_EATEN",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "HALF_VERTICAL_MIRROR",
    "id": "org.bukkit.block.banner.PatternType#HALF_VERTICAL_MIRROR",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Gets the value of the 'bloom' property.",
    "param-names": ["SculkCatalyst"],
    "param-types": ["org.bukkit.block.data.type.SculkCatalyst"],
    "method": "isBloom",
    "id": "org.bukkit.block.data.type.SculkCatalyst#isBloom()",
    "class": "org.bukkit.block.data.type.SculkCatalyst",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DEAD_HORN_CORAL_BLOCK",
    "id": "org.bukkit.Material#DEAD_HORN_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CALCITE_HIT",
    "id": "org.bukkit.Sound#BLOCK_CALCITE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "ACACIA_BUTTON",
    "id": "org.bukkit.Material#ACACIA_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the ClickType for this event.\\n\\nThis is insulated against changes to the inventory by other plugins.",
    "method": "getClick",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Gets the bucket used to capture the Entity.\\nThis refers to the bucket clicked with, eg Material#WATER_BUCKET.",
    "method": "getOriginalBucket",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getOriginalBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the input of this cooking recipe.",
    "param-names": [
      "CookingRecipe",
      "Input"
    ],
    "param-types": [
      "org.bukkit.inventory.CookingRecipe",
      "org.bukkit.Material"
    ],
    "method": "setInput",
    "id": "org.bukkit.inventory.CookingRecipe#setInput(org.bukkit.Material)",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "static": true,
    "field": "POTTED_WARPED_FUNGUS",
    "id": "org.bukkit.Material#POTTED_WARPED_FUNGUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the server only allow players with Mojang-signed public key\\nto join",
    "static": true,
    "method": "isEnforcingSecureProfiles",
    "id": "org.bukkit.Bukkit#isEnforcingSecureProfiles()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BONE_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_BONE_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if this block is a valid placement location for the specified\\nblock data.",
    "param-names": [
      "Block",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "canPlace",
    "id": "org.bukkit.block.Block#canPlace(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Deals the given amount of damage to this entity.",
    "param-names": [
      "Damageable",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.entity.Damageable",
      "double"
    ],
    "method": "damage",
    "id": "org.bukkit.entity.Damageable#damage(double)",
    "class": "org.bukkit.entity.Damageable"
  },
  {
    "static": true,
    "field": "BRICKS",
    "id": "org.bukkit.Material#BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleUpdateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleUpdateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "CYAN_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#CYAN_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'honey_level' property.",
    "param-names": [
      "Beehive",
      "Honey Level"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Beehive",
      "int"
    ],
    "method": "setHoneyLevel",
    "id": "org.bukkit.block.data.type.Beehive#setHoneyLevel(int)",
    "class": "org.bukkit.block.data.type.Beehive"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_BLOCKS",
    "id": "org.bukkit.Sound#MUSIC_DISC_BLOCKS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The sound played when a pointed dripstone hits the surface.",
    "static": true,
    "field": "POINTED_DRIPSTONE_LAND",
    "id": "org.bukkit.Effect#POINTED_DRIPSTONE_LAND",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_SIGN_FALL",
    "id": "org.bukkit.Sound#BLOCK_HANGING_SIGN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SIDEBAR_DARK_PURPLE",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_DARK_PURPLE",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_DEATH",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the book meta currently on the book.\\n\\nNote: this is a copy of the book meta. You cannot use this object to\\nchange the existing book meta.",
    "method": "getPreviousBookMeta",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getPreviousBookMeta()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "descr": "BlockData: AmethystCluster",
    "static": true,
    "field": "AMETHYST_CLUSTER",
    "id": "org.bukkit.Material#AMETHYST_CLUSTER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the current profession of this villager.",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "getProfession",
    "id": "org.bukkit.entity.Villager#getProfession()",
    "class": "org.bukkit.entity.Villager",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.HorseJumpEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent"
  },
  {
    "descr": "Expands this bounding box in the direction specified by the given block\\nface.\\n\\nA negative expansion value will shrink the bounding box in this\\ndirection. Shrinking will be limited to the bounding box's current size.",
    "param-names": [
      "BoundingBox",
      "Block Face",
      "Expansion"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.block.BlockFace",
      "double"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(org.bukkit.block.BlockFace,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Ravager has been stunned for 40 ticks.",
    "static": true,
    "field": "RAVAGER_STUNNED",
    "id": "org.bukkit.EntityEffect#RAVAGER_STUNNED",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Gets the Human Entity that caused the animal to enter love mode.",
    "method": "getHumanEntity",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getHumanEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Gets the criteria which have been awarded.",
    "param-names": ["AdvancementProgress"],
    "param-types": ["org.bukkit.advancement.AdvancementProgress"],
    "method": "getAwardedCriteria",
    "id": "org.bukkit.advancement.AdvancementProgress#getAwardedCriteria()",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "java.util.Collection"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the force the arrow was launched with",
    "method": "getForce",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getForce()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "float"
  },
  {
    "descr": "When lightning strikes a entity.",
    "static": true,
    "field": "LIGHTNING",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#LIGHTNING",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "Get the entity which triggered this event, if present.",
    "method": "getEntity",
    "id": "org.bukkit.event.world.GenericGameEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_PACKED_MUD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_PACKED_MUD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BANNER_MAGENTA",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_MAGENTA",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_OAK_WOOD",
    "id": "org.bukkit.Material#STRIPPED_OAK_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "MerchantRecipe",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.MerchantRecipe#addIngredient(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Request that the player's client download and switch resource packs.\\n\\nThe player's client will download the new resource pack asynchronously\\nin the background, and will automatically switch to it once the\\ndownload is complete. If the client has downloaded and cached a\\nresource pack with the same hash in the past it will not download but\\ndirectly apply the cached pack. If the hash is null and the client has\\ndownloaded and cached the same resource pack in the past, it will\\nperform a file size check against the response content to determine if\\nthe resource pack has changed and needs to be downloaded again. When\\nthis request is sent for the very first time from a given server, the\\nclient will first display a confirmation GUI to the player before\\nproceeding with the download.\\n\\nNotes:\\n\\nPlayers can disable server resources on their client, in which\\ncase this method will have no affect on them. Use the\\nPlayerResourcePackStatusEvent to figure out whether or not\\nthe player loaded the pack!\\nThere is no concept of resetting resource packs back to default\\nwithin Minecraft, so players will have to relog to do so or you\\nhave to send an empty pack.\\nThe request is sent with empty string as the hash when the hash is\\nnot provided. This might result in newer versions not loading the\\npack correctly.\\n",
    "param-names": [
      "Player",
      "Url",
      "Hash"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "byte[]"
    ],
    "method": "setResourcePack",
    "id": "org.bukkit.entity.Player#setResourcePack(java.lang.String,byte[])",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "BlockData: MultipleFacing",
    "static": true,
    "field": "RED_MUSHROOM_BLOCK",
    "id": "org.bukkit.Material#RED_MUSHROOM_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Location where the player will spawn at their bed, null if\\nthey have not slept in one or their current bed spawn is invalid.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "getBedSpawnLocation",
    "id": "org.bukkit.OfflinePlayer#getBedSpawnLocation()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.Location"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.TextDisplay.TextAlignment#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.TextDisplay.TextAlignment",
    "return": "org.bukkit.entity.TextDisplay.TextAlignment"
  },
  {
    "static": true,
    "field": "LEGACY_DARK_OAK_DOOR",
    "id": "org.bukkit.Material#LEGACY_DARK_OAK_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the demand for this trade.",
    "param-names": [
      "MerchantRecipe",
      "Demand"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "int"
    ],
    "method": "setDemand",
    "id": "org.bukkit.inventory.MerchantRecipe#setDemand(int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the world that this map is associated with. The world is used by\\nthe internal renderer, and may also be used by external renderers.",
    "param-names": [
      "MapView",
      "World"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "org.bukkit.World"
    ],
    "method": "setWorld",
    "id": "org.bukkit.map.MapView#setWorld(org.bukkit.World)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_HURT",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Lock the age of the animal, setting this will prevent the animal from\\nmaturing or getting ready for mating.",
    "param-names": [
      "Ageable",
      "Lock"
    ],
    "param-types": [
      "org.bukkit.entity.Ageable",
      "boolean"
    ],
    "method": "setAgeLock",
    "id": "org.bukkit.entity.Ageable#setAgeLock(boolean)",
    "class": "org.bukkit.entity.Ageable"
  },
  {
    "descr": "An item frame on a wall.",
    "static": true,
    "field": "ITEM_FRAME",
    "id": "org.bukkit.entity.EntityType#ITEM_FRAME",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "FLOWERING_AZALEA_LEAVES",
    "id": "org.bukkit.Material#FLOWERING_AZALEA_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RESONATE_1",
    "id": "org.bukkit.GameEvent#RESONATE_1",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Sets the result of this event. This will change whether or not this\\nevent is considered cancelled.",
    "param-names": ["New Result"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Bans the specified address from the server.",
    "param-names": ["Address"],
    "static": true,
    "param-types": ["java.net.InetAddress"],
    "method": "banIP",
    "id": "org.bukkit.Bukkit#banIP(java.net.InetAddress)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Adds the location by a vector.",
    "param-names": [
      "Location",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.util.Vector"
    ],
    "method": "add",
    "id": "org.bukkit.Location#add(org.bukkit.util.Vector)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Removes a custom potion effect from this cloud.",
    "param-names": [
      "AreaEffectCloud",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "removeCustomEffect",
    "id": "org.bukkit.entity.AreaEffectCloud#removeCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MANGROVE",
    "id": "org.bukkit.entity.Boat.Type#MANGROVE",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Gets the value of the 'signal_fire' property.",
    "param-names": ["Campfire"],
    "param-types": ["org.bukkit.block.data.type.Campfire"],
    "method": "isSignalFire",
    "id": "org.bukkit.block.data.type.Campfire#isSignalFire()",
    "class": "org.bukkit.block.data.type.Campfire",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_POLAR_BEAR_STEP",
    "id": "org.bukkit.Sound#ENTITY_POLAR_BEAR_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the value of the 'attachment' property.",
    "param-names": [
      "Bell",
      "Attachment"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Bell",
      "org.bukkit.block.data.type.Bell.Attachment"
    ],
    "method": "setAttachment",
    "id": "org.bukkit.block.data.type.Bell#setAttachment(org.bukkit.block.data.type.Bell.Attachment)",
    "class": "org.bukkit.block.data.type.Bell"
  },
  {
    "param-names": ["Effect"],
    "param-types": ["org.bukkit.Effect"],
    "method": "getData",
    "id": "org.bukkit.Effect#getData()",
    "class": "org.bukkit.Effect",
    "return": "java.lang.Class"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "ANDESITE_WALL",
    "id": "org.bukkit.Material#ANDESITE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check if the material is a block and does not block any light",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isTransparent",
    "id": "org.bukkit.Material#isTransparent()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Gets the entity that the original entity was transformed to.\\nThis returns the first entity in the transformed entity list.",
    "method": "getTransformedEntity",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getTransformedEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Removes the specified enchantment from this item meta.",
    "param-names": [
      "ItemMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "removeEnchant",
    "id": "org.bukkit.inventory.meta.ItemMeta#removeEnchant(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_WOOL",
    "id": "org.bukkit.Material#LEGACY_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CAVE_VINES_FALL",
    "id": "org.bukkit.Sound#BLOCK_CAVE_VINES_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerFishEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Check if this enchantment conflicts with another enchantment.",
    "param-names": [
      "Enchantment",
      "Other"
    ],
    "param-types": [
      "org.bukkit.enchantments.Enchantment",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "conflictsWith",
    "id": "org.bukkit.enchantments.Enchantment#conflictsWith(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "boolean"
  },
  {
    "descr": "Stray skeleton. Generally found in ice biomes. Shoots tipped arrows.",
    "static": true,
    "field": "STRAY",
    "id": "org.bukkit.entity.Skeleton.SkeletonType#STRAY",
    "class": "org.bukkit.entity.Skeleton.SkeletonType",
    "return": "org.bukkit.entity.Skeleton.SkeletonType"
  },
  {
    "static": true,
    "field": "DEEPSLATE_COPPER_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_COPPER_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "GREEN_WALL_BANNER",
    "id": "org.bukkit.Material#GREEN_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_YELLOW_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_YELLOW_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHERRY",
    "id": "org.bukkit.entity.Boat.Type#CHERRY",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_BRICK_STAIRS",
    "id": "org.bukkit.Material#LEGACY_NETHER_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the maximum angle (in degrees, 0 being positive Z 90 being negative\\nX) of where a fish will appear after the wait time.\\n\\nThe default is 360 degrees.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getMaxLureAngle",
    "id": "org.bukkit.entity.FishHook#getMaxLureAngle()",
    "class": "org.bukkit.entity.FishHook",
    "return": "float"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_ORE",
    "id": "org.bukkit.Material#LEGACY_GOLD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the EnderDragon active in this battle.\\nWill return null if the dragon has been slain.",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "getEnderDragon",
    "id": "org.bukkit.boss.DragonBattle#getEnderDragon()",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "org.bukkit.entity.EnderDragon"
  },
  {
    "descr": "Checks if this Enchantment may be applied to the given ItemStack.\\n\\nThis does not check if it conflicts with any enchantments already\\napplied to the item.",
    "param-names": [
      "Enchantment",
      "Item"
    ],
    "param-types": [
      "org.bukkit.enchantments.Enchantment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "canEnchantItem",
    "id": "org.bukkit.enchantments.Enchantment#canEnchantItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "boolean"
  },
  {
    "descr": "Gets the structure manager for loading and saving structures.",
    "static": true,
    "method": "getStructureManager",
    "id": "org.bukkit.Bukkit#getStructureManager()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.structure.StructureManager"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.StructureGrowEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_CREEPER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_CREEPER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Creates a new BlockData instance with material and properties\\nparsed from provided data.",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "createBlockData",
    "id": "org.bukkit.Bukkit#createBlockData(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Gets whether this ClickType represents a left click.",
    "param-names": ["ClickType"],
    "param-types": ["org.bukkit.event.inventory.ClickType"],
    "method": "isLeftClick",
    "id": "org.bukkit.event.inventory.ClickType#isLeftClick()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Bamboo",
    "static": true,
    "field": "BAMBOO",
    "id": "org.bukkit.Material#BAMBOO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the maximum speed of a minecart. Must be nonnegative. Default is\\n0.4D.",
    "param-names": [
      "Minecart",
      "Speed"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "double"
    ],
    "method": "setMaxSpeed",
    "id": "org.bukkit.entity.Minecart#setMaxSpeed(double)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockFormEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BellResonateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Thrown when a non-player entity is teleported from one location to another.\\n\\nThis may be as a result of natural causes (Enderman, Shulker), pathfinding\\n(Wolf), or commands (/teleport).",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent"
  },
  {
    "static": true,
    "field": "FALLING_WATER",
    "id": "org.bukkit.Particle#FALLING_WATER",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "The name of this structure.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getStructureName",
    "id": "org.bukkit.block.Structure#getStructureName()",
    "class": "org.bukkit.block.Structure",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "OAK_SLAB",
    "id": "org.bukkit.Material#OAK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'enabled' property.",
    "param-names": ["Hopper"],
    "param-types": ["org.bukkit.block.data.type.Hopper"],
    "method": "isEnabled",
    "id": "org.bukkit.block.data.type.Hopper#isEnabled()",
    "class": "org.bukkit.block.data.type.Hopper",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "FARTHEST",
    "id": "org.bukkit.map.MapView.Scale#FARTHEST",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "descr": "Check if the material is a block and can catch fire",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isFlammable",
    "id": "org.bukkit.Material#isFlammable()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "VILLAGE_FLETCHER",
    "id": "org.bukkit.loot.LootTables#VILLAGE_FLETCHER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "When the entity already had the potion effect type, but the effect is\\nchanged.",
    "static": true,
    "field": "CHANGED",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Action#CHANGED",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Action",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action"
  },
  {
    "descr": "Gets whether the piglin is immune to zombification.",
    "param-names": ["PiglinAbstract"],
    "param-types": ["org.bukkit.entity.PiglinAbstract"],
    "method": "isImmuneToZombification",
    "id": "org.bukkit.entity.PiglinAbstract#isImmuneToZombification()",
    "class": "org.bukkit.entity.PiglinAbstract",
    "return": "boolean"
  },
  {
    "descr": "Gets the player who placed the block involved in this event.\\n\\nMay be null for legacy calls of the event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the approximate height the firework will fly.",
    "param-names": ["FireworkMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkMeta"],
    "method": "getPower",
    "id": "org.bukkit.inventory.meta.FireworkMeta#getPower()",
    "class": "org.bukkit.inventory.meta.FireworkMeta",
    "return": "int"
  },
  {
    "descr": "Equipment items meant for combat including armor, swords, bows, tipped\\narrows, and useful enchantment books for said equipment.",
    "static": true,
    "field": "COMBAT",
    "id": "org.bukkit.inventory.CreativeCategory#COMBAT",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.Rail.Shape#values()",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.TimeSkipEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets the maximum allowed value of the 'eggs' property.",
    "param-names": ["TurtleEgg"],
    "param-types": ["org.bukkit.block.data.type.TurtleEgg"],
    "method": "getMaximumEggs",
    "id": "org.bukkit.block.data.type.TurtleEgg#getMaximumEggs()",
    "class": "org.bukkit.block.data.type.TurtleEgg",
    "return": "int"
  },
  {
    "descr": "Gets whether the respawn location is the player's bed.",
    "method": "isBedSpawn",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#isBedSpawn()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SPORE_BLOSSOM_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SPORE_BLOSSOM_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the amount of arrows in an entity's body.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getArrowsInBody",
    "id": "org.bukkit.entity.LivingEntity#getArrowsInBody()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "descr": "The sound played when launching a firework",
    "static": true,
    "field": "FIREWORK_SHOOT",
    "id": "org.bukkit.Effect#FIREWORK_SHOOT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Purple, or (0x80,0x00,0x80) in (R,G,B)",
    "static": true,
    "field": "PURPLE",
    "id": "org.bukkit.Color#PURPLE",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_DRIPLEAF_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SMALL_DRIPLEAF_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Entity hurt due to drowning damage.",
    "static": true,
    "field": "HURT_DROWN",
    "id": "org.bukkit.EntityEffect#HURT_DROWN",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "boolean"
  },
  {
    "descr": "Whether clients will respawn immediately after death or not.",
    "static": true,
    "field": "DO_IMMEDIATE_RESPAWN",
    "id": "org.bukkit.GameRule#DO_IMMEDIATE_RESPAWN",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_GRAVEL_PLACE",
    "id": "org.bukkit.Sound#BLOCK_GRAVEL_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Ocean ruins are clusters of many different blocks that generate\\nunderwater in ocean biomes (as well as on the surface of beaches).\\n\\nThey come in my different variations. The cold variants consist primarily\\nof stone brick, and the warm variants consist of sandstone.",
    "static": true,
    "field": "OCEAN_RUIN",
    "id": "org.bukkit.StructureType#OCEAN_RUIN",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "BlockData: Levelled",
    "static": true,
    "field": "WATER_CAULDRON",
    "id": "org.bukkit.Material#WATER_CAULDRON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerRiptideEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "A normal horse",
    "static": true,
    "field": "HORSE",
    "id": "org.bukkit.entity.Horse.Variant#HORSE",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "descr": "Sets whether an entity will have AI.\\nThe entity will be completely unable to move if it has no AI.",
    "param-names": [
      "LivingEntity",
      "Ai"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setAI",
    "id": "org.bukkit.entity.LivingEntity#setAI(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "When a player has successfully caught a fish and is reeling it in. In\\nthis instance, a \"fish\" is any item retrieved from water as a result\\nof fishing, ie an item, but not necessarily a fish.",
    "static": true,
    "field": "CAUGHT_FISH",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#CAUGHT_FISH",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "descr": "Sets the helmet worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Helmet"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setHelmet",
    "id": "org.bukkit.inventory.EntityEquipment#setHelmet(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the type of sandstone with the given data value",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByData",
    "id": "org.bukkit.SandstoneType#getByData(byte)",
    "class": "org.bukkit.SandstoneType",
    "return": "org.bukkit.SandstoneType"
  },
  {
    "static": true,
    "field": "NETHERITE_CHESTPLATE",
    "id": "org.bukkit.Material#NETHERITE_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_MULE_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_MULE_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the time left before brewing completes.",
    "param-names": [
      "BrewingStand",
      "Brew Time"
    ],
    "param-types": [
      "org.bukkit.block.BrewingStand",
      "int"
    ],
    "method": "setBrewingTime",
    "id": "org.bukkit.block.BrewingStand#setBrewingTime(int)",
    "class": "org.bukkit.block.BrewingStand"
  },
  {
    "descr": "Called when a note block is being played through player interaction or a\\nredstone current.",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent"
  },
  {
    "descr": "Sets the lore for this item.\\nRemoves lore when given null.",
    "param-names": [
      "ItemMeta",
      "Lore"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "java.util.List"
    ],
    "method": "setLore",
    "id": "org.bukkit.inventory.meta.ItemMeta#setLore(java.util.List<java.lang.String>)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "DEAD_BRAIN_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#DEAD_BRAIN_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLACK_DYE",
    "id": "org.bukkit.Material#BLACK_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether the brewing stand's fuel will be reduced / consumed or not.",
    "param-names": ["Consuming"],
    "param-types": ["boolean"],
    "method": "setConsuming",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#setConsuming(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent"
  },
  {
    "static": true,
    "field": "BLOCK_NYLIUM_FALL",
    "id": "org.bukkit.Sound#BLOCK_NYLIUM_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Safely converts a double (location coordinate) to an int (block\\ncoordinate)",
    "param-names": ["Loc"],
    "static": true,
    "param-types": ["double"],
    "method": "locToBlock",
    "id": "org.bukkit.Location#locToBlock(double)",
    "class": "org.bukkit.Location",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleUpdateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleUpdateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_SMALL_FALL",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_SMALL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MAGENTA_CONCRETE_POWDER",
    "id": "org.bukkit.Material#MAGENTA_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_RED_SANDSTONE_STAIRS",
    "id": "org.bukkit.Material#LEGACY_RED_SANDSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Rotated counter-clockwise by 90 degrees",
    "static": true,
    "field": "COUNTER_CLOCKWISE",
    "id": "org.bukkit.Rotation#COUNTER_CLOCKWISE",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Get the type of the enchantment.",
    "param-names": ["EnchantmentOffer"],
    "param-types": ["org.bukkit.enchantments.EnchantmentOffer"],
    "method": "getEnchantment",
    "id": "org.bukkit.enchantments.EnchantmentOffer#getEnchantment()",
    "class": "org.bukkit.enchantments.EnchantmentOffer",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_HURT_SMALL",
    "id": "org.bukkit.Sound#ENTITY_SLIME_HURT_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Sound this entity makes when splashing in water. For most\\nentities, this is just Sound#ENTITY_GENERIC_SPLASH.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getSwimSplashSound",
    "id": "org.bukkit.entity.Entity#getSwimSplashSound()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the location at which the item is despawning.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "MANGROVE_BOAT",
    "id": "org.bukkit.Material#MANGROVE_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_STRAY_HURT",
    "id": "org.bukkit.Sound#ENTITY_STRAY_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the direction in which the bell was rung.",
    "method": "getDirection",
    "id": "org.bukkit.event.block.BellRingEvent#getDirection()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the associated dye data value representing this color.",
    "param-names": ["DyeColor"],
    "param-types": ["org.bukkit.DyeColor"],
    "method": "getDyeData",
    "id": "org.bukkit.DyeColor#getDyeData()",
    "class": "org.bukkit.DyeColor",
    "return": "byte"
  },
  {
    "static": true,
    "field": "QUARTZ_BLOCK",
    "id": "org.bukkit.Material#QUARTZ_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether monsters can spawn in this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getAllowMonsters",
    "id": "org.bukkit.World#getAllowMonsters()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Multiply amount by this value, after adding 1 to it.",
    "static": true,
    "field": "MULTIPLY_SCALAR_1",
    "id": "org.bukkit.attribute.AttributeModifier.Operation#MULTIPLY_SCALAR_1",
    "class": "org.bukkit.attribute.AttributeModifier.Operation",
    "return": "org.bukkit.attribute.AttributeModifier.Operation"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ENDER_DRAGON",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ENDER_DRAGON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DANGER_POTTERY_SHERD",
    "id": "org.bukkit.Material#DANGER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "BROWN_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#BROWN_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Pseudo chiseled bookshelf inventory, with 6 slots of undefined type.",
    "static": true,
    "field": "CHISELED_BOOKSHELF",
    "id": "org.bukkit.event.inventory.InventoryType#CHISELED_BOOKSHELF",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "BLOCK_UNPRESS",
    "id": "org.bukkit.GameEvent#BLOCK_UNPRESS",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "SKELETON",
    "id": "org.bukkit.entity.EntityType#SKELETON",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the value of the 'note' property.",
    "param-names": ["NoteBlock"],
    "param-types": ["org.bukkit.block.data.type.NoteBlock"],
    "method": "getNote",
    "id": "org.bukkit.block.data.type.NoteBlock#getNote()",
    "class": "org.bukkit.block.data.type.NoteBlock",
    "return": "org.bukkit.Note"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_STEP",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a Strider's temperature has changed as a result of\\nentering or exiting blocks it considers warm.",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent"
  },
  {
    "static": true,
    "field": "TURTLE_MASTER",
    "id": "org.bukkit.potion.PotionType#TURTLE_MASTER",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Gets the BlockData at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location"
    ],
    "method": "getBlockData",
    "id": "org.bukkit.RegionAccessor#getBlockData(org.bukkit.Location)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_VEIN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SCULK_VEIN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a creature spawns due to chunk generation",
    "static": true,
    "field": "CHUNK_GEN",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#CHUNK_GEN",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "PURPLE_WOOL",
    "id": "org.bukkit.Material#PURPLE_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "NETHER_BRIDGE",
    "id": "org.bukkit.loot.LootTables#NETHER_BRIDGE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "PILLAGER_SPAWN_EGG",
    "id": "org.bukkit.Material#PILLAGER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the team friendly fire state",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "allowFriendlyFire",
    "id": "org.bukkit.scoreboard.Team#allowFriendlyFire()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "boolean"
  },
  {
    "descr": "Sets the Level the Player should have at respawn.",
    "param-names": ["Level"],
    "param-types": ["int"],
    "method": "setNewLevel",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setNewLevel(int)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "AZALEA_LEAVES",
    "id": "org.bukkit.Material#AZALEA_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the inventory with the equipment worn by the living entity.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getEquipment",
    "id": "org.bukkit.entity.LivingEntity#getEquipment()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the item that the player is using (eating food, drawing back a bow,\\nblocking, etc.)",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getItemInUse",
    "id": "org.bukkit.entity.HumanEntity#getItemInUse()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Checks for the existence of any enchantments.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "hasEnchants",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasEnchants()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Check whether or not this strider is out of warm blocks and shivering.",
    "param-names": ["Strider"],
    "param-types": ["org.bukkit.entity.Strider"],
    "method": "isShivering",
    "id": "org.bukkit.entity.Strider#isShivering()",
    "class": "org.bukkit.entity.Strider",
    "return": "boolean"
  },
  {
    "descr": "Checks if this ItemStack contains the given Enchantment",
    "param-names": [
      "ItemStack",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "containsEnchantment",
    "id": "org.bukkit.inventory.ItemStack#containsEnchantment(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "boolean"
  },
  {
    "descr": "Returns whether this potion has an extended duration.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "hasExtendedDuration",
    "id": "org.bukkit.potion.Potion#hasExtendedDuration()",
    "class": "org.bukkit.potion.Potion",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum allowed value of the 'dusted' property.",
    "param-names": ["Brushable"],
    "param-types": ["org.bukkit.block.data.Brushable"],
    "method": "getMaximumDusted",
    "id": "org.bukkit.block.data.Brushable#getMaximumDusted()",
    "class": "org.bukkit.block.data.Brushable",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.MoistureChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the floored value of the X component, indicating the block that\\nthis location is contained with.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getBlockX",
    "id": "org.bukkit.Location#getBlockX()",
    "class": "org.bukkit.Location",
    "return": "int"
  },
  {
    "descr": "Return a EulerAngle which is the result of changing\\nthe x axis to the passed angle",
    "param-names": [
      "EulerAngle",
      "X"
    ],
    "param-types": [
      "org.bukkit.util.EulerAngle",
      "double"
    ],
    "method": "setX",
    "id": "org.bukkit.util.EulerAngle#setX(double)",
    "class": "org.bukkit.util.EulerAngle",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Checks if the stand has the following bottle",
    "param-names": [
      "BrewingStand",
      "Bottle"
    ],
    "param-types": [
      "org.bukkit.block.data.type.BrewingStand",
      "int"
    ],
    "method": "hasBottle",
    "id": "org.bukkit.block.data.type.BrewingStand#hasBottle(int)",
    "class": "org.bukkit.block.data.type.BrewingStand",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BEEHIVE_SHEAR",
    "id": "org.bukkit.Sound#BLOCK_BEEHIVE_SHEAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Request that the player's client download and switch resource packs.\\n\\nThe player's client will download the new resource pack asynchronously\\nin the background, and will automatically switch to it once the\\ndownload is complete. If the client has downloaded and cached the same\\nresource pack in the past, it will perform a file size check against\\nthe response content to determine if the resource pack has changed and\\nneeds to be downloaded again. When this request is sent for the very\\nfirst time from a given server, the client will first display a\\nconfirmation GUI to the player before proceeding with the download.\\n\\nNotes:\\n\\nPlayers can disable server resources on their client, in which\\ncase this method will have no affect on them. Use the\\nPlayerResourcePackStatusEvent to figure out whether or not\\nthe player loaded the pack!\\nThere is no concept of resetting resource packs back to default\\nwithin Minecraft, so players will have to relog to do so or you\\nhave to send an empty pack.\\nThe request is send with empty string as the hash. This might result\\nin newer versions not loading the pack correctly.\\n",
    "param-names": [
      "Player",
      "Url"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "setResourcePack",
    "id": "org.bukkit.entity.Player#setResourcePack(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BROWN_TERRACOTTA",
    "id": "org.bukkit.Material#BROWN_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BEACON_ACTIVATE",
    "id": "org.bukkit.Sound#BLOCK_BEACON_ACTIVATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.GameMode#values()",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode[]"
  },
  {
    "descr": "Rotate counter-clockwise by 90 degrees.",
    "param-names": ["Rotation"],
    "param-types": ["org.bukkit.Rotation"],
    "method": "rotateCounterClockwise",
    "id": "org.bukkit.Rotation#rotateCounterClockwise()",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Sets the limit for number of water ambient mobs that can spawn in a chunk\\nin this world\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setWaterAmbientSpawnLimit",
    "id": "org.bukkit.World#setWaterAmbientSpawnLimit(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Get the block the entity will enter.",
    "method": "getBlock",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Resets the list of crafting recipes to the default.",
    "static": true,
    "method": "resetRecipes",
    "id": "org.bukkit.Bukkit#resetRecipes()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "LEGACY_FEATHER",
    "id": "org.bukkit.Material#LEGACY_FEATHER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the maximum y value.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMaxY",
    "id": "org.bukkit.util.BoundingBox#getMaxY()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Damage caused due to a snowman melting\\n\\nDamage: 1",
    "static": true,
    "field": "MELTING",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#MELTING",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.inventory.InventoryAction#values()",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction[]"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets whether the chunk at the specified chunk coordinates is force\\nloaded.\\n\\nA force loaded chunk will not be unloaded due to lack of player activity.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "isForceLoaded",
    "id": "org.bukkit.Chunk#isForceLoaded()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the world's spawn area should be kept loaded into memory\\nor not.",
    "param-names": [
      "World",
      "Keep Loaded"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "setKeepSpawnInMemory",
    "id": "org.bukkit.World#setKeepSpawnInMemory(boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "When a player reels in their hook without receiving any bites.",
    "static": true,
    "field": "REEL_IN",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#REEL_IN",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Particle#valueOf(java.lang.String)",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the limit for number of water animals that can spawn in a chunk in\\nthis world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWaterAnimalSpawnLimit",
    "id": "org.bukkit.World#getWaterAnimalSpawnLimit()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "Sets the value of the 'tilt' property.",
    "param-names": [
      "BigDripleaf",
      "Tilt"
    ],
    "param-types": [
      "org.bukkit.block.data.type.BigDripleaf",
      "org.bukkit.block.data.type.BigDripleaf.Tilt"
    ],
    "method": "setTilt",
    "id": "org.bukkit.block.data.type.BigDripleaf#setTilt(org.bukkit.block.data.type.BigDripleaf.Tilt)",
    "class": "org.bukkit.block.data.type.BigDripleaf"
  },
  {
    "descr": "The dragon will leave the portal.",
    "static": true,
    "field": "LEAVE_PORTAL",
    "id": "org.bukkit.entity.EnderDragon.Phase#LEAVE_PORTAL",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the player who is unleashing the entity.",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Brown mushroom cow.",
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.entity.MushroomCow.Variant#BROWN",
    "class": "org.bukkit.entity.MushroomCow.Variant",
    "return": "org.bukkit.entity.MushroomCow.Variant"
  },
  {
    "descr": "The progress of the fuel slot in a brewing inventory.\\nThis is a value between 0 and 20, with 0 making the bar empty, and 20\\nmaking the bar full.",
    "static": true,
    "field": "FUEL_TIME",
    "id": "org.bukkit.inventory.InventoryView.Property#FUEL_TIME",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "CONTAINER_CLOSE",
    "id": "org.bukkit.GameEvent#CONTAINER_CLOSE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Input",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.CampfireRecipe#CampfireRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,float,int)",
    "class": "org.bukkit.inventory.CampfireRecipe"
  },
  {
    "descr": "Checks if this bounding box fully contains the given bounding box.",
    "param-names": [
      "BoundingBox",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.BoundingBox"
    ],
    "method": "contains",
    "id": "org.bukkit.util.BoundingBox#contains(org.bukkit.util.BoundingBox)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SMOKE_NORMAL",
    "id": "org.bukkit.Particle#SMOKE_NORMAL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "This represents the damage reduced by a wearing a helmet when hit\\nby a falling block.",
    "static": true,
    "field": "HARD_HAT",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#HARD_HAT",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SIDEBAR_BLACK",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_BLACK",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.PigZapEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the world with the given name.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getWorld",
    "id": "org.bukkit.Bukkit#getWorld(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Set the variant of this parrot.",
    "param-names": [
      "Parrot",
      "Variant"
    ],
    "param-types": [
      "org.bukkit.entity.Parrot",
      "org.bukkit.entity.Parrot.Variant"
    ],
    "method": "setVariant",
    "id": "org.bukkit.entity.Parrot#setVariant(org.bukkit.entity.Parrot.Variant)",
    "class": "org.bukkit.entity.Parrot"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "The sound of an enderdragon growling",
    "static": true,
    "field": "ENDERDRAGON_GROWL",
    "id": "org.bukkit.Effect#ENDERDRAGON_GROWL",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Called when a non-player entity is about to teleport because it is in\\ncontact with a portal.\\n\\nFor players see org.bukkit.event.player.PlayerPortalEvent",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent"
  },
  {
    "descr": "Gets the chunk which contains the block represented by this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getChunk",
    "id": "org.bukkit.block.BlockState#getChunk()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "field": "WARPED_NYLIUM",
    "id": "org.bukkit.Material#WARPED_NYLIUM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_FILL_POWDER_SNOW",
    "id": "org.bukkit.Sound#ITEM_BUCKET_FILL_POWDER_SNOW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ELDER_GUARDIAN",
    "id": "org.bukkit.entity.EntityType#ELDER_GUARDIAN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityTameEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the value of the 'type' property.",
    "param-names": [
      "TechnicalPiston",
      "Type"
    ],
    "param-types": [
      "org.bukkit.block.data.type.TechnicalPiston",
      "org.bukkit.block.data.type.TechnicalPiston.Type"
    ],
    "method": "setType",
    "id": "org.bukkit.block.data.type.TechnicalPiston#setType(org.bukkit.block.data.type.TechnicalPiston.Type)",
    "class": "org.bukkit.block.data.type.TechnicalPiston"
  },
  {
    "static": true,
    "field": "COD",
    "id": "org.bukkit.loot.LootTables#COD",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Get the fuse ticks of this minecart.\\nIf the fuse ticks reach 0, the minecart will explode.",
    "param-names": ["ExplosiveMinecart"],
    "param-types": ["org.bukkit.entity.minecart.ExplosiveMinecart"],
    "method": "getFuseTicks",
    "id": "org.bukkit.entity.minecart.ExplosiveMinecart#getFuseTicks()",
    "class": "org.bukkit.entity.minecart.ExplosiveMinecart",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent"
  },
  {
    "descr": "Get the entity that formed the block.",
    "method": "getEntity",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "The sound played when a chorus flower dies",
    "static": true,
    "field": "CHORUS_FLOWER_DEATH",
    "id": "org.bukkit.Effect#CHORUS_FLOWER_DEATH",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_FALL",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SPLASH",
    "id": "org.bukkit.GameEvent#SPLASH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_EMERALD",
    "id": "org.bukkit.Material#LEGACY_EMERALD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CRACKED",
    "id": "org.bukkit.SandstoneType#CRACKED",
    "class": "org.bukkit.SandstoneType",
    "return": "org.bukkit.SandstoneType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the floored value of the Y component, indicating the block that\\nthis location is contained with.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getBlockY",
    "id": "org.bukkit.Location#getBlockY()",
    "class": "org.bukkit.Location",
    "return": "int"
  },
  {
    "descr": "The sound played / particles shown when a composter is being attempted to\\nfill.\\nTrue for a successful attempt false for an unsuccessful attempt.",
    "static": true,
    "field": "COMPOSTER_FILL_ATTEMPT",
    "id": "org.bukkit.Effect#COMPOSTER_FILL_ATTEMPT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "IRON_HORSE_ARMOR",
    "id": "org.bukkit.Material#IRON_HORSE_ARMOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when an Entity enters a block and is stored in that block.\\n\\nThis event is called for bees entering a bee hive.\\n\\nIt is not called when a silverfish \"enters\" a stone block. For that listen to\\nthe EntityChangeBlockEvent.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent"
  },
  {
    "static": true,
    "field": "BLOCK_BLASTFURNACE_FIRE_CRACKLE",
    "id": "org.bukkit.Sound#BLOCK_BLASTFURNACE_FIRE_CRACKLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockDispenseEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Creates a new color with its RGB components changed as if it was dyed\\nwith the colors passed in, replicating vanilla workbench dyeing.\\nNote that this method does not currently take into account alpha\\ncomponents.",
    "param-names": [
      "Color",
      "Colors"
    ],
    "param-types": [
      "org.bukkit.Color",
      "org.bukkit.Color[]"
    ],
    "method": "mixColors",
    "id": "org.bukkit.Color#mixColors(org.bukkit.Color...)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "ACACIA_LEAVES",
    "id": "org.bukkit.Material#ACACIA_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the amount of experience the player will receive",
    "param-names": ["Amount"],
    "param-types": ["int"],
    "method": "setAmount",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#setAmount(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent"
  },
  {
    "descr": "This can provide detailed information on why the event is deprecated.",
    "param-names": ["Warning"],
    "param-types": ["org.bukkit.Warning"],
    "method": "reason",
    "id": "org.bukkit.Warning#reason()",
    "class": "org.bukkit.Warning",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the item currently being worn by the armor stand on its head.",
    "param-names": [
      "ArmorStand",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setHelmet",
    "id": "org.bukkit.entity.ArmorStand#setHelmet(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Set the secondary item being used for the enchant.",
    "param-names": [
      "EnchantingInventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.EnchantingInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setSecondary",
    "id": "org.bukkit.inventory.EnchantingInventory#setSecondary(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EnchantingInventory"
  },
  {
    "static": true,
    "field": "BLOCK_VINE_HIT",
    "id": "org.bukkit.Sound#BLOCK_VINE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks to see if the skull has an owner",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "hasOwner",
    "id": "org.bukkit.block.Skull#hasOwner()",
    "class": "org.bukkit.block.Skull",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_ATTACK_KNOCKBACK",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_ATTACK_KNOCKBACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the entity's maximum fire ticks.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getMaxFireTicks",
    "id": "org.bukkit.entity.Entity#getMaxFireTicks()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "descr": "Drops an item at the specified Location",
    "param-names": [
      "World",
      "Location",
      "Item"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "dropItem",
    "id": "org.bukkit.World#dropItem(org.bukkit.Location,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Play a Sound at the location of the provided entity in the World.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "World",
      "Entity",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.Entity",
      "org.bukkit.Sound",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.entity.Entity,org.bukkit.Sound,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "FOX_SPAWN_EGG",
    "id": "org.bukkit.Material#FOX_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get result item, may be null.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the input of this cooking recipe.",
    "param-names": [
      "StonecuttingRecipe",
      "Input"
    ],
    "param-types": [
      "org.bukkit.inventory.StonecuttingRecipe",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "method": "setInputChoice",
    "id": "org.bukkit.inventory.StonecuttingRecipe#setInputChoice(org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.StonecuttingRecipe",
    "return": "org.bukkit.inventory.StonecuttingRecipe"
  },
  {
    "static": true,
    "field": "NETHER_STAR",
    "id": "org.bukkit.Material#NETHER_STAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a World is loaded",
    "event": true,
    "class": "org.bukkit.event.world.WorldLoadEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.structure.UsageMode#valueOf(java.lang.String)",
    "class": "org.bukkit.block.structure.UsageMode",
    "return": "org.bukkit.block.structure.UsageMode"
  },
  {
    "static": true,
    "field": "ITEM_BOOK_PAGE_TURN",
    "id": "org.bukkit.Sound#ITEM_BOOK_PAGE_TURN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "YELLOW_CANDLE_CAKE",
    "id": "org.bukkit.Material#YELLOW_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Golden bunny.",
    "static": true,
    "field": "GOLD",
    "id": "org.bukkit.entity.Rabbit.Type#GOLD",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "Gets the item in the player's hand when they placed the block.",
    "method": "getItemInHand",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getItemInHand()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "GRAY_BED",
    "id": "org.bukkit.Material#GRAY_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_PIGLIN",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_PIGLIN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.world.PortalCreateEvent.CreateReason#values()",
    "class": "org.bukkit.event.world.PortalCreateEvent.CreateReason",
    "return": "org.bukkit.event.world.PortalCreateEvent.CreateReason[]"
  },
  {
    "descr": "Sets the prefix prepended to the display of entries on this team.",
    "param-names": [
      "Team",
      "Prefix"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "java.lang.String"
    ],
    "method": "setPrefix",
    "id": "org.bukkit.scoreboard.Team#setPrefix(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "The attribute pertaining to this instance.",
    "param-names": ["AttributeInstance"],
    "param-types": ["org.bukkit.attribute.AttributeInstance"],
    "method": "getAttribute",
    "id": "org.bukkit.attribute.AttributeInstance#getAttribute()",
    "class": "org.bukkit.attribute.AttributeInstance",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "field": "ENTITY_PILLAGER_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_PILLAGER_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "DEAD_FIRE_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#DEAD_FIRE_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_BRICKS_STEP",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_BRICKS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "SUNFLOWER",
    "id": "org.bukkit.Material#SUNFLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the profession the villager will become from this event.",
    "param-names": ["Profession"],
    "param-types": ["org.bukkit.entity.Villager.Profession"],
    "method": "setProfession",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#setProfession(org.bukkit.entity.Villager.Profession)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent"
  },
  {
    "static": true,
    "field": "CAT",
    "id": "org.bukkit.loot.LootTables#CAT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "GLOW_SQUID",
    "id": "org.bukkit.loot.LootTables#GLOW_SQUID",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "HOST_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#HOST_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Return the ItemStack from the boots slot",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getBoots",
    "id": "org.bukkit.inventory.PlayerInventory#getBoots()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause#values()",
    "class": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause",
    "return": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause[]"
  },
  {
    "static": true,
    "field": "DISC_FRAGMENT_5",
    "id": "org.bukkit.Material#DISC_FRAGMENT_5",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SMALL_WHITE_CIRCLE",
    "id": "org.bukkit.map.MapCursor.Type#SMALL_WHITE_CIRCLE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "BLOCK_FLOWERING_AZALEA_STEP",
    "id": "org.bukkit.Sound#BLOCK_FLOWERING_AZALEA_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_SPLASH",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_SPLASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.DyeColor#values()",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor[]"
  },
  {
    "descr": "Gets the CampfireRecipe associated with this event.",
    "method": "getRecipe",
    "id": "org.bukkit.event.block.CampfireStartEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "org.bukkit.inventory.CampfireRecipe"
  },
  {
    "descr": "Creates a new LootContext.Builder instance to facilitate easy\\ncreation of LootContexts.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "id": "org.bukkit.loot.LootContext.Builder#Builder(org.bukkit.Location)",
    "class": "org.bukkit.loot.LootContext.Builder"
  },
  {
    "descr": "Adds multiples of the specified ingredient.",
    "param-names": [
      "ShapelessRecipe",
      "Count",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "int",
      "org.bukkit.material.MaterialData"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(int,org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "The slab occupies the entire block.",
    "static": true,
    "field": "DOUBLE",
    "id": "org.bukkit.block.data.type.Slab.Type#DOUBLE",
    "class": "org.bukkit.block.data.type.Slab.Type",
    "return": "org.bukkit.block.data.type.Slab.Type"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.LeavesDecayEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the amount of experience received when fishing.\\n\\nNote: This value has no default effect unless the event state is State#CAUGHT_FISH.",
    "method": "getExpToDrop",
    "id": "org.bukkit.event.player.PlayerFishEvent#getExpToDrop()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "CHAINMAIL_BOOTS",
    "id": "org.bukkit.Material#CHAINMAIL_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SNOW_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SNOW_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent"
  },
  {
    "descr": "When a villager is cured from infection",
    "static": true,
    "field": "CURED",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#CURED",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "When a player is healed over time by a potion or spell",
    "static": true,
    "field": "MAGIC_REGEN",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#MAGIC_REGEN",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "MANGROVE_HANGING_SIGN",
    "id": "org.bukkit.Material#MANGROVE_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set whether this block has the specified face enabled.",
    "param-names": [
      "MultipleFacing",
      "Face",
      "Has"
    ],
    "param-types": [
      "org.bukkit.block.data.MultipleFacing",
      "org.bukkit.block.BlockFace",
      "boolean"
    ],
    "method": "setFace",
    "id": "org.bukkit.block.data.MultipleFacing#setFace(org.bukkit.block.BlockFace,boolean)",
    "class": "org.bukkit.block.data.MultipleFacing"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_DEATH_LAND",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_DEATH_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BANNER_BLACK",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_BLACK",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "HAY_BLOCK",
    "id": "org.bukkit.Material#HAY_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Magic particles from a witch.",
    "static": true,
    "field": "WITCH_MAGIC",
    "id": "org.bukkit.EntityEffect#WITCH_MAGIC",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Flowing water.",
    "static": true,
    "field": "FLOWING_WATER",
    "id": "org.bukkit.Fluid#FLOWING_WATER",
    "class": "org.bukkit.Fluid",
    "return": "org.bukkit.Fluid"
  },
  {
    "descr": "Sets the maximum domestication level of this horse.\\n\\nSetting a higher max domestication will increase the amount of\\ndomesticating (feeding, riding, etc.) necessary in order to tame it,\\nwhile setting a lower max value will have the opposite effect.\\n\\nMaximum domestication must be greater than zero.",
    "param-names": [
      "AbstractHorse",
      "Level"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractHorse",
      "int"
    ],
    "method": "setMaxDomestication",
    "id": "org.bukkit.entity.AbstractHorse#setMaxDomestication(int)",
    "class": "org.bukkit.entity.AbstractHorse"
  },
  {
    "descr": "Checks if the potion is in an extended state. This refers to the extended\\nduration potions",
    "param-names": ["PotionData"],
    "param-types": ["org.bukkit.potion.PotionData"],
    "method": "isExtended",
    "id": "org.bukkit.potion.PotionData#isExtended()",
    "class": "org.bukkit.potion.PotionData",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SING",
    "id": "org.bukkit.MusicInstrument#SING",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "descr": "Removes an ingredient from the list.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "BRAIN_CORAL",
    "id": "org.bukkit.Material#BRAIN_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_STEP",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SCENTING",
    "id": "org.bukkit.entity.Sniffer.State#SCENTING",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "descr": "Expands this bounding box uniformly by the given value in all directions.\\n\\nA negative value will shrink the bounding box. Shrinking will be limited\\nto the bounding box's current size.",
    "param-names": [
      "BoundingBox",
      "Expansion"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "When attacking a target, has a chance to set them on fire",
    "static": true,
    "field": "FIRE_ASPECT",
    "id": "org.bukkit.enchantments.Enchantment#FIRE_ASPECT",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "The lectern's current open book page",
    "static": true,
    "field": "BOOK_PAGE",
    "id": "org.bukkit.inventory.InventoryView.Property#BOOK_PAGE",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SAVANNA",
    "id": "org.bukkit.entity.Villager.Type#SAVANNA",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "POLISHED_DEEPSLATE_WALL",
    "id": "org.bukkit.Material#POLISHED_DEEPSLATE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockBreakEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NETHER_BRICK",
    "id": "org.bukkit.Material#NETHER_BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the entity that the original entity was transformed to.\\nThis returns the first entity in the transformed entity list.",
    "method": "getTransformedEntity",
    "id": "org.bukkit.event.entity.PigZapEvent#getTransformedEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Provides protection against explosive damage",
    "static": true,
    "field": "PROTECTION_EXPLOSIONS",
    "id": "org.bukkit.enchantments.Enchantment#PROTECTION_EXPLOSIONS",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent"
  },
  {
    "descr": "Increases the food level of an entity each tick.",
    "static": true,
    "field": "SATURATION",
    "id": "org.bukkit.potion.PotionEffectType#SATURATION",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Get the bee's hive location.",
    "param-names": ["Bee"],
    "param-types": ["org.bukkit.entity.Bee"],
    "method": "getHive",
    "id": "org.bukkit.entity.Bee#getHive()",
    "class": "org.bukkit.entity.Bee",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "LEGACY_NOTE_BLOCK",
    "id": "org.bukkit.Material#LEGACY_NOTE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a set containing every BanEntry in this list.",
    "param-names": ["BanList"],
    "param-types": ["org.bukkit.BanList"],
    "method": "getBanEntries",
    "id": "org.bukkit.BanList#getBanEntries()",
    "class": "org.bukkit.BanList",
    "return": "java.util.Set"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.TabCompleteEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_SNOW_BALL",
    "id": "org.bukkit.Material#LEGACY_SNOW_BALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Determine if this projectile should bounce or not when it hits.\\n\\nIf a small fireball does not bounce it will set the target on fire.",
    "param-names": ["Projectile"],
    "param-types": ["org.bukkit.entity.Projectile"],
    "method": "doesBounce",
    "id": "org.bukkit.entity.Projectile#doesBounce()",
    "class": "org.bukkit.entity.Projectile",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_POWERED_RAIL",
    "id": "org.bukkit.Material#LEGACY_POWERED_RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHISELED_RED_SANDSTONE",
    "id": "org.bukkit.Material#CHISELED_RED_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.TechnicalPiston.Type#values()",
    "class": "org.bukkit.block.data.type.TechnicalPiston.Type",
    "return": "org.bukkit.block.data.type.TechnicalPiston.Type[]"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.FishHook.HookState#values()",
    "class": "org.bukkit.entity.FishHook.HookState",
    "return": "org.bukkit.entity.FishHook.HookState[]"
  },
  {
    "static": true,
    "field": "MOURNER_POTTERY_SHERD",
    "id": "org.bukkit.Material#MOURNER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the block face is being indirectly powered by Redstone.",
    "param-names": [
      "Block",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace"
    ],
    "method": "isBlockFaceIndirectlyPowered",
    "id": "org.bukkit.block.Block#isBlockFaceIndirectlyPowered(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent"
  },
  {
    "static": true,
    "field": "BLACK_STAINED_GLASS",
    "id": "org.bukkit.Material#BLACK_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityTargetEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent"
  },
  {
    "descr": "Sets if this player is whitelisted or not",
    "param-names": [
      "OfflinePlayer",
      "Value"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "boolean"
    ],
    "method": "setWhitelisted",
    "id": "org.bukkit.OfflinePlayer#setWhitelisted(boolean)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_SPLASH_HIGH_SPEED",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_SPLASH_HIGH_SPEED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Checks for the existence of a title in the book.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "hasTitle",
    "id": "org.bukkit.inventory.meta.BookMeta#hasTitle()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "YELLOW_TERRACOTTA",
    "id": "org.bukkit.Material#YELLOW_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_FLOWERING_AZALEA_HIT",
    "id": "org.bukkit.Sound#BLOCK_FLOWERING_AZALEA_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_TWINKLE_FAR",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_TWINKLE_FAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the octave of this note.",
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "getOctave",
    "id": "org.bukkit.Note#getOctave()",
    "class": "org.bukkit.Note",
    "return": "int"
  },
  {
    "static": true,
    "field": "SKELETON",
    "id": "org.bukkit.SkullType#SKELETON",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_STEP",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "TIME_SINCE_REST",
    "id": "org.bukkit.Statistic#TIME_SINCE_REST",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockDispenseEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_EXPLOSIVE_MINECART",
    "id": "org.bukkit.Material#LEGACY_EXPLOSIVE_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_DEATH",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "In an beacon inventory, the secondary potion effect",
    "static": true,
    "field": "SECONDARY_EFFECT",
    "id": "org.bukkit.inventory.InventoryView.Property#SECONDARY_EFFECT",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "MAGENTA_BANNER",
    "id": "org.bukkit.Material#MAGENTA_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_BREAK",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_BREATHE",
    "id": "org.bukkit.Sound#ENTITY_HORSE_BREATHE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the player's current client side view distance.\\n\\nWill default to the server view distance if the client has not yet\\ncommunicated this information,",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getClientViewDistance",
    "id": "org.bukkit.entity.Player#getClientViewDistance()",
    "class": "org.bukkit.entity.Player",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_SPIT",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_SPIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check if the material is an air block.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isAir",
    "id": "org.bukkit.Material#isAir()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Whether the feedback from commands executed by a player should show up in\\nchat. Also affects the default behavior of whether command blocks store\\ntheir output text.",
    "static": true,
    "field": "SEND_COMMAND_FEEDBACK",
    "id": "org.bukkit.GameRule#SEND_COMMAND_FEEDBACK",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_SLIME",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_SLIME",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Stores the given ItemStacks in the inventory. This will try to fill\\nexisting stacks and empty slots as well as it can.\\n\\nThe returned HashMap contains what it couldn't store, where the key is\\nthe index of the parameter, and the value is the ItemStack at that\\nindex of the varargs parameter. If all items are stored, it will return\\nan empty HashMap.\\n\\nIf you pass in ItemStacks which exceed the maximum stack size for the\\nMaterial, first they will be added to partial stacks where\\nMaterial.getMaxStackSize() is not exceeded, up to\\nMaterial.getMaxStackSize(). When there are no partial stacks left\\nstacks will be split on Inventory.getMaxStackSize() allowing you to\\nexceed the maximum stack size for that material.\\n\\nIt is known that in some implementations this method will also set\\nthe inputted argument amount to the number of that item not placed in\\nslots.",
    "param-names": [
      "Inventory",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "addItem",
    "id": "org.bukkit.inventory.Inventory#addItem(org.bukkit.inventory.ItemStack...)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "java.util.HashMap"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_EGG_CRACK",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_EGG_CRACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "boolean"
  },
  {
    "descr": "Add a cursor to the collection.",
    "param-names": [
      "MapCursorCollection",
      "Cursor"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "org.bukkit.map.MapCursor"
    ],
    "method": "addCursor",
    "id": "org.bukkit.map.MapCursorCollection#addCursor(org.bukkit.map.MapCursor)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "The player is allowed to log in",
    "static": true,
    "field": "ALLOWED",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#ALLOWED",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "Strongholds are underground structures that consist of many rooms,\\nlibraries, and an end portal room.\\n\\nThey can be found using an Material#ENDER_EYE.",
    "static": true,
    "field": "STRONGHOLD",
    "id": "org.bukkit.StructureType#STRONGHOLD",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Gets the despawn delay before this WanderingTrader is forcibly\\ndespawned.\\nIf this is less than or equal to 0, then the trader will not be\\ndespawned.",
    "param-names": ["WanderingTrader"],
    "param-types": ["org.bukkit.entity.WanderingTrader"],
    "method": "getDespawnDelay",
    "id": "org.bukkit.entity.WanderingTrader#getDespawnDelay()",
    "class": "org.bukkit.entity.WanderingTrader",
    "return": "int"
  },
  {
    "static": true,
    "field": "FEET",
    "id": "org.bukkit.inventory.EquipmentSlot#FEET",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "GREEN_POINTER",
    "id": "org.bukkit.map.MapCursor.Type#GREEN_POINTER",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "A placed boat.",
    "static": true,
    "field": "BOAT",
    "id": "org.bukkit.entity.EntityType#BOAT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "MOSSY_STONE_BRICKS",
    "id": "org.bukkit.Material#MOSSY_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMITE_STEP",
    "id": "org.bukkit.Sound#ENTITY_ENDERMITE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Merchant involved.",
    "method": "getMerchant",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getMerchant()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.inventory.Merchant"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent"
  },
  {
    "descr": "Causes a thrown trident to return to the player who threw it",
    "static": true,
    "field": "LOYALTY",
    "id": "org.bukkit.enchantments.Enchantment#LOYALTY",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "This is a Nether portal, made of obsidian.",
    "static": true,
    "field": "NETHER",
    "id": "org.bukkit.PortalType#NETHER",
    "class": "org.bukkit.PortalType",
    "return": "org.bukkit.PortalType"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "BIRCH_DOOR",
    "id": "org.bukkit.Material#BIRCH_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the Sound this entity will make when damaged.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getHurtSound",
    "id": "org.bukkit.entity.LivingEntity#getHurtSound()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks for existence of an associated map.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "hasMapView",
    "id": "org.bukkit.inventory.meta.MapMeta#hasMapView()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_BLACK_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_BLACK_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Prevents adding the respective equipment - players cannot replace the\\nempty slot with a new item, but can swap items between themselves and\\nthe ArmorStand.",
    "static": true,
    "field": "ADDING",
    "id": "org.bukkit.entity.ArmorStand.LockType#ADDING",
    "class": "org.bukkit.entity.ArmorStand.LockType",
    "return": "org.bukkit.entity.ArmorStand.LockType"
  },
  {
    "param-names": ["Args"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.util.Vector#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets all remaining Raider in the present wave.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getRaiders",
    "id": "org.bukkit.Raid#getRaiders()",
    "class": "org.bukkit.Raid",
    "return": "java.util.List"
  },
  {
    "descr": "Uses BlockData as DataType",
    "static": true,
    "field": "BLOCK_MARKER",
    "id": "org.bukkit.Particle#BLOCK_MARKER",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "The player will enter the bed.",
    "static": true,
    "field": "OK",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#OK",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "static": true,
    "field": "BLOCK_IRON_DOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_IRON_DOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_SAND_FALL",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_SAND_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the new data of the changed block.",
    "method": "getNewData",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#getNewData()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Happy particles from a villager.",
    "static": true,
    "field": "VILLAGER_HAPPY",
    "id": "org.bukkit.EntityEffect#VILLAGER_HAPPY",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "State when first seeded",
    "static": true,
    "field": "SEEDED",
    "id": "org.bukkit.CropState#SEEDED",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "Returns a GameEvent by a NamespacedKey.",
    "param-names": ["Namespaced Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getByKey",
    "id": "org.bukkit.GameEvent#getByKey(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "BLOCK_POWDER_SNOW_HIT",
    "id": "org.bukkit.Sound#BLOCK_POWDER_SNOW_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.advancement.AdvancementDisplayType#values()",
    "class": "org.bukkit.advancement.AdvancementDisplayType",
    "return": "org.bukkit.advancement.AdvancementDisplayType[]"
  },
  {
    "descr": "Sets the value of the 'attached' property.",
    "param-names": [
      "Attachable",
      "Attached"
    ],
    "param-types": [
      "org.bukkit.block.data.Attachable",
      "boolean"
    ],
    "method": "setAttached",
    "id": "org.bukkit.block.data.Attachable#setAttached(boolean)",
    "class": "org.bukkit.block.data.Attachable"
  },
  {
    "static": true,
    "field": "ENTITY_WITCH_THROW",
    "id": "org.bukkit.Sound#ENTITY_WITCH_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "AXOLOTL_BUCKET",
    "id": "org.bukkit.Material#AXOLOTL_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a string, which when passed into a method such as\\nServer#createBlockData(java.lang.String) will recreate this or a\\nsimilar instance where unspecified states (if any) may be optionally\\nomitted. If this instance was parsed and states are omitted, this exact\\ninstance will be creatable when parsed again, else their equality cannot\\nbe guaranteed.\\n\\nThis method will only take effect for BlockData instances created by\\nmethods such as Server#createBlockData(String) or any similar\\nmethod whereby states are optionally defined. If otherwise, the result of\\n#getAsString() will be returned. The following behaviour would be\\nexpected:\\ndataString = \"minecraft:chest[waterlogged=true]\"\\nBlockData data = Bukkit.createBlockData(dataString);\\ndataString.equals(data.getAsString(true)); // This would return true\\ndataString.equals(data.getAsString(false)); // This would return false as all states are present\\ndataString.equals(data.getAsString()); // This is equivalent to the above, \"getAsString(false)\"\\n",
    "param-names": [
      "BlockData",
      "Hide Unspecified"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "boolean"
    ],
    "method": "getAsString",
    "id": "org.bukkit.block.data.BlockData#getAsString(boolean)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "ACACIA_SIGN",
    "id": "org.bukkit.Material#ACACIA_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "WAXED_EXPOSED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#WAXED_EXPOSED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Like #ARROW but causes the PotionEffectType#GLOWING effect on all team members.",
    "static": true,
    "field": "SPECTRAL_ARROW",
    "id": "org.bukkit.entity.EntityType#SPECTRAL_ARROW",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SAND_FALL",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SAND_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Damage caused by the World Border\\n\\nDamage: WorldBorder#getDamageAmount()",
    "static": true,
    "field": "WORLD_BORDER",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#WORLD_BORDER",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Play a sound for a player at the location.\\n\\nThis function will fail silently if Location or Sound are null. No\\nsound will be heard by the player if their client does not have the\\nrespective sound for the value passed.",
    "param-names": [
      "Player",
      "Location",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "java.lang.String",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.Location,java.lang.String,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BANNER_YELLOW",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_YELLOW",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Rotated counter-clockwise by 45 degrees",
    "static": true,
    "field": "COUNTER_CLOCKWISE_45",
    "id": "org.bukkit.Rotation#COUNTER_CLOCKWISE_45",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Sets a minecart's damage.",
    "param-names": [
      "Minecart",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "double"
    ],
    "method": "setDamage",
    "id": "org.bukkit.entity.Minecart#setDamage(double)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Set whether it is thundering.\\nThis will implicitly call #setClearWeatherDuration(int) with 0\\nticks to reset the world's clear weather.",
    "param-names": [
      "World",
      "Thundering"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "setThundering",
    "id": "org.bukkit.World#setThundering(boolean)",
    "class": "org.bukkit.World"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Stairs.Shape#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "descr": "Sets the title of this boss bar",
    "param-names": [
      "BossBar",
      "Title"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "java.lang.String"
    ],
    "method": "setTitle",
    "id": "org.bukkit.boss.BossBar#setTitle(java.lang.String)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "Gets the chance of the main hand item being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getItemInMainHandDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getItemInMainHandDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "descr": "Represents aqua",
    "static": true,
    "field": "AQUA",
    "id": "org.bukkit.ChatColor#AQUA",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_CURSE",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_CURSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "boolean"
  },
  {
    "descr": "Stop the specified sound category from playing.",
    "param-names": [
      "Player",
      "Category"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.SoundCategory"
    ],
    "method": "stopSound",
    "id": "org.bukkit.entity.Player#stopSound(org.bukkit.SoundCategory)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "NIGHT_VISION",
    "id": "org.bukkit.potion.PotionType#NIGHT_VISION",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "ENTITY_KILLED_BY",
    "id": "org.bukkit.Statistic#ENTITY_KILLED_BY",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,T)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets whether the player has the \"Allow Server Listings\" setting enabled.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isAllowingServerListings",
    "id": "org.bukkit.entity.Player#isAllowingServerListings()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the current Server singleton",
    "static": true,
    "method": "getServer",
    "id": "org.bukkit.Bukkit#getServer()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.Server"
  },
  {
    "static": true,
    "field": "CAMEL",
    "id": "org.bukkit.entity.EntityType#CAMEL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Damage caused from freezing.\\n\\nDamage: 1 or 5",
    "static": true,
    "field": "FREEZE",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#FREEZE",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "FILLED_MAP",
    "id": "org.bukkit.Material#FILLED_MAP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the appropriate slot based on a vector relative to this block.\\nWill return -1 if the given vector is not within the bounds of any slot.\\n\\nThe supplied vector should only contain components with values between 0.0\\nand 1.0, inclusive.",
    "param-names": [
      "ChiseledBookshelf",
      "Position"
    ],
    "param-types": [
      "org.bukkit.block.ChiseledBookshelf",
      "org.bukkit.util.Vector"
    ],
    "method": "getSlot",
    "id": "org.bukkit.block.ChiseledBookshelf#getSlot(org.bukkit.util.Vector)",
    "class": "org.bukkit.block.ChiseledBookshelf",
    "return": "int"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "POLISHED_BLACKSTONE_BUTTON",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "AMBIENT_WARPED_FOREST_ADDITIONS",
    "id": "org.bukkit.Sound#AMBIENT_WARPED_FOREST_ADDITIONS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block that is being harvested.",
    "method": "getHarvestedBlock",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getHarvestedBlock()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the Chunk at the given coordinates",
    "param-names": [
      "World",
      "X",
      "Z",
      "Generate"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "boolean"
    ],
    "method": "getChunkAt",
    "id": "org.bukkit.World#getChunkAt(int,int,boolean)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "field": "SUNFLOWER_PLAINS",
    "id": "org.bukkit.block.Biome#SUNFLOWER_PLAINS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_TRAPDOOR",
    "id": "org.bukkit.Material#LEGACY_IRON_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["NamespacedKey"],
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getKey",
    "id": "org.bukkit.NamespacedKey#getKey()",
    "class": "org.bukkit.NamespacedKey",
    "return": "java.lang.String"
  },
  {
    "descr": "First growth stage",
    "static": true,
    "field": "STAGE_ONE",
    "id": "org.bukkit.NetherWartsState#STAGE_ONE",
    "class": "org.bukkit.NetherWartsState",
    "return": "org.bukkit.NetherWartsState"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_GHAST",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_GHAST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SUNSTREAK",
    "id": "org.bukkit.entity.TropicalFish.Pattern#SUNSTREAK",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Check what item is in the result slot of this crafting inventory.",
    "param-names": ["CraftingInventory"],
    "param-types": ["org.bukkit.inventory.CraftingInventory"],
    "method": "getResult",
    "id": "org.bukkit.inventory.CraftingInventory#getResult()",
    "class": "org.bukkit.inventory.CraftingInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "MELON_SLICE",
    "id": "org.bukkit.Material#MELON_SLICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_PINK_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_PINK_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MASON_GIFT",
    "id": "org.bukkit.loot.LootTables#MASON_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Visually hides an entity from this player.",
    "param-names": [
      "Player",
      "Plugin",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.plugin.Plugin",
      "org.bukkit.entity.Entity"
    ],
    "method": "hideEntity",
    "id": "org.bukkit.entity.Player#hideEntity(org.bukkit.plugin.Plugin,org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Creates a new Color object with specified component",
    "param-names": [
      "Color",
      "Blue"
    ],
    "param-types": [
      "org.bukkit.Color",
      "int"
    ],
    "method": "setBlue",
    "id": "org.bukkit.Color#setBlue(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "BAMBOO_MOSAIC",
    "id": "org.bukkit.Material#BAMBOO_MOSAIC",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityTameEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent"
  },
  {
    "static": true,
    "field": "FLOWER_POT",
    "id": "org.bukkit.Material#FLOWER_POT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Grants invisibility.",
    "static": true,
    "field": "INVISIBILITY",
    "id": "org.bukkit.potion.PotionEffectType#INVISIBILITY",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "LEGACY_PRISMARINE_SHARD",
    "id": "org.bukkit.Material#LEGACY_PRISMARINE_SHARD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the seed that will be used to create this world",
    "param-names": [
      "WorldCreator",
      "Seed"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "long"
    ],
    "method": "seed",
    "id": "org.bukkit.WorldCreator#seed(long)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Sent when an entity's gliding status is toggled with an Elytra.\\nExamples of when this event would be called:\\n\\nPlayer presses the jump key while in midair and using an Elytra\\nPlayer lands on ground while they are gliding (with an Elytra)\\n\\nThis can be visually estimated by the animation in which a player turns horizontal.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: CommandBlock",
    "static": true,
    "field": "REPEATING_COMMAND_BLOCK",
    "id": "org.bukkit.Material#REPEATING_COMMAND_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a copy of this ItemStack's ItemMeta.",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getItemMeta",
    "id": "org.bukkit.inventory.ItemStack#getItemMeta()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "Sets the map color. A custom map color will alter the display of the map\\nin an inventory slot.",
    "param-names": [
      "MapMeta",
      "Color"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.MapMeta",
      "org.bukkit.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.inventory.meta.MapMeta#setColor(org.bukkit.Color)",
    "class": "org.bukkit.inventory.meta.MapMeta"
  },
  {
    "descr": "Gets the location this player moved from",
    "method": "getFrom",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Set the loot to be generated. Null items will be treated as air.\\nNote: the set collection is not the one which will be returned by\\n#getLoot().",
    "param-names": ["Loot"],
    "param-types": ["java.util.Collection"],
    "method": "setLoot",
    "id": "org.bukkit.event.world.LootGenerateEvent#setLoot(java.util.Collection<org.bukkit.inventory.ItemStack>)",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent"
  },
  {
    "descr": "Gets an immutable list containing all custom potion effects applied to\\nthis arrow.\\n\\nPlugins should check that hasCustomEffects() returns true before calling\\nthis method.",
    "param-names": ["Arrow"],
    "param-types": ["org.bukkit.entity.Arrow"],
    "method": "getCustomEffects",
    "id": "org.bukkit.entity.Arrow#getCustomEffects()",
    "class": "org.bukkit.entity.Arrow",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the date this ban entry was created.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "getCreated",
    "id": "org.bukkit.BanEntry#getCreated()",
    "class": "org.bukkit.BanEntry",
    "return": "java.util.Date"
  },
  {
    "static": true,
    "field": "SPORE_BLOSSOM_AIR",
    "id": "org.bukkit.Particle#SPORE_BLOSSOM_AIR",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "SPRUCE_FENCE",
    "id": "org.bukkit.Material#SPRUCE_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the entity that was right-clicked by the player.",
    "method": "getRightClicked",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getRightClicked()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "MOSSY_STONE_BRICK_STAIRS",
    "id": "org.bukkit.Material#MOSSY_STONE_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the level that this Enchantment should start at",
    "param-names": ["Enchantment"],
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "getStartLevel",
    "id": "org.bukkit.enchantments.Enchantment#getStartLevel()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerItemBreakEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "POTTED_DARK_OAK_SAPLING",
    "id": "org.bukkit.Material#POTTED_DARK_OAK_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the block that the entity was placed on",
    "method": "getBlock",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ENTITY_SQUID_HURT",
    "id": "org.bukkit.Sound#ENTITY_SQUID_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_STEP",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.PortalCreateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_SAPLING_HIT",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_SAPLING_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the result of this event. This will change whether or not this\\nevent is considered cancelled.",
    "param-names": ["New Result"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent"
  },
  {
    "static": true,
    "field": "DARK_FOREST",
    "id": "org.bukkit.block.Biome#DARK_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the z-coordinate of this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getZ",
    "id": "org.bukkit.block.BlockState#getZ()",
    "class": "org.bukkit.block.BlockState",
    "return": "int"
  },
  {
    "descr": "Gets the amount remaining on the ground, if any",
    "method": "getRemaining",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getRemaining()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_EYE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ENDER_EYE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Whether to show a toast to the player when this advancement has been\\ncompleted.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "shouldShowToast",
    "id": "org.bukkit.advancement.AdvancementDisplay#shouldShowToast()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "boolean"
  },
  {
    "descr": "Called when an entity interacts with an object",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent"
  },
  {
    "descr": "Tells the client to play the Ender Dragon boss music.",
    "static": true,
    "field": "PLAY_BOSS_MUSIC",
    "id": "org.bukkit.boss.BarFlag#PLAY_BOSS_MUSIC",
    "class": "org.bukkit.boss.BarFlag",
    "return": "org.bukkit.boss.BarFlag"
  },
  {
    "descr": "Gets the hand which placed the block",
    "method": "getHand",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "AMETHYST_BLOCK",
    "id": "org.bukkit.Material#AMETHYST_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_11",
    "id": "org.bukkit.Material#MUSIC_DISC_11",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_HURT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the new type of this villager.",
    "param-names": [
      "Villager",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Villager",
      "org.bukkit.entity.Villager.Type"
    ],
    "method": "setVillagerType",
    "id": "org.bukkit.entity.Villager#setVillagerType(org.bukkit.entity.Villager.Type)",
    "class": "org.bukkit.entity.Villager"
  },
  {
    "static": true,
    "field": "LEGACY_BOOKSHELF",
    "id": "org.bukkit.Material#LEGACY_BOOKSHELF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Allows the Enchantment to be placed on fishing rods.",
    "static": true,
    "field": "FISHING_ROD",
    "id": "org.bukkit.enchantments.EnchantmentTarget#FISHING_ROD",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Whether traders should naturally spawn.",
    "static": true,
    "field": "DO_TRADER_SPAWNING",
    "id": "org.bukkit.GameRule#DO_TRADER_SPAWNING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "MUSHROOM_STEW",
    "id": "org.bukkit.Material#MUSHROOM_STEW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Makes this player start or stop flying.",
    "param-names": [
      "Player",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "boolean"
    ],
    "method": "setFlying",
    "id": "org.bukkit.entity.Player#setFlying(boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.CoalType#values()",
    "class": "org.bukkit.CoalType",
    "return": "org.bukkit.CoalType[]"
  },
  {
    "descr": "BlockData: SculkShrieker",
    "static": true,
    "field": "SCULK_SHRIEKER",
    "id": "org.bukkit.Material#SCULK_SHRIEKER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "REVERSE_PORTAL",
    "id": "org.bukkit.Particle#REVERSE_PORTAL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ItemMergeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_TUFF_BREAK",
    "id": "org.bukkit.Sound#BLOCK_TUFF_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'tilt' property.",
    "param-names": ["BigDripleaf"],
    "param-types": ["org.bukkit.block.data.type.BigDripleaf"],
    "method": "getTilt",
    "id": "org.bukkit.block.data.type.BigDripleaf#getTilt()",
    "class": "org.bukkit.block.data.type.BigDripleaf",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_DARK_OAK_WOOD",
    "id": "org.bukkit.Material#STRIPPED_DARK_OAK_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_HURT",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the raw amount of damage caused by the event.\\n\\nFor compatibility this also recalculates the modifiers and scales\\nthem by the difference between the modifier for the previous damage\\nvalue and the new one.",
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "id": "org.bukkit.event.entity.EntityDamageEvent#setDamage(double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "static": true,
    "field": "BLOCK_GLASS_STEP",
    "id": "org.bukkit.Sound#BLOCK_GLASS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "FISHING_TREASURE",
    "id": "org.bukkit.loot.LootTables#FISHING_TREASURE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityInteractEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Entity breaks item in off hand",
    "static": true,
    "field": "BREAK_EQUIPMENT_OFF_HAND",
    "id": "org.bukkit.EntityEffect#BREAK_EQUIPMENT_OFF_HAND",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Sets the limit for number of water underground creature that can spawn in a chunk in\\nthis world\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setWaterUndergroundCreatureSpawnLimit",
    "id": "org.bukkit.World#setWaterUndergroundCreatureSpawnLimit(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the seed that will be used to create this world",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "seed",
    "id": "org.bukkit.WorldCreator#seed()",
    "class": "org.bukkit.WorldCreator",
    "return": "long"
  },
  {
    "descr": "Sets whether the following slot is occupied.",
    "param-names": [
      "ChiseledBookshelf",
      "Slot",
      "Occupied"
    ],
    "param-types": [
      "org.bukkit.block.data.type.ChiseledBookshelf",
      "int",
      "boolean"
    ],
    "method": "setSlotOccupied",
    "id": "org.bukkit.block.data.type.ChiseledBookshelf#setSlotOccupied(int,boolean)",
    "class": "org.bukkit.block.data.type.ChiseledBookshelf"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "YELLOW_STAINED_GLASS",
    "id": "org.bukkit.Material#YELLOW_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BONE",
    "id": "org.bukkit.Material#BONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WARPED_FUNGUS",
    "id": "org.bukkit.Material#WARPED_FUNGUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the players current saturation level.\\n\\nSaturation is a buffer for food level. Your food level will not drop if\\nyou are saturated > 0.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getSaturation",
    "id": "org.bukkit.entity.HumanEntity#getSaturation()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "float"
  },
  {
    "descr": "Whether tnt explosions will destroy dropped items.",
    "static": true,
    "field": "TNT_EXPLOSION_DROP_DECAY",
    "id": "org.bukkit.GameRule#TNT_EXPLOSION_DROP_DECAY",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "CHERRY_WALL_SIGN",
    "id": "org.bukkit.Material#CHERRY_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Material that we are trying to place.",
    "method": "getMaterial",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getMaterial()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_STRING",
    "id": "org.bukkit.Material#LEGACY_STRING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BREAD",
    "id": "org.bukkit.Material#BREAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RED_CONCRETE_POWDER",
    "id": "org.bukkit.Material#RED_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ORANGE_CONCRETE",
    "id": "org.bukkit.Material#ORANGE_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates an Arrow entity at the given Location",
    "param-names": [
      "World",
      "Location",
      "Direction",
      "Speed",
      "Spread"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "float",
      "float"
    ],
    "method": "spawnArrow",
    "id": "org.bukkit.World#spawnArrow(org.bukkit.Location,org.bukkit.util.Vector,float,float)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.Arrow"
  },
  {
    "descr": "Gets the current cooldown for a player's attack.\\nThis is used to calculate damage, with 1.0 representing a fully charged\\nattack and 0.0 representing a non-charged attack",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getAttackCooldown",
    "id": "org.bukkit.entity.HumanEntity#getAttackCooldown()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "float"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "PURPLE_CANDLE_CAKE",
    "id": "org.bukkit.Material#PURPLE_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the amount of ticks this raid has existed.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getActiveTicks",
    "id": "org.bukkit.Raid#getActiveTicks()",
    "class": "org.bukkit.Raid",
    "return": "long"
  },
  {
    "descr": "Get the Material of the falling block",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "getMaterial",
    "id": "org.bukkit.entity.FallingBlock#getMaterial()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.InventoryBlockStartEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.ServerLoadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.ServerLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_PAINTING_BREAK",
    "id": "org.bukkit.Sound#ENTITY_PAINTING_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_TELEPORT",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_TELEPORT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMAN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ENDERMAN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "SPRUCE_SLAB",
    "id": "org.bukkit.Material#SPRUCE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHAINMAIL_CHESTPLATE",
    "id": "org.bukkit.Material#CHAINMAIL_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the cause of the TNT becoming primed.",
    "method": "getCause",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "descr": "Half of the items on the clicked slot are moved to the cursor.",
    "static": true,
    "field": "PICKUP_HALF",
    "id": "org.bukkit.event.inventory.InventoryAction#PICKUP_HALF",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "This event is called when a Raid was complete with a clear result.",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.inventory.InventoryView.Property#valueOf(java.lang.String)",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Gets the DyeColor the sheep is being dyed",
    "method": "getColor",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getColor()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Set the maximum number of ticks one has to wait for a fish to bite\\nafter appearing.\\n\\nThe default is 80 ticks (4 second).\\nLure does not affect this value.\\nThis will also effect the radius (0.1 * lureTime) of where\\nthe fish will appear.",
    "param-names": [
      "FishHook",
      "Max Lure Time"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "int"
    ],
    "method": "setMaxLureTime",
    "id": "org.bukkit.entity.FishHook#setMaxLureTime(int)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "The number of seconds the combustee should be alight for.\\n\\nThis value will only ever increase the combustion time, not decrease\\nexisting combustion times.",
    "param-names": ["Duration"],
    "param-types": ["int"],
    "method": "setDuration",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#setDuration(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent"
  },
  {
    "static": true,
    "field": "LEGACY_MAGENTA_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_MAGENTA_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_AMETHYST_BUD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SMALL_AMETHYST_BUD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#values()",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason[]"
  },
  {
    "static": true,
    "field": "BANNER_BLUE",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_BLUE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Material#values()",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material[]"
  },
  {
    "static": true,
    "field": "BLOCK_SWEET_BERRY_BUSH_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SWEET_BERRY_BUSH_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the current time in ticks relative to the start of this dragon's\\ndeath animation.\\nIf this dragon is alive, 0 will be returned. This value will never exceed\\n200 (the length of the animation).",
    "param-names": ["EnderDragon"],
    "param-types": ["org.bukkit.entity.EnderDragon"],
    "method": "getDeathAnimationTicks",
    "id": "org.bukkit.entity.EnderDragon#getDeathAnimationTicks()",
    "class": "org.bukkit.entity.EnderDragon",
    "return": "int"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setItemInHandDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInHandDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "ENTITY_SNOW_GOLEM_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_SNOW_GOLEM_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Retrieve the number of ticks until the explosion of this TNTPrimed\\nentity",
    "param-names": ["TNTPrimed"],
    "param-types": ["org.bukkit.entity.TNTPrimed"],
    "method": "getFuseTicks",
    "id": "org.bukkit.entity.TNTPrimed#getFuseTicks()",
    "class": "org.bukkit.entity.TNTPrimed",
    "return": "int"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockExplodeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ACACIA",
    "id": "org.bukkit.entity.Boat.Type#ACACIA",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Returns the entity's current fire ticks (ticks before the entity stops\\nbeing on fire).",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getFireTicks",
    "id": "org.bukkit.entity.Entity#getFireTicks()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_HORSE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_GOLDEN_APPLE",
    "id": "org.bukkit.Material#LEGACY_GOLDEN_APPLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "An ender eye signal; a visual effect.",
    "static": true,
    "field": "ENDER_SIGNAL",
    "id": "org.bukkit.Effect#ENDER_SIGNAL",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "GLOW_INK_SAC",
    "id": "org.bukkit.Material#GLOW_INK_SAC",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SPELL_INSTANT",
    "id": "org.bukkit.Particle#SPELL_INSTANT",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_PINK_PETALS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_PINK_PETALS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_VINDICATOR_HURT",
    "id": "org.bukkit.Sound#ENTITY_VINDICATOR_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WAX_ON",
    "id": "org.bukkit.Particle#WAX_ON",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PotionSplashEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "TELEPORT",
    "id": "org.bukkit.GameEvent#TELEPORT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the Raid that this raider is participating in, if any.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "getRaid",
    "id": "org.bukkit.entity.Raider#getRaid()",
    "class": "org.bukkit.entity.Raider",
    "return": "org.bukkit.Raid"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "MANGROVE_LOG",
    "id": "org.bukkit.Material#MANGROVE_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the source ItemStack for this event.",
    "method": "getSource",
    "id": "org.bukkit.event.block.CampfireStartEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "BLACKSTONE",
    "id": "org.bukkit.Material#BLACKSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SADDLE",
    "id": "org.bukkit.Material#LEGACY_SADDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the recipe to be acquired.",
    "param-names": ["Recipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "setRecipe",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#setRecipe(org.bukkit.inventory.MerchantRecipe)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,T)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Get the hand that was used to bucket the entity.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MINECART_COMMAND",
    "id": "org.bukkit.entity.EntityType#MINECART_COMMAND",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the trading experience of this villager.",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "getVillagerExperience",
    "id": "org.bukkit.entity.Villager#getVillagerExperience()",
    "class": "org.bukkit.entity.Villager",
    "return": "int"
  },
  {
    "static": true,
    "field": "WITCH_SPAWN_EGG",
    "id": "org.bukkit.Material#WITCH_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the damage change for some modifier",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "getDamage",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "double"
  },
  {
    "descr": "BlockData: PistonHead",
    "static": true,
    "field": "PISTON_HEAD",
    "id": "org.bukkit.Material#PISTON_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SNOW_FALL",
    "id": "org.bukkit.Sound#BLOCK_SNOW_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Performs a ray trace that checks for entity collisions.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the maximum\\ndistance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance",
      "Ray Size",
      "Filter"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "double",
      "java.util.function.Predicate"
    ],
    "method": "rayTraceEntities",
    "id": "org.bukkit.World#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,double,java.util.function.Predicate<org.bukkit.entity.Entity>)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_CLERIC",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_CLERIC",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the biome provider that will be used to create or load the world.\\n\\nThis may be null, in which case the biome provider from the ChunkGenerator\\nwill be used. If no ChunkGenerator is specific the \"natural\" biome provider\\nfor this environment will be used.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "biomeProvider",
    "id": "org.bukkit.WorldCreator#biomeProvider()",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.generator.BiomeProvider"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "descr": "Get the translation key, suitable for use in a translation component.",
    "param-names": ["Translatable"],
    "param-types": ["org.bukkit.Translatable"],
    "method": "getTranslationKey",
    "id": "org.bukkit.Translatable#getTranslationKey()",
    "class": "org.bukkit.Translatable",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the ItemStack being moved; if this is different from the original\\nItemStack, the original item will not be removed from the source\\ninventory.",
    "param-names": ["Item Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setItem",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#setItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent"
  },
  {
    "static": true,
    "field": "STRIDER_ONE_CM",
    "id": "org.bukkit.Statistic#STRIDER_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Provides protection against fall damage",
    "static": true,
    "field": "PROTECTION_FALL",
    "id": "org.bukkit.enchantments.Enchantment#PROTECTION_FALL",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Gets the item switched to the off hand.",
    "method": "getOffHandItem",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#getOffHandItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "PANDA_SPAWN_EGG",
    "id": "org.bukkit.Material#PANDA_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_BLOCK",
    "id": "org.bukkit.Material#LEGACY_GOLD_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_BOAT_DARK_OAK",
    "id": "org.bukkit.Material#LEGACY_BOAT_DARK_OAK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the player's last death location.\\n\\nNote: This data is updated in the player's client only when the\\nplayer respawns.",
    "param-names": [
      "HumanEntity",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Location"
    ],
    "method": "setLastDeathLocation",
    "id": "org.bukkit.entity.HumanEntity#setLastDeathLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "WARPED_PRESSURE_PLATE",
    "id": "org.bukkit.Material#WARPED_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the MaterialData for this stack of items",
    "param-names": [
      "ItemStack",
      "Data"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.material.MaterialData"
    ],
    "method": "setData",
    "id": "org.bukkit.inventory.ItemStack#setData(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Removes this ban entry from the appropriate ban list.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "remove",
    "id": "org.bukkit.BanEntry#remove()",
    "class": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the value of the 'dusted' property.",
    "param-names": ["Brushable"],
    "param-types": ["org.bukkit.block.data.Brushable"],
    "method": "getDusted",
    "id": "org.bukkit.block.data.Brushable#getDusted()",
    "class": "org.bukkit.block.data.Brushable",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_LEAVES_HIT",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_LEAVES_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the X component.",
    "param-names": [
      "Vector",
      "X"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "float"
    ],
    "method": "setX",
    "id": "org.bukkit.util.Vector#setX(float)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "THIRDPERSON_LEFTHAND",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#THIRDPERSON_LEFTHAND",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "static": true,
    "field": "ENCHANTED_BOOK",
    "id": "org.bukkit.Material#ENCHANTED_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the amount of blocks a player may safely be outside the border before taking damage.",
    "param-names": [
      "WorldBorder",
      "Blocks"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "double"
    ],
    "method": "setDamageBuffer",
    "id": "org.bukkit.WorldBorder#setDamageBuffer(double)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.map.MapView.Scale#valueOf(java.lang.String)",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "LIGHT_GRAY_CANDLE",
    "id": "org.bukkit.Material#LIGHT_GRAY_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockIgniteEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "boolean"
  },
  {
    "descr": "Removes a given tag from this entity.",
    "param-names": [
      "Entity",
      "Tag"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "java.lang.String"
    ],
    "method": "removeScoreboardTag",
    "id": "org.bukkit.entity.Entity#removeScoreboardTag(java.lang.String)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Beehive",
    "static": true,
    "field": "BEEHIVE",
    "id": "org.bukkit.Material#BEEHIVE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.CampfireStartEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_COBBLESTONE",
    "id": "org.bukkit.Material#LEGACY_COBBLESTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CONDUIT_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_CONDUIT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the connection address of this player, regardless of whether it has been spoofed or not.",
    "method": "getRealAddress",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getRealAddress()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "java.net.InetAddress"
  },
  {
    "descr": "The progress of the flame in a furnace inventory.",
    "static": true,
    "field": "BURN_TIME",
    "id": "org.bukkit.inventory.InventoryView.Property#BURN_TIME",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "BAMBOO_PLANKS",
    "id": "org.bukkit.Material#BAMBOO_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WEATHER_RAIN",
    "id": "org.bukkit.Sound#WEATHER_RAIN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Removes all custom potion effects from this cloud.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "clearCustomEffects",
    "id": "org.bukkit.entity.AreaEffectCloud#clearCustomEffects()",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.WorldUnloadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "GOLDEN_AXE",
    "id": "org.bukkit.Material#GOLDEN_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.HorseJumpEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "BlockData: Lectern",
    "static": true,
    "field": "LECTERN",
    "id": "org.bukkit.Material#LECTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockCookEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "When a conversion from a villager zombie to a villager is started or\\nfinished.",
    "static": true,
    "field": "CONVERSION",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#CONVERSION",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_FARMER",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_FARMER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_TILES_BREAK",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_TILES_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the charging state of this entity.\\nWhen this entity is charging it will having a glowing red texture.",
    "param-names": [
      "Vex",
      "Charging"
    ],
    "param-types": [
      "org.bukkit.entity.Vex",
      "boolean"
    ],
    "method": "setCharging",
    "id": "org.bukkit.entity.Vex#setCharging(boolean)",
    "class": "org.bukkit.entity.Vex"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the dark gray team.",
    "static": true,
    "field": "KILLED_BY_TEAM_DARK_GRAY",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_DARK_GRAY",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.GenericGameEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent"
  },
  {
    "static": true,
    "field": "SNOWBALL",
    "id": "org.bukkit.Particle#SNOWBALL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets whether this sign has glowing text. Only affects the Side#FRONT.",
    "param-names": [
      "Sign",
      "Glowing"
    ],
    "param-types": [
      "org.bukkit.block.Sign",
      "boolean"
    ],
    "method": "setGlowingText",
    "id": "org.bukkit.block.Sign#setGlowingText(boolean)",
    "class": "org.bukkit.block.Sign"
  },
  {
    "descr": "Called prior to an entity being unleashed due to a player's action.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent"
  },
  {
    "static": true,
    "field": "WAXED_WEATHERED_COPPER",
    "id": "org.bukkit.Material#WAXED_WEATHERED_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SANDSTONE",
    "id": "org.bukkit.Material#SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_SKELETON",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_SKELETON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if the text is shadowed.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "isShadowed",
    "id": "org.bukkit.entity.TextDisplay#isShadowed()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "boolean"
  },
  {
    "descr": "Only applicable while in UsageMode#DATA. Metadata are specific\\nfunctions that can be applied to the structure location. Consult the\\nMinecraft\\nwiki for more information.",
    "param-names": [
      "Structure",
      "Metadata"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "java.lang.String"
    ],
    "method": "setMetadata",
    "id": "org.bukkit.block.Structure#setMetadata(java.lang.String)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_HOWL",
    "id": "org.bukkit.Sound#ENTITY_WOLF_HOWL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the display slot this objective is displayed at.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getDisplaySlot",
    "id": "org.bukkit.scoreboard.Objective#getDisplaySlot()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "POLISHED_GRANITE_SLAB",
    "id": "org.bukkit.Material#POLISHED_GRANITE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Middle section.",
    "static": true,
    "field": "MIDDLE",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#MIDDLE",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "spigot",
    "id": "org.bukkit.inventory.meta.BookMeta#spigot()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "org.bukkit.inventory.meta.BookMeta.Spigot"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_SPORE_BLOSSOM_STEP",
    "id": "org.bukkit.Sound#BLOCK_SPORE_BLOSSOM_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The dragon will fly to the vicinity of the portal and die.",
    "static": true,
    "field": "DYING",
    "id": "org.bukkit.entity.EnderDragon.Phase#DYING",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_CARPET_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MOSS_CARPET_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns a list of patterns on this banner",
    "param-names": ["BannerMeta"],
    "param-types": ["org.bukkit.inventory.meta.BannerMeta"],
    "method": "getPatterns",
    "id": "org.bukkit.inventory.meta.BannerMeta#getPatterns()",
    "class": "org.bukkit.inventory.meta.BannerMeta",
    "return": "java.util.List"
  },
  {
    "descr": "Returns which side is changed.",
    "method": "getSide",
    "id": "org.bukkit.event.block.SignChangeEvent#getSide()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "org.bukkit.block.sign.Side"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Removes multiple instances of an ingredient from the list. If there are\\nless instances then specified, all will be removed. If the data value\\nis -1, only ingredients with a -1 data value will be removed.",
    "param-names": [
      "ShapelessRecipe",
      "Count",
      "Ingredient",
      "Rawdata"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "int",
      "org.bukkit.Material",
      "int"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(int,org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "static": true,
    "field": "CHARCOAL",
    "id": "org.bukkit.CoalType#CHARCOAL",
    "class": "org.bukkit.CoalType",
    "return": "org.bukkit.CoalType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockExplodeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Whether fall damage is enabled or not.",
    "static": true,
    "field": "FALL_DAMAGE",
    "id": "org.bukkit.GameRule#FALL_DAMAGE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Put the given ItemStacks into the storage slots",
    "param-names": [
      "Inventory",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setStorageContents",
    "id": "org.bukkit.inventory.Inventory#setStorageContents(org.bukkit.inventory.ItemStack[])",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Clear weather, clouds but no rain.",
    "static": true,
    "field": "CLEAR",
    "id": "org.bukkit.WeatherType#CLEAR",
    "class": "org.bukkit.WeatherType",
    "return": "org.bukkit.WeatherType"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_SPRUCE_LOG",
    "id": "org.bukkit.Material#STRIPPED_SPRUCE_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityTargetEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the player who initiated the conversion.\\n\\nThis has no effect if this entity isn't converting currently.",
    "param-names": [
      "ZombieVillager",
      "Conversion Player"
    ],
    "param-types": [
      "org.bukkit.entity.ZombieVillager",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "setConversionPlayer",
    "id": "org.bukkit.entity.ZombieVillager#setConversionPlayer(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.entity.ZombieVillager"
  },
  {
    "id": "org.bukkit.map.MapFont#MapFont()",
    "class": "org.bukkit.map.MapFont"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Inner corner stair block with higher left side.",
    "static": true,
    "field": "INNER_LEFT",
    "id": "org.bukkit.block.data.type.Stairs.Shape#INNER_LEFT",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_BRICKS_STEP",
    "id": "org.bukkit.Sound#BLOCK_MUD_BRICKS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum allowed value of the 'bites' property.",
    "param-names": ["Cake"],
    "param-types": ["org.bukkit.block.data.type.Cake"],
    "method": "getMaximumBites",
    "id": "org.bukkit.block.data.type.Cake#getMaximumBites()",
    "class": "org.bukkit.block.data.type.Cake",
    "return": "int"
  },
  {
    "descr": "Sets the number of dark ticks remaining for this squid.\\nBravo Six will go dark for 100 ticks (5 seconds) if damaged.",
    "param-names": [
      "GlowSquid",
      "Dark Ticks Remaining"
    ],
    "param-types": [
      "org.bukkit.entity.GlowSquid",
      "int"
    ],
    "method": "setDarkTicksRemaining",
    "id": "org.bukkit.entity.GlowSquid#setDarkTicksRemaining(int)",
    "class": "org.bukkit.entity.GlowSquid"
  },
  {
    "descr": "This event is called whenever a player attempts to put a fish in a bucket.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent"
  },
  {
    "descr": "Gets the height of the living entity's eyes above its Location.",
    "param-names": [
      "LivingEntity",
      "Ignore Pose"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "getEyeHeight",
    "id": "org.bukkit.entity.LivingEntity#getEyeHeight(boolean)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "double"
  },
  {
    "descr": "Send block damage. This fakes block break progress at a certain location\\nsourced by the provided entity id. This will not actually change the block's\\nbreak progress in any way.\\n\\nAt the same location for each unique damage source sent to the player, a\\nseparate damage overlay will be displayed with the given progress. This allows\\nfor block damage at different progress from multiple entities at once.",
    "param-names": [
      "Player",
      "Loc",
      "Progress",
      "Source Id"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "float",
      "int"
    ],
    "method": "sendBlockDamage",
    "id": "org.bukkit.entity.Player#sendBlockDamage(org.bukkit.Location,float,int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Called when an entity causes another entity to combust.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent"
  },
  {
    "descr": "Gets the value of the 'drag' property.",
    "param-names": ["BubbleColumn"],
    "param-types": ["org.bukkit.block.data.type.BubbleColumn"],
    "method": "isDrag",
    "id": "org.bukkit.block.data.type.BubbleColumn#isDrag()",
    "class": "org.bukkit.block.data.type.BubbleColumn",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_CAVE_VINES_STEP",
    "id": "org.bukkit.Sound#BLOCK_CAVE_VINES_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This event is called whenever a player captures an entity in a bucket.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent"
  },
  {
    "descr": "Resets the border to default values.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "reset",
    "id": "org.bukkit.WorldBorder#reset()",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "static": true,
    "field": "RAM_COOLDOWN_TICKS",
    "id": "org.bukkit.entity.memory.MemoryKey#RAM_COOLDOWN_TICKS",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_TENDRIL_CLICKS",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_TENDRIL_CLICKS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block this projectile source belongs to.",
    "param-names": ["BlockProjectileSource"],
    "param-types": ["org.bukkit.projectiles.BlockProjectileSource"],
    "method": "getBlock",
    "id": "org.bukkit.projectiles.BlockProjectileSource#getBlock()",
    "class": "org.bukkit.projectiles.BlockProjectileSource",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "CRACKED_NETHER_BRICKS",
    "id": "org.bukkit.Material#CRACKED_NETHER_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_FALL",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sends this sender a message",
    "param-names": [
      "CommandSender",
      "Sender",
      "Message"
    ],
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.util.UUID",
      "java.lang.String"
    ],
    "method": "sendMessage",
    "id": "org.bukkit.command.CommandSender#sendMessage(java.util.UUID,java.lang.String)",
    "class": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Gets the entity's absorption amount.",
    "param-names": ["Damageable"],
    "param-types": ["org.bukkit.entity.Damageable"],
    "method": "getAbsorptionAmount",
    "id": "org.bukkit.entity.Damageable#getAbsorptionAmount()",
    "class": "org.bukkit.entity.Damageable",
    "return": "double"
  },
  {
    "static": true,
    "field": "PUMPKIN",
    "id": "org.bukkit.Material#PUMPKIN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The crystal beams are directed upwards into the sky.",
    "static": true,
    "field": "START",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#START",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "param-names": ["Sheep"],
    "param-types": ["org.bukkit.entity.Sheep"],
    "method": "isSheared",
    "id": "org.bukkit.entity.Sheep#isSheared()",
    "class": "org.bukkit.entity.Sheep",
    "return": "boolean"
  },
  {
    "descr": "Sets the resultant food level that the entity involved in this event\\nshould be set to",
    "param-names": ["Level"],
    "param-types": ["int"],
    "method": "setFoodLevel",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#setFoodLevel(int)",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent"
  },
  {
    "descr": "Gets the face to which the shulker is attached.",
    "param-names": ["Shulker"],
    "param-types": ["org.bukkit.entity.Shulker"],
    "method": "getAttachedFace",
    "id": "org.bukkit.entity.Shulker#getAttachedFace()",
    "class": "org.bukkit.entity.Shulker",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Called when a block is ignited. If you want to catch when a Player places\\nfire, you need to use BlockPlaceEvent.\\n\\nIf a Block Ignite event is cancelled, the block will not be ignited.",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent"
  },
  {
    "static": true,
    "field": "VILLAGE_ARMORER",
    "id": "org.bukkit.loot.LootTables#VILLAGE_ARMORER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the scoreboard for the associated objective.",
    "param-names": ["Score"],
    "param-types": ["org.bukkit.scoreboard.Score"],
    "method": "getScoreboard",
    "id": "org.bukkit.scoreboard.Score#getScoreboard()",
    "class": "org.bukkit.scoreboard.Score",
    "return": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "descr": "BlockData: StructureBlock",
    "static": true,
    "field": "STRUCTURE_BLOCK",
    "id": "org.bukkit.Material#STRUCTURE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "boolean"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Hides a player from this player",
    "param-names": [
      "Player",
      "Plugin",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.plugin.Plugin",
      "org.bukkit.entity.Player"
    ],
    "method": "hidePlayer",
    "id": "org.bukkit.entity.Player#hidePlayer(org.bukkit.plugin.Plugin,org.bukkit.entity.Player)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.TimeSkipEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent"
  },
  {
    "descr": "Gets the value of the 'leaves' property.",
    "param-names": ["Bamboo"],
    "param-types": ["org.bukkit.block.data.type.Bamboo"],
    "method": "getLeaves",
    "id": "org.bukkit.block.data.type.Bamboo#getLeaves()",
    "class": "org.bukkit.block.data.type.Bamboo",
    "return": "org.bukkit.block.data.type.Bamboo.Leaves"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the type of this block\\n\\nNote that applyPhysics = false is not in general safe. It should only be\\nused when you need to avoid triggering a physics update of neighboring\\nblocks, for example when creating a Bisected block. If you are\\nusing a custom populator, then this parameter may also be required to\\nprevent triggering infinite chunk loads on border blocks. This method\\nshould NOT be used to \"hack\" physics by placing blocks in impossible\\nlocations. Such blocks are liable to be removed on various events such as\\nworld upgrades. Furthermore setting large amounts of such blocks in close\\nproximity may overload the server physics engine if an update is\\ntriggered at a later point. If this occurs, the resulting behavior is\\nundefined.",
    "param-names": [
      "Block",
      "Type",
      "Apply Physics"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.Material",
      "boolean"
    ],
    "method": "setType",
    "id": "org.bukkit.block.Block#setType(org.bukkit.Material,boolean)",
    "class": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the associated data value representing this species",
    "param-names": ["GrassSpecies"],
    "param-types": ["org.bukkit.GrassSpecies"],
    "method": "getData",
    "id": "org.bukkit.GrassSpecies#getData()",
    "class": "org.bukkit.GrassSpecies",
    "return": "byte"
  },
  {
    "static": true,
    "field": "UI_BUTTON_CLICK",
    "id": "org.bukkit.Sound#UI_BUTTON_CLICK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Warden.AngerLevel#values()",
    "class": "org.bukkit.entity.Warden.AngerLevel",
    "return": "org.bukkit.entity.Warden.AngerLevel[]"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_4",
    "id": "org.bukkit.Material#LEGACY_RECORD_4",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "VILLAGE_TOOLSMITH",
    "id": "org.bukkit.loot.LootTables#VILLAGE_TOOLSMITH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_GILDED_BLACKSTONE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_GILDED_BLACKSTONE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "PRISMARINE_SLAB",
    "id": "org.bukkit.Material#PRISMARINE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item which will be revealed when the sand is fully brushed away\\nand uncovered.",
    "param-names": [
      "BrushableBlock",
      "Item"
    ],
    "param-types": [
      "org.bukkit.block.BrushableBlock",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.block.BrushableBlock#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.BrushableBlock"
  },
  {
    "descr": "The wire travels flat from this face and into the adjacent block.",
    "static": true,
    "field": "SIDE",
    "id": "org.bukkit.block.data.type.RedstoneWire.Connection#SIDE",
    "class": "org.bukkit.block.data.type.RedstoneWire.Connection",
    "return": "org.bukkit.block.data.type.RedstoneWire.Connection"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if the following slot is occupied.",
    "param-names": [
      "ChiseledBookshelf",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.block.data.type.ChiseledBookshelf",
      "int"
    ],
    "method": "isSlotOccupied",
    "id": "org.bukkit.block.data.type.ChiseledBookshelf#isSlotOccupied(int)",
    "class": "org.bukkit.block.data.type.ChiseledBookshelf",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MANGROVE_PLANKS",
    "id": "org.bukkit.Material#MANGROVE_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.boss.BarFlag#valueOf(java.lang.String)",
    "class": "org.bukkit.boss.BarFlag",
    "return": "org.bukkit.boss.BarFlag"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_FALL",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the current ingredient for brewing.",
    "param-names": [
      "BrewerInventory",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.BrewerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setIngredient",
    "id": "org.bukkit.inventory.BrewerInventory#setIngredient(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.BrewerInventory"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.SmithItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_MALL",
    "id": "org.bukkit.Material#MUSIC_DISC_MALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_BAT_LOOP",
    "id": "org.bukkit.Sound#ENTITY_BAT_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an iron golem is spawned by being built",
    "static": true,
    "field": "BUILD_IRONGOLEM",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#BUILD_IRONGOLEM",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets whether the map is locked or not.\\nA locked map may not be explored further.",
    "param-names": [
      "MapView",
      "Locked"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "boolean"
    ],
    "method": "setLocked",
    "id": "org.bukkit.map.MapView#setLocked(boolean)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "static": true,
    "field": "SIDEBAR_DARK_AQUA",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_DARK_AQUA",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "ENTITY_ARROW_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_ARROW_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the minimum components of two vectors.",
    "param-names": [
      "V1",
      "V2"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "getMinimum",
    "id": "org.bukkit.util.Vector#getMinimum(org.bukkit.util.Vector,org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SNOW_GOLEM_HURT",
    "id": "org.bukkit.Sound#ENTITY_SNOW_GOLEM_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the metadata for this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getData",
    "id": "org.bukkit.block.Block#getData()",
    "class": "org.bukkit.block.Block",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_TRAPDOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_TRAPDOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_BEACON_DEACTIVATE",
    "id": "org.bukkit.Sound#BLOCK_BEACON_DEACTIVATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sound of zombies chewing on iron doors.",
    "static": true,
    "field": "ZOMBIE_CHEW_IRON_DOOR",
    "id": "org.bukkit.Effect#ZOMBIE_CHEW_IRON_DOOR",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Villager.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Get the block data at the location.",
    "param-names": [
      "BlockChangeDelegate",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.BlockChangeDelegate",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockData",
    "id": "org.bukkit.BlockChangeDelegate#getBlockData(int,int,int)",
    "class": "org.bukkit.BlockChangeDelegate",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Find the closest nearby structure of a given StructureType.\\nFinding unexplored structures can, and will, block if the world is\\nlooking in chunks that gave not generated yet. This can lead to the world\\ntemporarily freezing while locating an unexplored structure.\\n\\nThe radius is not a rigid square radius. Each structure may alter\\nhow many chunks to check for each iteration. Do not assume that only a\\nradius x radius chunk area will be checked. For example,\\nStructureType#WOODLAND_MANSION can potentially check up to 20,000\\nblocks away (or more) regardless of the radius used.\\n\\nThis will not load or generate chunks. This can also lead to\\ninstances where the server can hang if you are only looking for\\nunexplored structures. This is because it will keep looking further and\\nfurther out in order to find the structure.",
    "param-names": [
      "World",
      "Origin",
      "Structure Type",
      "Radius",
      "Find Unexplored"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.StructureType",
      "int",
      "boolean"
    ],
    "method": "locateNearestStructure",
    "id": "org.bukkit.World#locateNearestStructure(org.bukkit.Location,org.bukkit.StructureType,int,boolean)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the type of slot that was clicked.",
    "method": "getSlotType",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getSlotType()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_CARPET_HIT",
    "id": "org.bukkit.Sound#BLOCK_MOSS_CARPET_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "POPPED_CHORUS_FRUIT",
    "id": "org.bukkit.Material#POPPED_CHORUS_FRUIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_LEAVES_STEP",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_LEAVES_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent"
  },
  {
    "static": true,
    "field": "LEGACY_EYE_OF_ENDER",
    "id": "org.bukkit.Material#LEGACY_EYE_OF_ENDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Partial tilt.",
    "static": true,
    "field": "PARTIAL",
    "id": "org.bukkit.block.data.type.BigDripleaf.Tilt#PARTIAL",
    "class": "org.bukkit.block.data.type.BigDripleaf.Tilt",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType",
    "return": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType"
  },
  {
    "static": true,
    "field": "LEGACY_WRITTEN_BOOK",
    "id": "org.bukkit.Material#LEGACY_WRITTEN_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the color represented by the specified color code",
    "param-names": ["Code"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByChar",
    "id": "org.bukkit.ChatColor#getByChar(java.lang.String)",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Specify the type of the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Type"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "org.bukkit.FireworkEffect.Type"
    ],
    "method": "with",
    "id": "org.bukkit.FireworkEffect.Builder#with(org.bukkit.FireworkEffect.Type)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "static": true,
    "field": "CAVE_SPIDER_SPAWN_EGG",
    "id": "org.bukkit.Material#CAVE_SPIDER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the players current experience level",
    "param-names": [
      "Player",
      "Level"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "int"
    ],
    "method": "setLevel",
    "id": "org.bukkit.entity.Player#setLevel(int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LILY_OF_THE_VALLEY",
    "id": "org.bukkit.Material#LILY_OF_THE_VALLEY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.WorldType#valueOf(java.lang.String)",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "NETHER_WART",
    "id": "org.bukkit.Material#NETHER_WART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getChannel",
    "id": "org.bukkit.event.player.PlayerRegisterChannelEvent#getChannel()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the value of the 'power' property.",
    "param-names": ["AnaloguePowerable"],
    "param-types": ["org.bukkit.block.data.AnaloguePowerable"],
    "method": "getPower",
    "id": "org.bukkit.block.data.AnaloguePowerable#getPower()",
    "class": "org.bukkit.block.data.AnaloguePowerable",
    "return": "int"
  },
  {
    "descr": "This event is fired when the spawn point of the player is changed.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent"
  },
  {
    "static": true,
    "field": "GLITTER",
    "id": "org.bukkit.entity.TropicalFish.Pattern#GLITTER",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the entity that was hit, if it was an entity that was hit.",
    "method": "getHitEntity",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getHitEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Server entity types.",
    "static": true,
    "field": "ENTITY_TYPE",
    "id": "org.bukkit.Registry#ENTITY_TYPE",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "The entity that was killed.",
    "param-names": [
      "LootContext.Builder",
      "Looted Entity"
    ],
    "param-types": [
      "org.bukkit.loot.LootContext.Builder",
      "org.bukkit.entity.Entity"
    ],
    "method": "lootedEntity",
    "id": "org.bukkit.loot.LootContext.Builder#lootedEntity(org.bukkit.entity.Entity)",
    "class": "org.bukkit.loot.LootContext.Builder",
    "return": "org.bukkit.loot.LootContext.Builder"
  },
  {
    "descr": "Return a EulerAngle which is the result of changing\\nthe z axis to the passed angle",
    "param-names": [
      "EulerAngle",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.EulerAngle",
      "double"
    ],
    "method": "setZ",
    "id": "org.bukkit.util.EulerAngle#setZ(double)",
    "class": "org.bukkit.util.EulerAngle",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "static": true,
    "field": "POLAR_BEAR_SPAWN_EGG",
    "id": "org.bukkit.Material#POLAR_BEAR_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the EntityType if #getStatistic() getStatistic() is an\\nentity statistic otherwise returns null.",
    "method": "getEntityType",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "LLAMA_SPIT",
    "id": "org.bukkit.entity.EntityType#LLAMA_SPIT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockBreakEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Selects entities using the given Vanilla selector.\\n\\nNo guarantees are made about the selector format, other than they match\\nthe Vanilla format for the active Minecraft version.\\n\\nUsually a selector will start with '@', unless selecting a Player in\\nwhich case it may simply be the Player's name or UUID.\\n\\nNote that in Vanilla, elevated permissions are usually required to use\\n'@' selectors, but this method should not check such permissions from the\\nsender.",
    "param-names": [
      "Sender",
      "Selector"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.String"
    ],
    "method": "selectEntities",
    "id": "org.bukkit.Bukkit#selectEntities(org.bukkit.command.CommandSender,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.List"
  },
  {
    "descr": "Player mines a block",
    "static": true,
    "field": "BLOCK_MINED",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#BLOCK_MINED",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_TERRACOTTA",
    "id": "org.bukkit.Material#LIGHT_GRAY_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockFadeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "descr": "Get the amount of ticks the bee cannot enter the hive for.",
    "param-names": ["Bee"],
    "param-types": ["org.bukkit.entity.Bee"],
    "method": "getCannotEnterHiveTicks",
    "id": "org.bukkit.entity.Bee#getCannotEnterHiveTicks()",
    "class": "org.bukkit.entity.Bee",
    "return": "int"
  },
  {
    "descr": "Sets the location that this entity moved to",
    "param-names": ["To"],
    "param-types": ["org.bukkit.Location"],
    "method": "setTo",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#setTo(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the color of the armor.",
    "param-names": [
      "LeatherArmorMeta",
      "Color"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.LeatherArmorMeta",
      "org.bukkit.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.inventory.meta.LeatherArmorMeta#setColor(org.bukkit.Color)",
    "class": "org.bukkit.inventory.meta.LeatherArmorMeta"
  },
  {
    "descr": "Gets the player who performed the click.",
    "method": "getWhoClicked",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getWhoClicked()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the type of this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "getRawType",
    "id": "org.bukkit.map.MapCursor#getRawType()",
    "class": "org.bukkit.map.MapCursor",
    "return": "byte"
  },
  {
    "descr": "Add a cursor to the collection.",
    "param-names": [
      "MapCursorCollection",
      "X",
      "Y",
      "Direction",
      "Type",
      "Visible"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "int",
      "int",
      "byte",
      "byte",
      "boolean"
    ],
    "method": "addCursor",
    "id": "org.bukkit.map.MapCursorCollection#addCursor(int,int,byte,byte,boolean)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTED_DIRT_STEP",
    "id": "org.bukkit.Sound#BLOCK_ROOTED_DIRT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "VILLAGER",
    "id": "org.bukkit.loot.LootTables#VILLAGER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the value of the 'mode' property.",
    "param-names": [
      "StructureBlock",
      "Mode"
    ],
    "param-types": [
      "org.bukkit.block.data.type.StructureBlock",
      "org.bukkit.block.data.type.StructureBlock.Mode"
    ],
    "method": "setMode",
    "id": "org.bukkit.block.data.type.StructureBlock#setMode(org.bukkit.block.data.type.StructureBlock.Mode)",
    "class": "org.bukkit.block.data.type.StructureBlock"
  },
  {
    "descr": "Sets the period of time (in ticks) before this entity can use a portal.",
    "param-names": [
      "Entity",
      "Cooldown"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "int"
    ],
    "method": "setPortalCooldown",
    "id": "org.bukkit.entity.Entity#setPortalCooldown(int)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LLAMA",
    "id": "org.bukkit.loot.LootTables#LLAMA",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCKS",
    "id": "org.bukkit.SoundCategory#BLOCKS",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "static": true,
    "field": "LEGACY_FROSTED_ICE",
    "id": "org.bukkit.Material#LEGACY_FROSTED_ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent"
  },
  {
    "descr": "Used to format chat for chat preview. If this event is used, then the result\\nof the corresponding AsyncPlayerChatEvent must be formatted in\\nthe same way.",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent"
  },
  {
    "descr": "Check whether or not the first dragon has been killed already.",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "hasBeenPreviouslyKilled",
    "id": "org.bukkit.boss.DragonBattle#hasBeenPreviouslyKilled()",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_BLAZE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_BLAZE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.server.TabCompleteEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_VILLAGER_HURT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DOWN_WEST",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#DOWN_WEST",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "Sets the armor stand's left leg's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": [
      "ArmorStand",
      "Pose"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.util.EulerAngle"
    ],
    "method": "setLeftLegPose",
    "id": "org.bukkit.entity.ArmorStand#setLeftLegPose(org.bukkit.util.EulerAngle)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Gets whether the ClickType for this event indicates that the key was\\npressed down when the click was made.",
    "method": "isShiftClick",
    "id": "org.bukkit.event.inventory.SmithItemEvent#isShiftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "HORSE",
    "id": "org.bukkit.loot.LootTables#HORSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.StructureBlock.Mode#values()",
    "class": "org.bukkit.block.data.type.StructureBlock.Mode",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode[]"
  },
  {
    "static": true,
    "field": "LEGACY_ENDER_PEARL",
    "id": "org.bukkit.Material#LEGACY_ENDER_PEARL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_EMPTY_FISH",
    "id": "org.bukkit.Sound#ITEM_BUCKET_EMPTY_FISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_TOTEM",
    "id": "org.bukkit.Material#LEGACY_TOTEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the block face is being powered by Redstone.",
    "param-names": [
      "Block",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace"
    ],
    "method": "isBlockFacePowered",
    "id": "org.bukkit.block.Block#isBlockFacePowered(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Sound#valueOf(java.lang.String)",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_COW_MILK",
    "id": "org.bukkit.Sound#ENTITY_COW_MILK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a BanEntry by target.",
    "param-names": [
      "BanList",
      "Target"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.Object"
    ],
    "method": "getBanEntry",
    "id": "org.bukkit.BanList#getBanEntry(T)",
    "class": "org.bukkit.BanList",
    "return": "org.bukkit.BanEntry"
  },
  {
    "static": true,
    "field": "LEGACY_MAGMA",
    "id": "org.bukkit.Material#LEGACY_MAGMA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entity teleported as a result of chorus fruit or as an enderman",
    "static": true,
    "field": "TELEPORT_ENDER",
    "id": "org.bukkit.EntityEffect#TELEPORT_ENDER",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "This is the collection of completions for this event.",
    "method": "getTabCompletions",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getTabCompletions()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "java.util.Collection"
  },
  {
    "descr": "Makes this Creeper explode instantly.\\nThe resulting explosion can be cancelled by an\\norg.bukkit.event.entity.ExplosionPrimeEvent and obeys the mob\\ngriefing gamerule.",
    "param-names": ["Creeper"],
    "param-types": ["org.bukkit.entity.Creeper"],
    "method": "explode",
    "id": "org.bukkit.entity.Creeper#explode()",
    "class": "org.bukkit.entity.Creeper"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.SignChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the chance of the off hand item being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getItemInOffHandDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getItemInOffHandDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "descr": "BlockData: ChiseledBookshelf",
    "static": true,
    "field": "CHISELED_BOOKSHELF",
    "id": "org.bukkit.Material#CHISELED_BOOKSHELF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COW",
    "id": "org.bukkit.loot.LootTables#COW",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "MOSSY_COBBLESTONE_STAIRS",
    "id": "org.bukkit.Material#MOSSY_COBBLESTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_CHICKEN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_CHICKEN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Entity breaks item in main hand",
    "static": true,
    "field": "BREAK_EQUIPMENT_MAIN_HAND",
    "id": "org.bukkit.EntityEffect#BREAK_EQUIPMENT_MAIN_HAND",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Subtracts the location by a vector.",
    "param-names": [
      "Location",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.util.Vector"
    ],
    "method": "subtract",
    "id": "org.bukkit.Location#subtract(org.bukkit.util.Vector)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockDropItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Creates an empty inventory of type InventoryType#CHEST with the\\nspecified size.",
    "param-names": [
      "Owner",
      "Size"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.inventory.InventoryHolder",
      "int"
    ],
    "method": "createInventory",
    "id": "org.bukkit.Bukkit#createInventory(org.bukkit.inventory.InventoryHolder,int)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "GRAY_SHULKER_BOX",
    "id": "org.bukkit.Material#GRAY_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "boolean"
  },
  {
    "descr": "The combuster can be lava or a block that is on fire.\\n\\nWARNING: block may be null.",
    "method": "getCombuster",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getCombuster()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Decreases the rate of air loss whilst underwater",
    "static": true,
    "field": "OXYGEN",
    "id": "org.bukkit.enchantments.Enchantment#OXYGEN",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Get the hand used to consume the item.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent"
  },
  {
    "static": true,
    "field": "MOSS_CARPET",
    "id": "org.bukkit.Material#MOSS_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the list of blocks that would have been removed or were removed\\nfrom the explosion event.",
    "method": "blockList",
    "id": "org.bukkit.event.block.BlockExplodeEvent#blockList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "MANGROVE_FENCE",
    "id": "org.bukkit.Material#MANGROVE_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the currently displayed player list header and footer for this\\nplayer.",
    "param-names": [
      "Player",
      "Header",
      "Footer"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "setPlayerListHeaderFooter",
    "id": "org.bukkit.entity.Player#setPlayerListHeaderFooter(java.lang.String,java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the current kick message that will be used if getResult() !=\\nResult.ALLOWED",
    "method": "getKickMessage",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getKickMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "WARDEN",
    "id": "org.bukkit.entity.EntityType#WARDEN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Whether to announce in the chat when this advancement has been completed.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "shouldAnnounceChat",
    "id": "org.bukkit.advancement.AdvancementDisplay#shouldAnnounceChat()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_MANGROVE_WOOD",
    "id": "org.bukkit.Material#STRIPPED_MANGROVE_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the player who ignited this block",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_CROPS",
    "id": "org.bukkit.Material#LEGACY_CROPS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE",
    "id": "org.bukkit.Sound#BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_LINGERING_POTION",
    "id": "org.bukkit.Material#LEGACY_LINGERING_POTION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FISHING_BOBBER_SPLASH",
    "id": "org.bukkit.Sound#ENTITY_FISHING_BOBBER_SPLASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WINDSWEPT_GRAVELLY_HILLS",
    "id": "org.bukkit.block.Biome#WINDSWEPT_GRAVELLY_HILLS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Frog.Variant#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Frog.Variant",
    "return": "org.bukkit.entity.Frog.Variant"
  },
  {
    "descr": "Thrown when a player is fishing",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent"
  },
  {
    "static": true,
    "field": "VILLAGE_SAVANNA_HOUSE",
    "id": "org.bukkit.loot.LootTables#VILLAGE_SAVANNA_HOUSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_BELL",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_BELL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the X component.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "getX",
    "id": "org.bukkit.util.Vector#getX()",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_CAT",
    "id": "org.bukkit.Material#MUSIC_DISC_CAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BEEHIVE_EXIT",
    "id": "org.bukkit.Sound#BLOCK_BEEHIVE_EXIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Leucistic (pink) axolotl.",
    "static": true,
    "field": "LUCY",
    "id": "org.bukkit.entity.Axolotl.Variant#LUCY",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent"
  },
  {
    "descr": "Returns the reaction of the entity when moved by a piston.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getPistonMoveReaction",
    "id": "org.bukkit.entity.Entity#getPistonMoveReaction()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Called when we try to place a block, to see if we can build it here or not.\\n\\nNote:\\n\\nThe Block returned by getBlock() is the block we are trying to place\\non, not the block we are trying to place.\\nIf you want to figure out what is being placed, use #getMaterial() instead.\\n",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent"
  },
  {
    "static": true,
    "field": "TAIGA",
    "id": "org.bukkit.block.Biome#TAIGA",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Right-clicking the air",
    "static": true,
    "field": "RIGHT_CLICK_AIR",
    "id": "org.bukkit.event.block.Action#RIGHT_CLICK_AIR",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets whether or not worlds created or loaded with this creator will\\nhave structures.",
    "param-names": [
      "WorldCreator",
      "Generate"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "boolean"
    ],
    "method": "generateStructures",
    "id": "org.bukkit.WorldCreator#generateStructures(boolean)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Memory Keys.",
    "static": true,
    "field": "MEMORY_MODULE_TYPE",
    "id": "org.bukkit.Registry#MEMORY_MODULE_TYPE",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Returns the player's current time offset relative to server time, or\\nthe current player's fixed time if the player's time is absolute.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPlayerTimeOffset",
    "id": "org.bukkit.entity.Player#getPlayerTimeOffset()",
    "class": "org.bukkit.entity.Player",
    "return": "long"
  },
  {
    "descr": "Gets if the firework was shot at an angle (i.e. from a crossbow).\\nA firework which was not shot at an angle will fly straight upwards.",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "isShotAtAngle",
    "id": "org.bukkit.entity.Firework#isShotAtAngle()",
    "class": "org.bukkit.entity.Firework",
    "return": "boolean"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "Get the index of the currently selected recipe.",
    "param-names": ["MerchantInventory"],
    "param-types": ["org.bukkit.inventory.MerchantInventory"],
    "method": "getSelectedRecipeIndex",
    "id": "org.bukkit.inventory.MerchantInventory#getSelectedRecipeIndex()",
    "class": "org.bukkit.inventory.MerchantInventory",
    "return": "int"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "JUNGLE_LOG",
    "id": "org.bukkit.Material#JUNGLE_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the displayed block.",
    "param-names": [
      "BlockDisplay",
      "Block"
    ],
    "param-types": [
      "org.bukkit.entity.BlockDisplay",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlock",
    "id": "org.bukkit.entity.BlockDisplay#setBlock(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.entity.BlockDisplay"
  },
  {
    "static": true,
    "field": "BUNDLE",
    "id": "org.bukkit.FeatureFlag#BUNDLE",
    "class": "org.bukkit.FeatureFlag",
    "return": "org.bukkit.FeatureFlag"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Frog.Variant#values()",
    "class": "org.bukkit.entity.Frog.Variant",
    "return": "org.bukkit.entity.Frog.Variant[]"
  },
  {
    "descr": "Rotate clockwise by 90 degrees.",
    "param-names": ["Rotation"],
    "param-types": ["org.bukkit.Rotation"],
    "method": "rotateClockwise",
    "id": "org.bukkit.Rotation#rotateClockwise()",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Task or normal icons have a square icon frame.",
    "static": true,
    "field": "TASK",
    "id": "org.bukkit.advancement.AdvancementDisplayType#TASK",
    "class": "org.bukkit.advancement.AdvancementDisplayType",
    "return": "org.bukkit.advancement.AdvancementDisplayType"
  },
  {
    "descr": "Creates a new color object from an integer that contains the alpha, red,\\ngreen, and blue bytes.",
    "param-names": ["Argb"],
    "static": true,
    "param-types": ["int"],
    "method": "fromARGB",
    "id": "org.bukkit.Color#fromARGB(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "STICK",
    "id": "org.bukkit.Material#STICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the date the specified criteria was awarded.",
    "param-names": [
      "AdvancementProgress",
      "Criteria"
    ],
    "param-types": [
      "org.bukkit.advancement.AdvancementProgress",
      "java.lang.String"
    ],
    "method": "getDateAwarded",
    "id": "org.bukkit.advancement.AdvancementProgress#getDateAwarded(java.lang.String)",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "java.util.Date"
  },
  {
    "descr": "Get the entity that this is targeting.\\n\\nThis will be null in the case that the event is called when the mob\\nforgets its target.",
    "method": "getTarget",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getTarget()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Get the player that triggered the event",
    "method": "getPlayer",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "boolean"
  },
  {
    "descr": "Ruined portal.",
    "static": true,
    "field": "RUINED_PORTAL",
    "id": "org.bukkit.StructureType#RUINED_PORTAL",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Checks for the presence of custom potion effects.",
    "param-names": ["SuspiciousStewMeta"],
    "param-types": ["org.bukkit.inventory.meta.SuspiciousStewMeta"],
    "method": "hasCustomEffects",
    "id": "org.bukkit.inventory.meta.SuspiciousStewMeta#hasCustomEffects()",
    "class": "org.bukkit.inventory.meta.SuspiciousStewMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_INGOT",
    "id": "org.bukkit.Material#LEGACY_IRON_INGOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_CONVERTED_TO_STRAY",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_CONVERTED_TO_STRAY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "COPPER_ORE",
    "id": "org.bukkit.Material#COPPER_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "LIME_CANDLE_CAKE",
    "id": "org.bukkit.Material#LIME_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Add several fade colors to the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Colors"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "java.lang.Iterable"
    ],
    "method": "withFade",
    "id": "org.bukkit.FireworkEffect.Builder#withFade(java.lang.Iterable<?>)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "static": true,
    "field": "NAUTILUS_SHELL",
    "id": "org.bukkit.Material#NAUTILUS_SHELL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_TUBE_CORAL",
    "id": "org.bukkit.Material#DEAD_TUBE_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WITCH",
    "id": "org.bukkit.loot.LootTables#WITCH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "BAMBOO_DOOR",
    "id": "org.bukkit.Material#BAMBOO_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the map initialized in this event.",
    "method": "getMap",
    "id": "org.bukkit.event.server.MapInitializeEvent#getMap()",
    "event": true,
    "class": "org.bukkit.event.server.MapInitializeEvent",
    "return": "org.bukkit.map.MapView"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "descr": "Returns the angle on the y axis in radians",
    "param-names": ["EulerAngle"],
    "param-types": ["org.bukkit.util.EulerAngle"],
    "method": "getY",
    "id": "org.bukkit.util.EulerAngle#getY()",
    "class": "org.bukkit.util.EulerAngle",
    "return": "double"
  },
  {
    "descr": "Unloads a world with the given name.",
    "param-names": [
      "Name",
      "Save"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "boolean"
    ],
    "method": "unloadWorld",
    "id": "org.bukkit.Bukkit#unloadWorld(java.lang.String,boolean)",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Piglin is normally played when a Piglin Head is on top of the note block.",
    "static": true,
    "field": "PIGLIN",
    "id": "org.bukkit.Instrument#PIGLIN",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Return the block clicked",
    "method": "getBlockClicked",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getBlockClicked()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "CHEST",
    "id": "org.bukkit.inventory.EquipmentSlot#CHEST",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Gets a ban list for the supplied type.",
    "param-names": ["Type"],
    "static": true,
    "param-types": ["org.bukkit.BanList.Type"],
    "method": "getBanList",
    "id": "org.bukkit.Bukkit#<T>getBanList(org.bukkit.BanList.Type)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.BanList"
  },
  {
    "descr": "Sets whether this entity is a patrol leader.",
    "param-names": [
      "Raider",
      "Leader"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "boolean"
    ],
    "method": "setPatrolLeader",
    "id": "org.bukkit.entity.Raider#setPatrolLeader(boolean)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "static": true,
    "field": "ENTITY_CHICKEN_EGG",
    "id": "org.bukkit.Sound#ENTITY_CHICKEN_EGG",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns a MusicInstrument by a NamespacedKey.",
    "param-names": ["Namespaced Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getByKey",
    "id": "org.bukkit.MusicInstrument#getByKey(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_BRICKS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_BRICKS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_HORN_CORAL",
    "id": "org.bukkit.Material#DEAD_HORN_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_MILK",
    "id": "org.bukkit.Sound#ENTITY_GOAT_MILK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "END_MIDLANDS",
    "id": "org.bukkit.block.Biome#END_MIDLANDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getLocation",
    "id": "org.bukkit.block.DoubleChest#getLocation()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_ACTIVATE",
    "id": "org.bukkit.GameEvent#BLOCK_ACTIVATE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "SKULL_POTTERY_SHERD",
    "id": "org.bukkit.Material#SKULL_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'charges' property.",
    "param-names": [
      "RespawnAnchor",
      "Charges"
    ],
    "param-types": [
      "org.bukkit.block.data.type.RespawnAnchor",
      "int"
    ],
    "method": "setCharges",
    "id": "org.bukkit.block.data.type.RespawnAnchor#setCharges(int)",
    "class": "org.bukkit.block.data.type.RespawnAnchor"
  },
  {
    "descr": "Called when a Villager is about to restock one of its trades.\\n\\nIf this event passes, the villager will reset the\\nMerchantRecipe#getUses() uses of the affected #getRecipe() MerchantRecipe to 0.",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent"
  },
  {
    "descr": "Gets whether the ClickType for this event indicates that the key was\\npressed down when the click was made.",
    "method": "isShiftClick",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#isShiftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "boolean"
  },
  {
    "descr": "Damage caused in retaliation to another attack by the Thorns\\nenchantment.\\n\\nDamage: 1-4 (Thorns)",
    "static": true,
    "field": "THORNS",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#THORNS",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "LEGACY_ARROW",
    "id": "org.bukkit.Material#LEGACY_ARROW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ExpBottleEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent"
  },
  {
    "descr": "Check if the player currently has their hand raised (ie about to begin\\nblocking).",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "isHandRaised",
    "id": "org.bukkit.entity.HumanEntity#isHandRaised()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockExplodeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_12",
    "id": "org.bukkit.Material#LEGACY_RECORD_12",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COURBET",
    "id": "org.bukkit.Art#COURBET",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Set the list of trades currently available from this merchant.\\n\\nThis will not change the selected trades of players currently trading\\nwith this merchant.",
    "param-names": [
      "Merchant",
      "Recipes"
    ],
    "param-types": [
      "org.bukkit.inventory.Merchant",
      "java.util.List"
    ],
    "method": "setRecipes",
    "id": "org.bukkit.inventory.Merchant#setRecipes(java.util.List<org.bukkit.inventory.MerchantRecipe>)",
    "class": "org.bukkit.inventory.Merchant"
  },
  {
    "descr": "Gets the wood type of the boat.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getWoodType",
    "id": "org.bukkit.entity.Boat#getWoodType()",
    "class": "org.bukkit.entity.Boat",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "descr": "Gets the current agelock.",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.entity.Ageable"],
    "method": "getAgeLock",
    "id": "org.bukkit.entity.Ageable#getAgeLock()",
    "class": "org.bukkit.entity.Ageable",
    "return": "boolean"
  },
  {
    "descr": "Sets the llama's color.",
    "param-names": [
      "Llama",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.Llama",
      "org.bukkit.entity.Llama.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.entity.Llama#setColor(org.bukkit.entity.Llama.Color)",
    "class": "org.bukkit.entity.Llama"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the armor stand's right leg's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getRightLegPose",
    "id": "org.bukkit.entity.ArmorStand#getRightLegPose()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Get an instrument by its type ID.",
    "param-names": ["Type"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByType",
    "id": "org.bukkit.Instrument#getByType(byte)",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_BRICKS_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHER_BRICKS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates explosion at given coordinates with given power and optionally\\nsetting blocks on fire.",
    "param-names": [
      "World",
      "Loc",
      "Power",
      "Set Fire"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "float",
      "boolean"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(org.bukkit.Location,float,boolean)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Also not really a horse :)",
    "static": true,
    "field": "CAMEL",
    "id": "org.bukkit.entity.Horse.Variant#CAMEL",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "descr": "Checks if this is accepting Enchantment registrations.",
    "static": true,
    "method": "isAcceptingRegistrations",
    "id": "org.bukkit.enchantments.Enchantment#isAcceptingRegistrations()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the number of times this trade has been used.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getUses",
    "id": "org.bukkit.inventory.MerchantRecipe#getUses()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "int"
  },
  {
    "descr": "Sets if this interaction entity should trigger a response when interacted\\nwith.",
    "param-names": [
      "Interaction",
      "Response"
    ],
    "param-types": [
      "org.bukkit.entity.Interaction",
      "boolean"
    ],
    "method": "setResponsive",
    "id": "org.bukkit.entity.Interaction#setResponsive(boolean)",
    "class": "org.bukkit.entity.Interaction"
  },
  {
    "descr": "Gets the previous value of the statistic.",
    "method": "getPreviousValue",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getPreviousValue()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "int"
  },
  {
    "descr": "Sets the exit location that entities are teleported to when\\nthey enter the gateway portal.\\n\\nIf this block state is not placed the location's world has to be null.",
    "param-names": [
      "EndGateway",
      "Location"
    ],
    "param-types": [
      "org.bukkit.block.EndGateway",
      "org.bukkit.Location"
    ],
    "method": "setExitLocation",
    "id": "org.bukkit.block.EndGateway#setExitLocation(org.bukkit.Location)",
    "class": "org.bukkit.block.EndGateway"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_RIPTIDE_3",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_RIPTIDE_3",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets if the objective's scores can be modified directly by a plugin.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "isModifiable",
    "id": "org.bukkit.scoreboard.Objective#isModifiable()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "boolean"
  },
  {
    "descr": "Flipped upside-down + 45 degree rotation",
    "static": true,
    "field": "FLIPPED_45",
    "id": "org.bukkit.Rotation#FLIPPED_45",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Called when a player has completed all criteria in an advancement.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "boolean"
  },
  {
    "descr": "Entities related to Water Ambient, eg: Cod, PufferFish, Tropical Fish,\\nSalmon, etc.",
    "static": true,
    "field": "WATER_AMBIENT",
    "id": "org.bukkit.entity.SpawnCategory#WATER_AMBIENT",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Gets the ClickType for this event.\\n\\nThis is insulated against changes to the inventory by other plugins.",
    "method": "getClick",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "LEGACY_BLUE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_BLUE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the input of this furnace recipe.",
    "param-names": [
      "FurnaceRecipe",
      "Input"
    ],
    "param-types": [
      "org.bukkit.inventory.FurnaceRecipe",
      "org.bukkit.material.MaterialData"
    ],
    "method": "setInput",
    "id": "org.bukkit.inventory.FurnaceRecipe#setInput(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.FurnaceRecipe",
    "return": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "COCOA_BEANS",
    "id": "org.bukkit.Material#COCOA_BEANS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SPECKLED_MELON",
    "id": "org.bukkit.Material#LEGACY_SPECKLED_MELON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "CHERRY_PRESSURE_PLATE",
    "id": "org.bukkit.Material#CHERRY_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the address the ping is coming from.",
    "method": "getAddress",
    "id": "org.bukkit.event.server.ServerListPingEvent#getAddress()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "java.net.InetAddress"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "CHERRY_PLANKS",
    "id": "org.bukkit.Material#CHERRY_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_SPRUCE_SAPLING",
    "id": "org.bukkit.Material#POTTED_SPRUCE_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the stop reason.",
    "method": "getReason",
    "id": "org.bukkit.event.raid.RaidStopEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "descr": "Get a collection of all entities in this World matching the given\\nclass/interface",
    "param-names": [
      "World",
      "Classes"
    ],
    "param-types": [
      "org.bukkit.World",
      "java.lang.Class[]"
    ],
    "method": "getEntitiesByClass",
    "id": "org.bukkit.World#<T>getEntitiesByClass(java.lang.Class<T>...)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "RED_SHULKER_BOX",
    "id": "org.bukkit.Material#RED_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent"
  },
  {
    "descr": "Gets the limit for number of SpawnCategory entities that can spawn in a chunk in\\nthis world",
    "param-names": [
      "World",
      "Spawn Category"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.SpawnCategory"
    ],
    "method": "getSpawnLimit",
    "id": "org.bukkit.World#getSpawnLimit(org.bukkit.entity.SpawnCategory)",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_END_GATEWAY",
    "id": "org.bukkit.Material#LEGACY_END_GATEWAY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOLEM_DETECTED_RECENTLY",
    "id": "org.bukkit.entity.memory.MemoryKey#GOLEM_DETECTED_RECENTLY",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "The right mouse button.",
    "static": true,
    "field": "RIGHT",
    "id": "org.bukkit.event.inventory.ClickType#RIGHT",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CATALYST_STEP",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CATALYST_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks to see if an entity is swimming.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isSwimming",
    "id": "org.bukkit.entity.LivingEntity#isSwimming()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Dark Oak tree.",
    "static": true,
    "field": "DARK_OAK",
    "id": "org.bukkit.TreeType#DARK_OAK",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets the cause of spawn change.",
    "method": "getCause",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "descr": "Get the location of the end portal.\\nThis location will be at the center of the base (bottom) of the portal.",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "getEndPortalLocation",
    "id": "org.bukkit.boss.DragonBattle#getEndPortalLocation()",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Pling is normally played when a note block is on top of a glowstone block.",
    "static": true,
    "field": "PLING",
    "id": "org.bukkit.Instrument#PLING",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Returns the entity that damaged the defender.",
    "method": "getDamager",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getDamager()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "MOSS_BLOCK",
    "id": "org.bukkit.Material#MOSS_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'facing' property.",
    "param-names": ["Directional"],
    "param-types": ["org.bukkit.block.data.Directional"],
    "method": "getFacing",
    "id": "org.bukkit.block.data.Directional#getFacing()",
    "class": "org.bukkit.block.data.Directional",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "ITEM_BRUSH_BRUSHING_SAND_COMPLETE",
    "id": "org.bukkit.Sound#ITEM_BRUSH_BRUSHING_SAND_COMPLETE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Multiplies the vector by another.",
    "param-names": [
      "Vector",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "multiply",
    "id": "org.bukkit.util.Vector#multiply(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set's the team's ability to see name tags",
    "param-names": [
      "Team",
      "Visibility"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.scoreboard.NameTagVisibility"
    ],
    "method": "setNameTagVisibility",
    "id": "org.bukkit.scoreboard.Team#setNameTagVisibility(org.bukkit.scoreboard.NameTagVisibility)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "Sets the next phase for the dragon to perform.",
    "param-names": [
      "EnderDragon",
      "Phase"
    ],
    "param-types": [
      "org.bukkit.entity.EnderDragon",
      "org.bukkit.entity.EnderDragon.Phase"
    ],
    "method": "setPhase",
    "id": "org.bukkit.entity.EnderDragon#setPhase(org.bukkit.entity.EnderDragon.Phase)",
    "class": "org.bukkit.entity.EnderDragon"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_STEP",
    "id": "org.bukkit.Sound#BLOCK_MOSS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Launches a Projectile from the ProjectileSource with an\\ninitial velocity.",
    "param-names": [
      "ProjectileSource",
      "Projectile",
      "Velocity"
    ],
    "param-types": [
      "org.bukkit.projectiles.ProjectileSource",
      "java.lang.Class",
      "org.bukkit.util.Vector"
    ],
    "method": "launchProjectile",
    "id": "org.bukkit.projectiles.ProjectileSource#<T>launchProjectile(java.lang.Class<? extends T>,org.bukkit.util.Vector)",
    "class": "org.bukkit.projectiles.ProjectileSource",
    "return": "org.bukkit.entity.Projectile"
  },
  {
    "descr": "Returns the armor stand's head's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getHeadPose",
    "id": "org.bukkit.entity.ArmorStand#getHeadPose()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Gets the specified attribute instance from the object. This instance will\\nbe backed directly to the object and any changes will be visible at once.",
    "param-names": [
      "Attributable",
      "Attribute"
    ],
    "param-types": [
      "org.bukkit.attribute.Attributable",
      "org.bukkit.attribute.Attribute"
    ],
    "method": "getAttribute",
    "id": "org.bukkit.attribute.Attributable#getAttribute(org.bukkit.attribute.Attribute)",
    "class": "org.bukkit.attribute.Attributable",
    "return": "org.bukkit.attribute.AttributeInstance"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_PHANTOM",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_PHANTOM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Player walks one centimeter (does not effect exhaustion, but fires\\nnonetheless)",
    "static": true,
    "field": "WALK",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#WALK",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.inventory.ClickType#values()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType[]"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_FALL",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Outlines the entity so that it can be seen from afar.",
    "static": true,
    "field": "GLOWING",
    "id": "org.bukkit.potion.PotionEffectType#GLOWING",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Sets the message that the player will send. This message will be used\\nwith #getFormat().",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent"
  },
  {
    "static": true,
    "field": "INSTANT_HEAL",
    "id": "org.bukkit.potion.PotionType#INSTANT_HEAL",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Sets the value of the 'moisture' property.",
    "param-names": [
      "Farmland",
      "Moisture"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Farmland",
      "int"
    ],
    "method": "setMoisture",
    "id": "org.bukkit.block.data.type.Farmland#setMoisture(int)",
    "class": "org.bukkit.block.data.type.Farmland"
  },
  {
    "descr": "Called immediately prior to an entity being unleashed.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent"
  },
  {
    "static": true,
    "field": "PISTON_CONTRACT",
    "id": "org.bukkit.GameEvent#PISTON_CONTRACT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Gets the player this merchant is trading with, or null if it is not\\ncurrently trading.",
    "param-names": ["Merchant"],
    "param-types": ["org.bukkit.inventory.Merchant"],
    "method": "getTrader",
    "id": "org.bukkit.inventory.Merchant#getTrader()",
    "class": "org.bukkit.inventory.Merchant",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "param-names": ["Vibration.Destination.BlockDestination"],
    "param-types": ["org.bukkit.Vibration.Destination.BlockDestination"],
    "method": "getLocation",
    "id": "org.bukkit.Vibration.Destination.BlockDestination#getLocation()",
    "class": "org.bukkit.Vibration.Destination.BlockDestination",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sets the damage for the specified modifier.",
    "param-names": [
      "Type",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
      "double"
    ],
    "method": "setDamage",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#setDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier,double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENDERMAN_SPAWN_EGG",
    "id": "org.bukkit.Material#ENDERMAN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.CoalType#valueOf(java.lang.String)",
    "class": "org.bukkit.CoalType",
    "return": "org.bukkit.CoalType"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "OAK_WALL_SIGN",
    "id": "org.bukkit.Material#OAK_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DIAGONAL_RIGHT",
    "id": "org.bukkit.block.banner.PatternType#DIAGONAL_RIGHT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Display.Billboard#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Display.Billboard",
    "return": "org.bukkit.entity.Display.Billboard"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WHITE_CONCRETE_POWDER",
    "id": "org.bukkit.Material#WHITE_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GLOWSTONE_DUST",
    "id": "org.bukkit.Material#GLOWSTONE_DUST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Small black dots",
    "static": true,
    "field": "BLACK_DOTS",
    "id": "org.bukkit.entity.Horse.Style#BLACK_DOTS",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.PluginDisableEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.PluginDisableEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns all currently active PotionEffects on the living\\nentity.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getActivePotionEffects",
    "id": "org.bukkit.entity.LivingEntity#getActivePotionEffects()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_FLY",
    "id": "org.bukkit.Sound#ENTITY_PARROT_FLY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the DyeColor with the given wool data value.",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByWoolData",
    "id": "org.bukkit.DyeColor#getByWoolData(byte)",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Whether players in spectator mode can generate chunks.",
    "static": true,
    "field": "SPECTATORS_GENERATE_CHUNKS",
    "id": "org.bukkit.GameRule#SPECTATORS_GENERATE_CHUNKS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Sets the value of the 'open' property.",
    "param-names": [
      "Openable",
      "Open"
    ],
    "param-types": [
      "org.bukkit.block.data.Openable",
      "boolean"
    ],
    "method": "setOpen",
    "id": "org.bukkit.block.data.Openable#setOpen(boolean)",
    "class": "org.bukkit.block.data.Openable"
  },
  {
    "static": true,
    "field": "RED_CAT",
    "id": "org.bukkit.entity.Ocelot.Type#RED_CAT",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "descr": "The sound played when a smithing table is being used.",
    "static": true,
    "field": "SMITHING_TABLE_USE",
    "id": "org.bukkit.Effect#SMITHING_TABLE_USE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "GLISTERING_MELON_SLICE",
    "id": "org.bukkit.Material#GLISTERING_MELON_SLICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entity is using its tongue.",
    "static": true,
    "field": "USING_TONGUE",
    "id": "org.bukkit.entity.Pose#USING_TONGUE",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.Art#WITHER",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "BLOCK_BARREL_OPEN",
    "id": "org.bukkit.Sound#BLOCK_BARREL_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "STRAY_SPAWN_EGG",
    "id": "org.bukkit.Material#STRAY_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_HURT",
    "id": "org.bukkit.Sound#ENTITY_FROG_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_BUTTON_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_STONE_BUTTON_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "JUNGLE_FENCE",
    "id": "org.bukkit.Material#JUNGLE_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the current border center.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getCenter",
    "id": "org.bukkit.WorldBorder#getCenter()",
    "class": "org.bukkit.WorldBorder",
    "return": "org.bukkit.Location"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerQuitEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WALK_UNDER_WATER_ONE_CM",
    "id": "org.bukkit.Statistic#WALK_UNDER_WATER_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Creates a new (degenerate) bounding box with all corner coordinates at\\n0.",
    "id": "org.bukkit.util.BoundingBox#BoundingBox()",
    "class": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Increases the maximum health of an entity.",
    "static": true,
    "field": "HEALTH_BOOST",
    "id": "org.bukkit.potion.PotionEffectType#HEALTH_BOOST",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Holds information for player chat and commands",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent"
  },
  {
    "descr": "Gets the entity that is currently leading this entity.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getLeashHolder",
    "id": "org.bukkit.entity.LivingEntity#getLeashHolder()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Creates an empty inventory with the specified type and title. If the type\\nis InventoryType#CHEST, the new inventory has a size of 27;\\notherwise the new inventory has the normal size for its type.\\nIt should be noted that some inventory types do not support titles and\\nmay not render with said titles on the Minecraft client.\\n\\nInventoryType#WORKBENCH will not process crafting recipes if\\ncreated with this method. Use\\nPlayer#openWorkbench(Location, boolean) instead.\\n\\nInventoryType#ENCHANTING will not process ItemStacks\\nfor possible enchanting results. Use\\nPlayer#openEnchanting(Location, boolean) instead.",
    "param-names": [
      "Owner",
      "Type",
      "Title"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.inventory.InventoryHolder",
      "org.bukkit.event.inventory.InventoryType",
      "java.lang.String"
    ],
    "method": "createInventory",
    "id": "org.bukkit.Bukkit#createInventory(org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "IRON_BOOTS",
    "id": "org.bukkit.Material#IRON_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Uuid",
      "Name",
      "Amount",
      "Operation"
    ],
    "param-types": [
      "java.util.UUID",
      "java.lang.String",
      "double",
      "org.bukkit.attribute.AttributeModifier.Operation"
    ],
    "id": "org.bukkit.attribute.AttributeModifier#AttributeModifier(java.util.UUID,java.lang.String,double,org.bukkit.attribute.AttributeModifier.Operation)",
    "class": "org.bukkit.attribute.AttributeModifier"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "RESONATE_10",
    "id": "org.bukkit.GameEvent#RESONATE_10",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the sum of all raider's health.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getTotalHealth",
    "id": "org.bukkit.Raid#getTotalHealth()",
    "class": "org.bukkit.Raid",
    "return": "float"
  },
  {
    "descr": "Gets whether this explosion will create fire or not",
    "method": "getFire",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getFire()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the Inventory that the ItemStack is being put into",
    "method": "getDestination",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getDestination()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Add several fade colors to the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Colors"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "org.bukkit.Color[]"
    ],
    "method": "withFade",
    "id": "org.bukkit.FireworkEffect.Builder#withFade(org.bukkit.Color...)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "Called when a player respawns.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent"
  },
  {
    "static": true,
    "field": "BAKED_POTATO",
    "id": "org.bukkit.Material#BAKED_POTATO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_WEEPING_VINES_PLACE",
    "id": "org.bukkit.Sound#BLOCK_WEEPING_VINES_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_STEP",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_SPIT",
    "id": "org.bukkit.Sound#ENTITY_FOX_SPIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Restores the normal condition where the player's weather is controlled\\nby server conditions.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "resetPlayerWeather",
    "id": "org.bukkit.entity.Player#resetPlayerWeather()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Represents magical characters that change around randomly",
    "static": true,
    "field": "MAGIC",
    "id": "org.bukkit.ChatColor#MAGIC",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "MAGENTA_TERRACOTTA",
    "id": "org.bukkit.Material#MAGENTA_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_CAT",
    "id": "org.bukkit.Sound#MUSIC_DISC_CAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Player jumps",
    "static": true,
    "field": "JUMP",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#JUMP",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.PortalType#valueOf(java.lang.String)",
    "class": "org.bukkit.PortalType",
    "return": "org.bukkit.PortalType"
  },
  {
    "descr": "Set both the minimum (default 20) and maximum (default 80) amount\\nof ticks one has to wait for a fish to bite after appearing.",
    "param-names": [
      "FishHook",
      "Min",
      "Max"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "int",
      "int"
    ],
    "method": "setLureTime",
    "id": "org.bukkit.entity.FishHook#setLureTime(int,int)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns whether this vector is in an axis-aligned bounding box.\\n\\nThe minimum and maximum vectors given must be truly the minimum and\\nmaximum X, Y and Z components.",
    "param-names": [
      "Vector",
      "Min",
      "Max"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "isInAABB",
    "id": "org.bukkit.util.Vector#isInAABB(org.bukkit.util.Vector,org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ItemMergeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "boolean"
  },
  {
    "descr": "Entity hurt by thorns attack.",
    "static": true,
    "field": "THORNS_HURT",
    "id": "org.bukkit.EntityEffect#THORNS_HURT",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BANNER_GREEN",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_GREEN",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Add a flicker to the firework effect.",
    "param-names": ["FireworkEffect.Builder"],
    "param-types": ["org.bukkit.FireworkEffect.Builder"],
    "method": "withFlicker",
    "id": "org.bukkit.FireworkEffect.Builder#withFlicker()",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The arrow can be picked up.",
    "static": true,
    "field": "ALLOWED",
    "id": "org.bukkit.entity.AbstractArrow.PickupStatus#ALLOWED",
    "class": "org.bukkit.entity.AbstractArrow.PickupStatus",
    "return": "org.bukkit.entity.AbstractArrow.PickupStatus"
  },
  {
    "static": true,
    "field": "LEGACY_LOG_2",
    "id": "org.bukkit.Material#LEGACY_LOG_2",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Map"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.FireworkEffect#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.FireworkEffect",
    "return": "org.bukkit.configuration.serialization.ConfigurationSerializable"
  },
  {
    "descr": "Gets if the entity is fully frozen (it has been in powdered snow for max\\nfreeze ticks).",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isFrozen",
    "id": "org.bukkit.entity.Entity#isFrozen()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BRINELY",
    "id": "org.bukkit.entity.TropicalFish.Pattern#BRINELY",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Represents black dye.",
    "static": true,
    "field": "BLACK",
    "id": "org.bukkit.DyeColor#BLACK",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityTameEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerChangedWorldEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "SALMON",
    "id": "org.bukkit.entity.EntityType#SALMON",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns if the new potion effect will override the old potion effect\\n(Only applicable for the CHANGED Action).",
    "method": "isOverride",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#isOverride()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "boolean"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the gray team.",
    "static": true,
    "field": "KILLED_BY_TEAM_GRAY",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_GRAY",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.StructureGrowEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.ArmorStand.LockType#values()",
    "class": "org.bukkit.entity.ArmorStand.LockType",
    "return": "org.bukkit.entity.ArmorStand.LockType[]"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.GrassSpecies#valueOf(java.lang.String)",
    "class": "org.bukkit.GrassSpecies",
    "return": "org.bukkit.GrassSpecies"
  },
  {
    "descr": "BlockData: Furnace",
    "static": true,
    "field": "FURNACE",
    "id": "org.bukkit.Material#FURNACE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PHANTOM_SWOOP",
    "id": "org.bukkit.Sound#ENTITY_PHANTOM_SWOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.HorseJumpEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the ItemStack to be consumed in this event (if any).\\nFor instance, bows will consume an arrow ItemStack in a player's\\ninventory.",
    "method": "getConsumable",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getConsumable()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the current time on the player's client. When relative is true the\\nplayer's time will be kept synchronized to its world time with the\\nspecified offset.\\n\\nWhen using non relative time the player's time will stay fixed at the\\nspecified time parameter. It's up to the caller to continue updating\\nthe player's time. To restore player time to normal use\\nresetPlayerTime().",
    "param-names": [
      "Player",
      "Time",
      "Relative"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "long",
      "boolean"
    ],
    "method": "setPlayerTime",
    "id": "org.bukkit.entity.Player#setPlayerTime(long,boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Indicates that the block can be pushed or pulled.",
    "static": true,
    "field": "MOVE",
    "id": "org.bukkit.block.PistonMoveReaction#MOVE",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the maximum possible size of a WorldBorder.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getMaxSize",
    "id": "org.bukkit.WorldBorder#getMaxSize()",
    "class": "org.bukkit.WorldBorder",
    "return": "double"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BellRingEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "POTTED_TORCHFLOWER",
    "id": "org.bukkit.Material#POTTED_TORCHFLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the amount of blocks which will be moved while extending.",
    "method": "getLength",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getLength()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_CORAL_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_CORAL_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Initiate a respawn sequence to summon the dragon as though a player has\\nplaced 4 end crystals on the portal.",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "initiateRespawn",
    "id": "org.bukkit.boss.DragonBattle#initiateRespawn()",
    "class": "org.bukkit.boss.DragonBattle"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "MANGROVE_TRAPDOOR",
    "id": "org.bukkit.Material#MANGROVE_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "boolean"
  },
  {
    "descr": "Flipped upside-down, a 180 degree rotation",
    "static": true,
    "field": "FLIPPED",
    "id": "org.bukkit.Rotation#FLIPPED",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "RED_CANDLE_CAKE",
    "id": "org.bukkit.Material#RED_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_NAME_TAG",
    "id": "org.bukkit.Material#LEGACY_NAME_TAG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Uses Particle.DustOptions as DataType",
    "static": true,
    "field": "REDSTONE",
    "id": "org.bukkit.Particle#REDSTONE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "RESONATE_9",
    "id": "org.bukkit.GameEvent#RESONATE_9",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Stores the location of the block in the provided Location object.\\n\\nIf the provided Location is null this method does nothing and returns\\nnull.",
    "param-names": [
      "Block",
      "Loc"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.Location"
    ],
    "method": "getLocation",
    "id": "org.bukkit.block.Block#getLocation(org.bukkit.Location)",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Opens an empty enchanting inventory window with the player's inventory\\non the bottom.",
    "param-names": [
      "HumanEntity",
      "Location",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Location",
      "boolean"
    ],
    "method": "openEnchanting",
    "id": "org.bukkit.entity.HumanEntity#openEnchanting(org.bukkit.Location,boolean)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "param-names": ["Name"],
    "param-types": ["java.lang.String"],
    "id": "org.bukkit.enchantments.EnchantmentWrapper#EnchantmentWrapper(java.lang.String)",
    "class": "org.bukkit.enchantments.EnchantmentWrapper"
  },
  {
    "param-names": ["ChiseledBookshelf"],
    "param-types": ["org.bukkit.block.ChiseledBookshelf"],
    "method": "getSnapshotInventory",
    "id": "org.bukkit.block.ChiseledBookshelf#getSnapshotInventory()",
    "class": "org.bukkit.block.ChiseledBookshelf",
    "return": "org.bukkit.inventory.ChiseledBookshelfInventory"
  },
  {
    "descr": "Sets the value of the 'layers' property.",
    "param-names": [
      "Snow",
      "Layers"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Snow",
      "int"
    ],
    "method": "setLayers",
    "id": "org.bukkit.block.data.type.Snow#setLayers(int)",
    "class": "org.bukkit.block.data.type.Snow"
  },
  {
    "static": true,
    "field": "ZOMBIE_VILLAGER",
    "id": "org.bukkit.loot.LootTables#ZOMBIE_VILLAGER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets all players tracked by this Scoreboard",
    "param-names": ["Scoreboard"],
    "param-types": ["org.bukkit.scoreboard.Scoreboard"],
    "method": "getPlayers",
    "id": "org.bukkit.scoreboard.Scoreboard#getPlayers()",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Get this battle's current respawn phase.",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "getRespawnPhase",
    "id": "org.bukkit.boss.DragonBattle#getRespawnPhase()",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "static": true,
    "field": "SHULKER_BOX_OPENED",
    "id": "org.bukkit.Statistic#SHULKER_BOX_OPENED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the horse's variant.\\n\\nA horse's variant defines its physical appearance and capabilities.\\nWhether a horse is a regular horse, donkey, mule, or other kind of horse\\nis determined using the variant.",
    "param-names": ["AbstractHorse"],
    "param-types": ["org.bukkit.entity.AbstractHorse"],
    "method": "getVariant",
    "id": "org.bukkit.entity.AbstractHorse#getVariant()",
    "class": "org.bukkit.entity.AbstractHorse",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "descr": "Unloads the given world.",
    "param-names": [
      "World",
      "Save"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "unloadWorld",
    "id": "org.bukkit.Bukkit#unloadWorld(org.bukkit.World,boolean)",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the armor stand should be visible or not.",
    "param-names": [
      "ArmorStand",
      "Visible"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "boolean"
    ],
    "method": "setVisible",
    "id": "org.bukkit.entity.ArmorStand#setVisible(boolean)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Returns the duration (in ticks) that this effect will run for when\\napplied to a LivingEntity.",
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "getDuration",
    "id": "org.bukkit.potion.PotionEffect#getDuration()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.HeightMap#values()",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap[]"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SCULK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the item the armor stand is currently holding.",
    "param-names": [
      "ArmorStand",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInHand",
    "id": "org.bukkit.entity.ArmorStand#setItemInHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Called when a player attempts to tab-complete a chat message.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent"
  },
  {
    "descr": "Returns the player who triggered the raid.",
    "method": "getPlayer",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets whether the Panda is rolling",
    "param-names": [
      "Panda",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Panda",
      "boolean"
    ],
    "method": "setRolling",
    "id": "org.bukkit.entity.Panda#setRolling(boolean)",
    "class": "org.bukkit.entity.Panda"
  },
  {
    "descr": "Unloads and optionally saves the Chunk",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "unload",
    "id": "org.bukkit.Chunk#unload()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SMITHING_TABLE_USE",
    "id": "org.bukkit.Sound#BLOCK_SMITHING_TABLE_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether animals can spawn in this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getAllowAnimals",
    "id": "org.bukkit.World#getAllowAnimals()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Chest",
    "static": true,
    "field": "TRAPPED_CHEST",
    "id": "org.bukkit.Material#TRAPPED_CHEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The slot number that was clicked, ready for passing to\\nInventory#getItem(int). Note that there may be two slots with\\nthe same slot number, since a view links two different inventories.",
    "method": "getSlot",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "int"
  },
  {
    "param-names": [
      "Result",
      "Uses",
      "Max Uses",
      "Experience Reward"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "int",
      "int",
      "boolean"
    ],
    "id": "org.bukkit.inventory.MerchantRecipe#MerchantRecipe(org.bukkit.inventory.ItemStack,int,int,boolean)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Sets the value of the 'eggs' property.",
    "param-names": [
      "TurtleEgg",
      "Eggs"
    ],
    "param-types": [
      "org.bukkit.block.data.type.TurtleEgg",
      "int"
    ],
    "method": "setEggs",
    "id": "org.bukkit.block.data.type.TurtleEgg#setEggs(int)",
    "class": "org.bukkit.block.data.type.TurtleEgg"
  },
  {
    "static": true,
    "field": "ITEM_BOOK_PUT",
    "id": "org.bukkit.Sound#ITEM_BOOK_PUT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.SculkSensor.Phase#values()",
    "class": "org.bukkit.block.data.type.SculkSensor.Phase",
    "return": "org.bukkit.block.data.type.SculkSensor.Phase[]"
  },
  {
    "descr": "Gets the item in the player's hand when they placed the block.",
    "method": "getItemInHand",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getItemInHand()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_PUMPKIN",
    "id": "org.bukkit.Material#LEGACY_PUMPKIN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets this Panda's main gene.",
    "param-names": [
      "Panda",
      "Gene"
    ],
    "param-types": [
      "org.bukkit.entity.Panda",
      "org.bukkit.entity.Panda.Gene"
    ],
    "method": "setMainGene",
    "id": "org.bukkit.entity.Panda#setMainGene(org.bukkit.entity.Panda.Gene)",
    "class": "org.bukkit.entity.Panda"
  },
  {
    "descr": "Set the direction of this cursor.",
    "param-names": [
      "MapCursor",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "byte"
    ],
    "method": "setDirection",
    "id": "org.bukkit.map.MapCursor#setDirection(byte)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_CHEST",
    "id": "org.bukkit.Material#LEGACY_CHEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "NORTH_EAST",
    "id": "org.bukkit.block.BlockFace#NORTH_EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Called when an item is put in a slot for repair or unenchanting in a grindstone.",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent"
  },
  {
    "static": true,
    "field": "END_HIGHLANDS",
    "id": "org.bukkit.block.Biome#END_HIGHLANDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "LEGACY_BOAT_SPRUCE",
    "id": "org.bukkit.Material#LEGACY_BOAT_SPRUCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_YES",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_YES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Player cleaning their armor.",
    "static": true,
    "field": "ARMOR_WASH",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#ARMOR_WASH",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Gets the item that triggered this event, if any.",
    "method": "getItem",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_FERMENTED_SPIDER_EYE",
    "id": "org.bukkit.Material#LEGACY_FERMENTED_SPIDER_EYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the player's current enchantment seed.\\nThe Seed is used to generate enchantment options in the enchanting table\\nfor the player.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getEnchantmentSeed",
    "id": "org.bukkit.entity.HumanEntity#getEnchantmentSeed()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "Gets how much EXP the Player should have at respawn.\\n\\nThis does not indicate how much EXP should be dropped, please see\\n#getDroppedExp() for that.",
    "method": "getNewExp",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getNewExp()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "int"
  },
  {
    "descr": "Gets if beds work in this world.\\nA non-working bed will blow up when trying to sleep. #isNatural()\\ndefines if a bed can be used to set spawn point.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isBedWorks",
    "id": "org.bukkit.World#isBedWorks()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_MELLOHI",
    "id": "org.bukkit.Sound#MUSIC_DISC_MELLOHI",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIGHT_GRAY_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LIGHT_GRAY_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the shadow strength of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getShadowStrength",
    "id": "org.bukkit.entity.Display#getShadowStrength()",
    "class": "org.bukkit.entity.Display",
    "return": "float"
  },
  {
    "descr": "Gets the ExhaustionReason for this event",
    "method": "getExhaustionReason",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getExhaustionReason()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "Get the base recipe item.",
    "param-names": ["SmithingRecipe"],
    "param-types": ["org.bukkit.inventory.SmithingRecipe"],
    "method": "getBase",
    "id": "org.bukkit.inventory.SmithingRecipe#getBase()",
    "class": "org.bukkit.inventory.SmithingRecipe",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "PEONY",
    "id": "org.bukkit.Material#PEONY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_CLUSTER_HIT",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_CLUSTER_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the variant of this cow.",
    "param-names": [
      "MushroomCow",
      "Variant"
    ],
    "param-types": [
      "org.bukkit.entity.MushroomCow",
      "org.bukkit.entity.MushroomCow.Variant"
    ],
    "method": "setVariant",
    "id": "org.bukkit.entity.MushroomCow#setVariant(org.bukkit.entity.MushroomCow.Variant)",
    "class": "org.bukkit.entity.MushroomCow"
  },
  {
    "static": true,
    "field": "LEGACY_CLAY_BRICK",
    "id": "org.bukkit.Material#LEGACY_CLAY_BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.FaceAttachable.AttachedFace#values()",
    "class": "org.bukkit.block.data.FaceAttachable.AttachedFace",
    "return": "org.bukkit.block.data.FaceAttachable.AttachedFace[]"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockDamageEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPortalEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PANDA_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the time which an entity has to be exposed to the cloud before the\\neffect is applied.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getWaitTime",
    "id": "org.bukkit.entity.AreaEffectCloud#getWaitTime()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "int"
  },
  {
    "descr": "BlockData: Jukebox",
    "static": true,
    "field": "JUKEBOX",
    "id": "org.bukkit.Material#JUKEBOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_CHORUS_FRUIT",
    "id": "org.bukkit.Material#LEGACY_CHORUS_FRUIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PIG_SPAWN_EGG",
    "id": "org.bukkit.Material#PIG_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A lectern inventory, with 1 BOOK slot.",
    "static": true,
    "field": "LECTERN",
    "id": "org.bukkit.event.inventory.InventoryType#LECTERN",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "TALL_GRASS",
    "id": "org.bukkit.Material#TALL_GRASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Parrot.Variant#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_ANVIL",
    "id": "org.bukkit.Statistic#INTERACT_WITH_ANVIL",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Range at which an Entity will follow others.",
    "static": true,
    "field": "GENERIC_FOLLOW_RANGE",
    "id": "org.bukkit.attribute.Attribute#GENERIC_FOLLOW_RANGE",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockExplodeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "GREEN_BED",
    "id": "org.bukkit.Material#GREEN_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a list of all tile entities in the chunk.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getTileEntities",
    "id": "org.bukkit.Chunk#getTileEntities()",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.block.BlockState[]"
  },
  {
    "descr": "Return the player's progression on the specified advancement.",
    "param-names": [
      "Player",
      "Advancement"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.advancement.Advancement"
    ],
    "method": "getAdvancementProgress",
    "id": "org.bukkit.entity.Player#getAdvancementProgress(org.bukkit.advancement.Advancement)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.advancement.AdvancementProgress"
  },
  {
    "descr": "Gold axolotl.",
    "static": true,
    "field": "GOLD",
    "id": "org.bukkit.entity.Axolotl.Variant#GOLD",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "Get a list of all entities in this World",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getEntities",
    "id": "org.bukkit.World#getEntities()",
    "class": "org.bukkit.World",
    "return": "java.util.List"
  },
  {
    "descr": "Placed on ceiling.",
    "static": true,
    "field": "CEILING",
    "id": "org.bukkit.block.data.type.Bell.Attachment#CEILING",
    "class": "org.bukkit.block.data.type.Bell.Attachment",
    "return": "org.bukkit.block.data.type.Bell.Attachment"
  },
  {
    "static": true,
    "field": "FLOWER",
    "id": "org.bukkit.block.banner.PatternType#FLOWER",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "UP_WEST",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#UP_WEST",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.PigZapEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the old current of this block",
    "method": "getOldCurrent",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#getOldCurrent()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_LOADING_MIDDLE",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_LOADING_MIDDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "ANDESITE_SLAB",
    "id": "org.bukkit.Material#ANDESITE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_LIME_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_LIME_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Add several effects to this firework.",
    "param-names": [
      "FireworkMeta",
      "Effects"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.FireworkMeta",
      "org.bukkit.FireworkEffect[]"
    ],
    "method": "addEffects",
    "id": "org.bukkit.inventory.meta.FireworkMeta#addEffects(org.bukkit.FireworkEffect...)",
    "class": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_CHIRP",
    "id": "org.bukkit.Material#MUSIC_DISC_CHIRP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the player who performed the click.",
    "method": "getWhoClicked",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getWhoClicked()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Sets the item in the off hand.",
    "param-names": ["Off Hand Item"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setOffHandItem",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#setOffHandItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_OAK_LOG",
    "id": "org.bukkit.Material#STRIPPED_OAK_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the LivingEntity to which this firework is attached.\\n\\nWhen attached to an entity, the firework effect will act as normal but\\nremain positioned on the entity. If the entity LivingEntity#isGliding()\\nis gliding, then the entity will receive a boost in the direction that\\nthey are looking.",
    "param-names": [
      "Firework",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Firework",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "setAttachedTo",
    "id": "org.bukkit.entity.Firework#setAttachedTo(org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.entity.Firework",
    "return": "boolean"
  },
  {
    "descr": "Returns the current puff state of this fish (i.e. how inflated it is).",
    "param-names": ["PufferFish"],
    "param-types": ["org.bukkit.entity.PufferFish"],
    "method": "getPuffState",
    "id": "org.bukkit.entity.PufferFish#getPuffState()",
    "class": "org.bukkit.entity.PufferFish",
    "return": "int"
  },
  {
    "static": true,
    "field": "ORANGE_DYE",
    "id": "org.bukkit.Material#ORANGE_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Create a key in a specific namespace.",
    "param-names": [
      "Namespace",
      "Key"
    ],
    "param-types": [
      "java.lang.String",
      "java.lang.String"
    ],
    "id": "org.bukkit.NamespacedKey#NamespacedKey(java.lang.String,java.lang.String)",
    "class": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "Gets an array list of all the blocks associated with the created portal",
    "method": "getBlocks",
    "id": "org.bukkit.event.world.PortalCreateEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "LEGACY_ITEM_FRAME",
    "id": "org.bukkit.Material#LEGACY_ITEM_FRAME",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SNOW_GOLEM",
    "id": "org.bukkit.loot.LootTables#SNOW_GOLEM",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_WATER_BUCKET",
    "id": "org.bukkit.Material#LEGACY_WATER_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHIPWRECK_TREASURE",
    "id": "org.bukkit.loot.LootTables#SHIPWRECK_TREASURE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the firework effect for this meta.",
    "param-names": [
      "FireworkEffectMeta",
      "Effect"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.FireworkEffectMeta",
      "org.bukkit.FireworkEffect"
    ],
    "method": "setEffect",
    "id": "org.bukkit.inventory.meta.FireworkEffectMeta#setEffect(org.bukkit.FireworkEffect)",
    "class": "org.bukkit.inventory.meta.FireworkEffectMeta"
  },
  {
    "descr": "Gets the new spawn to be set.",
    "method": "getNewSpawn",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#getNewSpawn()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "This event is called whenever a player harvests a block.\\n\\nA 'harvest' is when a block drops an item (usually some sort of crop) and\\nchanges state, but is not broken in order to drop the item.\\n\\nThis event is not called for when a block is broken, to handle that, listen\\nfor org.bukkit.event.block.BlockBreakEvent and\\norg.bukkit.event.block.BlockDropItemEvent.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent"
  },
  {
    "descr": "Gets the velocity vector that will be sent to the player",
    "method": "getVelocity",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#getVelocity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.server.TabCompleteEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ALLIUM",
    "id": "org.bukkit.Material#ALLIUM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ELDER_GUARDIAN_SPAWN_EGG",
    "id": "org.bukkit.Material#ELDER_GUARDIAN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WALK_ON_WATER_ONE_CM",
    "id": "org.bukkit.Statistic#WALK_ON_WATER_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Returns the item currently being worn by the armor stand on its chest.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getChestplate",
    "id": "org.bukkit.entity.ArmorStand#getChestplate()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets a PluginCommand with the given name or alias.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getPluginCommand",
    "id": "org.bukkit.Bukkit#getPluginCommand(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.command.PluginCommand"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "NETHER_BRICK_SLAB",
    "id": "org.bukkit.Material#NETHER_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When an entity is created by a cast spell.",
    "static": true,
    "field": "SPELL",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SPELL",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Sets if the text is shadowed.",
    "param-names": [
      "TextDisplay",
      "Shadow"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "boolean"
    ],
    "method": "setShadowed",
    "id": "org.bukkit.entity.TextDisplay#setShadowed(boolean)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "descr": "Right aligned text.",
    "static": true,
    "field": "RIGHT",
    "id": "org.bukkit.entity.TextDisplay.TextAlignment#RIGHT",
    "class": "org.bukkit.entity.TextDisplay.TextAlignment",
    "return": "org.bukkit.entity.TextDisplay.TextAlignment"
  },
  {
    "descr": "Called when a player changes their main hand in the client settings.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent"
  },
  {
    "static": true,
    "field": "BROWN_CARPET",
    "id": "org.bukkit.Material#BROWN_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Resets all previous chat colors or formats.",
    "static": true,
    "field": "RESET",
    "id": "org.bukkit.ChatColor#RESET",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Called when an Entity breaks a door\\n\\nCancelling the event will cause the event to be delayed",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets if this world is natural.\\nWhen false, compasses spin randomly, and using a bed to set the respawn\\npoint or sleep, is disabled. When true, nether portals can spawn\\nzombified piglins.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isNatural",
    "id": "org.bukkit.World#isNatural()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_RAW_CHICKEN",
    "id": "org.bukkit.Material#LEGACY_RAW_CHICKEN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the location that this entity moved from",
    "method": "getFrom",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sets the color of the fish's pattern",
    "param-names": [
      "TropicalFish",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.TropicalFish",
      "org.bukkit.DyeColor"
    ],
    "method": "setPatternColor",
    "id": "org.bukkit.entity.TropicalFish#setPatternColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.entity.TropicalFish"
  },
  {
    "descr": "How this structure is mirrored.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getMirror",
    "id": "org.bukkit.block.Structure#getMirror()",
    "class": "org.bukkit.block.Structure",
    "return": "org.bukkit.block.structure.Mirror"
  },
  {
    "static": true,
    "field": "LEGACY_WORKBENCH",
    "id": "org.bukkit.Material#LEGACY_WORKBENCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_HIT",
    "id": "org.bukkit.Sound#BLOCK_MOSS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.inventory.DragType#values()",
    "class": "org.bukkit.event.inventory.DragType",
    "return": "org.bukkit.event.inventory.DragType[]"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets whether or not the world will automatically save",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isAutoSave",
    "id": "org.bukkit.World#isAutoSave()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_FLOP",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.WeatherType#values()",
    "class": "org.bukkit.WeatherType",
    "return": "org.bukkit.WeatherType[]"
  },
  {
    "descr": "Returns a list of patterns on this banner",
    "param-names": ["Banner"],
    "param-types": ["org.bukkit.block.Banner"],
    "method": "getPatterns",
    "id": "org.bukkit.block.Banner#getPatterns()",
    "class": "org.bukkit.block.Banner",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the value of the 'eggs' property.",
    "param-names": ["TurtleEgg"],
    "param-types": ["org.bukkit.block.data.type.TurtleEgg"],
    "method": "getEggs",
    "id": "org.bukkit.block.data.type.TurtleEgg#getEggs()",
    "class": "org.bukkit.block.data.type.TurtleEgg",
    "return": "int"
  },
  {
    "descr": "Damage caused when an entity is colliding with too many entities due\\nto the maxEntityCramming game rule.\\n\\nDamage: 6",
    "static": true,
    "field": "CRAMMING",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#CRAMMING",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Gets the minimum height of this world.\\n\\nIf the min height is 0, there are only blocks from y=0.",
    "param-names": ["WorldInfo"],
    "param-types": ["org.bukkit.generator.WorldInfo"],
    "method": "getMinHeight",
    "id": "org.bukkit.generator.WorldInfo#getMinHeight()",
    "class": "org.bukkit.generator.WorldInfo",
    "return": "int"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.InventoryBlockStartEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets a ConsoleCommandSender that may be used as an input source\\nfor this server.",
    "static": true,
    "method": "getConsoleSender",
    "id": "org.bukkit.Bukkit#getConsoleSender()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.command.ConsoleCommandSender"
  },
  {
    "descr": "Sets the peek state of the shulker, should be in between 0.0 and 1.0.",
    "param-names": [
      "Shulker",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.Shulker",
      "float"
    ],
    "method": "setPeek",
    "id": "org.bukkit.entity.Shulker#setPeek(float)",
    "class": "org.bukkit.entity.Shulker"
  },
  {
    "static": true,
    "field": "DIAGONAL_LEFT_MIRROR",
    "id": "org.bukkit.block.banner.PatternType#DIAGONAL_LEFT_MIRROR",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Door is attached to the right side.",
    "static": true,
    "field": "RIGHT",
    "id": "org.bukkit.block.data.type.Door.Hinge#RIGHT",
    "class": "org.bukkit.block.data.type.Door.Hinge",
    "return": "org.bukkit.block.data.type.Door.Hinge"
  },
  {
    "descr": "Set the minimum number of ticks one has to wait for a fish to bite\\nafter appearing.\\n\\nThe default is 20 ticks (1 second).\\nLure does not affect this value.\\nThis will also effect the radius (0.1 * lureTime) of where\\nthe fish will appear.",
    "param-names": [
      "FishHook",
      "Min Lure Time"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "int"
    ],
    "method": "setMinLureTime",
    "id": "org.bukkit.entity.FishHook#setMinLureTime(int)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Axis#valueOf(java.lang.String)",
    "class": "org.bukkit.Axis",
    "return": "org.bukkit.Axis"
  },
  {
    "descr": "Creates a entity at the given Location",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Type"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "org.bukkit.entity.EntityType"
    ],
    "method": "spawnEntity",
    "id": "org.bukkit.RegionAccessor#spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Finds all slots in the inventory containing any ItemStacks with the\\ngiven ItemStack. This will only match slots if both the type and the\\namount of the stack match\\n\\nThe HashMap contains entries where, the key is the slot index, and the\\nvalue is the ItemStack in that slot. If no matching ItemStack with the\\ngiven Material is found, an empty map is returned.",
    "param-names": [
      "Inventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "all",
    "id": "org.bukkit.inventory.Inventory#all(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "java.util.HashMap"
  },
  {
    "descr": "Get the block radius to which this event will be broadcast.",
    "method": "getRadius",
    "id": "org.bukkit.event.world.GenericGameEvent#getRadius()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "int"
  },
  {
    "descr": "A static non-malleable MinecraftFont.",
    "static": true,
    "field": "Font",
    "id": "org.bukkit.map.MinecraftFont#Font",
    "class": "org.bukkit.map.MinecraftFont",
    "return": "org.bukkit.map.MinecraftFont"
  },
  {
    "descr": "Gets the BlockState at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location"
    ],
    "method": "getBlockState",
    "id": "org.bukkit.RegionAccessor#getBlockState(org.bukkit.Location)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "ENDER_CRYSTAL",
    "id": "org.bukkit.entity.EntityType#ENDER_CRYSTAL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.SpawnCategory#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "static": true,
    "field": "SKELETON_HORSE",
    "id": "org.bukkit.loot.LootTables#SKELETON_HORSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_SHROOMLIGHT_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SHROOMLIGHT_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_HURT",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent"
  },
  {
    "descr": "Gets the value of the 'disarmed' property.",
    "param-names": ["Tripwire"],
    "param-types": ["org.bukkit.block.data.type.Tripwire"],
    "method": "isDisarmed",
    "id": "org.bukkit.block.data.type.Tripwire#isDisarmed()",
    "class": "org.bukkit.block.data.type.Tripwire",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WAXED_CUT_COPPER",
    "id": "org.bukkit.Material#WAXED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The hand used to perform this interaction.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "BlockData: Dispenser",
    "static": true,
    "field": "DROPPER",
    "id": "org.bukkit.Material#DROPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "ENTITY_COW_DEATH",
    "id": "org.bukkit.Sound#ENTITY_COW_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates an arrow entity of the given class at the given Location",
    "param-names": [
      "World",
      "Location",
      "Direction",
      "Speed",
      "Spread",
      "Clazz"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "float",
      "float",
      "java.lang.Class"
    ],
    "method": "spawnArrow",
    "id": "org.bukkit.World#<T>spawnArrow(org.bukkit.Location,org.bukkit.util.Vector,float,float,java.lang.Class<T>)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.AbstractArrow"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the remaining lifespan of this entity.",
    "param-names": ["Vex"],
    "param-types": ["org.bukkit.entity.Vex"],
    "method": "getLifeTicks",
    "id": "org.bukkit.entity.Vex#getLifeTicks()",
    "class": "org.bukkit.entity.Vex",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ItemMergeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent"
  },
  {
    "descr": "Raised when a vehicle moves.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent"
  },
  {
    "descr": "Returns the view distance used for this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getViewDistance",
    "id": "org.bukkit.World#getViewDistance()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerCommandSendEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks to see if an entity is gliding, such as using an Elytra.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isGliding",
    "id": "org.bukkit.entity.LivingEntity#isGliding()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_TIPPED_ARROW",
    "id": "org.bukkit.Material#LEGACY_TIPPED_ARROW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.raid.RaidStopEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the displayed text.",
    "param-names": [
      "TextDisplay",
      "Text"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "java.lang.String"
    ],
    "method": "setText",
    "id": "org.bukkit.entity.TextDisplay#setText(java.lang.String)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "descr": "In an enchanting inventory, the top button's experience level\\nvalue.",
    "static": true,
    "field": "ENCHANT_BUTTON1",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_BUTTON1",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Retrieve the shooter of this projectile.",
    "param-names": ["Projectile"],
    "param-types": ["org.bukkit.entity.Projectile"],
    "method": "getShooter",
    "id": "org.bukkit.entity.Projectile#getShooter()",
    "class": "org.bukkit.entity.Projectile",
    "return": "org.bukkit.projectiles.ProjectileSource"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_HANGING_SIGN_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_HANGING_SIGN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a set of recipients that this chat message will be displayed to.\\n\\nThe set returned is not guaranteed to be mutable and may auto-populate\\non access. Any listener accessing the returned set should be aware that\\nit may reduce performance for a lazy set implementation.\\n\\nListeners should be aware that modifying the list may throw UnsupportedOperationException if the event caller provides an\\nunmodifiable set.",
    "method": "getRecipients",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getRecipients()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "java.util.Set"
  },
  {
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent"
  },
  {
    "descr": "Called when a Spellcaster casts a spell.",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "The sound played / particles shown when lava interacts with the world.\\nFor example by forming stone, obsidian, basalt or destroying blocks such\\nas torches.",
    "static": true,
    "field": "LAVA_INTERACT",
    "id": "org.bukkit.Effect#LAVA_INTERACT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_TILT_DOWN",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_TILT_DOWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "STRONGHOLD_LIBRARY",
    "id": "org.bukkit.loot.LootTables#STRONGHOLD_LIBRARY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Tall redwood tree with just a few leaves at the top",
    "static": true,
    "field": "TALL_REDWOOD",
    "id": "org.bukkit.TreeType#TALL_REDWOOD",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent"
  },
  {
    "descr": "Get the IP that this server is bound to, or empty string if not\\nspecified.",
    "static": true,
    "method": "getIp",
    "id": "org.bukkit.Bukkit#getIp()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when a player edits or signs a book and quill item. If the event is\\ncancelled, no changes are made to the BookMeta",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent"
  },
  {
    "descr": "Returns the color of this boss bar",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "getColor",
    "id": "org.bukkit.boss.BossBar#getColor()",
    "class": "org.bukkit.boss.BossBar",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "static": true,
    "field": "DISPENSE_FAIL",
    "id": "org.bukkit.GameEvent#DISPENSE_FAIL",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets a set containing all player operators.",
    "static": true,
    "method": "getOperators",
    "id": "org.bukkit.Bukkit#getOperators()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "BLOCK_DRIPSTONE_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_DRIPSTONE_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets a single line for the sign involved in this event",
    "param-names": [
      "Index",
      "Line"
    ],
    "param-types": [
      "int",
      "java.lang.String"
    ],
    "method": "setLine",
    "id": "org.bukkit.event.block.SignChangeEvent#setLine(int,java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_ATTACK_SWEEP",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_ATTACK_SWEEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CAT_MORNING_GIFT",
    "id": "org.bukkit.loot.LootTables#CAT_MORNING_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "The x axis.",
    "static": true,
    "field": "X",
    "id": "org.bukkit.Axis#X",
    "class": "org.bukkit.Axis",
    "return": "org.bukkit.Axis"
  },
  {
    "descr": "Sets the location to mark as where the player moved from",
    "param-names": ["From"],
    "param-types": ["org.bukkit.Location"],
    "method": "setFrom",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#setFrom(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent"
  },
  {
    "static": true,
    "field": "TRIANGLE_BOTTOM",
    "id": "org.bukkit.block.banner.PatternType#TRIANGLE_BOTTOM",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "param-names": [
      "Campfire",
      "Index",
      "Item"
    ],
    "param-types": [
      "org.bukkit.block.Campfire",
      "int",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.block.Campfire#setItem(int,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.Campfire"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WART_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WART_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The Y position of the advancement in the advancement screen.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "getY",
    "id": "org.bukkit.advancement.AdvancementDisplay#getY()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "float"
  },
  {
    "descr": "Returns true if this entity has been marked for removal.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isDead",
    "id": "org.bukkit.entity.Entity#isDead()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Gets the magnitude of the vector squared.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "lengthSquared",
    "id": "org.bukkit.util.Vector#lengthSquared()",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "descr": "When a spider gets effects when spawning on hard difficulty.",
    "static": true,
    "field": "SPIDER_SPAWN",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#SPIDER_SPAWN",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Returns the value of the memory specified.\\n\\nNote that the value is null when the specific entity does not have that\\nvalue by default.",
    "param-names": [
      "LivingEntity",
      "Memory Key"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.entity.memory.MemoryKey"
    ],
    "method": "getMemory",
    "id": "org.bukkit.entity.LivingEntity#<T>getMemory(org.bukkit.entity.memory.MemoryKey<T>)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "java.lang.Object"
  },
  {
    "descr": "Indicates no warnings should be printed for deprecated items.",
    "static": true,
    "field": "OFF",
    "id": "org.bukkit.Warning.WarningState#OFF",
    "class": "org.bukkit.Warning.WarningState",
    "return": "org.bukkit.Warning.WarningState"
  },
  {
    "descr": "Registers an Objective on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Name",
      "Criteria",
      "Display Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String",
      "org.bukkit.scoreboard.Criteria",
      "java.lang.String"
    ],
    "method": "registerNewObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#registerNewObjective(java.lang.String,org.bukkit.scoreboard.Criteria,java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "static": true,
    "field": "DEEPSLATE_TILES",
    "id": "org.bukkit.Material#DEEPSLATE_TILES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the art on this painting",
    "param-names": ["Painting"],
    "param-types": ["org.bukkit.entity.Painting"],
    "method": "getArt",
    "id": "org.bukkit.entity.Painting#getArt()",
    "class": "org.bukkit.entity.Painting",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Adds this user to the ProfileBanList. If a previous ban exists, this will\\nupdate the entry.",
    "param-names": [
      "Player",
      "Reason",
      "Duration",
      "Source",
      "Kick Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.time.Duration",
      "java.lang.String",
      "boolean"
    ],
    "method": "ban",
    "id": "org.bukkit.entity.Player#ban(java.lang.String,java.time.Duration,java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the entity which has been shown to the player.",
    "method": "getEntity",
    "id": "org.bukkit.event.player.PlayerShowEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the players current food level",
    "param-names": [
      "HumanEntity",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "int"
    ],
    "method": "setFoodLevel",
    "id": "org.bukkit.entity.HumanEntity#setFoodLevel(int)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Get the object's inventory.",
    "param-names": ["InventoryHolder"],
    "param-types": ["org.bukkit.inventory.InventoryHolder"],
    "method": "getInventory",
    "id": "org.bukkit.inventory.InventoryHolder#getInventory()",
    "class": "org.bukkit.inventory.InventoryHolder",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_SWAMP",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_SWAMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BANNER_GRAY",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_GRAY",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Sets the BlockData at the given coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z",
      "Block Data"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.RegionAccessor#setBlockData(int,int,int,org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.RegionAccessor"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_RAM_IMPACT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_RAM_IMPACT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a player swap items between main hand and off hand using the\\nhotkey.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent"
  },
  {
    "descr": "Sets the current score.",
    "param-names": [
      "Score",
      "Score"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Score",
      "int"
    ],
    "method": "setScore",
    "id": "org.bukkit.scoreboard.Score#setScore(int)",
    "class": "org.bukkit.scoreboard.Score"
  },
  {
    "static": true,
    "field": "RESONATE_2",
    "id": "org.bukkit.GameEvent#RESONATE_2",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERRACK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHERRACK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "COOKED_SALMON",
    "id": "org.bukkit.Material#COOKED_SALMON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the duration modifier applied to effects of this type.",
    "param-names": ["PotionEffectType"],
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "getDurationModifier",
    "id": "org.bukkit.potion.PotionEffectType#getDurationModifier()",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "double"
  },
  {
    "static": true,
    "field": "PROJECTILE_SHOOT",
    "id": "org.bukkit.GameEvent#PROJECTILE_SHOOT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Performs a ray trace that checks for entity collisions.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the maximum\\ndistance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance",
      "Filter"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "java.util.function.Predicate"
    ],
    "method": "rayTraceEntities",
    "id": "org.bukkit.World#rayTraceEntities(org.bukkit.Location,org.bukkit.util.Vector,double,java.util.function.Predicate<org.bukkit.entity.Entity>)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Checks for the presence of custom potion effects.",
    "param-names": ["PotionMeta"],
    "param-types": ["org.bukkit.inventory.meta.PotionMeta"],
    "method": "hasCustomEffects",
    "id": "org.bukkit.inventory.meta.PotionMeta#hasCustomEffects()",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_IRON_GOLEM_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_IRON_GOLEM_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Container type the Hopper is searching for.",
    "method": "getContainerType",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getContainerType()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType"
  },
  {
    "descr": "An undead horse",
    "static": true,
    "field": "UNDEAD_HORSE",
    "id": "org.bukkit.entity.Horse.Variant#UNDEAD_HORSE",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "descr": "Gets the ID for this effect.",
    "param-names": ["Effect"],
    "param-types": ["org.bukkit.Effect"],
    "method": "getId",
    "id": "org.bukkit.Effect#getId()",
    "class": "org.bukkit.Effect",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_POWDER_SNOW_PLACE",
    "id": "org.bukkit.Sound#BLOCK_POWDER_SNOW_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Alternate subtraction mode. The output signal strength will be equal\\nto max(rear-max(left,right),0).",
    "static": true,
    "field": "SUBTRACT",
    "id": "org.bukkit.block.data.type.Comparator.Mode#SUBTRACT",
    "class": "org.bukkit.block.data.type.Comparator.Mode",
    "return": "org.bukkit.block.data.type.Comparator.Mode"
  },
  {
    "descr": "Get the location where the event occurred.",
    "method": "getLocation",
    "id": "org.bukkit.event.world.GenericGameEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the DyeColor with the given dye data value.",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByDyeData",
    "id": "org.bukkit.DyeColor#getByDyeData(byte)",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "CYAN_CONCRETE_POWDER",
    "id": "org.bukkit.Material#CYAN_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MAGENTA_DYE",
    "id": "org.bukkit.Material#MAGENTA_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.WorldSaveEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.WorldSaveEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SOUL_FIRE_FLAME",
    "id": "org.bukkit.Particle#SOUL_FIRE_FLAME",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_BRUTE_HURT",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_BRUTE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Player sprints one centimeter",
    "static": true,
    "field": "SPRINT",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#SPRINT",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "Create a new virtual WorldBorder.",
    "static": true,
    "method": "createWorldBorder",
    "id": "org.bukkit.Bukkit#createWorldBorder()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.WorldBorder"
  },
  {
    "static": true,
    "field": "ENTITY_DONKEY_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_DONKEY_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_LISTENING_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_LISTENING_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DIAMOND_HORSE_ARMOR",
    "id": "org.bukkit.Material#DIAMOND_HORSE_ARMOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LIKED_NOTEBLOCK_POSITION",
    "id": "org.bukkit.entity.memory.MemoryKey#LIKED_NOTEBLOCK_POSITION",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the set of all GameEvents.",
    "static": true,
    "method": "values",
    "id": "org.bukkit.GameEvent#values()",
    "class": "org.bukkit.GameEvent",
    "return": "java.util.Collection"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the value of this instance after all associated modifiers have been\\napplied.",
    "param-names": ["AttributeInstance"],
    "param-types": ["org.bukkit.attribute.AttributeInstance"],
    "method": "getValue",
    "id": "org.bukkit.attribute.AttributeInstance#getValue()",
    "class": "org.bukkit.attribute.AttributeInstance",
    "return": "double"
  },
  {
    "descr": "Get the right side of this double chest.",
    "param-names": ["DoubleChestInventory"],
    "param-types": ["org.bukkit.inventory.DoubleChestInventory"],
    "method": "getRightSide",
    "id": "org.bukkit.inventory.DoubleChestInventory#getRightSide()",
    "class": "org.bukkit.inventory.DoubleChestInventory",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Adds a recipe to the crafting manager.",
    "param-names": ["Recipe"],
    "static": true,
    "param-types": ["org.bukkit.inventory.Recipe"],
    "method": "addRecipe",
    "id": "org.bukkit.Bukkit#addRecipe(org.bukkit.inventory.Recipe)",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "ROSE_BUSH",
    "id": "org.bukkit.Material#ROSE_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the player who placed the block involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Disallows the player from logging in, with the given reason",
    "param-names": [
      "Result",
      "Message"
    ],
    "param-types": [
      "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
      "java.lang.String"
    ],
    "method": "disallow",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#disallow(org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result,java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "descr": "Gets the z-coordinate of this location",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getZ",
    "id": "org.bukkit.Location#getZ()",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_OTHERSIDE",
    "id": "org.bukkit.Sound#MUSIC_DISC_OTHERSIDE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A gray llama.",
    "static": true,
    "field": "GRAY",
    "id": "org.bukkit.entity.Llama.Color#GRAY",
    "class": "org.bukkit.entity.Llama.Color",
    "return": "org.bukkit.entity.Llama.Color"
  },
  {
    "static": true,
    "field": "DOWN_NORTH",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#DOWN_NORTH",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "Gets the world's ticks per water mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn water mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water mobs in\\nthis world every tick.\\nA value of 400 will mean the server will attempt to spawn water mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, water mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTicksPerWaterSpawns",
    "id": "org.bukkit.World#getTicksPerWaterSpawns()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "descr": "Get cook time.\\nThis is the amount of time the item has been cooking for.",
    "param-names": [
      "Campfire",
      "Index"
    ],
    "param-types": [
      "org.bukkit.block.Campfire",
      "int"
    ],
    "method": "getCookTime",
    "id": "org.bukkit.block.Campfire#getCookTime(int)",
    "class": "org.bukkit.block.Campfire",
    "return": "int"
  },
  {
    "descr": "Get the material used to steer this entity when ridden by a player.",
    "param-names": ["Steerable"],
    "param-types": ["org.bukkit.entity.Steerable"],
    "method": "getSteerMaterial",
    "id": "org.bukkit.entity.Steerable#getSteerMaterial()",
    "class": "org.bukkit.entity.Steerable",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "In an enchanting inventory, the top button's level value.",
    "static": true,
    "field": "ENCHANT_LEVEL1",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_LEVEL1",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "SUGAR_CANE",
    "id": "org.bukkit.Material#SUGAR_CANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Nether fossils.",
    "static": true,
    "field": "NETHER_FOSSIL",
    "id": "org.bukkit.StructureType#NETHER_FOSSIL",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "static": true,
    "field": "SHEEP_PINK",
    "id": "org.bukkit.loot.LootTables#SHEEP_PINK",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Warps vision on the client.",
    "static": true,
    "field": "CONFUSION",
    "id": "org.bukkit.potion.PotionEffectType#CONFUSION",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "MUSIC_MENU",
    "id": "org.bukkit.Sound#MUSIC_MENU",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the inventory corresponding to the clicked slot.",
    "method": "getClickedInventory",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getClickedInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "BANNER_WHITE",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_WHITE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_LEAVES_HIT",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_LEAVES_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "POTTED_JUNGLE_SAPLING",
    "id": "org.bukkit.Material#POTTED_JUNGLE_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_LEAVES_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_LEAVES_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the world's ticks per animal spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn animals.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn animals in\\nthis world every tick.\\nA value of 400 will mean the server will attempt to spawn animals\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, animal spawning will be disabled for this world. We\\nrecommend using #setSpawnFlags(boolean, boolean) to control\\nthis instead.\\n\\nMinecraft default: 400.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTicksPerAnimalSpawns",
    "id": "org.bukkit.World#getTicksPerAnimalSpawns()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "static": true,
    "field": "FURNACE_MINECART",
    "id": "org.bukkit.Material#FURNACE_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent"
  },
  {
    "static": true,
    "field": "LEGACY_RABBIT_HIDE",
    "id": "org.bukkit.Material#LEGACY_RABBIT_HIDE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ROTTEN_FLESH",
    "id": "org.bukkit.Material#ROTTEN_FLESH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.MoistureChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "GRAY_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#GRAY_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "ACACIA_WALL_SIGN",
    "id": "org.bukkit.Material#ACACIA_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SPECTRAL_ARROW",
    "id": "org.bukkit.Material#LEGACY_SPECTRAL_ARROW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_BLAZE_HURT",
    "id": "org.bukkit.Sound#ENTITY_BLAZE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "FISHING_JUNK",
    "id": "org.bukkit.loot.LootTables#FISHING_JUNK",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "INFESTED_COBBLESTONE",
    "id": "org.bukkit.Material#INFESTED_COBBLESTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the sleep ticks of the player. This value may be capped.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getSleepTicks",
    "id": "org.bukkit.entity.HumanEntity#getSleepTicks()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_SPRUCE_DOOR",
    "id": "org.bukkit.Material#LEGACY_SPRUCE_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SQUID_INK",
    "id": "org.bukkit.Particle#SQUID_INK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Damage caused when an entity attacks another entity in a sweep attack.\\n\\nDamage: variable",
    "static": true,
    "field": "ENTITY_SWEEP_ATTACK",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#ENTITY_SWEEP_ATTACK",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "The sound played when a zombie infects a target",
    "static": true,
    "field": "ZOMBIE_INFECT",
    "id": "org.bukkit.Effect#ZOMBIE_INFECT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Put the given ItemStack into the chestplate slot. This does not check\\nif the ItemStack is a chestplate",
    "param-names": [
      "PlayerInventory",
      "Chestplate"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setChestplate",
    "id": "org.bukkit.inventory.PlayerInventory#setChestplate(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "CRIMSON_SIGN",
    "id": "org.bukkit.Material#CRIMSON_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENDERMITE",
    "id": "org.bukkit.entity.EntityType#ENDERMITE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets whether or not to display the mob's custom name client side. The\\nname will be displayed above the mob similarly to a player.\\n\\nThis value has no effect on players, they will always display their\\nname.",
    "param-names": [
      "Entity",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setCustomNameVisible",
    "id": "org.bukkit.entity.Entity#setCustomNameVisible(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_AGITATED",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_AGITATED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Piston",
    "static": true,
    "field": "PISTON",
    "id": "org.bukkit.Material#PISTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_COW_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_COW_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "BIRCH_LOG",
    "id": "org.bukkit.Material#BIRCH_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHEEP_MAGENTA",
    "id": "org.bukkit.loot.LootTables#SHEEP_MAGENTA",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_HUGE_MUSHROOM_1",
    "id": "org.bukkit.Material#LEGACY_HUGE_MUSHROOM_1",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Pseudo jukebox inventory with 1 slot of undefined type.",
    "static": true,
    "field": "JUKEBOX",
    "id": "org.bukkit.event.inventory.InventoryType#JUKEBOX",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "MULE",
    "id": "org.bukkit.entity.EntityType#MULE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when an ItemStack is successfully cooked in a block.",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent"
  },
  {
    "descr": "Removes all stacks in the inventory matching the given material.",
    "param-names": [
      "Inventory",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.Material"
    ],
    "method": "remove",
    "id": "org.bukkit.inventory.Inventory#remove(org.bukkit.Material)",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Set the maximum fuse ticks for this Creeper, where the maximum ticks\\nis the amount of time in which a creeper is allowed to be in the\\nprimed state before exploding.",
    "param-names": [
      "Creeper",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Creeper",
      "int"
    ],
    "method": "setMaxFuseTicks",
    "id": "org.bukkit.entity.Creeper#setMaxFuseTicks(int)",
    "class": "org.bukkit.entity.Creeper"
  },
  {
    "descr": "Adds a ban to this list. If a previous ban exists, this will\\nupdate the previous entry.",
    "param-names": [
      "BanList",
      "Target",
      "Reason",
      "Expires",
      "Source"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.Object",
      "java.lang.String",
      "java.util.Date",
      "java.lang.String"
    ],
    "method": "addBan",
    "id": "org.bukkit.BanList#addBan(T,java.lang.String,java.util.Date,java.lang.String)",
    "class": "org.bukkit.BanList",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets all entries tracked by this Scoreboard",
    "param-names": ["Scoreboard"],
    "param-types": ["org.bukkit.scoreboard.Scoreboard"],
    "method": "getEntries",
    "id": "org.bukkit.scoreboard.Scoreboard#getEntries()",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Returns whether the entity is currently leashed.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isLeashed",
    "id": "org.bukkit.entity.LivingEntity#isLeashed()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Attack knockback of an Entity.",
    "static": true,
    "field": "GENERIC_ATTACK_KNOCKBACK",
    "id": "org.bukkit.attribute.Attribute#GENERIC_ATTACK_KNOCKBACK",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "The chest is not linked to any others and contains only one 27 slot\\ninventory.",
    "static": true,
    "field": "SINGLE",
    "id": "org.bukkit.block.data.type.Chest.Type#SINGLE",
    "class": "org.bukkit.block.data.type.Chest.Type",
    "return": "org.bukkit.block.data.type.Chest.Type"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent"
  },
  {
    "static": true,
    "field": "RED",
    "id": "org.bukkit.boss.BarColor#RED",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "descr": "Get a list of all recipes for a given item. The stack size is ignored\\nin comparisons. If the durability is -1, it will match any data value.",
    "param-names": ["Result"],
    "static": true,
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getRecipesFor",
    "id": "org.bukkit.Bukkit#getRecipesFor(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_BLOCK",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_MELLOHI",
    "id": "org.bukkit.Material#MUSIC_DISC_MELLOHI",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_PREPARE_RAM",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_PREPARE_RAM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SHEEP_LIGHT_GRAY",
    "id": "org.bukkit.loot.LootTables#SHEEP_LIGHT_GRAY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the pitch of this location, measured in degrees.\\n\\nA pitch of 0 represents level forward facing.\\nA pitch of 90 represents downward facing, or negative y\\ndirection.\\nA pitch of -90 represents upward facing, or positive y direction.\\n\\nIncreasing pitch values the equivalent of looking down.",
    "param-names": [
      "Location",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.Location",
      "float"
    ],
    "method": "setPitch",
    "id": "org.bukkit.Location#setPitch(float)",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "WARPED_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#WARPED_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.block.Action#valueOf(java.lang.String)",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "descr": "Sets the new profession of this villager.",
    "param-names": [
      "Villager",
      "Profession"
    ],
    "param-types": [
      "org.bukkit.entity.Villager",
      "org.bukkit.entity.Villager.Profession"
    ],
    "method": "setProfession",
    "id": "org.bukkit.entity.Villager#setProfession(org.bukkit.entity.Villager.Profession)",
    "class": "org.bukkit.entity.Villager"
  },
  {
    "static": true,
    "field": "LEGACY_TNT",
    "id": "org.bukkit.Material#LEGACY_TNT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockFadeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_ANVIL",
    "id": "org.bukkit.Material#LEGACY_ANVIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_WITCH",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_WITCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Show the player's nametag only to members of other teams.",
    "static": true,
    "field": "HIDE_FOR_OWN_TEAM",
    "id": "org.bukkit.scoreboard.NameTagVisibility#HIDE_FOR_OWN_TEAM",
    "class": "org.bukkit.scoreboard.NameTagVisibility",
    "return": "org.bukkit.scoreboard.NameTagVisibility"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_BRICKS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_BRICKS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.PigZapEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the last attack on this interaction entity.",
    "param-names": ["Interaction"],
    "param-types": ["org.bukkit.entity.Interaction"],
    "method": "getLastAttack",
    "id": "org.bukkit.entity.Interaction#getLastAttack()",
    "class": "org.bukkit.entity.Interaction",
    "return": "org.bukkit.entity.Interaction.PreviousInteraction"
  },
  {
    "descr": "Gets the ChatColors used at the end of the given input string.",
    "param-names": ["Input"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getLastColors",
    "id": "org.bukkit.ChatColor#getLastColors(java.lang.String)",
    "class": "org.bukkit.ChatColor",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.ServerLoadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.ServerLoadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "POLISHED_BLACKSTONE_BRICK_WALL",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Removes the pattern at the specified index",
    "param-names": [
      "BannerMeta",
      "I"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BannerMeta",
      "int"
    ],
    "method": "removePattern",
    "id": "org.bukkit.inventory.meta.BannerMeta#removePattern(int)",
    "class": "org.bukkit.inventory.meta.BannerMeta",
    "return": "org.bukkit.block.banner.Pattern"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_SMOKER",
    "id": "org.bukkit.Statistic#INTERACT_WITH_SMOKER",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "YELLOW_CONCRETE_POWDER",
    "id": "org.bukkit.Material#YELLOW_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CATALYST_HIT",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CATALYST_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Farmer profession. Wears a brown robe. Farmers primarily trade for\\nfood-related items.",
    "static": true,
    "field": "FARMER",
    "id": "org.bukkit.entity.Villager.Profession#FARMER",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerHideEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SIDEBAR_RED",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_RED",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.ServerCommandEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when any Entity changes a block and a more specific event is not available.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent"
  },
  {
    "descr": "Get the hand from which the bow was shot.",
    "method": "getHand",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "When the player dies and presses the respawn button.",
    "static": true,
    "field": "DEATH",
    "id": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason#DEATH",
    "class": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason",
    "return": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason"
  },
  {
    "descr": "Returns a list of entities within the given bounding box.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the size of the\\nsearch bounding box.",
    "param-names": [
      "World",
      "Bounding Box"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.util.BoundingBox"
    ],
    "method": "getNearbyEntities",
    "id": "org.bukkit.World#getNearbyEntities(org.bukkit.util.BoundingBox)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "descr": "Called when a players experience changes naturally",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent"
  },
  {
    "static": true,
    "field": "TRAIL_RUINS_ARCHAEOLOGY_COMMON",
    "id": "org.bukkit.loot.LootTables#TRAIL_RUINS_ARCHAEOLOGY_COMMON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets whether the server resource pack is enforced.",
    "static": true,
    "method": "isResourcePackRequired",
    "id": "org.bukkit.Bukkit#isResourcePackRequired()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the entity is invisible or not.",
    "param-names": [
      "LivingEntity",
      "Invisible"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setInvisible",
    "id": "org.bukkit.entity.LivingEntity#setInvisible(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.enchantments.EnchantmentTarget#valueOf(java.lang.String)",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Adds a custom potion effect to this potion.",
    "param-names": [
      "PotionMeta",
      "Effect",
      "Overwrite"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.PotionMeta",
      "org.bukkit.potion.PotionEffect",
      "boolean"
    ],
    "method": "addCustomEffect",
    "id": "org.bukkit.inventory.meta.PotionMeta#addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets this player's previous GameMode",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPreviousGameMode",
    "id": "org.bukkit.entity.Player#getPreviousGameMode()",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.GameMode"
  },
  {
    "static": true,
    "field": "BLOCK_PINK_PETALS_HIT",
    "id": "org.bukkit.Sound#BLOCK_PINK_PETALS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the width of the bounding box in the z direction.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getWidthZ",
    "id": "org.bukkit.util.BoundingBox#getWidthZ()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_STEP",
    "id": "org.bukkit.Sound#BLOCK_METAL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.FireworkEffect.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_WARD",
    "id": "org.bukkit.Sound#MUSIC_DISC_WARD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the location that this entity moved from",
    "param-names": ["From"],
    "param-types": ["org.bukkit.Location"],
    "method": "setFrom",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#setFrom(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent"
  },
  {
    "descr": "Removes a custom potion effect from this potion.",
    "param-names": [
      "PotionMeta",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.PotionMeta",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "removeCustomEffect",
    "id": "org.bukkit.inventory.meta.PotionMeta#removeCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.PluginEnableEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.PluginEnableEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Ocelot.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "OCHRE_FROGLIGHT",
    "id": "org.bukkit.Material#OCHRE_FROGLIGHT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a World is initializing.\\n\\nTo get every world it is recommended to add following to the plugin.yml.\\nload: STARTUP",
    "event": true,
    "class": "org.bukkit.event.world.WorldInitEvent"
  },
  {
    "descr": "Gets the value of the 'triggered' property.",
    "param-names": ["Dispenser"],
    "param-types": ["org.bukkit.block.data.type.Dispenser"],
    "method": "isTriggered",
    "id": "org.bukkit.block.data.type.Dispenser#isTriggered()",
    "class": "org.bukkit.block.data.type.Dispenser",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_LANTERN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_LANTERN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerAdvancementDoneEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Checks if this code is a color code as opposed to a format code.",
    "param-names": ["ChatColor"],
    "param-types": ["org.bukkit.ChatColor"],
    "method": "isColor",
    "id": "org.bukkit.ChatColor#isColor()",
    "class": "org.bukkit.ChatColor",
    "return": "boolean"
  },
  {
    "descr": "Get cook time.\\nThis is the amount of time the item has been cooking for.",
    "param-names": ["Furnace"],
    "param-types": ["org.bukkit.block.Furnace"],
    "method": "getCookTime",
    "id": "org.bukkit.block.Furnace#getCookTime()",
    "class": "org.bukkit.block.Furnace",
    "return": "short"
  },
  {
    "descr": "Increases the speed at which a player may mine underwater",
    "static": true,
    "field": "WATER_WORKER",
    "id": "org.bukkit.enchantments.Enchantment#WATER_WORKER",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Teleports this entity to the given location. If this entity is riding a\\nvehicle, it will be dismounted prior to teleportation.",
    "param-names": [
      "Entity",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.Location"
    ],
    "method": "teleport",
    "id": "org.bukkit.entity.Entity#teleport(org.bukkit.Location)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "CYAN_BANNER",
    "id": "org.bukkit.Material#CYAN_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The end of the respawn sequence. The dragon is actually summoned.",
    "static": true,
    "field": "END",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#END",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "descr": "Set the Location this EnderSignal is moving towards.\\n\\nWhen setting a new target location, the #getDropItem() resets to\\na random value and the despawn timer gets set back to 0.",
    "param-names": [
      "EnderSignal",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.EnderSignal",
      "org.bukkit.Location"
    ],
    "method": "setTargetLocation",
    "id": "org.bukkit.entity.EnderSignal#setTargetLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.EnderSignal"
  },
  {
    "static": true,
    "field": "DUNE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#DUNE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "WARPED_DOOR",
    "id": "org.bukkit.Material#WARPED_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'flower_amount' property.",
    "param-names": ["PinkPetals"],
    "param-types": ["org.bukkit.block.data.type.PinkPetals"],
    "method": "getFlowerAmount",
    "id": "org.bukkit.block.data.type.PinkPetals#getFlowerAmount()",
    "class": "org.bukkit.block.data.type.PinkPetals",
    "return": "int"
  },
  {
    "descr": "Entity breaks item in helmet slot",
    "static": true,
    "field": "BREAK_EQUIPMENT_HELMET",
    "id": "org.bukkit.EntityEffect#BREAK_EQUIPMENT_HELMET",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "ACACIA_SLAB",
    "id": "org.bukkit.Material#ACACIA_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block that was hit, if it was a block that was hit.",
    "method": "getHitBlock",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getHitBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "The middle mouse button, or a \"scrollwheel click\".",
    "static": true,
    "field": "MIDDLE",
    "id": "org.bukkit.event.inventory.ClickType#MIDDLE",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_PREPARE_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_PREPARE_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The entire cursor item is dropped.",
    "static": true,
    "field": "DROP_ALL_CURSOR",
    "id": "org.bukkit.event.inventory.InventoryAction#DROP_ALL_CURSOR",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "CHERRY_FENCE_GATE",
    "id": "org.bukkit.Material#CHERRY_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BAT",
    "id": "org.bukkit.loot.LootTables#BAT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_FILL_LAVA",
    "id": "org.bukkit.Sound#ITEM_BUCKET_FILL_LAVA",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "No wall present.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.block.data.type.Wall.Height#NONE",
    "class": "org.bukkit.block.data.type.Wall.Height",
    "return": "org.bukkit.block.data.type.Wall.Height"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_ATTACK_WEAK",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_ATTACK_WEAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When the entity is inflicted with an effect due to a splash potion.",
    "static": true,
    "field": "POTION_SPLASH",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#POTION_SPLASH",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "LEGACY_BONE",
    "id": "org.bukkit.Material#LEGACY_BONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "Player",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "FIXED",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#FIXED",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "static": true,
    "field": "ENTITY_CHICKEN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_CHICKEN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "PROJECTILE_LAND",
    "id": "org.bukkit.GameEvent#PROJECTILE_LAND",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Makes the allay stop dancing.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "stopDancing",
    "id": "org.bukkit.entity.Allay#stopDancing()",
    "class": "org.bukkit.entity.Allay"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.SpawnChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Stores the entity's current position in the provided Location object.\\n\\nIf the provided Location is null this method does nothing and returns\\nnull.",
    "param-names": [
      "Entity",
      "Loc"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.Location"
    ],
    "method": "getLocation",
    "id": "org.bukkit.entity.Entity#getLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the scheduler for managing scheduled events.",
    "static": true,
    "method": "getScheduler",
    "id": "org.bukkit.Bukkit#getScheduler()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.scheduler.BukkitScheduler"
  },
  {
    "descr": "Sound of a door closing.",
    "static": true,
    "field": "FENCE_GATE_CLOSE",
    "id": "org.bukkit.Effect#FENCE_GATE_CLOSE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a block explodes",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent"
  },
  {
    "descr": "BlockData: Light",
    "static": true,
    "field": "LIGHT",
    "id": "org.bukkit.Material#LIGHT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the time in ticks this entity's movement will be increased.\\nThis will reset the current boost ticks to 0\\n(#getCurrentBoostTicks()).",
    "param-names": [
      "Steerable",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Steerable",
      "int"
    ],
    "method": "setBoostTicks",
    "id": "org.bukkit.entity.Steerable#setBoostTicks(int)",
    "class": "org.bukkit.entity.Steerable"
  },
  {
    "descr": "Get the experience dropped by the block after the event has processed",
    "method": "getExpToDrop",
    "id": "org.bukkit.event.block.BlockExpEvent#getExpToDrop()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the value of the 'charges' property.",
    "param-names": ["RespawnAnchor"],
    "param-types": ["org.bukkit.block.data.type.RespawnAnchor"],
    "method": "getCharges",
    "id": "org.bukkit.block.data.type.RespawnAnchor#getCharges()",
    "class": "org.bukkit.block.data.type.RespawnAnchor",
    "return": "int"
  },
  {
    "descr": "Set the maximum number of similar entities that are allowed to be within\\nspawning range of this spawner.\\n\\nSimilar entities are entities that are of the same EntityType",
    "param-names": [
      "CreatureSpawner",
      "Max Nearby Entities"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setMaxNearbyEntities",
    "id": "org.bukkit.block.CreatureSpawner#setMaxNearbyEntities(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "static": true,
    "field": "LEGACY_FIREBALL",
    "id": "org.bukkit.Material#LEGACY_FIREBALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a player stops damaging a Block.",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent"
  },
  {
    "static": true,
    "field": "LEGACY_DIRT",
    "id": "org.bukkit.Material#LEGACY_DIRT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Clarity method for getting the placed block. Not really needed except\\nfor reasons of clarity.",
    "method": "getBlockPlaced",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getBlockPlaced()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Get map of enchantment (levels, keyed by type) to be added to item\\n(modify map returned to change values). Note: Any enchantments not\\nallowed for the item will be ignored",
    "method": "getEnchantsToAdd",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getEnchantsToAdd()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "java.util.Map"
  },
  {
    "descr": "Allow the Enchantment to be placed on vanishing items.",
    "static": true,
    "field": "VANISHABLE",
    "id": "org.bukkit.enchantments.EnchantmentTarget#VANISHABLE",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Survival mode is the \"normal\" gameplay type, with no special features.",
    "static": true,
    "field": "SURVIVAL",
    "id": "org.bukkit.GameMode#SURVIVAL",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode"
  },
  {
    "descr": "The hand used to perform this interaction.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Called when a block is damaged by a player.\\n\\nIf a Block Damage event is cancelled, the block will not be damaged.",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent"
  },
  {
    "static": true,
    "field": "MULE_SPAWN_EGG",
    "id": "org.bukkit.Material#MULE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CAMPFIRE_SIGNAL_SMOKE",
    "id": "org.bukkit.Particle#CAMPFIRE_SIGNAL_SMOKE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "AXOLOTL",
    "id": "org.bukkit.loot.LootTables#AXOLOTL",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Called when a bell resonated after being rung and highlights nearby raiders.\\nA bell will only resonate if raiders are in the vicinity of the bell.",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent"
  },
  {
    "static": true,
    "field": "RED_CARPET",
    "id": "org.bukkit.Material#RED_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GREEN_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_GREEN_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DANDELION",
    "id": "org.bukkit.Material#DANDELION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FRIEND_POTTERY_SHERD",
    "id": "org.bukkit.Material#FRIEND_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the X component.",
    "param-names": [
      "Vector",
      "X"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "int"
    ],
    "method": "setX",
    "id": "org.bukkit.util.Vector#setX(int)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "When a creature spawns from a Spawner Egg",
    "static": true,
    "field": "SPAWNER_EGG",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SPAWNER_EGG",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "END_PORTAL",
    "id": "org.bukkit.Material#END_PORTAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WOODEN_HOE",
    "id": "org.bukkit.Material#WOODEN_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Large leaves.",
    "static": true,
    "field": "LARGE",
    "id": "org.bukkit.block.data.type.Bamboo.Leaves#LARGE",
    "class": "org.bukkit.block.data.type.Bamboo.Leaves",
    "return": "org.bukkit.block.data.type.Bamboo.Leaves"
  },
  {
    "static": true,
    "field": "CALCITE",
    "id": "org.bukkit.Material#CALCITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the name of this CommandBlock.  The name is used with commands\\nthat this CommandBlock executes.  This name will never be null, and\\nby default is \"@\".",
    "param-names": ["CommandBlock"],
    "param-types": ["org.bukkit.block.CommandBlock"],
    "method": "getName",
    "id": "org.bukkit.block.CommandBlock#getName()",
    "class": "org.bukkit.block.CommandBlock",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "WAXED_OXIDIZED_CUT_COPPER",
    "id": "org.bukkit.Material#WAXED_OXIDIZED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_IRON_GOLEM_DEATH",
    "id": "org.bukkit.Sound#ENTITY_IRON_GOLEM_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_HONEY_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_HONEY_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets name of the world containing this chunk",
    "param-names": ["ChunkSnapshot"],
    "param-types": ["org.bukkit.ChunkSnapshot"],
    "method": "getWorldName",
    "id": "org.bukkit.ChunkSnapshot#getWorldName()",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SONIC_BOOM",
    "id": "org.bukkit.Particle#SONIC_BOOM",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ItemMergeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CROSSBOW",
    "id": "org.bukkit.Material#CROSSBOW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when the velocity of a player changes.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerPortalEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the last interacted inventory slot.",
    "param-names": [
      "ChiseledBookshelf",
      "Last Interacted Slot"
    ],
    "param-types": [
      "org.bukkit.block.ChiseledBookshelf",
      "int"
    ],
    "method": "setLastInteractedSlot",
    "id": "org.bukkit.block.ChiseledBookshelf#setLastInteractedSlot(int)",
    "class": "org.bukkit.block.ChiseledBookshelf"
  },
  {
    "descr": "Normalizes the given yaw angle to a value between +/-180\\ndegrees.",
    "param-names": ["Yaw"],
    "static": true,
    "param-types": ["float"],
    "method": "normalizeYaw",
    "id": "org.bukkit.Location#normalizeYaw(float)",
    "class": "org.bukkit.Location",
    "return": "float"
  },
  {
    "descr": "The switch is mounted to the floor and pointing upwards.",
    "static": true,
    "field": "FLOOR",
    "id": "org.bukkit.block.data.FaceAttachable.AttachedFace#FLOOR",
    "class": "org.bukkit.block.data.FaceAttachable.AttachedFace",
    "return": "org.bukkit.block.data.FaceAttachable.AttachedFace"
  },
  {
    "descr": "Gets the corresponding step sound for this group.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getStepSound",
    "id": "org.bukkit.SoundGroup#getStepSound()",
    "class": "org.bukkit.SoundGroup",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Registers an enchantment with the given ID and object.\\n\\nGenerally not to be used from within a plugin.",
    "param-names": ["Enchantment"],
    "static": true,
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "registerEnchantment",
    "id": "org.bukkit.enchantments.Enchantment#registerEnchantment(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "ALBAN",
    "id": "org.bukkit.Art#ALBAN",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.MapInitializeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.MapInitializeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the list of chat completion suggestions shown to the player while\\ntyping a message.\\n\\nIf completions were set previously, this method will remove them all and\\nreplace them with the provided completions.",
    "param-names": [
      "Player",
      "Completions"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.util.Collection"
    ],
    "method": "setCustomChatCompletions",
    "id": "org.bukkit.entity.Player#setCustomChatCompletions(java.util.Collection<java.lang.String>)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "When the entity's leashholder has died or logged out, and so is\\nunleashed",
    "static": true,
    "field": "HOLDER_GONE",
    "id": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason#HOLDER_GONE",
    "class": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "static": true,
    "field": "ORANGE_STAINED_GLASS",
    "id": "org.bukkit.Material#ORANGE_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether the server will attempt to create a destination portal or\\nnot.",
    "method": "getCanCreatePortal",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getCanCreatePortal()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the ItemStack currently in the clicked slot.",
    "method": "getCurrentItem",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getCurrentItem()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ARMOR_STAND",
    "id": "org.bukkit.loot.LootTables#ARMOR_STAND",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the value of the 'instrument' property.",
    "param-names": [
      "NoteBlock",
      "Instrument"
    ],
    "param-types": [
      "org.bukkit.block.data.type.NoteBlock",
      "org.bukkit.Instrument"
    ],
    "method": "setInstrument",
    "id": "org.bukkit.block.data.type.NoteBlock#setInstrument(org.bukkit.Instrument)",
    "class": "org.bukkit.block.data.type.NoteBlock"
  },
  {
    "descr": "Gets the player by the given UUID, regardless if they are offline or\\nonline.\\n\\nThis will return an object even if the player does not exist. To this\\nmethod, all players will exist.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["java.util.UUID"],
    "method": "getOfflinePlayer",
    "id": "org.bukkit.Bukkit#getOfflinePlayer(java.util.UUID)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "FAR",
    "id": "org.bukkit.map.MapView.Scale#FAR",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "static": true,
    "field": "RED_SANDSTONE",
    "id": "org.bukkit.Material#RED_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_HORSE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allows mending the item using experience orbs",
    "static": true,
    "field": "MENDING",
    "id": "org.bukkit.enchantments.Enchantment#MENDING",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERITE_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHERITE_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_FAR",
    "id": "org.bukkit.Sound#MUSIC_DISC_FAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SLIME",
    "id": "org.bukkit.entity.EntityType#SLIME",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WINDSWEPT_FOREST",
    "id": "org.bukkit.block.Biome#WINDSWEPT_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SOUL",
    "id": "org.bukkit.Particle#SOUL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the temperature of this block.\\n\\nIf the raw biome temperature without adjusting for height effects is\\nrequired then please use World#getTemperature(int, int).",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getTemperature",
    "id": "org.bukkit.block.Block#getTemperature()",
    "class": "org.bukkit.block.Block",
    "return": "double"
  },
  {
    "param-names": [
      "MerchantRecipe",
      "Index"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "int"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.MerchantRecipe#removeIngredient(int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "LEGACY_MUSHROOM_SOUP",
    "id": "org.bukkit.Material#LEGACY_MUSHROOM_SOUP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a LivingEntity shoots a bow firing an arrow",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent"
  },
  {
    "static": true,
    "field": "BUBBLE_POP",
    "id": "org.bukkit.Particle#BUBBLE_POP",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "The slot number that was clicked, ready for passing to\\nInventory#getItem(int). Note that there may be two slots with\\nthe same slot number, since a view links two different inventories.",
    "method": "getSlot",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "int"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.inventory.meta.BookMeta.Generation#valueOf(java.lang.String)",
    "class": "org.bukkit.inventory.meta.BookMeta.Generation",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation"
  },
  {
    "static": true,
    "field": "RESONATE_3",
    "id": "org.bukkit.GameEvent#RESONATE_3",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Get the thundering duration.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getThunderDuration",
    "id": "org.bukkit.World#getThunderDuration()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_BRICKS_FALL",
    "id": "org.bukkit.Sound#BLOCK_MUD_BRICKS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Big red mushroom; short and fat",
    "static": true,
    "field": "RED_MUSHROOM",
    "id": "org.bukkit.TreeType#RED_MUSHROOM",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Send an experience change.\\nThis fakes an experience change packet for a user. This will not actually\\nchange the experience points in any way.",
    "param-names": [
      "Player",
      "Progress",
      "Level"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "float",
      "int"
    ],
    "method": "sendExperienceChange",
    "id": "org.bukkit.entity.Player#sendExperienceChange(float,int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: AmethystCluster",
    "static": true,
    "field": "LARGE_AMETHYST_BUD",
    "id": "org.bukkit.Material#LARGE_AMETHYST_BUD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_DRIPLEAF_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SMALL_DRIPLEAF_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the #adjust(ItemStack) adjusted first ingredient.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getAdjustedIngredient1",
    "id": "org.bukkit.inventory.MerchantRecipe#getAdjustedIngredient1()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the width of the bounding box in the x direction.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getWidthX",
    "id": "org.bukkit.util.BoundingBox#getWidthX()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "static": true,
    "field": "ENTITY_MOOSHROOM_SHEAR",
    "id": "org.bukkit.Sound#ENTITY_MOOSHROOM_SHEAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents dark oak trees.",
    "static": true,
    "field": "DARK_OAK",
    "id": "org.bukkit.TreeSpecies#DARK_OAK",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "descr": "Tall birch tree",
    "static": true,
    "field": "TALL_BIRCH",
    "id": "org.bukkit.TreeType#TALL_BIRCH",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Get all modifiers present on this instance.",
    "param-names": ["AttributeInstance"],
    "param-types": ["org.bukkit.attribute.AttributeInstance"],
    "method": "getModifiers",
    "id": "org.bukkit.attribute.AttributeInstance#getModifiers()",
    "class": "org.bukkit.attribute.AttributeInstance",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets the maximum health this entity has.",
    "param-names": ["Damageable"],
    "param-types": ["org.bukkit.entity.Damageable"],
    "method": "getMaxHealth",
    "id": "org.bukkit.entity.Damageable#getMaxHealth()",
    "class": "org.bukkit.entity.Damageable",
    "return": "double"
  },
  {
    "descr": "Retrieves a collection specifying which plugins have tickets for this\\nchunk. This collection is not updated when plugin tickets are added or\\nremoved to this chunk.\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getPluginChunkTickets",
    "id": "org.bukkit.Chunk#getPluginChunkTickets()",
    "class": "org.bukkit.Chunk",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets whether this merchant is currently trading.",
    "param-names": ["Merchant"],
    "param-types": ["org.bukkit.inventory.Merchant"],
    "method": "isTrading",
    "id": "org.bukkit.inventory.Merchant#isTrading()",
    "class": "org.bukkit.inventory.Merchant",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "SANDSTONE_WALL",
    "id": "org.bukkit.Material#SANDSTONE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Statistics of this type do not require a qualifier.",
    "static": true,
    "field": "UNTYPED",
    "id": "org.bukkit.Statistic.Type#UNTYPED",
    "class": "org.bukkit.Statistic.Type",
    "return": "org.bukkit.Statistic.Type"
  },
  {
    "descr": "Gets the Set of entries on the team",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getEntries",
    "id": "org.bukkit.scoreboard.Team#getEntries()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "java.util.Set"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns whether the living entity already has an existing effect of\\nthe given PotionEffectType applied to it.",
    "param-names": [
      "LivingEntity",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "hasPotionEffect",
    "id": "org.bukkit.entity.LivingEntity#hasPotionEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Called when a Raid is triggered (e.g: a player with Bad Omen effect\\nenters a village).",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the ItemStack of the fuel before the amount was subtracted.",
    "method": "getFuel",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#getFuel()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets whether the egg is hatching or not. Will be what the server\\nwould've done without interaction.",
    "method": "isHatching",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#isHatching()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "boolean"
  },
  {
    "descr": "Damage caused when an entity attacks another entity.\\n\\nDamage: variable",
    "static": true,
    "field": "ENTITY_ATTACK",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#ENTITY_ATTACK",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_PREPARE_WOLOLO",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_PREPARE_WOLOLO",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "AMPLIFIED",
    "id": "org.bukkit.WorldType#AMPLIFIED",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType"
  },
  {
    "descr": "Copies another vector",
    "param-names": [
      "Vector",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "copy",
    "id": "org.bukkit.util.Vector#copy(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "When a zombie is spawned to invade a village",
    "static": true,
    "field": "VILLAGE_INVASION",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#VILLAGE_INVASION",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Return the contents from the section of the inventory where items can\\nreasonably be expected to be stored. In most cases this will represent\\nthe entire inventory, but in some cases it may exclude armor or result\\nslots.\\n\\nIt is these contents which will be used for add / contains / remove\\nmethods which look for a specific stack.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getStorageContents",
    "id": "org.bukkit.inventory.Inventory#getStorageContents()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "descr": "Gets the velocity in meters per tick.\\n\\nNote: Modifying the returned Vector will not change the velocity, you\\nmust use #setVelocity(org.bukkit.util.Vector) instead.",
    "method": "getVelocity",
    "id": "org.bukkit.event.block.BlockDispenseEvent#getVelocity()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the player that stopped damaging the block involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the value of the 'level' property.",
    "param-names": ["Levelled"],
    "param-types": ["org.bukkit.block.data.Levelled"],
    "method": "getLevel",
    "id": "org.bukkit.block.data.Levelled#getLevel()",
    "class": "org.bukkit.block.data.Levelled",
    "return": "int"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PLAYER",
    "id": "org.bukkit.loot.LootTables#PLAYER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: CommandBlock",
    "static": true,
    "field": "COMMAND_BLOCK",
    "id": "org.bukkit.Material#COMMAND_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the internal id of this note.",
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "getId",
    "id": "org.bukkit.Note#getId()",
    "class": "org.bukkit.Note",
    "return": "byte"
  },
  {
    "descr": "Expands this bounding box in the specified direction.\\n\\nThe magnitude of the direction will scale the expansion. A negative\\nexpansion value will shrink the bounding box in this direction. Shrinking\\nwill be limited to the bounding box's current size.",
    "param-names": [
      "BoundingBox",
      "Dir X",
      "Dir Y",
      "Dir Z",
      "Expansion"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(double,double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "SWIM_ONE_CM",
    "id": "org.bukkit.Statistic#SWIM_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockFadeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the entity which has been hidden from the player.",
    "method": "getEntity",
    "id": "org.bukkit.event.player.PlayerHideEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "For custom calls to the event.",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#CUSTOM",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'shape' property.",
    "param-names": [
      "Stairs",
      "Shape"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Stairs",
      "org.bukkit.block.data.type.Stairs.Shape"
    ],
    "method": "setShape",
    "id": "org.bukkit.block.data.type.Stairs#setShape(org.bukkit.block.data.type.Stairs.Shape)",
    "class": "org.bukkit.block.data.type.Stairs"
  },
  {
    "descr": "Power change caused by something else (probably a plugin)\\n\\nPowered state: false",
    "static": true,
    "field": "SET_OFF",
    "id": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause#SET_OFF",
    "class": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause",
    "return": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_BEE_STING",
    "id": "org.bukkit.Sound#ENTITY_BEE_STING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_ROAR",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_ROAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerChatEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Chunk.LoadLevel#valueOf(java.lang.String)",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "descr": "Gets the displayed block.",
    "param-names": ["BlockDisplay"],
    "param-types": ["org.bukkit.entity.BlockDisplay"],
    "method": "getBlock",
    "id": "org.bukkit.entity.BlockDisplay#getBlock()",
    "class": "org.bukkit.entity.BlockDisplay",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_FRAME_ADD_ITEM",
    "id": "org.bukkit.Sound#ENTITY_ITEM_FRAME_ADD_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check whether or not this firework has detonated.",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "isDetonated",
    "id": "org.bukkit.entity.Firework#isDetonated()",
    "class": "org.bukkit.entity.Firework",
    "return": "boolean"
  },
  {
    "descr": "Gets the item to be enchanted (can be modified)",
    "method": "getItem",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.entity.Villager.Profession#NONE",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "A brown llama.",
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.entity.Llama.Color#BROWN",
    "class": "org.bukkit.entity.Llama.Color",
    "return": "org.bukkit.entity.Llama.Color"
  },
  {
    "static": true,
    "field": "FALLING_DRIPSTONE_WATER",
    "id": "org.bukkit.Particle#FALLING_DRIPSTONE_WATER",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent"
  },
  {
    "descr": "Gets all the pages in the book.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "getPages",
    "id": "org.bukkit.inventory.meta.BookMeta#getPages()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the caption on this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "getCaption",
    "id": "org.bukkit.map.MapCursor#getCaption()",
    "class": "org.bukkit.map.MapCursor",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the magnitude of the vector, defined as sqrt(x^2+y^2+z^2). The\\nvalue of this method is not cached and uses a costly square-root\\nfunction, so do not repeatedly call this method to get the vector's\\nmagnitude. NaN will be returned if the inner result of the sqrt()\\nfunction overflows, which will be caused if the length is too long.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "length",
    "id": "org.bukkit.util.Vector#length()",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "descr": "Gets the command that this CommandBlock will run when powered.\\nThis will never return null.  If the CommandBlock does not have a\\ncommand, an empty String will be returned instead.",
    "param-names": ["CommandBlock"],
    "param-types": ["org.bukkit.block.CommandBlock"],
    "method": "getCommand",
    "id": "org.bukkit.block.CommandBlock#getCommand()",
    "class": "org.bukkit.block.CommandBlock",
    "return": "java.lang.String"
  },
  {
    "descr": "Uses MaterialData as DataType",
    "static": true,
    "field": "LEGACY_BLOCK_DUST",
    "id": "org.bukkit.Particle#LEGACY_BLOCK_DUST",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets the bound of this entity.\\nAn idle vex will navigate a 15x11x15 area centered around its bound\\nlocation.\\nWhen summoned by an Evoker, this location will be set to that of the\\nsummoner.",
    "param-names": [
      "Vex",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Vex",
      "org.bukkit.Location"
    ],
    "method": "setBound",
    "id": "org.bukkit.entity.Vex#setBound(org.bukkit.Location)",
    "class": "org.bukkit.entity.Vex"
  },
  {
    "static": true,
    "field": "LEGACY_BEETROOT",
    "id": "org.bukkit.Material#LEGACY_BEETROOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the item in the horse's armor slot.",
    "param-names": ["HorseInventory"],
    "param-types": ["org.bukkit.inventory.HorseInventory"],
    "method": "getArmor",
    "id": "org.bukkit.inventory.HorseInventory#getArmor()",
    "class": "org.bukkit.inventory.HorseInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Get the type of the mob being hatched (EntityType.CHICKEN by default)",
    "method": "getHatchingType",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getHatchingType()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets this Panda's main gene.",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "getMainGene",
    "id": "org.bukkit.entity.Panda#getMainGene()",
    "class": "org.bukkit.entity.Panda",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "static": true,
    "field": "RAW_COPPER_BLOCK",
    "id": "org.bukkit.Material#RAW_COPPER_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SEA",
    "id": "org.bukkit.Art#SEA",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "NETHERITE_SCRAP",
    "id": "org.bukkit.Material#NETHERITE_SCRAP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Checks if this Material is edible.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isEdible",
    "id": "org.bukkit.Material#isEdible()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Gets the cause of the damage.",
    "method": "getCause",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "RABBIT_FOOT",
    "id": "org.bukkit.Material#RABBIT_FOOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item the entity is holding in their off hand.",
    "param-names": [
      "EntityEquipment",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInOffHand",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInOffHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Removes all stacks in the inventory matching the given stack.\\n\\nThis will only match a slot if both the type and the amount of the\\nstack match",
    "param-names": [
      "Inventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "remove",
    "id": "org.bukkit.inventory.Inventory#remove(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Block ignition caused by a player or dispenser using flint-and-steel.",
    "static": true,
    "field": "FLINT_AND_STEEL",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#FLINT_AND_STEEL",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "static": true,
    "field": "WOODEN_SHOVEL",
    "id": "org.bukkit.Material#WOODEN_SHOVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the scoreboard team overridden glow color of this display.",
    "param-names": [
      "Display",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "org.bukkit.Color"
    ],
    "method": "setGlowColorOverride",
    "id": "org.bukkit.entity.Display#setGlowColorOverride(org.bukkit.Color)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "CRIMSON_HANGING_SIGN",
    "id": "org.bukkit.Material#CRIMSON_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Custom damage.\\n\\nDamage: variable",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#CUSTOM",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_VEIN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SCULK_VEIN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityCombustEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent"
  },
  {
    "descr": "Gets whether or not structures are being generated.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "canGenerateStructures",
    "id": "org.bukkit.World#canGenerateStructures()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the knockback strength for an arrow, which is the\\norg.bukkit.enchantments.Enchantment#KNOCKBACK KnockBack level\\nof the bow that shot it.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "getKnockbackStrength",
    "id": "org.bukkit.entity.AbstractArrow#getKnockbackStrength()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.TreeSpecies#values()",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies[]"
  },
  {
    "descr": "Decreases odds of catching worthless junk",
    "static": true,
    "field": "LUCK",
    "id": "org.bukkit.enchantments.Enchantment#LUCK",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Get the entity that caused the combustion event.",
    "method": "getCombuster",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getCombuster()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Add a passenger to the vehicle.",
    "param-names": [
      "Entity",
      "Passenger"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.entity.Entity"
    ],
    "method": "addPassenger",
    "id": "org.bukkit.entity.Entity#addPassenger(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'drag' property.",
    "param-names": [
      "BubbleColumn",
      "Drag"
    ],
    "param-types": [
      "org.bukkit.block.data.type.BubbleColumn",
      "boolean"
    ],
    "method": "setDrag",
    "id": "org.bukkit.block.data.type.BubbleColumn#setDrag(boolean)",
    "class": "org.bukkit.block.data.type.BubbleColumn"
  },
  {
    "descr": "Gets the view distance/range of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getViewRange",
    "id": "org.bukkit.entity.Display#getViewRange()",
    "class": "org.bukkit.entity.Display",
    "return": "float"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "boolean"
  },
  {
    "descr": "Entering the bed is prevented due to there being monsters nearby.",
    "static": true,
    "field": "NOT_SAFE",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#NOT_SAFE",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "descr": "Get the cached index of the closest matching color in the palette to the given\\ncolor.",
    "param-names": [
      "MapPalette.MapColorCache",
      "Color"
    ],
    "param-types": [
      "org.bukkit.map.MapPalette.MapColorCache",
      "java.awt.Color"
    ],
    "method": "matchColor",
    "id": "org.bukkit.map.MapPalette.MapColorCache#matchColor(java.awt.Color)",
    "class": "org.bukkit.map.MapPalette.MapColorCache",
    "return": "byte"
  },
  {
    "descr": "Gets the effect type specified by the given name.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByName",
    "id": "org.bukkit.potion.PotionEffectType#getByName(java.lang.String)",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "The client accepted the pack, but download failed.",
    "static": true,
    "field": "FAILED_DOWNLOAD",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#FAILED_DOWNLOAD",
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status"
  },
  {
    "descr": "Sound of a door opening.",
    "static": true,
    "field": "DOOR_TOGGLE",
    "id": "org.bukkit.Effect#DOOR_TOGGLE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIME_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LIME_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds new pages to the end of the book. Up to a maximum of 50 pages with\\n256 characters per page.",
    "param-names": [
      "BookMeta",
      "Pages"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "java.lang.String[]"
    ],
    "method": "addPage",
    "id": "org.bukkit.inventory.meta.BookMeta#addPage(java.lang.String...)",
    "class": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "static": true,
    "field": "FIGHTERS",
    "id": "org.bukkit.Art#FIGHTERS",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "BLOCK_WATER_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_WATER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Splits the boss bar into 10 segments",
    "static": true,
    "field": "SEGMENTED_10",
    "id": "org.bukkit.boss.BarStyle#SEGMENTED_10",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "This method is the same as equals, but does not consider stack size\\n(amount).",
    "param-names": [
      "ItemStack",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "isSimilar",
    "id": "org.bukkit.inventory.ItemStack#isSimilar(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DASHER",
    "id": "org.bukkit.entity.TropicalFish.Pattern#DASHER",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "static": true,
    "field": "PLAYER_KILLS",
    "id": "org.bukkit.scoreboard.Criterias#PLAYER_KILLS",
    "class": "org.bukkit.scoreboard.Criterias",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "STONY_SHORE",
    "id": "org.bukkit.block.Biome#STONY_SHORE",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the line of text at the specified index.\\n\\nFor example, setLine(0, \"Line One\") will set the first line of text to\\n\"Line One\".",
    "param-names": [
      "Sign",
      "Index",
      "Line"
    ],
    "param-types": [
      "org.bukkit.block.Sign",
      "int",
      "java.lang.String"
    ],
    "method": "setLine",
    "id": "org.bukkit.block.Sign#setLine(int,java.lang.String)",
    "class": "org.bukkit.block.Sign"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Put the given ItemStack into the helmet slot. This does not check if\\nthe ItemStack is a helmet",
    "param-names": [
      "PlayerInventory",
      "Helmet"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setHelmet",
    "id": "org.bukkit.inventory.PlayerInventory#setHelmet(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "Sets the item to the given ItemStack, this will replace whatever the\\nuser was holding.",
    "param-names": [
      "HumanEntity",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInHand",
    "id": "org.bukkit.entity.HumanEntity#setItemInHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "ENTITY_WITCH_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_WITCH_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a Location version of this vector with yaw and pitch being 0.",
    "param-names": [
      "Vector",
      "World"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.World"
    ],
    "method": "toLocation",
    "id": "org.bukkit.util.Vector#toLocation(org.bukkit.World)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Returns a value that represents how 'slippery' the block is.\\nBlocks with higher slipperiness, like Material#ICE can be slid on\\nfurther by the player and other entities.\\nMost blocks have a default slipperiness of 0.6f.\\nOnly available when #isBlock() is true.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getSlipperiness",
    "id": "org.bukkit.Material#getSlipperiness()",
    "class": "org.bukkit.Material",
    "return": "float"
  },
  {
    "static": true,
    "field": "LEGACY_SIGN_POST",
    "id": "org.bukkit.Material#LEGACY_SIGN_POST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_FROZEN_PEAKS",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_FROZEN_PEAKS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increases damage against all targets",
    "static": true,
    "field": "DAMAGE_ALL",
    "id": "org.bukkit.enchantments.Enchantment#DAMAGE_ALL",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "BLOCK_SIGN_WAXED_INTERACT_FAIL",
    "id": "org.bukkit.Sound#BLOCK_SIGN_WAXED_INTERACT_FAIL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether this server has a whitelist or not.",
    "static": true,
    "method": "hasWhitelist",
    "id": "org.bukkit.Bukkit#hasWhitelist()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "END_STONE_BRICKS",
    "id": "org.bukkit.Material#END_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the color of the fish's body.",
    "param-names": ["TropicalFish"],
    "param-types": ["org.bukkit.entity.TropicalFish"],
    "method": "getBodyColor",
    "id": "org.bukkit.entity.TropicalFish#getBodyColor()",
    "class": "org.bukkit.entity.TropicalFish",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "method": "spigot",
    "id": "org.bukkit.Bukkit#spigot()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.Server.Spigot"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_PRE_SNEEZE",
    "id": "org.bukkit.Sound#ENTITY_PANDA_PRE_SNEEZE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "PLAY_DEAD_TICKS",
    "id": "org.bukkit.entity.memory.MemoryKey#PLAY_DEAD_TICKS",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_DRAGON_HURT",
    "id": "org.bukkit.Sound#ENTITY_ENDER_DRAGON_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set if the structure outline should show air blocks.",
    "param-names": [
      "Structure",
      "Show Air"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "boolean"
    ],
    "method": "setShowAir",
    "id": "org.bukkit.block.Structure#setShowAir(boolean)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "static": true,
    "field": "BLOCK_SNOW_STEP",
    "id": "org.bukkit.Sound#BLOCK_SNOW_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the boots worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Boots"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setBoots",
    "id": "org.bukkit.inventory.EntityEquipment#setBoots(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_FLOP",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets user-specified limit for number of water ambient mobs that can spawn\\nin a chunk.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWaterAmbientSpawnLimit",
    "id": "org.bukkit.World#getWaterAmbientSpawnLimit()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "Gets the player who initiated the conversion.",
    "param-names": ["ZombieVillager"],
    "param-types": ["org.bukkit.entity.ZombieVillager"],
    "method": "getConversionPlayer",
    "id": "org.bukkit.entity.ZombieVillager#getConversionPlayer()",
    "class": "org.bukkit.entity.ZombieVillager",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "ENTITY_OCELOT_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_OCELOT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Clears out the whole Inventory.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "clear",
    "id": "org.bukkit.inventory.Inventory#clear()",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Get the demand for this trade.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getDemand",
    "id": "org.bukkit.inventory.MerchantRecipe#getDemand()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "int"
  },
  {
    "descr": "Called when one Entity breeds with another Entity.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "COOKIE",
    "id": "org.bukkit.Material#COOKIE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the input of this cooking recipe.",
    "param-names": [
      "CookingRecipe",
      "Input"
    ],
    "param-types": [
      "org.bukkit.inventory.CookingRecipe",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "method": "setInputChoice",
    "id": "org.bukkit.inventory.CookingRecipe#setInputChoice(org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "descr": "Sends a title and a subtitle message to the player. If either of these\\nvalues are null, they will not be sent and the display will remain\\nunchanged. If they are empty strings, the display will be updated as\\nsuch. If the strings contain a new line, only the first line will be\\nsent. All timings values may take a value of -1 to indicate that they\\nwill use the last value sent (or the defaults if no title has been\\ndisplayed).",
    "param-names": [
      "Player",
      "Title",
      "Subtitle",
      "Fade In",
      "Stay",
      "Fade Out"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.lang.String",
      "int",
      "int",
      "int"
    ],
    "method": "sendTitle",
    "id": "org.bukkit.entity.Player#sendTitle(java.lang.String,java.lang.String,int,int,int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "EAST_NORTH_EAST",
    "id": "org.bukkit.block.BlockFace#EAST_NORTH_EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "RECOVERY_COMPASS",
    "id": "org.bukkit.Material#RECOVERY_COMPASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a Slime splits into smaller Slimes upon death",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent"
  },
  {
    "descr": "Sets the value of the 'distance' property.",
    "param-names": [
      "Scaffolding",
      "Distance"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Scaffolding",
      "int"
    ],
    "method": "setDistance",
    "id": "org.bukkit.block.data.type.Scaffolding#setDistance(int)",
    "class": "org.bukkit.block.data.type.Scaffolding"
  },
  {
    "descr": "Gets the amount of items in this stack",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getAmount",
    "id": "org.bukkit.inventory.ItemStack#getAmount()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_DRINK",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_DRINK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_BREATH",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_BREATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the item cost (in amount) to complete the current repair.",
    "param-names": [
      "AnvilInventory",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.inventory.AnvilInventory",
      "int"
    ],
    "method": "setRepairCostAmount",
    "id": "org.bukkit.inventory.AnvilInventory#setRepairCostAmount(int)",
    "class": "org.bukkit.inventory.AnvilInventory"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_DEATH",
    "id": "org.bukkit.Sound#ENTITY_CAT_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the location to mark as where the player moved from",
    "param-names": ["From"],
    "param-types": ["org.bukkit.Location"],
    "method": "setFrom",
    "id": "org.bukkit.event.player.PlayerMoveEvent#setFrom(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent"
  },
  {
    "descr": "The player is not allowed to log in, for reasons undefined",
    "static": true,
    "field": "KICK_OTHER",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#KICK_OTHER",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "Gets the block or entity belonging to the open inventory",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getHolder",
    "id": "org.bukkit.inventory.Inventory#getHolder()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "org.bukkit.inventory.InventoryHolder"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_HIT",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "PUFFERFISH_SPAWN_EGG",
    "id": "org.bukkit.Material#PUFFERFISH_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Drops an item at the specified Location with a random offset\\nNote that functions will run before the entity is spawned",
    "param-names": [
      "World",
      "Location",
      "Item",
      "Function"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.util.Consumer"
    ],
    "method": "dropItemNaturally",
    "id": "org.bukkit.World#dropItemNaturally(org.bukkit.Location,org.bukkit.inventory.ItemStack,org.bukkit.util.Consumer<org.bukkit.entity.Item>)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.Item"
  },
  {
    "static": true,
    "field": "YEARN",
    "id": "org.bukkit.MusicInstrument#YEARN",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "descr": "Player attacks another entity",
    "static": true,
    "field": "ATTACK",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#ATTACK",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "static": true,
    "field": "GOLD_NUGGET",
    "id": "org.bukkit.Material#GOLD_NUGGET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "STONE_SWORD",
    "id": "org.bukkit.Material#STONE_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Messenger responsible for this server.",
    "static": true,
    "method": "getMessenger",
    "id": "org.bukkit.Bukkit#getMessenger()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.plugin.messaging.Messenger"
  },
  {
    "static": true,
    "field": "BLOCK_SCAFFOLDING_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SCAFFOLDING_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'honey_level' property.",
    "param-names": ["Beehive"],
    "param-types": ["org.bukkit.block.data.type.Beehive"],
    "method": "getHoneyLevel",
    "id": "org.bukkit.block.data.type.Beehive#getHoneyLevel()",
    "class": "org.bukkit.block.data.type.Beehive",
    "return": "int"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "POLISHED_BASALT",
    "id": "org.bukkit.Material#POLISHED_BASALT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_JUNGLE_LOG",
    "id": "org.bukkit.Material#STRIPPED_JUNGLE_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_SWORD",
    "id": "org.bukkit.Material#LEGACY_IRON_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the source of this primed TNT.\\nThe source is the entity responsible for the creation of this primed TNT.\\n\\nMust be instance of org.bukkit.entity.LivingEntity otherwise will\\nbe set to null. The parameter is typed org.bukkit.entity.Entity to be consistent with org.bukkit.entity.TNTPrimed#getSource() method.",
    "param-names": [
      "TNTPrimed",
      "Source"
    ],
    "param-types": [
      "org.bukkit.entity.TNTPrimed",
      "org.bukkit.entity.Entity"
    ],
    "method": "setSource",
    "id": "org.bukkit.entity.TNTPrimed#setSource(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.TNTPrimed"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The ItemStack that was used to initiate breeding, if present.",
    "method": "getBredWith",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getBredWith()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "PARROT",
    "id": "org.bukkit.entity.EntityType#PARROT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Checks if this compass has been paired to a lodestone.",
    "param-names": ["CompassMeta"],
    "param-types": ["org.bukkit.inventory.meta.CompassMeta"],
    "method": "hasLodestone",
    "id": "org.bukkit.inventory.meta.CompassMeta#hasLodestone()",
    "class": "org.bukkit.inventory.meta.CompassMeta",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_WARPED_STEM",
    "id": "org.bukkit.Material#STRIPPED_WARPED_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BAMBOO_RAFT",
    "id": "org.bukkit.Material#BAMBOO_RAFT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_EVOKER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_EVOKER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A bolt of lightning.\\n\\nSpawn with World#strikeLightning(Location).",
    "static": true,
    "field": "LIGHTNING",
    "id": "org.bukkit.entity.EntityType#LIGHTNING",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.WorldSaveEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.WorldSaveEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#values()",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause[]"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.GenericGameEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when a raid wave spawns.",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent"
  },
  {
    "descr": "Spawn a FallingBlock entity at the given Location of\\nthe specified MaterialData. The MaterialData dictates what is falling.\\nWhen the FallingBlock hits the ground, it will place that block.\\n\\nThe Material must be a block type, check with Material#isBlock() data.getItemType().isBlock(). The Material may not be air.",
    "param-names": [
      "World",
      "Location",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.material.MaterialData"
    ],
    "method": "spawnFallingBlock",
    "id": "org.bukkit.World#spawnFallingBlock(org.bukkit.Location,org.bukkit.material.MaterialData)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "Sets the block's animated state to open and prevents it from being closed\\nuntil #close() is called.",
    "param-names": ["Lidded"],
    "param-types": ["org.bukkit.block.Lidded"],
    "method": "open",
    "id": "org.bukkit.block.Lidded#open()",
    "class": "org.bukkit.block.Lidded"
  },
  {
    "descr": "The sound played / particles shown when a redstone torch burns out.",
    "static": true,
    "field": "REDSTONE_TORCH_BURNOUT",
    "id": "org.bukkit.Effect#REDSTONE_TORCH_BURNOUT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "param-names": [
      "Campfire",
      "Index"
    ],
    "param-types": [
      "org.bukkit.block.Campfire",
      "int"
    ],
    "method": "getItem",
    "id": "org.bukkit.block.Campfire#getItem(int)",
    "class": "org.bukkit.block.Campfire",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "When a wither is filling its health during spawning",
    "static": true,
    "field": "WITHER_SPAWN",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#WITHER_SPAWN",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Ocelot.Type#values()",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type[]"
  },
  {
    "static": true,
    "field": "PIG_ONE_CM",
    "id": "org.bukkit.Statistic#PIG_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_NEARBY_CLOSE",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_NEARBY_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set cook time.\\nThis is the amount of time the item is required to cook for.",
    "param-names": [
      "Furnace",
      "Cook Time Total"
    ],
    "param-types": [
      "org.bukkit.block.Furnace",
      "int"
    ],
    "method": "setCookTimeTotal",
    "id": "org.bukkit.block.Furnace#setCookTimeTotal(int)",
    "class": "org.bukkit.block.Furnace"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "PINK_BANNER",
    "id": "org.bukkit.Material#PINK_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.WorldLoadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.WorldLoadEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the current ingredient for brewing.",
    "param-names": ["BrewerInventory"],
    "param-types": ["org.bukkit.inventory.BrewerInventory"],
    "method": "getIngredient",
    "id": "org.bukkit.inventory.BrewerInventory#getIngredient()",
    "class": "org.bukkit.inventory.BrewerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Called when an ItemStack is successfully smelted in a furnace.",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent"
  },
  {
    "static": true,
    "field": "BANNER_PINK",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_PINK",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the amount of ticks before client-side interpolation will commence.",
    "param-names": [
      "Display",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "int"
    ],
    "method": "setInterpolationDelay",
    "id": "org.bukkit.entity.Display#setInterpolationDelay(int)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "descr": "Calculates the cross product of this vector with another without mutating\\nthe original. The cross product is defined as:\\n\\nx = y1 * z2 - y2 * z1\\ny = z1 * x2 - z2 * x1\\nz = x1 * y2 - x2 * y1\\n",
    "param-names": [
      "Vector",
      "O"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "getCrossProduct",
    "id": "org.bukkit.util.Vector#getCrossProduct(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets if this world allows players to charge and use respawn anchors.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isRespawnAnchorWorks",
    "id": "org.bukkit.World#isRespawnAnchorWorks()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when a player fills a bucket",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent"
  },
  {
    "descr": "Open a Material#WRITTEN_BOOK for a Player",
    "param-names": [
      "Player",
      "Book"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "openBook",
    "id": "org.bukkit.entity.Player#openBook(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_COBBLE_WALL",
    "id": "org.bukkit.Material#LEGACY_COBBLE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_DASH_READY",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_DASH_READY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "INVISIBILITY",
    "id": "org.bukkit.potion.PotionType#INVISIBILITY",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Set the level of current fuel for brewing.",
    "param-names": [
      "BrewingStand",
      "Level"
    ],
    "param-types": [
      "org.bukkit.block.BrewingStand",
      "int"
    ],
    "method": "setFuelLevel",
    "id": "org.bukkit.block.BrewingStand#setFuelLevel(int)",
    "class": "org.bukkit.block.BrewingStand"
  },
  {
    "descr": "How to display the death messages for players on this team.",
    "static": true,
    "field": "DEATH_MESSAGE_VISIBILITY",
    "id": "org.bukkit.scoreboard.Team.Option#DEATH_MESSAGE_VISIBILITY",
    "class": "org.bukkit.scoreboard.Team.Option",
    "return": "org.bukkit.scoreboard.Team.Option"
  },
  {
    "descr": "Gets the base amount of damage this arrow will do.\\nDefaults to 2.0 for a normal arrow with\\n0.5 * (1 + power level) added for arrows fired from\\nenchanted bows.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "getDamage",
    "id": "org.bukkit.entity.AbstractArrow#getDamage()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "double"
  },
  {
    "static": true,
    "field": "LEGACY_DETECTOR_RAIL",
    "id": "org.bukkit.Material#LEGACY_DETECTOR_RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_HURT_LAND",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_HURT_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a cat type by its ID.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getType",
    "id": "org.bukkit.entity.Ocelot.Type#getType(int)",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.Bisected.Half#values()",
    "class": "org.bukkit.block.data.Bisected.Half",
    "return": "org.bukkit.block.data.Bisected.Half[]"
  },
  {
    "descr": "Gets the Enchantment at the specified key",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getByKey",
    "id": "org.bukkit.enchantments.Enchantment#getByKey(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerCommandSendEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "STONE_SLAB",
    "id": "org.bukkit.Material#STONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the entity hooked by this fish hook.",
    "param-names": [
      "FishHook",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "org.bukkit.entity.Entity"
    ],
    "method": "setHookedEntity",
    "id": "org.bukkit.entity.FishHook#setHookedEntity(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the message that the player will send. This message will be used\\nwith #getFormat().",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent"
  },
  {
    "descr": "Sound of a door opening.",
    "static": true,
    "field": "IRON_TRAPDOOR_TOGGLE",
    "id": "org.bukkit.Effect#IRON_TRAPDOOR_TOGGLE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "LEATHER_HORSE_ARMOR",
    "id": "org.bukkit.Material#LEATHER_HORSE_ARMOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_COMPARATOR_CLICK",
    "id": "org.bukkit.Sound#BLOCK_COMPARATOR_CLICK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CALCITE_FALL",
    "id": "org.bukkit.Sound#BLOCK_CALCITE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the amount that the radius of this cloud will decrease by when it\\napplies an effect to an entity.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getRadiusOnUse",
    "id": "org.bukkit.entity.AreaEffectCloud#getRadiusOnUse()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "float"
  },
  {
    "static": true,
    "field": "VEX_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#VEX_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Construct the vector with all components as 0.",
    "id": "org.bukkit.util.Vector#Vector()",
    "class": "org.bukkit.util.Vector"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "ACACIA_FENCE_GATE",
    "id": "org.bukkit.Material#ACACIA_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: CaveVinesPlant",
    "static": true,
    "field": "CAVE_VINES_PLANT",
    "id": "org.bukkit.Material#CAVE_VINES_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_BRICK_ITEM",
    "id": "org.bukkit.Material#LEGACY_NETHER_BRICK_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.TimeSkipEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Removes a KeyedBossBar specified by this key.\\n\\nnot bound to a org.bukkit.entity.Boss\\n\\nnot created using\\n#createBossBar(String, BarColor, BarStyle, BarFlag...)\\n\\n\\ne.g. bossbars created using the bossbar command",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "removeBossBar",
    "id": "org.bukkit.Bukkit#removeBossBar(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Sets the entity which is followed by the camera when in\\nGameMode#SPECTATOR.",
    "param-names": [
      "Player",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Entity"
    ],
    "method": "setSpectatorTarget",
    "id": "org.bukkit.entity.Player#setSpectatorTarget(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_CHAIN",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_CHAIN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#values()",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result[]"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_SPARSE_JUNGLE",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_SPARSE_JUNGLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Get the player's EnderChest inventory",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getEnderChest",
    "id": "org.bukkit.entity.HumanEntity#getEnderChest()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets the maximum corner as vector.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMax",
    "id": "org.bukkit.util.BoundingBox#getMax()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Items pertaining to transportation including minecarts, rails, boats,\\nelytra, etc.",
    "static": true,
    "field": "TRANSPORTATION",
    "id": "org.bukkit.inventory.CreativeCategory#TRANSPORTATION",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#values()",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause[]"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent"
  },
  {
    "descr": "Get the template recipe item.",
    "param-names": ["SmithingTrimRecipe"],
    "param-types": ["org.bukkit.inventory.SmithingTrimRecipe"],
    "method": "getTemplate",
    "id": "org.bukkit.inventory.SmithingTrimRecipe#getTemplate()",
    "class": "org.bukkit.inventory.SmithingTrimRecipe",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "static": true,
    "field": "LEGACY_CARPET",
    "id": "org.bukkit.Material#LEGACY_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.ServiceUnregisterEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceUnregisterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "BASALT",
    "id": "org.bukkit.Material#BASALT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the entity's height",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getHeight",
    "id": "org.bukkit.entity.Entity#getHeight()",
    "class": "org.bukkit.entity.Entity",
    "return": "double"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "Player",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_HURT",
    "id": "org.bukkit.Sound#ENTITY_PANDA_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "PITCHER_PLANT",
    "id": "org.bukkit.Material#PITCHER_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the entity is glowing or not.\\nnb: this refers to the 'Glowing' entity property, not whether a\\nglowing potion effect is applied",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isGlowing",
    "id": "org.bukkit.entity.Entity#isGlowing()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_DEATH_BABY",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_DEATH_BABY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BellRingEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Set the art on this painting",
    "param-names": [
      "Painting",
      "Art"
    ],
    "param-types": [
      "org.bukkit.entity.Painting",
      "org.bukkit.Art"
    ],
    "method": "setArt",
    "id": "org.bukkit.entity.Painting#setArt(org.bukkit.Art)",
    "class": "org.bukkit.entity.Painting",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_MUTTON",
    "id": "org.bukkit.Material#LEGACY_MUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Resets the max health to the original amount.",
    "param-names": ["Damageable"],
    "param-types": ["org.bukkit.entity.Damageable"],
    "method": "resetMaxHealth",
    "id": "org.bukkit.entity.Damageable#resetMaxHealth()",
    "class": "org.bukkit.entity.Damageable"
  },
  {
    "descr": "BlockData: Chain",
    "static": true,
    "field": "CHAIN",
    "id": "org.bukkit.Material#CHAIN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the delay before this Item is available to be picked up by players",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.entity.Item"],
    "method": "getPickupDelay",
    "id": "org.bukkit.entity.Item#getPickupDelay()",
    "class": "org.bukkit.entity.Item",
    "return": "int"
  },
  {
    "descr": "Gets the GameMode the player is switched to.",
    "method": "getNewGameMode",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#getNewGameMode()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "org.bukkit.GameMode"
  },
  {
    "descr": "Sets manner in which this objective will be rendered.",
    "param-names": [
      "Objective",
      "Render Type"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Objective",
      "org.bukkit.scoreboard.RenderType"
    ],
    "method": "setRenderType",
    "id": "org.bukkit.scoreboard.Objective#setRenderType(org.bukkit.scoreboard.RenderType)",
    "class": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "Gets the Note to be played.",
    "method": "getNote",
    "id": "org.bukkit.event.block.NotePlayEvent#getNote()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "org.bukkit.Note"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_HURT",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets if the entity has visual fire (it will always appear to be on fire).",
    "param-names": [
      "Entity",
      "Fire"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setVisualFire",
    "id": "org.bukkit.entity.Entity#setVisualFire(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LEGACY_GREEN_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_GREEN_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the spawn location of the world",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "int"
    ],
    "method": "setSpawnLocation",
    "id": "org.bukkit.World#setSpawnLocation(int,int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Damage caused by being put in a block\\n\\nDamage: 1",
    "static": true,
    "field": "SUFFOCATION",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#SUFFOCATION",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_HIT",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player changing the sign involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.SignChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "This event will fire when a player is finishing consuming an item (food,\\npotion, milk bucket).\\n\\nIf the ItemStack is modified the server will use the effects of the new\\nitem and not remove the original one from the player's inventory.\\n\\nIf the event is cancelled the effect will not be applied and the item will\\nnot be removed from the player's inventory.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent"
  },
  {
    "static": true,
    "field": "MAGENTA_CARPET",
    "id": "org.bukkit.Material#MAGENTA_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a NamespacedKey from the supplied string.\\nThe default namespace will be Minecraft's (i.e.\\n#minecraft(String)).",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "fromString",
    "id": "org.bukkit.NamespacedKey#fromString(java.lang.String)",
    "class": "org.bukkit.NamespacedKey",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "static": true,
    "field": "NOTE",
    "id": "org.bukkit.Particle#NOTE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Represents yellow dye.",
    "static": true,
    "field": "YELLOW",
    "id": "org.bukkit.DyeColor#YELLOW",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Gets the entities that the original entity was transformed to.",
    "method": "getTransformedEntities",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getTransformedEntities()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Banned player profiles",
    "static": true,
    "field": "PROFILE",
    "id": "org.bukkit.BanList.Type#PROFILE",
    "class": "org.bukkit.BanList.Type",
    "return": "org.bukkit.BanList.Type"
  },
  {
    "static": true,
    "field": "CRIT_MAGIC",
    "id": "org.bukkit.Particle#CRIT_MAGIC",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BOWL",
    "id": "org.bukkit.Material#BOWL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when an entity enters love mode.\\n\\nThis can be cancelled but the item will still be consumed that was used to\\nmake the entity enter into love mode.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent"
  },
  {
    "static": true,
    "field": "AXOLOTL_SPAWN_EGG",
    "id": "org.bukkit.Material#AXOLOTL_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PotionSplashEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent"
  },
  {
    "descr": "Temporarily adds a new PermissionAttachment with a single\\npermission by name and value",
    "param-names": [
      "Permissible",
      "Plugin",
      "Name",
      "Value",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.plugin.Plugin",
      "java.lang.String",
      "boolean",
      "int"
    ],
    "method": "addAttachment",
    "id": "org.bukkit.permissions.Permissible#addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean,int)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "org.bukkit.permissions.PermissionAttachment"
  },
  {
    "param-names": ["Slime"],
    "param-types": ["org.bukkit.entity.Slime"],
    "method": "getSize",
    "id": "org.bukkit.entity.Slime#getSize()",
    "class": "org.bukkit.entity.Slime",
    "return": "int"
  },
  {
    "descr": "Damage caused due to burns caused by fire\\n\\nDamage: 1",
    "static": true,
    "field": "FIRE_TICK",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#FIRE_TICK",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Sets the armor stand's left arm's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": [
      "ArmorStand",
      "Pose"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.util.EulerAngle"
    ],
    "method": "setLeftArmPose",
    "id": "org.bukkit.entity.ArmorStand#setLeftArmPose(org.bukkit.util.EulerAngle)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Sets the entity currently perched on the left shoulder, or null to\\nremove. This method will remove the entity from the world.\\n\\nNote that only a copy of the entity will be set to display on the\\nshoulder.\\n\\nAlso note that the client will currently only render Parrot\\nentities.",
    "param-names": [
      "HumanEntity",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.entity.Entity"
    ],
    "method": "setShoulderEntityLeft",
    "id": "org.bukkit.entity.HumanEntity#setShoulderEntityLeft(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Gets whether the ClickType for this event indicates that the key was\\npressed down when the click was made.",
    "method": "isShiftClick",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#isShiftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the name displayed to entries for this team",
    "param-names": [
      "Team",
      "Display Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "java.lang.String"
    ],
    "method": "setDisplayName",
    "id": "org.bukkit.scoreboard.Team#setDisplayName(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "Sets the anger level of this warden.\\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\\ntarget it will actively pursue it.",
    "param-names": [
      "Warden",
      "Entity",
      "Anger"
    ],
    "param-types": [
      "org.bukkit.entity.Warden",
      "org.bukkit.entity.Entity",
      "int"
    ],
    "method": "setAnger",
    "id": "org.bukkit.entity.Warden#setAnger(org.bukkit.entity.Entity,int)",
    "class": "org.bukkit.entity.Warden"
  },
  {
    "descr": "Obtains the block's hardness level (also known as \"strength\").\\n\\nThis number is used to calculate the time required to break each block.\\n\\nOnly available when #isBlock() is true.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getHardness",
    "id": "org.bukkit.Material#getHardness()",
    "class": "org.bukkit.Material",
    "return": "float"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "BAMBOO_STAIRS",
    "id": "org.bukkit.Material#BAMBOO_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DISPENSER_INSPECTED",
    "id": "org.bukkit.Statistic#DISPENSER_INSPECTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Sets the total cook time for this event.",
    "param-names": ["Cook Time"],
    "param-types": ["int"],
    "method": "setTotalCookTime",
    "id": "org.bukkit.event.block.CampfireStartEvent#setTotalCookTime(int)",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerLocaleChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the item in the horse's armor slot.",
    "param-names": [
      "HorseInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.HorseInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setArmor",
    "id": "org.bukkit.inventory.HorseInventory#setArmor(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.HorseInventory"
  },
  {
    "static": true,
    "field": "POTTED_CRIMSON_FUNGUS",
    "id": "org.bukkit.Material#POTTED_CRIMSON_FUNGUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Stationary lava.",
    "static": true,
    "field": "LAVA",
    "id": "org.bukkit.Fluid#LAVA",
    "class": "org.bukkit.Fluid",
    "return": "org.bukkit.Fluid"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "JUNGLE_HANGING_SIGN",
    "id": "org.bukkit.Material#JUNGLE_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_HURT",
    "id": "org.bukkit.Sound#ENTITY_FOX_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_SAPLING_STEP",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_SAPLING_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The switch is mounted to the ceiling and pointing dowanrds.",
    "static": true,
    "field": "CEILING",
    "id": "org.bukkit.block.data.type.Switch.Face#CEILING",
    "class": "org.bukkit.block.data.type.Switch.Face",
    "return": "org.bukkit.block.data.type.Switch.Face"
  },
  {
    "descr": "Sets the location that this entity moved from",
    "param-names": ["From"],
    "param-types": ["org.bukkit.Location"],
    "method": "setFrom",
    "id": "org.bukkit.event.entity.EntityPortalEvent#setFrom(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent"
  },
  {
    "static": true,
    "field": "QUARTZ",
    "id": "org.bukkit.Material#QUARTZ",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BRITISH_SHORTHAIR",
    "id": "org.bukkit.entity.Cat.Type#BRITISH_SHORTHAIR",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "When time is changed using the vanilla /time command.",
    "static": true,
    "field": "COMMAND",
    "id": "org.bukkit.event.world.TimeSkipEvent.SkipReason#COMMAND",
    "class": "org.bukkit.event.world.TimeSkipEvent.SkipReason",
    "return": "org.bukkit.event.world.TimeSkipEvent.SkipReason"
  },
  {
    "descr": "Creates a new EulerAngle which is the result of adding\\nthe x, y, z components to this EulerAngle",
    "param-names": [
      "EulerAngle",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.util.EulerAngle",
      "double",
      "double",
      "double"
    ],
    "method": "add",
    "id": "org.bukkit.util.EulerAngle#add(double,double,double)",
    "class": "org.bukkit.util.EulerAngle",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Gets the block which ignited this block",
    "method": "getIgnitingBlock",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getIgnitingBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Set the ArmorTrim.",
    "param-names": [
      "ArmorMeta",
      "Trim"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ArmorMeta",
      "org.bukkit.inventory.meta.trim.ArmorTrim"
    ],
    "method": "setTrim",
    "id": "org.bukkit.inventory.meta.ArmorMeta#setTrim(org.bukkit.inventory.meta.trim.ArmorTrim)",
    "class": "org.bukkit.inventory.meta.ArmorMeta"
  },
  {
    "static": true,
    "field": "BLOCK_FROGSPAWN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_FROGSPAWN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_CARPET",
    "id": "org.bukkit.Material#LIGHT_GRAY_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the floored value of the Z component, indicating the block that\\nthis vector is contained with.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "getBlockZ",
    "id": "org.bukkit.util.Vector#getBlockZ()",
    "class": "org.bukkit.util.Vector",
    "return": "int"
  },
  {
    "descr": "Registers an Objective on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Name",
      "Criteria",
      "Display Name",
      "Render Type"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String",
      "org.bukkit.scoreboard.RenderType"
    ],
    "method": "registerNewObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#registerNewObjective(java.lang.String,java.lang.String,java.lang.String,org.bukkit.scoreboard.RenderType)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_FOX_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Prevents adding or changing the respective equipment - players cannot\\nreplace the empty slot with a new item or swap the items between\\nthemselves and the ArmorStand.",
    "static": true,
    "field": "ADDING_OR_CHANGING",
    "id": "org.bukkit.entity.ArmorStand.LockType#ADDING_OR_CHANGING",
    "class": "org.bukkit.entity.ArmorStand.LockType",
    "return": "org.bukkit.entity.ArmorStand.LockType"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_DOUBLE_STEP",
    "id": "org.bukkit.Material#LEGACY_WOOD_DOUBLE_STEP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Initialize the map renderer base with the given contextual status.",
    "param-names": ["Contextual"],
    "param-types": ["boolean"],
    "id": "org.bukkit.map.MapRenderer#MapRenderer(boolean)",
    "class": "org.bukkit.map.MapRenderer"
  },
  {
    "descr": "Makes this entity swing their off hand.\\nThis method does nothing if this entity does not have an animation for\\nswinging their off hand.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "swingOffHand",
    "id": "org.bukkit.entity.LivingEntity#swingOffHand()",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SMITHING_TABLE",
    "id": "org.bukkit.Material#SMITHING_TABLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Whether mobs should cease being angry at a player once they die.",
    "static": true,
    "field": "FORGIVE_DEAD_PLAYERS",
    "id": "org.bukkit.GameRule#FORGIVE_DEAD_PLAYERS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "LEGACY_PISTON_EXTENSION",
    "id": "org.bukkit.Material#LEGACY_PISTON_EXTENSION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the recipe to replenish.",
    "param-names": ["Recipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "setRecipe",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#setRecipe(org.bukkit.inventory.MerchantRecipe)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent"
  },
  {
    "static": true,
    "field": "LEGACY_INK_SACK",
    "id": "org.bukkit.Material#LEGACY_INK_SACK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_POLAR_BEAR_AMBIENT_BABY",
    "id": "org.bukkit.Sound#ENTITY_POLAR_BEAR_AMBIENT_BABY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Determines the maximum number of blocks which a command can modify.",
    "static": true,
    "field": "COMMAND_MODIFICATION_BLOCK_LIMIT",
    "id": "org.bukkit.GameRule#COMMAND_MODIFICATION_BLOCK_LIMIT",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_TUBE_CORAL_FAN",
    "id": "org.bukkit.Material#DEAD_TUBE_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.structure.Mirror#values()",
    "class": "org.bukkit.block.structure.Mirror",
    "return": "org.bukkit.block.structure.Mirror[]"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_FRAME_PLACE",
    "id": "org.bukkit.Sound#ENTITY_ITEM_FRAME_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CRACKED_STONE_BRICKS",
    "id": "org.bukkit.Material#CRACKED_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a single line of text from the sign involved in this event.",
    "param-names": ["Index"],
    "param-types": ["int"],
    "method": "getLine",
    "id": "org.bukkit.event.block.SignChangeEvent#getLine(int)",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ARM_SWING",
    "id": "org.bukkit.event.player.PlayerAnimationType#ARM_SWING",
    "class": "org.bukkit.event.player.PlayerAnimationType",
    "return": "org.bukkit.event.player.PlayerAnimationType"
  },
  {
    "descr": "Returns if the given item is a preferred choice to break this Block.\\nIn some cases this determines if a block will drop anything or extra\\nloot.",
    "param-names": [
      "BlockData",
      "Tool"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "isPreferredTool",
    "id": "org.bukkit.block.data.BlockData#isPreferredTool(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_SLIME_BALL",
    "id": "org.bukkit.Material#LEGACY_SLIME_BALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the material that a player would use to place this block.\\n\\nFor most blocks this is the same as #getMaterial() but some blocks\\nhave different materials used to place them.\\nFor example:\\n\\nMaterial#REDSTONE_WIRE -> Material#REDSTONE\\nMaterial#CARROTS -> Material#CARROT\\n",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "getPlacementMaterial",
    "id": "org.bukkit.block.data.BlockData#getPlacementMaterial()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "DIORITE_WALL",
    "id": "org.bukkit.Material#DIORITE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "BIRCH_FENCE",
    "id": "org.bukkit.Material#BIRCH_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_FENCE_GATE_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_FENCE_GATE_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set this to be owned by given AnimalTamer.\\n\\nIf the owner is not null, this will be tamed and will have any current\\npath it is following removed. If the owner is set to null, this will be\\nuntamed, and the current owner removed.",
    "param-names": [
      "Tameable",
      "Tamer"
    ],
    "param-types": [
      "org.bukkit.entity.Tameable",
      "org.bukkit.entity.AnimalTamer"
    ],
    "method": "setOwner",
    "id": "org.bukkit.entity.Tameable#setOwner(org.bukkit.entity.AnimalTamer)",
    "class": "org.bukkit.entity.Tameable"
  },
  {
    "descr": "Sets the item in the horse's saddle slot.",
    "param-names": [
      "AbstractHorseInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.AbstractHorseInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setSaddle",
    "id": "org.bukkit.inventory.AbstractHorseInventory#setSaddle(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.AbstractHorseInventory"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Type",
      "Amount",
      "Damage",
      "Data"
    ],
    "param-types": [
      "org.bukkit.Material",
      "int",
      "short",
      "java.lang.Byte"
    ],
    "id": "org.bukkit.inventory.ItemStack#ItemStack(org.bukkit.Material,int,short,java.lang.Byte)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SHRIEKER_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SHRIEKER_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_RETREAT",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_RETREAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player who performed the click.",
    "method": "getWhoClicked",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getWhoClicked()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "GREEN",
    "id": "org.bukkit.boss.BarColor#GREEN",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "static": true,
    "field": "LEGACY_LEATHER_CHESTPLATE",
    "id": "org.bukkit.Material#LEGACY_LEATHER_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the variant of this cow.",
    "param-names": ["MushroomCow"],
    "param-types": ["org.bukkit.entity.MushroomCow"],
    "method": "getVariant",
    "id": "org.bukkit.entity.MushroomCow#getVariant()",
    "class": "org.bukkit.entity.MushroomCow",
    "return": "org.bukkit.entity.MushroomCow.Variant"
  },
  {
    "descr": "Sets the patterns used on this banner",
    "param-names": [
      "Banner",
      "Patterns"
    ],
    "param-types": [
      "org.bukkit.block.Banner",
      "java.util.List"
    ],
    "method": "setPatterns",
    "id": "org.bukkit.block.Banner#setPatterns(java.util.List<org.bukkit.block.banner.Pattern>)",
    "class": "org.bukkit.block.Banner"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_FILL_FISH",
    "id": "org.bukkit.Sound#ITEM_BUCKET_FILL_FISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Play a Sound at the provided Location in the World.\\n\\nThis function will fail silently if Location or Sound are null.",
    "param-names": [
      "World",
      "Location",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Sound",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.Location,org.bukkit.Sound,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerJoinEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "NETHERITE_HOE",
    "id": "org.bukkit.Material#NETHERITE_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Drops an item at the specified Location with a random offset",
    "param-names": [
      "World",
      "Location",
      "Item"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "dropItemNaturally",
    "id": "org.bukkit.World#dropItemNaturally(org.bukkit.Location,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Player cleaning their banner.",
    "static": true,
    "field": "BANNER_WASH",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#BANNER_WASH",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "static": true,
    "field": "VILLAGER",
    "id": "org.bukkit.entity.EntityType#VILLAGER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Increments automatically when a player kills another player on the green team.",
    "static": true,
    "field": "TEAM_KILL_GREEN",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_GREEN",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Entity breaks item in chestplate slot",
    "static": true,
    "field": "BREAK_EQUIPMENT_CHESTPLATE",
    "id": "org.bukkit.EntityEffect#BREAK_EQUIPMENT_CHESTPLATE",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Get the entity that caused the TNT to be primed.",
    "method": "getPrimingEntity",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getPrimingEntity()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PigZapEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_DRIPSTONE_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_DRIPSTONE_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets if the text is see through.",
    "param-names": [
      "TextDisplay",
      "See Through"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "boolean"
    ],
    "method": "setSeeThrough",
    "id": "org.bukkit.entity.TextDisplay#setSeeThrough(boolean)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "static": true,
    "field": "LEGACY_HAY_BLOCK",
    "id": "org.bukkit.Material#LEGACY_HAY_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "RABBIT_SPAWN_EGG",
    "id": "org.bukkit.Material#RABBIT_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the InventoryAction that triggered this event.\\n\\nThis action cannot be changed, and represents what the normal outcome\\nof the event will be. To change the behavior of this\\nInventoryClickEvent, changes must be manually applied.",
    "method": "getAction",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getAction()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Set how this structure is rotated.",
    "param-names": [
      "Structure",
      "Rotation"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "org.bukkit.block.structure.StructureRotation"
    ],
    "method": "setRotation",
    "id": "org.bukkit.block.Structure#setRotation(org.bukkit.block.structure.StructureRotation)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Gets if the entity is climbing.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isClimbing",
    "id": "org.bukkit.entity.LivingEntity#isClimbing()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_GLASS",
    "id": "org.bukkit.Material#LEGACY_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "END_GATEWAY",
    "id": "org.bukkit.Material#END_GATEWAY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the sound to play if the skull is placed on a note block.\\n\\nNote: This only works for player heads. For other heads,\\nsee org.bukkit.Instrument.",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "getNoteBlockSound",
    "id": "org.bukkit.block.Skull#getNoteBlockSound()",
    "class": "org.bukkit.block.Skull",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BANNER_ORANGE",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_ORANGE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Gets the floored value of the X component, indicating the block that\\nthis vector is contained with.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "getBlockX",
    "id": "org.bukkit.util.Vector#getBlockX()",
    "class": "org.bukkit.util.Vector",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_BOTTLE_EMPTY",
    "id": "org.bukkit.Sound#ITEM_BOTTLE_EMPTY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Makes potion effect produce more, translucent, particles.",
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "isAmbient",
    "id": "org.bukkit.potion.PotionEffect#isAmbient()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "boolean"
  },
  {
    "descr": "Represents dark green",
    "static": true,
    "field": "DARK_GREEN",
    "id": "org.bukkit.ChatColor#DARK_GREEN",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Gets the original damage for the specified modifier, as defined at this\\nevent's construction.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "getOriginalDamage",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getOriginalDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "double"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent"
  },
  {
    "descr": "When a firework explodes.",
    "static": true,
    "field": "FIREWORK_EXPLODE",
    "id": "org.bukkit.EntityEffect#FIREWORK_EXPLODE",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Sets the amount of ticks that the animal will fall in love for.",
    "param-names": ["Ticks In Love"],
    "param-types": ["int"],
    "method": "setTicksInLove",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#setTicksInLove(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent"
  },
  {
    "descr": "Gets the chance of the leggings being dropped upon this creature's\\ndeath.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getLeggingsDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#getLeggingsDropChance()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "float"
  },
  {
    "descr": "Attempts to set the Server singleton.\\n\\nThis cannot be done if the Server is already set.",
    "param-names": ["Server"],
    "static": true,
    "param-types": ["org.bukkit.Server"],
    "method": "setServer",
    "id": "org.bukkit.Bukkit#setServer(org.bukkit.Server)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Returns the pattern type which matches the passed\\nidentifier or null if no matches are found",
    "param-names": ["Identifier"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByIdentifier",
    "id": "org.bukkit.block.banner.PatternType#getByIdentifier(java.lang.String)",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "SHEEP_GRAY",
    "id": "org.bukkit.loot.LootTables#SHEEP_GRAY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Convenience method. Returns the material of the item represented by\\nthis event",
    "method": "getMaterial",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getMaterial()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CARTOGRAPHY_TABLE",
    "id": "org.bukkit.Material#CARTOGRAPHY_TABLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_REDSTONE_TORCH_BURNOUT",
    "id": "org.bukkit.Sound#BLOCK_REDSTONE_TORCH_BURNOUT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the ItemStack for the item currently in the player's hand.",
    "method": "getItemInHand",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#getItemInHand()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "BONE_MEAL",
    "id": "org.bukkit.Material#BONE_MEAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Performs a ray trace that checks for both block and entity collisions.\\n\\nBlock collisions use the blocks' precise collision shapes. The\\nraySize parameter is only taken into account for entity\\ncollision checks.\\n\\nIf collisions with passable blocks are ignored, fluid collisions are\\nignored as well regardless of the fluid collision mode.\\n\\nPortal blocks are only considered passable if the ray starts within them.\\nApart from that collisions with portal blocks will be considered even if\\ncollisions with passable blocks are otherwise ignored.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance",
      "Fluid Collision Mode",
      "Ignore Passable Blocks",
      "Ray Size",
      "Filter"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "org.bukkit.FluidCollisionMode",
      "boolean",
      "double",
      "java.util.function.Predicate"
    ],
    "method": "rayTrace",
    "id": "org.bukkit.World#rayTrace(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode,boolean,double,java.util.function.Predicate<org.bukkit.entity.Entity>)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Check whether or not this event was called as a result of a plugin\\ninvoking\\nLootTable#fillInventory(org.bukkit.inventory.Inventory, java.util.Random, LootContext).",
    "method": "isPlugin",
    "id": "org.bukkit.event.world.LootGenerateEvent#isPlugin()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_SQUID_HURT",
    "id": "org.bukkit.Sound#ENTITY_GLOW_SQUID_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the new cooldown for the player.",
    "method": "getNewCooldown",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#getNewCooldown()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "int"
  },
  {
    "descr": "Represents the darker barked/leaved tree species.",
    "static": true,
    "field": "REDWOOD",
    "id": "org.bukkit.TreeSpecies#REDWOOD",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "static": true,
    "field": "POLISHED_DEEPSLATE",
    "id": "org.bukkit.Material#POLISHED_DEEPSLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the world border for this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWorldBorder",
    "id": "org.bukkit.World#getWorldBorder()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.WorldBorder"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "VISUAL",
    "id": "org.bukkit.Effect.Type#VISUAL",
    "class": "org.bukkit.Effect.Type",
    "return": "org.bukkit.Effect.Type"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "COBBLED_DEEPSLATE_STAIRS",
    "id": "org.bukkit.Material#COBBLED_DEEPSLATE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_WITHER_ROSE",
    "id": "org.bukkit.Material#POTTED_WITHER_ROSE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Return if the unbreakable tag is true. An unbreakable item will not lose\\ndurability.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "isUnbreakable",
    "id": "org.bukkit.inventory.meta.ItemMeta#isUnbreakable()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Returns the required data type for the particle",
    "param-names": ["Particle"],
    "param-types": ["org.bukkit.Particle"],
    "method": "getDataType",
    "id": "org.bukkit.Particle#getDataType()",
    "class": "org.bukkit.Particle",
    "return": "java.lang.Class"
  },
  {
    "descr": "BlockData: Levelled",
    "static": true,
    "field": "WATER",
    "id": "org.bukkit.Material#WATER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Subtracts the location by another. Not world-aware and\\norientation independent.",
    "param-names": [
      "Location",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.Location",
      "double",
      "double",
      "double"
    ],
    "method": "subtract",
    "id": "org.bukkit.Location#subtract(double,double,double)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "LEGACY_NETHERRACK",
    "id": "org.bukkit.Material#LEGACY_NETHERRACK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a pixel from the layers below this canvas.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int"
    ],
    "method": "getBasePixelColor",
    "id": "org.bukkit.map.MapCanvas#getBasePixelColor(int,int)",
    "class": "org.bukkit.map.MapCanvas",
    "return": "java.awt.Color"
  },
  {
    "static": true,
    "field": "ENTITY_HOSTILE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_HOSTILE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the bucket used.\\nThis refers to the bucket clicked with, ie Material#WATER_BUCKET.",
    "method": "getWaterBucket",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getWaterBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_SHAMBLE_BABY",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_SHAMBLE_BABY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.TechnicalPiston.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.TechnicalPiston.Type",
    "return": "org.bukkit.block.data.type.TechnicalPiston.Type"
  },
  {
    "static": true,
    "field": "DONKEY_SPAWN_EGG",
    "id": "org.bukkit.Material#DONKEY_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GRADIENT",
    "id": "org.bukkit.block.banner.PatternType#GRADIENT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Iron Xylophone is normally played when a note block is on top of a iron block.",
    "static": true,
    "field": "IRON_XYLOPHONE",
    "id": "org.bukkit.Instrument#IRON_XYLOPHONE",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Gets the limit for number of water underground creature that can spawn in a chunk in\\nthis world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWaterUndergroundCreatureSpawnLimit",
    "id": "org.bukkit.World#getWaterUndergroundCreatureSpawnLimit()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_BRUSH_BRUSHING_GRAVEL",
    "id": "org.bukkit.Sound#ITEM_BRUSH_BRUSHING_GRAVEL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_IRON",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_IRON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "LIME_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#LIME_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DEATHS",
    "id": "org.bukkit.Statistic#DEATHS",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_ITEM_GIVEN",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_ITEM_GIVEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_HORN_BREAK",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_HORN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "DRIPSTONE_CAVES",
    "id": "org.bukkit.block.Biome#DRIPSTONE_CAVES",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "ARMOR_STAND",
    "id": "org.bukkit.Material#ARMOR_STAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "isPickupCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#isPickupCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the minimum allowed value of the 'pickles' property.",
    "param-names": ["SeaPickle"],
    "param-types": ["org.bukkit.block.data.type.SeaPickle"],
    "method": "getMinimumPickles",
    "id": "org.bukkit.block.data.type.SeaPickle#getMinimumPickles()",
    "class": "org.bukkit.block.data.type.SeaPickle",
    "return": "int"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason",
    "return": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason"
  },
  {
    "descr": "Gets the item that broke",
    "method": "getBrokenItem",
    "id": "org.bukkit.event.player.PlayerItemBreakEvent#getBrokenItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the player's last death location.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "getLastDeathLocation",
    "id": "org.bukkit.OfflinePlayer#getLastDeathLocation()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sets the value of the 'vertical_direction' property.",
    "param-names": [
      "PointedDripstone",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.block.data.type.PointedDripstone",
      "org.bukkit.block.BlockFace"
    ],
    "method": "setVerticalDirection",
    "id": "org.bukkit.block.data.type.PointedDripstone#setVerticalDirection(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.data.type.PointedDripstone"
  },
  {
    "static": true,
    "field": "ENTITY_STRAY_DEATH",
    "id": "org.bukkit.Sound#ENTITY_STRAY_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_ROOTS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_HANGING_ROOTS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WINDSWEPT_HILLS",
    "id": "org.bukkit.block.Biome#WINDSWEPT_HILLS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.SkullType#WITHER",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "GLOW_BERRIES",
    "id": "org.bukkit.Material#GLOW_BERRIES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FIRE",
    "id": "org.bukkit.Art#FIRE",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "BREWER_POTTERY_SHERD",
    "id": "org.bukkit.Material#BREWER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the style of this boss bar",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "getStyle",
    "id": "org.bukkit.boss.BossBar#getStyle()",
    "class": "org.bukkit.boss.BossBar",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the result of this recipe.",
    "param-names": ["Recipe"],
    "param-types": ["org.bukkit.inventory.Recipe"],
    "method": "getResult",
    "id": "org.bukkit.inventory.Recipe#getResult()",
    "class": "org.bukkit.inventory.Recipe",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Draw a pixel to the canvas.\\n\\nThe provided color might be converted to another color,\\nwhich is in the map color range. This means, that\\n#getPixelColor(int, int) might return another\\ncolor than set.\\nIf null is used as color, then the color returned by\\n#getBasePixelColor(int, int) is shown on the map.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y",
      "Color"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int",
      "java.awt.Color"
    ],
    "method": "setPixelColor",
    "id": "org.bukkit.map.MapCanvas#setPixelColor(int,int,java.awt.Color)",
    "class": "org.bukkit.map.MapCanvas"
  },
  {
    "descr": "Sets the Panda's eating status. The panda must be holding food for this to work",
    "param-names": [
      "Panda",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Panda",
      "boolean"
    ],
    "method": "setEating",
    "id": "org.bukkit.entity.Panda#setEating(boolean)",
    "class": "org.bukkit.entity.Panda"
  },
  {
    "descr": "Returns the size of the inventory",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getSize",
    "id": "org.bukkit.inventory.Inventory#getSize()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the unique name of this enchantment",
    "param-names": ["Enchantment"],
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "getName",
    "id": "org.bukkit.enchantments.Enchantment#getName()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "java.lang.String"
  },
  {
    "descr": "Construct a firework effect.",
    "static": true,
    "method": "builder",
    "id": "org.bukkit.FireworkEffect#builder()",
    "class": "org.bukkit.FireworkEffect",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "Sets the speed at which a client will walk. Negative values indicate\\nreverse directions.",
    "param-names": [
      "Player",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "float"
    ],
    "method": "setWalkSpeed",
    "id": "org.bukkit.entity.Player#setWalkSpeed(float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "RAW_COPPER",
    "id": "org.bukkit.Material#RAW_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'type' property.",
    "param-names": [
      "Chest",
      "Type"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Chest",
      "org.bukkit.block.data.type.Chest.Type"
    ],
    "method": "setType",
    "id": "org.bukkit.block.data.type.Chest#setType(org.bukkit.block.data.type.Chest.Type)",
    "class": "org.bukkit.block.data.type.Chest"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SPYGLASS",
    "id": "org.bukkit.Material#SPYGLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Send a sign change. This fakes a sign change packet for a user at\\na certain location. This will not actually change the world in any way.\\nThis method will use a sign at the location's block or a faked sign\\nsent via\\n#sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData).\\n\\nIf the client does not have a sign at the given location it will\\ndisplay an error message to the user.\\n\\nTo change all attributes of a sign, including the back Side, use\\n#sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState).",
    "param-names": [
      "Player",
      "Loc",
      "Lines"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "java.lang.String[]"
    ],
    "method": "sendSignChange",
    "id": "org.bukkit.entity.Player#sendSignChange(org.bukkit.Location,java.lang.String[])",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent"
  },
  {
    "static": true,
    "field": "THIRDPERSON_RIGHTHAND",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#THIRDPERSON_RIGHTHAND",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "BlockData: CalibratedSculkSensor",
    "static": true,
    "field": "CALIBRATED_SCULK_SENSOR",
    "id": "org.bukkit.Material#CALIBRATED_SCULK_SENSOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the power of the jump.\\n\\nJump power can be set to a value above 1.0 which will increase the\\nstrength of this jump above the horse's actual jump strength.\\n\\nSetting the jump power to 0 will result in the jump animation still\\nplaying, but the horse not leaving the ground. Only canceling this\\nevent will result in no jump animation at all.",
    "param-names": ["Power"],
    "param-types": ["float"],
    "method": "setPower",
    "id": "org.bukkit.event.entity.HorseJumpEvent#setPower(float)",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent"
  },
  {
    "descr": "Entity is emerging.",
    "static": true,
    "field": "EMERGING",
    "id": "org.bukkit.entity.Pose#EMERGING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityCombustEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Get a list of all living entities in this RegionAccessor",
    "param-names": ["RegionAccessor"],
    "param-types": ["org.bukkit.RegionAccessor"],
    "method": "getLivingEntities",
    "id": "org.bukkit.RegionAccessor#getLivingEntities()",
    "class": "org.bukkit.RegionAccessor",
    "return": "java.util.List"
  },
  {
    "descr": "Sets the name that is shown on the in-game player list.\\n\\nIf the value is null, the name will be identical to #getName().",
    "param-names": [
      "Player",
      "Name"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "setPlayerListName",
    "id": "org.bukkit.entity.Player#setPlayerListName(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the tier of the beacon pyramid (0-4). The tier refers to the\\nbeacon's power level, based on how many layers of blocks are in the\\npyramid. Tier 1 refers to a beacon with one layer of 9 blocks under it.",
    "param-names": ["Beacon"],
    "param-types": ["org.bukkit.block.Beacon"],
    "method": "getTier",
    "id": "org.bukkit.block.Beacon#getTier()",
    "class": "org.bukkit.block.Beacon",
    "return": "int"
  },
  {
    "descr": "Sets the mirroring of the structure.",
    "param-names": [
      "Structure",
      "Mirror"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "org.bukkit.block.structure.Mirror"
    ],
    "method": "setMirror",
    "id": "org.bukkit.block.Structure#setMirror(org.bukkit.block.structure.Mirror)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Sets the name of this CommandMinecart.  The name is used with commands\\nthat this CommandMinecart executes.  Setting the name to null is the\\nsame as setting it to \"@\".",
    "param-names": [
      "CommandMinecart",
      "Name"
    ],
    "param-types": [
      "org.bukkit.entity.minecart.CommandMinecart",
      "java.lang.String"
    ],
    "method": "setName",
    "id": "org.bukkit.entity.minecart.CommandMinecart#setName(java.lang.String)",
    "class": "org.bukkit.entity.minecart.CommandMinecart"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent"
  },
  {
    "descr": "Increases movement speed.",
    "static": true,
    "field": "SPEED",
    "id": "org.bukkit.potion.PotionEffectType#SPEED",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "STRIPE_DOWNLEFT",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_DOWNLEFT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Holds information for player movement events",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent"
  },
  {
    "descr": "Determines the number at which the chain of command blocks act as a\\n\"chain.\"\\n\\nThis is the maximum amount of command blocks that can be activated in a\\nsingle tick from a single chain.",
    "static": true,
    "field": "MAX_COMMAND_CHAIN_LENGTH",
    "id": "org.bukkit.GameRule#MAX_COMMAND_CHAIN_LENGTH",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Game events.",
    "static": true,
    "field": "GAME_EVENT",
    "id": "org.bukkit.Registry#GAME_EVENT",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Center aligned text (default).",
    "static": true,
    "field": "CENTER",
    "id": "org.bukkit.entity.TextDisplay.TextAlignment#CENTER",
    "class": "org.bukkit.entity.TextDisplay.TextAlignment",
    "return": "org.bukkit.entity.TextDisplay.TextAlignment"
  },
  {
    "descr": "Gets the WorldBorder visible to this Player, or null if viewing\\nthe world's world border.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getWorldBorder",
    "id": "org.bukkit.entity.Player#getWorldBorder()",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.WorldBorder"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "VILLAGER_ANGRY",
    "id": "org.bukkit.Particle#VILLAGER_ANGRY",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BAT_SPAWN_EGG",
    "id": "org.bukkit.Material#BAT_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "OXIDIZED_CUT_COPPER",
    "id": "org.bukkit.Material#OXIDIZED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the axes which are applicable to this block.",
    "param-names": ["Orientable"],
    "param-types": ["org.bukkit.block.data.Orientable"],
    "method": "getAxes",
    "id": "org.bukkit.block.data.Orientable#getAxes()",
    "class": "org.bukkit.block.data.Orientable",
    "return": "java.util.Set"
  },
  {
    "descr": "Get the cooking time for this recipe in ticks.",
    "param-names": ["CookingRecipe"],
    "param-types": ["org.bukkit.inventory.CookingRecipe"],
    "method": "getCookingTime",
    "id": "org.bukkit.inventory.CookingRecipe#getCookingTime()",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "int"
  },
  {
    "descr": "Gets the height of the bounding box.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getHeight",
    "id": "org.bukkit.util.BoundingBox#getHeight()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Play a sound for a player at the location of the entity.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "Player",
      "Entity",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Entity",
      "org.bukkit.Sound",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.entity.Entity,org.bukkit.Sound,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the title of this inventory window to the specified title if the\\ninventory window supports it.\\n\\nNote if the inventory does not support titles that can be changed (ie, it\\nis not creatable or viewed by a player), then this method will throw an\\nexception.",
    "param-names": [
      "InventoryView",
      "Title"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "java.lang.String"
    ],
    "method": "setTitle",
    "id": "org.bukkit.inventory.InventoryView#setTitle(java.lang.String)",
    "class": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "The creative mode inventory, with only 9 QUICKBAR slots and nothing\\nelse. (The actual creative interface with the items is client-side and\\ncannot be altered by the server.)",
    "static": true,
    "field": "CREATIVE",
    "id": "org.bukkit.event.inventory.InventoryType#CREATIVE",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Placed between two walls.",
    "static": true,
    "field": "DOUBLE_WALL",
    "id": "org.bukkit.block.data.type.Bell.Attachment#DOUBLE_WALL",
    "class": "org.bukkit.block.data.type.Bell.Attachment",
    "return": "org.bukkit.block.data.type.Bell.Attachment"
  },
  {
    "descr": "Checks for the presence of custom potion effects.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "hasCustomEffects",
    "id": "org.bukkit.entity.AreaEffectCloud#hasCustomEffects()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "boolean"
  },
  {
    "descr": "Returns the PotionEffectType of this effect.",
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "getType",
    "id": "org.bukkit.potion.PotionEffect#getType()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Door is attached to the left side.",
    "static": true,
    "field": "LEFT",
    "id": "org.bukkit.block.data.type.Door.Hinge#LEFT",
    "class": "org.bukkit.block.data.type.Door.Hinge",
    "return": "org.bukkit.block.data.type.Door.Hinge"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "RED_SANDSTONE_STAIRS",
    "id": "org.bukkit.Material#RED_SANDSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The spell that makes the target blind.",
    "static": true,
    "field": "BLINDNESS",
    "id": "org.bukkit.entity.Evoker.Spell#BLINDNESS",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "descr": "Get the hand that was used to bucket the entity.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Returns all force loaded chunks in this world.\\n\\nA force loaded chunk will not be unloaded due to lack of player activity.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getForceLoadedChunks",
    "id": "org.bukkit.World#getForceLoadedChunks()",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "DRIED_KELP",
    "id": "org.bukkit.Material#DRIED_KELP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Tall mangrove tree",
    "static": true,
    "field": "TALL_MANGROVE",
    "id": "org.bukkit.TreeType#TALL_MANGROVE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "LEGACY_RABBIT_STEW",
    "id": "org.bukkit.Material#LEGACY_RABBIT_STEW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the type of the enchantment.",
    "param-names": [
      "EnchantmentOffer",
      "Enchantment"
    ],
    "param-types": [
      "org.bukkit.enchantments.EnchantmentOffer",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "setEnchantment",
    "id": "org.bukkit.enchantments.EnchantmentOffer#setEnchantment(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.enchantments.EnchantmentOffer"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": [
      "CookingRecipe",
      "Group"
    ],
    "param-types": [
      "org.bukkit.inventory.CookingRecipe",
      "java.lang.String"
    ],
    "method": "setGroup",
    "id": "org.bukkit.inventory.CookingRecipe#setGroup(java.lang.String)",
    "class": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.BanList.Type#values()",
    "class": "org.bukkit.BanList.Type",
    "return": "org.bukkit.BanList.Type[]"
  },
  {
    "descr": "Gets the LivingEntity at which this warden is most angry.",
    "param-names": ["Warden"],
    "param-types": ["org.bukkit.entity.Warden"],
    "method": "getEntityAngryAt",
    "id": "org.bukkit.entity.Warden#getEntityAngryAt()",
    "class": "org.bukkit.entity.Warden",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Sets the goat horn's instrument.",
    "param-names": [
      "MusicInstrumentMeta",
      "Instrument"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.MusicInstrumentMeta",
      "org.bukkit.MusicInstrument"
    ],
    "method": "setInstrument",
    "id": "org.bukkit.inventory.meta.MusicInstrumentMeta#setInstrument(org.bukkit.MusicInstrument)",
    "class": "org.bukkit.inventory.meta.MusicInstrumentMeta"
  },
  {
    "descr": "Represents dark red",
    "static": true,
    "field": "DARK_RED",
    "id": "org.bukkit.ChatColor#DARK_RED",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Returns the primary logger associated with this server instance.",
    "static": true,
    "method": "getLogger",
    "id": "org.bukkit.Bukkit#getLogger()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.logging.Logger"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_GUITAR",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_GUITAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent"
  },
  {
    "descr": "Gets how much EXP should be dropped from this death.\\n\\nThis does not indicate how much EXP should be taken from the entity in\\nquestion, merely how much should be created after its death.",
    "method": "getDroppedExp",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getDroppedExp()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "SIAMESE_CAT",
    "id": "org.bukkit.entity.Ocelot.Type#SIAMESE_CAT",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "descr": "Gets the text opacity.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "getTextOpacity",
    "id": "org.bukkit.entity.TextDisplay#getTextOpacity()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "byte"
  },
  {
    "descr": "Holding Ctrl while pressing the \"Drop\" key (defaults to Q).",
    "static": true,
    "field": "CONTROL_DROP",
    "id": "org.bukkit.event.inventory.ClickType#CONTROL_DROP",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERRACK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHERRACK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CHEST_OPENED",
    "id": "org.bukkit.Statistic#CHEST_OPENED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Set the radius affected by this explosive's explosion",
    "param-names": [
      "Explosive",
      "Yield"
    ],
    "param-types": [
      "org.bukkit.entity.Explosive",
      "float"
    ],
    "method": "setYield",
    "id": "org.bukkit.entity.Explosive#setYield(float)",
    "class": "org.bukkit.entity.Explosive"
  },
  {
    "static": true,
    "field": "AMBIENT_UNDERWATER_ENTER",
    "id": "org.bukkit.Sound#AMBIENT_UNDERWATER_ENTER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Adds this user to the ProfileBanList. If a previous ban exists, this will\\nupdate the entry.",
    "param-names": [
      "Player",
      "Reason",
      "Expires",
      "Source",
      "Kick Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.util.Date",
      "java.lang.String",
      "boolean"
    ],
    "method": "ban",
    "id": "org.bukkit.entity.Player#ban(java.lang.String,java.util.Date,java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.BanEntry"
  },
  {
    "static": true,
    "field": "ENTITY_FISHING_BOBBER_RETRIEVE",
    "id": "org.bukkit.Sound#ENTITY_FISHING_BOBBER_RETRIEVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.PistonMoveReaction#values()",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction[]"
  },
  {
    "static": true,
    "field": "BLOCK_FROGLIGHT_PLACE",
    "id": "org.bukkit.Sound#BLOCK_FROGLIGHT_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a player leaves a server",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "JUNGLE_STAIRS",
    "id": "org.bukkit.Material#JUNGLE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the total cook time associated with this event",
    "method": "getTotalCookTime",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getTotalCookTime()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Damage caused by being struck by lightning\\n\\nDamage: 5",
    "static": true,
    "field": "LIGHTNING",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#LIGHTNING",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "One item is dropped from the cursor.",
    "static": true,
    "field": "DROP_ONE_CURSOR",
    "id": "org.bukkit.event.inventory.InventoryAction#DROP_ONE_CURSOR",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "BLOCK_DRIPSTONE_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_DRIPSTONE_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check if the material is a block and can burn away",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isBurnable",
    "id": "org.bukkit.Material#isBurnable()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PURPLE_DYE",
    "id": "org.bukkit.Material#PURPLE_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SAND_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SAND_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Rabbit jumping.",
    "static": true,
    "field": "RABBIT_JUMP",
    "id": "org.bukkit.EntityEffect#RABBIT_JUMP",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SHRIEKER_HIT",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SHRIEKER_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BrewingStartEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the location name.",
    "param-names": [
      "MapMeta",
      "Name"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.MapMeta",
      "java.lang.String"
    ],
    "method": "setLocationName",
    "id": "org.bukkit.inventory.meta.MapMeta#setLocationName(java.lang.String)",
    "class": "org.bukkit.inventory.meta.MapMeta"
  },
  {
    "static": true,
    "field": "BLOCK_WOOL_STEP",
    "id": "org.bukkit.Sound#BLOCK_WOOL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_LADDER_PLACE",
    "id": "org.bukkit.Sound#BLOCK_LADDER_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["PotionType"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "method": "getEffectType",
    "id": "org.bukkit.potion.PotionType#getEffectType()",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Returns the currently attached block data for this item or creates a new\\none if one doesn't exist.\\nThe state is a copy, it must be set back (or to another item) with\\n#setBlockData(org.bukkit.block.data.BlockData)",
    "param-names": [
      "BlockDataMeta",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BlockDataMeta",
      "org.bukkit.Material"
    ],
    "method": "getBlockData",
    "id": "org.bukkit.inventory.meta.BlockDataMeta#getBlockData(org.bukkit.Material)",
    "class": "org.bukkit.inventory.meta.BlockDataMeta",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Sets the Bad Omen level.\\n\\nIf the level is higher than 1, there will be an additional wave that as\\nstrong as the final wave.",
    "param-names": [
      "Raid",
      "Bad Omen Level"
    ],
    "param-types": [
      "org.bukkit.Raid",
      "int"
    ],
    "method": "setBadOmenLevel",
    "id": "org.bukkit.Raid#setBadOmenLevel(int)",
    "class": "org.bukkit.Raid"
  },
  {
    "descr": "Sets the velocity that the entity will have after exiting the portal.",
    "param-names": ["After"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "setAfter",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#setAfter(org.bukkit.util.Vector)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent"
  },
  {
    "descr": "Sets how much EXP the Player should have at respawn.\\n\\nThis does not indicate how much EXP should be dropped, please see\\n#setDroppedExp(int) for that.",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setNewExp",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setNewExp(int)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "descr": "Most game logic is not processed, including entities and redstone.",
    "static": true,
    "field": "BORDER",
    "id": "org.bukkit.Chunk.LoadLevel#BORDER",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "descr": "Sets the record being played. The jukebox will start playing automatically.",
    "param-names": [
      "Jukebox",
      "Record"
    ],
    "param-types": [
      "org.bukkit.block.Jukebox",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setRecord",
    "id": "org.bukkit.block.Jukebox#setRecord(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.Jukebox"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#values()",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase[]"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.HorseJumpEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "boolean"
  },
  {
    "descr": "Represents magenta dye.",
    "static": true,
    "field": "MAGENTA",
    "id": "org.bukkit.DyeColor#MAGENTA",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Sets the PotionType of this potion.",
    "param-names": [
      "Potion",
      "Type"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "org.bukkit.potion.PotionType"
    ],
    "method": "setType",
    "id": "org.bukkit.potion.Potion#setType(org.bukkit.potion.PotionType)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "descr": "When it is rainy, launches the player in the direction their trident is thrown",
    "static": true,
    "field": "RIPTIDE",
    "id": "org.bukkit.enchantments.Enchantment#RIPTIDE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityCombustEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the associated data value representing this species",
    "param-names": ["TreeSpecies"],
    "param-types": ["org.bukkit.TreeSpecies"],
    "method": "getData",
    "id": "org.bukkit.TreeSpecies#getData()",
    "class": "org.bukkit.TreeSpecies",
    "return": "byte"
  },
  {
    "descr": "Gets the format to use to display this chat message",
    "method": "getFormat",
    "id": "org.bukkit.event.player.PlayerChatEvent#getFormat()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Use Item In Hand"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setUseItemInHand",
    "id": "org.bukkit.event.player.PlayerInteractEvent#setUseItemInHand(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent"
  },
  {
    "descr": "Gets the entity's current pose.\\nNote that the pose is only updated at the end of a tick, so may be\\ninconsistent with other methods. eg Player#isSneaking() being\\ntrue does not imply the current pose will be Pose#SNEAKING",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getPose",
    "id": "org.bukkit.entity.Entity#getPose()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockExplodeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_AGGRO",
    "id": "org.bukkit.Sound#ENTITY_FOX_AGGRO",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "POISON",
    "id": "org.bukkit.potion.PotionType#POISON",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "BlockData: MangrovePropagule",
    "static": true,
    "field": "MANGROVE_PROPAGULE",
    "id": "org.bukkit.Material#MANGROVE_PROPAGULE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the command that the user is attempting to execute from the\\nconsole",
    "method": "getCommand",
    "id": "org.bukkit.event.server.ServerCommandEvent#getCommand()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "CRACKED_DEEPSLATE_TILES",
    "id": "org.bukkit.Material#CRACKED_DEEPSLATE_TILES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the color of this arrow. Will be applied as a tint to its particles.",
    "param-names": [
      "Arrow",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.Arrow",
      "org.bukkit.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.entity.Arrow#setColor(org.bukkit.Color)",
    "class": "org.bukkit.entity.Arrow"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "The sound played when traveling through a portal",
    "static": true,
    "field": "PORTAL_TRAVEL",
    "id": "org.bukkit.Effect#PORTAL_TRAVEL",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "id": "org.bukkit.map.MapCursorCollection#MapCursorCollection()",
    "class": "org.bukkit.map.MapCursorCollection"
  },
  {
    "descr": "Get all FeatureFlag enabled in this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getFeatureFlags",
    "id": "org.bukkit.World#getFeatureFlags()",
    "class": "org.bukkit.World",
    "return": "java.util.Set"
  },
  {
    "descr": "Gets the state of the block where it will form or spread to.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_SEARCHING",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_SEARCHING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the angle on the x axis in radians",
    "param-names": ["EulerAngle"],
    "param-types": ["org.bukkit.util.EulerAngle"],
    "method": "getX",
    "id": "org.bukkit.util.EulerAngle#getX()",
    "class": "org.bukkit.util.EulerAngle",
    "return": "double"
  },
  {
    "descr": "Holds information for player teleport events",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent"
  },
  {
    "static": true,
    "field": "LEGACY_PRISMARINE_CRYSTALS",
    "id": "org.bukkit.Material#LEGACY_PRISMARINE_CRYSTALS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerAdvancementDoneEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the entity's new pose.",
    "method": "getPose",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#getPose()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerFishEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent"
  },
  {
    "descr": "Creates a new note.",
    "param-names": [
      "Octave",
      "Tone",
      "Sharped"
    ],
    "param-types": [
      "int",
      "org.bukkit.Note.Tone",
      "boolean"
    ],
    "id": "org.bukkit.Note#Note(int,org.bukkit.Note.Tone,boolean)",
    "class": "org.bukkit.Note"
  },
  {
    "descr": "Sets if this goat has its left horn.",
    "param-names": [
      "Goat",
      "Has Horn"
    ],
    "param-types": [
      "org.bukkit.entity.Goat",
      "boolean"
    ],
    "method": "setLeftHorn",
    "id": "org.bukkit.entity.Goat#setLeftHorn(boolean)",
    "class": "org.bukkit.entity.Goat"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "This sets if the deprecation warnings when registering events gets\\nprinted when the setting is in the default state.",
    "param-names": ["Warning"],
    "param-types": ["org.bukkit.Warning"],
    "method": "value",
    "id": "org.bukkit.Warning#value()",
    "class": "org.bukkit.Warning",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_SIGN_HIT",
    "id": "org.bukkit.Sound#BLOCK_HANGING_SIGN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the type of this item",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getType",
    "id": "org.bukkit.inventory.ItemStack#getType()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_HURT",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if this block is liquid.\\n\\nA block is considered liquid when #getType() returns Material#WATER or Material#LAVA.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "isLiquid",
    "id": "org.bukkit.block.Block#isLiquid()",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'snowy' property.",
    "param-names": [
      "Snowable",
      "Snowy"
    ],
    "param-types": [
      "org.bukkit.block.data.Snowable",
      "boolean"
    ],
    "method": "setSnowy",
    "id": "org.bukkit.block.data.Snowable#setSnowy(boolean)",
    "class": "org.bukkit.block.data.Snowable"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Thrown when an entity creates an item drop.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent"
  },
  {
    "descr": "When a creature is spawned by a dispenser dispensing an egg",
    "static": true,
    "field": "DISPENSE_EGG",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#DISPENSE_EGG",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "ENTITY_SNOW_GOLEM_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SNOW_GOLEM_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the faces which are applicable to this block.",
    "param-names": ["Directional"],
    "param-types": ["org.bukkit.block.data.Directional"],
    "method": "getFaces",
    "id": "org.bukkit.block.data.Directional#getFaces()",
    "class": "org.bukkit.block.data.Directional",
    "return": "java.util.Set"
  },
  {
    "descr": "Used for detection of two opposite corners of a structure.",
    "static": true,
    "field": "CORNER",
    "id": "org.bukkit.block.data.type.StructureBlock.Mode#CORNER",
    "class": "org.bukkit.block.data.type.StructureBlock.Mode",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode"
  },
  {
    "static": true,
    "field": "PHANTOM",
    "id": "org.bukkit.loot.LootTables#PHANTOM",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "DIAMOND_SWORD",
    "id": "org.bukkit.Material#DIAMOND_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "BAMBOO_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#BAMBOO_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_RIPTIDE_2",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_RIPTIDE_2",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_FILL_TADPOLE",
    "id": "org.bukkit.Sound#ITEM_BUCKET_FILL_TADPOLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,T)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "BlockData: Ladder",
    "static": true,
    "field": "LADDER",
    "id": "org.bukkit.Material#LADDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "DARK_OAK_TRAPDOOR",
    "id": "org.bukkit.Material#DARK_OAK_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_SAPLING_HIT",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_SAPLING_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_SAND_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_SAND_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When the entity gets the effect from a conduit.",
    "static": true,
    "field": "CONDUIT",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#CONDUIT",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "LIGHT_BLUE_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#LIGHT_BLUE_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ARMOR_STAND_FALL",
    "id": "org.bukkit.Sound#ENTITY_ARMOR_STAND_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityDamageEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PINK_STAINED_GLASS",
    "id": "org.bukkit.Material#PINK_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_LUSH_CAVES",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_LUSH_CAVES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "FURNACE_INTERACTION",
    "id": "org.bukkit.Statistic#FURNACE_INTERACTION",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Event triggered for server broadcast messages such as from\\norg.bukkit.Server#broadcast(String, String).\\nThis event behaves similarly to AsyncPlayerChatEvent in that it\\nshould be async if fired from an async thread. Please see that event for\\nfurther information.",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent"
  },
  {
    "static": true,
    "field": "LEGACY_ACACIA_DOOR",
    "id": "org.bukkit.Material#LEGACY_ACACIA_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_POLISHED_DEEPSLATE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_POLISHED_DEEPSLATE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The clicked slot and the picked hotbar slot are swapped.\\nThe hotbar includes the player's off hand.",
    "static": true,
    "field": "HOTBAR_SWAP",
    "id": "org.bukkit.event.inventory.InventoryAction#HOTBAR_SWAP",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "ENTITY_VEX_DEATH",
    "id": "org.bukkit.Sound#ENTITY_VEX_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Resends the Chunk to all clients",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "refreshChunk",
    "id": "org.bukkit.World#refreshChunk(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the color of the fish's body.\\n\\nPlugins should check that hasVariant() returns true before\\ncalling this method.",
    "param-names": ["TropicalFishBucketMeta"],
    "param-types": ["org.bukkit.inventory.meta.TropicalFishBucketMeta"],
    "method": "getBodyColor",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#getBodyColor()",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Get (or create) a new Criteria by its name.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getScoreboardCriteria",
    "id": "org.bukkit.Bukkit#getScoreboardCriteria(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the brightness override of the entity.",
    "param-names": [
      "Display",
      "Brightness"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "org.bukkit.entity.Display.Brightness"
    ],
    "method": "setBrightness",
    "id": "org.bukkit.entity.Display#setBrightness(org.bukkit.entity.Display.Brightness)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "static": true,
    "field": "BLOCK_CHORUS_FLOWER_GROW",
    "id": "org.bukkit.Sound#BLOCK_CHORUS_FLOWER_GROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_STEP",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The dragon will circle outside the ring of pillars if ender\\ncrystals remain or inside the ring if not.",
    "static": true,
    "field": "CIRCLING",
    "id": "org.bukkit.entity.EnderDragon.Phase#CIRCLING",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the default ticks per water ambient mob spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water ambient mobs\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn water ambient mobs\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, ambient mobs spawning will be disabled.\\n\\nMinecraft default: 1.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTicksPerWaterAmbientSpawns",
    "id": "org.bukkit.World#getTicksPerWaterAmbientSpawns()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "descr": "Allows the Enchantment to be placed on torso slot armor",
    "static": true,
    "field": "ARMOR_TORSO",
    "id": "org.bukkit.enchantments.EnchantmentTarget#ARMOR_TORSO",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "When an entity calls for reinforcements",
    "static": true,
    "field": "REINFORCEMENTS",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#REINFORCEMENTS",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Expands this bounding box to contain both this and the given bounding\\nbox.",
    "param-names": [
      "BoundingBox",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.BoundingBox"
    ],
    "method": "union",
    "id": "org.bukkit.util.BoundingBox#union(org.bukkit.util.BoundingBox)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_BRICKS_HIT",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_BRICKS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WANDERING_TRADER",
    "id": "org.bukkit.loot.LootTables#WANDERING_TRADER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the value of the 'lit' property.",
    "param-names": ["Lightable"],
    "param-types": ["org.bukkit.block.data.Lightable"],
    "method": "isLit",
    "id": "org.bukkit.block.data.Lightable#isLit()",
    "class": "org.bukkit.block.data.Lightable",
    "return": "boolean"
  },
  {
    "descr": "Sets if this ocelot trusts players.",
    "param-names": [
      "Ocelot",
      "Trust"
    ],
    "param-types": [
      "org.bukkit.entity.Ocelot",
      "boolean"
    ],
    "method": "setTrusting",
    "id": "org.bukkit.entity.Ocelot#setTrusting(boolean)",
    "class": "org.bukkit.entity.Ocelot"
  },
  {
    "static": true,
    "field": "TABBY",
    "id": "org.bukkit.entity.Cat.Type#TABBY",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Set the center Z position of this map.",
    "param-names": [
      "MapView",
      "Z"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "int"
    ],
    "method": "setCenterZ",
    "id": "org.bukkit.map.MapView#setCenterZ(int)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "static": true,
    "field": "BLOCK_TUFF_STEP",
    "id": "org.bukkit.Sound#BLOCK_TUFF_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Send an experience change.\\nThis fakes an experience change packet for a user. This will not actually\\nchange the experience points in any way.",
    "param-names": [
      "Player",
      "Progress"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "float"
    ],
    "method": "sendExperienceChange",
    "id": "org.bukkit.entity.Player#sendExperienceChange(float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Reduces the cost of villager trades.\\n\\o/.",
    "static": true,
    "field": "HERO_OF_THE_VILLAGE",
    "id": "org.bukkit.potion.PotionEffectType#HERO_OF_THE_VILLAGE",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "ENTITY_PHANTOM_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PHANTOM_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allows the Enchantment to be placed on tools (spades, pickaxe, axes)",
    "static": true,
    "field": "TOOL",
    "id": "org.bukkit.enchantments.EnchantmentTarget#TOOL",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockBreakEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RAVAGER_ROAR",
    "id": "org.bukkit.GameEvent#RAVAGER_ROAR",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "GOLDEN_HOE",
    "id": "org.bukkit.Material#GOLDEN_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DEEPSLATE_COAL_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_COAL_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the Panda is rolling",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "isRolling",
    "id": "org.bukkit.entity.Panda#isRolling()",
    "class": "org.bukkit.entity.Panda",
    "return": "boolean"
  },
  {
    "descr": "Stops accepting any enchantment registrations",
    "static": true,
    "method": "stopAcceptingRegistrations",
    "id": "org.bukkit.enchantments.Enchantment#stopAcceptingRegistrations()",
    "class": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Calculates the dot product of this vector with another. The dot product\\nis defined as x1*x2+y1*y2+z1*z2. The returned value is a scalar.",
    "param-names": [
      "Vector",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "dot",
    "id": "org.bukkit.util.Vector#dot(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "descr": "Get whether the firework effect flickers.",
    "param-names": ["FireworkEffect"],
    "param-types": ["org.bukkit.FireworkEffect"],
    "method": "hasFlicker",
    "id": "org.bukkit.FireworkEffect#hasFlicker()",
    "class": "org.bukkit.FireworkEffect",
    "return": "boolean"
  },
  {
    "descr": "Gets all of the lines of text from the sign involved in this event.",
    "method": "getLines",
    "id": "org.bukkit.event.block.SignChangeEvent#getLines()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "java.lang.String[]"
  },
  {
    "static": true,
    "field": "LEGACY_PREFIX",
    "id": "org.bukkit.Material#LEGACY_PREFIX",
    "class": "org.bukkit.Material",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "TURTLE",
    "id": "org.bukkit.entity.EntityType#TURTLE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "How players of this team collide with others.",
    "static": true,
    "field": "COLLISION_RULE",
    "id": "org.bukkit.scoreboard.Team.Option#COLLISION_RULE",
    "class": "org.bukkit.scoreboard.Team.Option",
    "return": "org.bukkit.scoreboard.Team.Option"
  },
  {
    "static": true,
    "field": "COBBLED_DEEPSLATE",
    "id": "org.bukkit.Material#COBBLED_DEEPSLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Safely unloads and saves the Chunk at the specified coordinates\\n\\nThis method is analogous to #unloadChunk(int, int, boolean)\\nwhere save is true.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "unloadChunk",
    "id": "org.bukkit.World#unloadChunk(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the location at which the entity is spawning.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "GOLD_BLOCK",
    "id": "org.bukkit.Material#GOLD_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set whether boats can work on land.",
    "param-names": [
      "Boat",
      "Work On Land"
    ],
    "param-types": [
      "org.bukkit.entity.Boat",
      "boolean"
    ],
    "method": "setWorkOnLand",
    "id": "org.bukkit.entity.Boat#setWorkOnLand(boolean)",
    "class": "org.bukkit.entity.Boat"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.raid.RaidStopEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Get the amount of entities currently in this block.",
    "param-names": ["EntityBlockStorage"],
    "param-types": ["org.bukkit.block.EntityBlockStorage"],
    "method": "getEntityCount",
    "id": "org.bukkit.block.EntityBlockStorage#getEntityCount()",
    "class": "org.bukkit.block.EntityBlockStorage",
    "return": "int"
  },
  {
    "method": "getRecipe",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.inventory.Recipe"
  },
  {
    "static": true,
    "field": "LEGACY_RED_MUSHROOM",
    "id": "org.bukkit.Material#LEGACY_RED_MUSHROOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Play a note for a player at a location. This requires a note block\\nat the particular location (as far as the client is concerned). This\\nwill not work without a note block. This will not work with cake.",
    "param-names": [
      "Player",
      "Loc",
      "Instrument",
      "Note"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "byte",
      "byte"
    ],
    "method": "playNote",
    "id": "org.bukkit.entity.Player#playNote(org.bukkit.Location,byte,byte)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "DEEPSLATE_BRICK_WALL",
    "id": "org.bukkit.Material#DEEPSLATE_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.InventoryEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.ChunkLoadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The \"swap item with offhand\" key (defaults to F).",
    "static": true,
    "field": "SWAP_OFFHAND",
    "id": "org.bukkit.event.inventory.ClickType#SWAP_OFFHAND",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Regenerates health.",
    "static": true,
    "field": "REGENERATION",
    "id": "org.bukkit.potion.PotionEffectType#REGENERATION",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Removes the specified plugin's ticket for the specified chunk\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": [
      "World",
      "X",
      "Z",
      "Plugin"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "removePluginChunkTicket",
    "id": "org.bukkit.World#removePluginChunkTicket(int,int,org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Simulate bone meal application to this block (if possible).",
    "param-names": [
      "Block",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace"
    ],
    "method": "applyBoneMeal",
    "id": "org.bukkit.block.Block#applyBoneMeal(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_COOKED_MUTTON",
    "id": "org.bukkit.Material#LEGACY_COOKED_MUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DRAGONS_BREATH",
    "id": "org.bukkit.Material#LEGACY_DRAGONS_BREATH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_COOKED_RABBIT",
    "id": "org.bukkit.Material#LEGACY_COOKED_RABBIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SIDEBAR_YELLOW",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_YELLOW",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "ENTITY_IRON_GOLEM_STEP",
    "id": "org.bukkit.Sound#ENTITY_IRON_GOLEM_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Toggles the announcing of advancements.",
    "static": true,
    "field": "ANNOUNCE_ADVANCEMENTS",
    "id": "org.bukkit.GameRule#ANNOUNCE_ADVANCEMENTS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Checks whether the living entity has block line of sight to another.\\n\\nThis uses the same algorithm that hostile mobs use to find the closest\\nplayer.",
    "param-names": [
      "LivingEntity",
      "Other"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.entity.Entity"
    ],
    "method": "hasLineOfSight",
    "id": "org.bukkit.entity.LivingEntity#hasLineOfSight(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Check whether or not each component of this vector is equal to 0.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "isZero",
    "id": "org.bukkit.util.Vector#isZero()",
    "class": "org.bukkit.util.Vector",
    "return": "boolean"
  },
  {
    "descr": "Sets whether or not the living entity can pick up items.",
    "param-names": [
      "LivingEntity",
      "Pickup"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setCanPickupItems",
    "id": "org.bukkit.entity.LivingEntity#setCanPickupItems(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "When the potion effect type is completely removed.",
    "static": true,
    "field": "REMOVED",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Action#REMOVED",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Action",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action"
  },
  {
    "static": true,
    "field": "SPELL_WITCH",
    "id": "org.bukkit.Particle#SPELL_WITCH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets whether or not structures will be generated in the world.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "generateStructures",
    "id": "org.bukkit.WorldCreator#generateStructures()",
    "class": "org.bukkit.WorldCreator",
    "return": "boolean"
  },
  {
    "descr": "Check if each component of this Location is finite.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "checkFinite",
    "id": "org.bukkit.Location#checkFinite()",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent"
  },
  {
    "descr": "A click sound.",
    "static": true,
    "field": "CLICK1",
    "id": "org.bukkit.Effect#CLICK1",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Returns the raw item slot of the armor stand in this event.",
    "method": "getSlot",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "SAVANNA_PLATEAU",
    "id": "org.bukkit.block.Biome#SAVANNA_PLATEAU",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the players total experience points.\\n\\nThis refers to the total amount of experience the player has collected\\nover time and is not currently displayed to the client.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getTotalExperience",
    "id": "org.bukkit.entity.Player#getTotalExperience()",
    "class": "org.bukkit.entity.Player",
    "return": "int"
  },
  {
    "static": true,
    "field": "NETHERITE_BLOCK",
    "id": "org.bukkit.Material#NETHERITE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the piglin is a baby",
    "param-names": ["PiglinAbstract"],
    "param-types": ["org.bukkit.entity.PiglinAbstract"],
    "method": "isBaby",
    "id": "org.bukkit.entity.PiglinAbstract#isBaby()",
    "class": "org.bukkit.entity.PiglinAbstract",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks to see if this item has damage",
    "param-names": ["Damageable"],
    "param-types": ["org.bukkit.inventory.meta.Damageable"],
    "method": "hasDamage",
    "id": "org.bukkit.inventory.meta.Damageable#hasDamage()",
    "class": "org.bukkit.inventory.meta.Damageable",
    "return": "boolean"
  },
  {
    "param-names": ["NamespacedKey"],
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getNamespace",
    "id": "org.bukkit.NamespacedKey#getNamespace()",
    "class": "org.bukkit.NamespacedKey",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_MOOSHROOM_EAT",
    "id": "org.bukkit.Sound#ENTITY_MOOSHROOM_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_BONE_MEAL_USE",
    "id": "org.bukkit.Sound#ITEM_BONE_MEAL_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A slot in the bottom row or quickbar.",
    "static": true,
    "field": "QUICKBAR",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#QUICKBAR",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Slows entity fall rate.",
    "static": true,
    "field": "SLOW_FALLING",
    "id": "org.bukkit.potion.PotionEffectType#SLOW_FALLING",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the maximum allowed value of the 'hatch' property.",
    "param-names": ["Hatchable"],
    "param-types": ["org.bukkit.block.data.Hatchable"],
    "method": "getMaximumHatch",
    "id": "org.bukkit.block.data.Hatchable#getMaximumHatch()",
    "class": "org.bukkit.block.data.Hatchable",
    "return": "int"
  },
  {
    "static": true,
    "field": "KOB",
    "id": "org.bukkit.entity.TropicalFish.Pattern#KOB",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "BLACK_CANDLE_CAKE",
    "id": "org.bukkit.Material#BLACK_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_PINK_PETALS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_PINK_PETALS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Filling due to natural fluid sources, eg rain or dripstone.",
    "static": true,
    "field": "NATURAL_FILL",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#NATURAL_FILL",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Flying speed of an Entity.",
    "static": true,
    "field": "GENERIC_FLYING_SPEED",
    "id": "org.bukkit.attribute.Attribute#GENERIC_FLYING_SPEED",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "Gets all the items which will drop when the entity dies",
    "method": "getDrops",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getDrops()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.CropState#values()",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState[]"
  },
  {
    "static": true,
    "field": "WALK_ONE_CM",
    "id": "org.bukkit.Statistic#WALK_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_STEP",
    "id": "org.bukkit.Material#LEGACY_WOOD_STEP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityTargetEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_VEIN_HIT",
    "id": "org.bukkit.Sound#BLOCK_SCULK_VEIN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Construct a new potion of the given type. Unless the type is PotionType#WATER, it will be level one, without extended duration.\\nDon't use this constructor to create a no-effect potion other than\\nwater bottle.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "id": "org.bukkit.potion.Potion#Potion(org.bukkit.potion.PotionType)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_SIGN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_HANGING_SIGN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets whether the piglin is able to hunt hoglins.",
    "param-names": [
      "Piglin",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Piglin",
      "boolean"
    ],
    "method": "setIsAbleToHunt",
    "id": "org.bukkit.entity.Piglin#setIsAbleToHunt(boolean)",
    "class": "org.bukkit.entity.Piglin"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "If the ClickType is NUMBER_KEY, this method will return the index of\\nthe pressed key (0-8).",
    "method": "getHotbarButton",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getHotbarButton()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "int"
  },
  {
    "descr": "Get the loot context used to provide context to the loot table's loot\\ngeneration.",
    "method": "getLootContext",
    "id": "org.bukkit.event.world.LootGenerateEvent#getLootContext()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.loot.LootContext"
  },
  {
    "static": true,
    "field": "SHEAF_POTTERY_SHERD",
    "id": "org.bukkit.Material#SHEAF_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Mangrove tree",
    "static": true,
    "field": "MANGROVE",
    "id": "org.bukkit.TreeType#MANGROVE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "OFF_HAND",
    "id": "org.bukkit.inventory.EquipmentSlot#OFF_HAND",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "FROZEN_OCEAN",
    "id": "org.bukkit.block.Biome#FROZEN_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "BURNING_SKULL",
    "id": "org.bukkit.Art#BURNING_SKULL",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Sets the level of this potion.",
    "param-names": [
      "Potion",
      "Level"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "int"
    ],
    "method": "setLevel",
    "id": "org.bukkit.potion.Potion#setLevel(int)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Triggered when a entity is created in the world by a player \"placing\" an item\\non a block.\\n\\nNote that this event is currently only fired for four specific placements:\\narmor stands, boats, minecarts, and end crystals.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent"
  },
  {
    "descr": "Returns whether the player is now sneaking or not.",
    "method": "isSneaking",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#isSneaking()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "COBBLED_DEEPSLATE_WALL",
    "id": "org.bukkit.Material#COBBLED_DEEPSLATE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_WOOL_PLACE",
    "id": "org.bukkit.Sound#BLOCK_WOOL_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "JUNGLE",
    "id": "org.bukkit.block.Biome#JUNGLE",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "UNDER_WATER",
    "id": "org.bukkit.entity.Boat.Status#UNDER_WATER",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "static": true,
    "field": "RESONATE_7",
    "id": "org.bukkit.GameEvent#RESONATE_7",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent"
  },
  {
    "descr": "Gets the time in ticks until the next arrow leaves the entity's body.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getArrowCooldown",
    "id": "org.bukkit.entity.LivingEntity#getArrowCooldown()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "static": true,
    "field": "RUINED_PORTAL",
    "id": "org.bukkit.loot.LootTables#RUINED_PORTAL",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_DAYLIGHT_DETECTOR",
    "id": "org.bukkit.Material#LEGACY_DAYLIGHT_DETECTOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Removes all custom potion effects from this arrow.",
    "param-names": ["Arrow"],
    "param-types": ["org.bukkit.entity.Arrow"],
    "method": "clearCustomEffects",
    "id": "org.bukkit.entity.Arrow#clearCustomEffects()",
    "class": "org.bukkit.entity.Arrow"
  },
  {
    "descr": "Creates a new note.",
    "param-names": ["Note"],
    "param-types": ["int"],
    "id": "org.bukkit.Note#Note(int)",
    "class": "org.bukkit.Note"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "DRAGON_HEAD",
    "id": "org.bukkit.Material#DRAGON_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GLOBE_BANNER_PATTERN",
    "id": "org.bukkit.Material#GLOBE_BANNER_PATTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DAMAGE_BLOCKED_BY_SHIELD",
    "id": "org.bukkit.Statistic#DAMAGE_BLOCKED_BY_SHIELD",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_FIRE_CORAL_FAN",
    "id": "org.bukkit.Material#DEAD_FIRE_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the load level of this chunk, which determines what game logic is\\nprocessed.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getLoadLevel",
    "id": "org.bukkit.Chunk#getLoadLevel()",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "static": true,
    "field": "VANILLA",
    "id": "org.bukkit.FeatureFlag#VANILLA",
    "class": "org.bukkit.FeatureFlag",
    "return": "org.bukkit.FeatureFlag"
  },
  {
    "static": true,
    "field": "PHANTOM",
    "id": "org.bukkit.entity.EntityType#PHANTOM",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WIND",
    "id": "org.bukkit.Art#WIND",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_GHAST_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_GHAST_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Causes this villager to shake his head.",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "shakeHead",
    "id": "org.bukkit.entity.Villager#shakeHead()",
    "class": "org.bukkit.entity.Villager"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.WorldInitEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.WorldInitEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Sets the amount of ticks until this entity will be converted to a stray\\nas a result of being frozen by a powdered snow block.\\n\\nWhen this reaches 0, the entity will be converted. A value of less than 0\\nwill stop the current conversion process without converting the current\\nentity.",
    "param-names": [
      "Skeleton",
      "Time"
    ],
    "param-types": [
      "org.bukkit.entity.Skeleton",
      "int"
    ],
    "method": "setConversionTime",
    "id": "org.bukkit.entity.Skeleton#setConversionTime(int)",
    "class": "org.bukkit.entity.Skeleton"
  },
  {
    "descr": "BlockData: Cocoa",
    "static": true,
    "field": "COCOA",
    "id": "org.bukkit.Material#COCOA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Warning.WarningState#values()",
    "class": "org.bukkit.Warning.WarningState",
    "return": "org.bukkit.Warning.WarningState[]"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "BAMBOO_PRESSURE_PLATE",
    "id": "org.bukkit.Material#BAMBOO_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SHIPWRECK_SUPPLY",
    "id": "org.bukkit.loot.LootTables#SHIPWRECK_SUPPLY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "RED",
    "id": "org.bukkit.map.MapPalette#RED",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Called when a creature targets or untargets another entity",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent"
  },
  {
    "descr": "Gets a BanEntry by target.",
    "param-names": [
      "BanList",
      "Target"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.String"
    ],
    "method": "getBanEntry",
    "id": "org.bukkit.BanList#getBanEntry(java.lang.String)",
    "class": "org.bukkit.BanList",
    "return": "org.bukkit.BanEntry"
  },
  {
    "static": true,
    "field": "ENTITY_PIG_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PIG_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the location of the block or entity which corresponds to this inventory. May return null if this container\\nwas custom created or is a virtual / subcontainer.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getLocation",
    "id": "org.bukkit.inventory.Inventory#getLocation()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "RED_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#RED_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the number of waves in this raid (exclude the additional wave).",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getTotalWaves",
    "id": "org.bukkit.Raid#getTotalWaves()",
    "class": "org.bukkit.Raid",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get max world size.",
    "static": true,
    "method": "getMaxWorldSize",
    "id": "org.bukkit.Bukkit#getMaxWorldSize()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "RESONATE_4",
    "id": "org.bukkit.GameEvent#RESONATE_4",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Merges all explicitly set states from the given data with this BlockData.\\n\\nNote that the given data MUST have been created from one of the String\\nparse methods, e.g. Server#createBlockData(java.lang.String) and\\nnot have been subsequently modified.\\n\\nNote also that the block types must match identically.",
    "param-names": [
      "BlockData",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "merge",
    "id": "org.bukkit.block.data.BlockData#merge(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Increments automatically when a player kills another player on the yellow team.",
    "static": true,
    "field": "TEAM_KILL_YELLOW",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_YELLOW",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "JUNGLE_SAPLING",
    "id": "org.bukkit.Material#JUNGLE_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_HIT",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent"
  },
  {
    "descr": "BlockData: CaveVines",
    "static": true,
    "field": "CAVE_VINES",
    "id": "org.bukkit.Material#CAVE_VINES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.EntityType#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BrewingStartEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "POLISHED_BLACKSTONE",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the title of the book.\\n\\nPlugins should check that hasTitle() returns true before calling this\\nmethod.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "getTitle",
    "id": "org.bukkit.inventory.meta.BookMeta#getTitle()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the current phase that the dragon is in. This method will return null\\nwhen a dragon is first spawned and hasn't yet been assigned a phase.",
    "method": "getCurrentPhase",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getCurrentPhase()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Gets the player IP address.",
    "method": "getAddress",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getAddress()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "java.net.InetAddress"
  },
  {
    "descr": "Change the message of the day message.",
    "param-names": ["Motd"],
    "param-types": ["java.lang.String"],
    "method": "setMotd",
    "id": "org.bukkit.event.server.ServerListPingEvent#setMotd(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "IRON_NUGGET",
    "id": "org.bukkit.Material#IRON_NUGGET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "AMETHYST_SHARD",
    "id": "org.bukkit.Material#AMETHYST_SHARD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds (or subtracts) the specified amount to the base value.",
    "static": true,
    "field": "ADD_NUMBER",
    "id": "org.bukkit.attribute.AttributeModifier.Operation#ADD_NUMBER",
    "class": "org.bukkit.attribute.AttributeModifier.Operation",
    "return": "org.bukkit.attribute.AttributeModifier.Operation"
  },
  {
    "static": true,
    "field": "WATER_DROP",
    "id": "org.bukkit.Particle#WATER_DROP",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the maximum allowed value of the 'distance' property.",
    "param-names": ["Scaffolding"],
    "param-types": ["org.bukkit.block.data.type.Scaffolding"],
    "method": "getMaximumDistance",
    "id": "org.bukkit.block.data.type.Scaffolding#getMaximumDistance()",
    "class": "org.bukkit.block.data.type.Scaffolding",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.ServiceUnregisterEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceUnregisterEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_RESPAWN_ANCHOR_SET_SPAWN",
    "id": "org.bukkit.Sound#BLOCK_RESPAWN_ANCHOR_SET_SPAWN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_WAIT",
    "id": "org.bukkit.Material#MUSIC_DISC_WAIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "MOSSY_STONE_BRICK_SLAB",
    "id": "org.bukkit.Material#MOSSY_STONE_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TIME_SINCE_DEATH",
    "id": "org.bukkit.Statistic#TIME_SINCE_DEATH",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "The raw slot number clicked, ready for passing to InventoryView #getItem(int) This slot number is unique for the view.",
    "method": "getRawSlot",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getRawSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "HIT_GROUND",
    "id": "org.bukkit.GameEvent#HIT_GROUND",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Sets the value of the 'shrieking' property.",
    "param-names": [
      "SculkShrieker",
      "Shrieking"
    ],
    "param-types": [
      "org.bukkit.block.data.type.SculkShrieker",
      "boolean"
    ],
    "method": "setShrieking",
    "id": "org.bukkit.block.data.type.SculkShrieker#setShrieking(boolean)",
    "class": "org.bukkit.block.data.type.SculkShrieker"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Wither Skeleton is normally played when a Wither Skeleton Head is on top of the note block.",
    "static": true,
    "field": "WITHER_SKELETON",
    "id": "org.bukkit.Instrument#WITHER_SKELETON",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Gets the localized display name that is set.\\n\\nPlugins should check that hasLocalizedName() returns true\\nbefore calling this method.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getLocalizedName",
    "id": "org.bukkit.inventory.meta.ItemMeta#getLocalizedName()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.lang.String"
  },
  {
    "descr": "Undiscover a collection of recipes for this player such that they have\\nalready been discovered. This method will remove the keys' associated\\nrecipes from the player's recipe book. If a recipe in the provided\\ncollection has not yet been discovered, it will be silently ignored.",
    "param-names": [
      "HumanEntity",
      "Recipes"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "java.util.Collection"
    ],
    "method": "undiscoverRecipes",
    "id": "org.bukkit.entity.HumanEntity#undiscoverRecipes(java.util.Collection<org.bukkit.NamespacedKey>)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "Entities related to Ambient, eg: Bat.",
    "static": true,
    "field": "AMBIENT",
    "id": "org.bukkit.entity.SpawnCategory#AMBIENT",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.loot.LootTables#values()",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables[]"
  },
  {
    "descr": "Returns the server instance that this command is running on",
    "param-names": ["CommandSender"],
    "param-types": ["org.bukkit.command.CommandSender"],
    "method": "getServer",
    "id": "org.bukkit.command.CommandSender#getServer()",
    "class": "org.bukkit.command.CommandSender",
    "return": "org.bukkit.Server"
  },
  {
    "static": true,
    "field": "POTTED_ACACIA_SAPLING",
    "id": "org.bukkit.Material#POTTED_ACACIA_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the level of anger of this warden.",
    "param-names": ["Warden"],
    "param-types": ["org.bukkit.entity.Warden"],
    "method": "getAngerLevel",
    "id": "org.bukkit.entity.Warden#getAngerLevel()",
    "class": "org.bukkit.entity.Warden",
    "return": "org.bukkit.entity.Warden.AngerLevel"
  },
  {
    "static": true,
    "field": "SHEEP_PURPLE",
    "id": "org.bukkit.loot.LootTables#SHEEP_PURPLE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Returns false if the entity has died or been despawned for some other\\nreason.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isValid",
    "id": "org.bukkit.entity.Entity#isValid()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "TOWN_AURA",
    "id": "org.bukkit.Particle#TOWN_AURA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.MapInitializeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.MapInitializeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the experience orb triggering the event.",
    "method": "getExperienceOrb",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getExperienceOrb()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "org.bukkit.entity.ExperienceOrb"
  },
  {
    "static": true,
    "field": "LEGACY_BARRIER",
    "id": "org.bukkit.Material#LEGACY_BARRIER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SNOW_HIT",
    "id": "org.bukkit.Sound#BLOCK_SNOW_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Send block damage. This fakes block break progress at a certain location\\nsourced by this player. This will not actually change the block's break\\nprogress in any way.",
    "param-names": [
      "Player",
      "Loc",
      "Progress"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "float"
    ],
    "method": "sendBlockDamage",
    "id": "org.bukkit.entity.Player#sendBlockDamage(org.bukkit.Location,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Removed by placing a block on it",
    "static": true,
    "field": "OBSTRUCTION",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#OBSTRUCTION",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "static": true,
    "field": "BLOCK_ANCIENT_DEBRIS_HIT",
    "id": "org.bukkit.Sound#BLOCK_ANCIENT_DEBRIS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Damage caused by the Sonic Boom attack from org.bukkit.entity.Warden\\n\\nDamage: 10",
    "static": true,
    "field": "SONIC_BOOM",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#SONIC_BOOM",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "CUT_SANDSTONE_SLAB",
    "id": "org.bukkit.Material#CUT_SANDSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When something spawns from natural means",
    "static": true,
    "field": "NATURAL",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#NATURAL",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "BLOCK_SAND_HIT",
    "id": "org.bukkit.Sound#BLOCK_SAND_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "VINDICATOR",
    "id": "org.bukkit.loot.LootTables#VINDICATOR",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "boolean"
  },
  {
    "descr": "Registers an Objective on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Name",
      "Criteria"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "registerNewObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#registerNewObjective(java.lang.String,java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "The highest non-air block.",
    "static": true,
    "field": "WORLD_SURFACE",
    "id": "org.bukkit.HeightMap#WORLD_SURFACE",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "POTATO",
    "id": "org.bukkit.Material#POTATO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FOX",
    "id": "org.bukkit.entity.EntityType#FOX",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set an option for this team",
    "param-names": [
      "Team",
      "Option",
      "Status"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.scoreboard.Team.Option",
      "org.bukkit.scoreboard.Team.OptionStatus"
    ],
    "method": "setOption",
    "id": "org.bukkit.scoreboard.Team#setOption(org.bukkit.scoreboard.Team.Option,org.bukkit.scoreboard.Team.OptionStatus)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "Gets if this entity is subject to collisions with other entities.\\n\\nSome entities might be exempted from the collidable rule of this entity.\\nUse #getCollidableExemptions() to get these.\\n\\nPlease note that this method returns only the custom collidable state,\\nnot whether the entity is non-collidable for other reasons such as being\\ndead.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "isCollidable",
    "id": "org.bukkit.entity.LivingEntity#isCollidable()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "When a villager gets regeneration after a trade.",
    "static": true,
    "field": "VILLAGER_TRADE",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#VILLAGER_TRADE",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Sets the item the entity is holding in their main hand.",
    "param-names": [
      "EntityEquipment",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInMainHand",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInMainHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerJoinEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "PUMPKIN_SEEDS",
    "id": "org.bukkit.Material#PUMPKIN_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the identifier used to represent\\nthis pattern type",
    "param-names": ["PatternType"],
    "param-types": ["org.bukkit.block.banner.PatternType"],
    "method": "getIdentifier",
    "id": "org.bukkit.block.banner.PatternType#getIdentifier()",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SNORT_POTTERY_SHERD",
    "id": "org.bukkit.Material#SNORT_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Determines the remaining item in a crafting grid after crafting with this\\ningredient.\\n\\nOnly available when #isItem() is true.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getCraftingRemainingItem",
    "id": "org.bukkit.Material#getCraftingRemainingItem()",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the input of the barter.",
    "method": "getInput",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getInput()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Checks to see if the specified entry is a member of this team.",
    "param-names": [
      "Team",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "java.lang.String"
    ],
    "method": "hasEntry",
    "id": "org.bukkit.scoreboard.Team#hasEntry(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team",
    "return": "boolean"
  },
  {
    "descr": "Gray, or (0x80,0x80,0x80) in (R,G,B)",
    "static": true,
    "field": "GRAY",
    "id": "org.bukkit.Color#GRAY",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "WEATHER",
    "id": "org.bukkit.SoundCategory#WEATHER",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Damage caused by starving due to having an empty hunger bar\\n\\nDamage: 1",
    "static": true,
    "field": "STARVATION",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#STARVATION",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Gets the hanging entity involved in this event.",
    "method": "getEntity",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "org.bukkit.entity.Hanging"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_STUNNED",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_STUNNED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the redstone power being provided to this block face",
    "param-names": [
      "Block",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace"
    ],
    "method": "getBlockPower",
    "id": "org.bukkit.block.Block#getBlockPower(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Block",
    "return": "int"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerChatEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "This puts the specified entry onto this team for the scoreboard.\\n\\nThis will remove the entry from any other team on the scoreboard.",
    "param-names": [
      "Team",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "java.lang.String"
    ],
    "method": "addEntry",
    "id": "org.bukkit.scoreboard.Team#addEntry(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "static": true,
    "field": "LEATHER_HELMET",
    "id": "org.bukkit.Material#LEATHER_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_TUFF_HIT",
    "id": "org.bukkit.Sound#BLOCK_TUFF_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a list of all blocks changed by the fertilization.",
    "method": "getBlocks",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the hand that was used in this event.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Unstable tilt.",
    "static": true,
    "field": "UNSTABLE",
    "id": "org.bukkit.block.data.type.BigDripleaf.Tilt#UNSTABLE",
    "class": "org.bukkit.block.data.type.BigDripleaf.Tilt",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt"
  },
  {
    "static": true,
    "field": "RAVAGER_SPAWN_EGG",
    "id": "org.bukkit.Material#RAVAGER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When the blocks inside a portal are created due to a portal frame\\nbeing set on fire.",
    "static": true,
    "field": "FIRE",
    "id": "org.bukkit.event.world.PortalCreateEvent.CreateReason#FIRE",
    "class": "org.bukkit.event.world.PortalCreateEvent.CreateReason",
    "return": "org.bukkit.event.world.PortalCreateEvent.CreateReason"
  },
  {
    "static": true,
    "field": "BLOCK_WART_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_WART_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NYLIUM_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NYLIUM_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the effects in this firework.",
    "param-names": ["FireworkMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkMeta"],
    "method": "getEffects",
    "id": "org.bukkit.inventory.meta.FireworkMeta#getEffects()",
    "class": "org.bukkit.inventory.meta.FireworkMeta",
    "return": "java.util.List"
  },
  {
    "descr": "Heals an entity.",
    "static": true,
    "field": "HEAL",
    "id": "org.bukkit.potion.PotionEffectType#HEAL",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Sets the number to scale health to for the client; this will also\\n#setHealthScaled(boolean) setHealthScaled(true).\\n\\nDisplayed health follows a simple formula displayedHealth =\\ngetHealth() / getMaxHealth() * getHealthScale().",
    "param-names": [
      "Player",
      "Scale"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "double"
    ],
    "method": "setHealthScale",
    "id": "org.bukkit.entity.Player#setHealthScale(double)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.inventory.InventoryType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the amount remaining on the ground, if any",
    "method": "getRemaining",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#getRemaining()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "int"
  },
  {
    "descr": "Rotated clockwise by 90 degrees",
    "static": true,
    "field": "CLOCKWISE",
    "id": "org.bukkit.Rotation#CLOCKWISE",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Gets the Unique ID of this world",
    "param-names": ["WorldInfo"],
    "param-types": ["org.bukkit.generator.WorldInfo"],
    "method": "getUID",
    "id": "org.bukkit.generator.WorldInfo#getUID()",
    "class": "org.bukkit.generator.WorldInfo",
    "return": "java.util.UUID"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Horse.Style#values()",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style[]"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockPlaceEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CLOSE",
    "id": "org.bukkit.map.MapView.Scale#CLOSE",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "static": true,
    "field": "ITEM_TOTEM_USE",
    "id": "org.bukkit.Sound#ITEM_TOTEM_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the modified potion effect type.",
    "method": "getModifiedType",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getModifiedType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the new main hand of the player. The old hand is still momentarily\\navailable via Player#getMainHand().",
    "method": "getMainHand",
    "id": "org.bukkit.event.player.PlayerChangedMainHandEvent#getMainHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent",
    "return": "org.bukkit.inventory.MainHand"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.CampfireStartEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_MINECART_INSIDE_UNDERWATER",
    "id": "org.bukkit.Sound#ENTITY_MINECART_INSIDE_UNDERWATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "FISH_CAUGHT",
    "id": "org.bukkit.Statistic#FISH_CAUGHT",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_ANCIENT_DEBRIS_STEP",
    "id": "org.bukkit.Sound#BLOCK_ANCIENT_DEBRIS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the new maximum amount of similar entities that are allowed to be\\nwithin spawning range of this spawner.\\n\\nIf more than the maximum number of entities are within range, the spawner\\nwill not spawn and try again with a new #getDelay().\\n\\nDefault value is 16.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getMaxNearbyEntities",
    "id": "org.bukkit.block.CreatureSpawner#getMaxNearbyEntities()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "WHITE_CANDLE_CAKE",
    "id": "org.bukkit.Material#WHITE_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'bottom' property.",
    "param-names": ["Scaffolding"],
    "param-types": ["org.bukkit.block.data.type.Scaffolding"],
    "method": "isBottom",
    "id": "org.bukkit.block.data.type.Scaffolding#isBottom()",
    "class": "org.bukkit.block.data.type.Scaffolding",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_HURT",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "TWISTING_VINES",
    "id": "org.bukkit.Material#TWISTING_VINES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Performs a ray trace that provides information on the targeted block.\\n\\nThis takes the blocks' precise collision shapes into account.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "LivingEntity",
      "Max Distance",
      "Fluid Collision Mode"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "double",
      "org.bukkit.FluidCollisionMode"
    ],
    "method": "rayTraceBlocks",
    "id": "org.bukkit.entity.LivingEntity#rayTraceBlocks(double,org.bukkit.FluidCollisionMode)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_SADDLE",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_SADDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SIDEBAR_LIGHT_PURPLE",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_LIGHT_PURPLE",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Gets the fuel power for this fuel. Each unit of power can fuel one\\nbrewing operation.",
    "method": "getFuelPower",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#getFuelPower()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGS",
    "id": "org.bukkit.inventory.EquipmentSlot#LEGS",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Hides a player from this player",
    "param-names": [
      "Player",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Player"
    ],
    "method": "hidePlayer",
    "id": "org.bukkit.entity.Player#hidePlayer(org.bukkit.entity.Player)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets whether a position cursor should be shown when the map is near its\\ncenter.",
    "param-names": [
      "MapView",
      "Tracking Position"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "boolean"
    ],
    "method": "setTrackingPosition",
    "id": "org.bukkit.map.MapView#setTrackingPosition(boolean)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "MOSSY_COBBLESTONE_SLAB",
    "id": "org.bukkit.Material#MOSSY_COBBLESTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The raw slot number clicked, ready for passing to InventoryView #getItem(int) This slot number is unique for the view.",
    "method": "getRawSlot",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getRawSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.inventory.CreativeCategory#values()",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory[]"
  },
  {
    "descr": "Gets the x coordinate of the center of the bounding box.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getCenterX",
    "id": "org.bukkit.util.BoundingBox#getCenterX()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_HURT",
    "id": "org.bukkit.Sound#ENTITY_WOLF_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_FLUTE",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_FLUTE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Replace the contents of the crafting matrix",
    "param-names": [
      "CraftingInventory",
      "Contents"
    ],
    "param-types": [
      "org.bukkit.inventory.CraftingInventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setMatrix",
    "id": "org.bukkit.inventory.CraftingInventory#setMatrix(org.bukkit.inventory.ItemStack[])",
    "class": "org.bukkit.inventory.CraftingInventory"
  },
  {
    "descr": "Right-clicking a block",
    "static": true,
    "field": "RIGHT_CLICK_BLOCK",
    "id": "org.bukkit.event.block.Action#RIGHT_CLICK_BLOCK",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "descr": "Represents birches.",
    "static": true,
    "field": "BIRCH",
    "id": "org.bukkit.TreeSpecies#BIRCH",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks if this bounding box contains the specified position.\\n\\nPositions exactly on the minimum borders of the bounding box are\\nconsidered to be inside the bounding box, while positions exactly on the\\nmaximum borders are considered to be outside. This allows bounding boxes\\nto reside directly next to each other with positions always only residing\\nin exactly one of them.",
    "param-names": [
      "BoundingBox",
      "Position"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector"
    ],
    "method": "contains",
    "id": "org.bukkit.util.BoundingBox#contains(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "boolean"
  },
  {
    "descr": "Gets the line of text at the specified index.\\n\\nFor example, getLine(0) will return the first line of text on the Side#FRONT.",
    "param-names": [
      "Sign",
      "Index"
    ],
    "param-types": [
      "org.bukkit.block.Sign",
      "int"
    ],
    "method": "getLine",
    "id": "org.bukkit.block.Sign#getLine(int)",
    "class": "org.bukkit.block.Sign",
    "return": "java.lang.String"
  },
  {
    "descr": "Adds a new pattern on top of the existing\\npatterns",
    "param-names": [
      "BannerMeta",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BannerMeta",
      "org.bukkit.block.banner.Pattern"
    ],
    "method": "addPattern",
    "id": "org.bukkit.inventory.meta.BannerMeta#addPattern(org.bukkit.block.banner.Pattern)",
    "class": "org.bukkit.inventory.meta.BannerMeta"
  },
  {
    "param-names": ["Effect"],
    "param-types": ["org.bukkit.Effect"],
    "method": "getType",
    "id": "org.bukkit.Effect#getType()",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect.Type"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "CHERRY_HANGING_SIGN",
    "id": "org.bukkit.Material#CHERRY_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the new level of the cauldron.",
    "method": "getNewLevel",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getNewLevel()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "int"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "OAK_BUTTON",
    "id": "org.bukkit.Material#OAK_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Setting to show/hide Attributes like Damage",
    "static": true,
    "field": "HIDE_ATTRIBUTES",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_ATTRIBUTES",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "descr": "Gets the mode value associated with this GameMode",
    "param-names": ["GameMode"],
    "param-types": ["org.bukkit.GameMode"],
    "method": "getValue",
    "id": "org.bukkit.GameMode#getValue()",
    "class": "org.bukkit.GameMode",
    "return": "int"
  },
  {
    "static": true,
    "field": "SIDEBAR_DARK_RED",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_DARK_RED",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "MUD_BRICKS",
    "id": "org.bukkit.Material#MUD_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "JUNGLE_WOOD",
    "id": "org.bukkit.Material#JUNGLE_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The spell that summons Vexes.",
    "static": true,
    "field": "SUMMON_VEX",
    "id": "org.bukkit.entity.Spellcaster.Spell#SUMMON_VEX",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "descr": "Gets the species type (birch, normal, pine, red mushroom, brown\\nmushroom)",
    "method": "getSpecies",
    "id": "org.bukkit.event.world.StructureGrowEvent#getSpecies()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "DARK_OAK_SAPLING",
    "id": "org.bukkit.Material#DARK_OAK_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LUCK",
    "id": "org.bukkit.potion.PotionType#LUCK",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Represents the fern-looking grass species.",
    "static": true,
    "field": "FERN_LIKE",
    "id": "org.bukkit.GrassSpecies#FERN_LIKE",
    "class": "org.bukkit.GrassSpecies",
    "return": "org.bukkit.GrassSpecies"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "DEEPSLATE_BRICK_STAIRS",
    "id": "org.bukkit.Material#DEEPSLATE_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds the specified ingredient.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.material.MaterialData"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "static": true,
    "field": "SNOW_GOLEM_SPAWN_EGG",
    "id": "org.bukkit.Material#SNOW_GOLEM_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a Furnace starts smelting.",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "COOKED_COD",
    "id": "org.bukkit.Material#COOKED_COD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the type of this statistic.",
    "param-names": ["Statistic"],
    "param-types": ["org.bukkit.Statistic"],
    "method": "getType",
    "id": "org.bukkit.Statistic#getType()",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic.Type"
  },
  {
    "static": true,
    "field": "PURPLE",
    "id": "org.bukkit.boss.BarColor#PURPLE",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "descr": "Sets the given statistic for this player.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "New Value"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "int"
    ],
    "method": "setStatistic",
    "id": "org.bukkit.OfflinePlayer#setStatistic(org.bukkit.Statistic,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND",
    "id": "org.bukkit.Material#LEGACY_DIAMOND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Setting to show/hide potion effects, book and firework information, map\\ntooltips, patterns of banners, and enchantments of enchanted books.",
    "static": true,
    "field": "HIDE_POTION_EFFECTS",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_POTION_EFFECTS",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "descr": "Checks if the chunk is fully generated.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "isGenerated",
    "id": "org.bukkit.Chunk#isGenerated()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NAME_TAG",
    "id": "org.bukkit.Material#NAME_TAG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_EAT",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Marks whether this sign can be edited by players.",
    "param-names": ["Sign"],
    "param-types": ["org.bukkit.block.Sign"],
    "method": "isEditable",
    "id": "org.bukkit.block.Sign#isEditable()",
    "class": "org.bukkit.block.Sign",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SPELL_MOB",
    "id": "org.bukkit.Particle#SPELL_MOB",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_DEATH",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Entity that is attacking the vehicle",
    "method": "getAttacker",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#getAttacker()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "DIAMOND_PICKAXE",
    "id": "org.bukkit.Material#DIAMOND_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Grindstone inventory with 2 CRAFTING slots, and 1 RESULT slot.",
    "static": true,
    "field": "GRINDSTONE",
    "id": "org.bukkit.event.inventory.InventoryType#GRINDSTONE",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "FALL_ONE_CM",
    "id": "org.bukkit.Statistic#FALL_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the Difficulty of the world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getDifficulty",
    "id": "org.bukkit.World#getDifficulty()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Difficulty"
  },
  {
    "static": true,
    "field": "ENTITY_BOAT_PADDLE_WATER",
    "id": "org.bukkit.Sound#ENTITY_BOAT_PADDLE_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the indexes of all the occupied slots present on this block.",
    "param-names": ["ChiseledBookshelf"],
    "param-types": ["org.bukkit.block.data.type.ChiseledBookshelf"],
    "method": "getOccupiedSlots",
    "id": "org.bukkit.block.data.type.ChiseledBookshelf#getOccupiedSlots()",
    "class": "org.bukkit.block.data.type.ChiseledBookshelf",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "BLOCK_SHULKER_BOX_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_SHULKER_BOX_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "PURPLE_CANDLE",
    "id": "org.bukkit.Material#PURPLE_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether this Endermite was spawned by a player.\\nAn Endermite spawned by a player will be attacked by nearby Enderman.",
    "param-names": [
      "Endermite",
      "Player Spawned"
    ],
    "param-types": [
      "org.bukkit.entity.Endermite",
      "boolean"
    ],
    "method": "setPlayerSpawned",
    "id": "org.bukkit.entity.Endermite#setPlayerSpawned(boolean)",
    "class": "org.bukkit.entity.Endermite"
  },
  {
    "descr": "Get the criteria which have not been awarded.",
    "param-names": ["AdvancementProgress"],
    "param-types": ["org.bukkit.advancement.AdvancementProgress"],
    "method": "getRemainingCriteria",
    "id": "org.bukkit.advancement.AdvancementProgress#getRemainingCriteria()",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "java.util.Collection"
  },
  {
    "descr": "Get the metadata function this structure block will perform when\\nactivated. Consult the\\nMinecraft\\nWiki for more information.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getMetadata",
    "id": "org.bukkit.block.Structure#getMetadata()",
    "class": "org.bukkit.block.Structure",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the special price for this trade.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getSpecialPrice",
    "id": "org.bukkit.inventory.MerchantRecipe#getSpecialPrice()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "int"
  },
  {
    "descr": "Mirrors the player's experience level.",
    "static": true,
    "field": "LEVEL",
    "id": "org.bukkit.scoreboard.Criteria#LEVEL",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "FIRE_CORAL_FAN",
    "id": "org.bukkit.Material#FIRE_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_AZURE_BLUET",
    "id": "org.bukkit.Material#POTTED_AZURE_BLUET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the experience cost (in levels) to complete the current repair.",
    "param-names": ["AnvilInventory"],
    "param-types": ["org.bukkit.inventory.AnvilInventory"],
    "method": "getRepairCost",
    "id": "org.bukkit.inventory.AnvilInventory#getRepairCost()",
    "class": "org.bukkit.inventory.AnvilInventory",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_MUDDY_MANGROVE_ROOTS_FALL",
    "id": "org.bukkit.Sound#BLOCK_MUDDY_MANGROVE_ROOTS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block the entity is changing",
    "method": "getBlock",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.RedstoneWire.Connection#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.RedstoneWire.Connection",
    "return": "org.bukkit.block.data.type.RedstoneWire.Connection"
  },
  {
    "descr": "Sets the current pickup status of this arrow.",
    "param-names": [
      "AbstractArrow",
      "Status"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractArrow",
      "org.bukkit.entity.AbstractArrow.PickupStatus"
    ],
    "method": "setPickupStatus",
    "id": "org.bukkit.entity.AbstractArrow#setPickupStatus(org.bukkit.entity.AbstractArrow.PickupStatus)",
    "class": "org.bukkit.entity.AbstractArrow"
  },
  {
    "static": true,
    "field": "LIME_CONCRETE_POWDER",
    "id": "org.bukkit.Material#LIME_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a Player object that this represents, if there is one\\n\\nIf the player is online, this will return that player. Otherwise,\\nit will return null.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "getPlayer",
    "id": "org.bukkit.OfflinePlayer#getPlayer()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "SPRUCE_FENCE_GATE",
    "id": "org.bukkit.Material#SPRUCE_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TRIDENT",
    "id": "org.bukkit.Material#TRIDENT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_BLOW_UP",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_BLOW_UP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "OCEAN",
    "id": "org.bukkit.block.Biome#OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the radius of the explosion",
    "param-names": ["Radius"],
    "param-types": ["float"],
    "method": "setRadius",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#setRadius(float)",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent"
  },
  {
    "descr": "BlockData: RedstoneRail",
    "static": true,
    "field": "ACTIVATOR_RAIL",
    "id": "org.bukkit.Material#ACTIVATOR_RAIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This method checks the provided warning should be printed for this\\nstate",
    "param-names": [
      "Warning.WarningState",
      "Warning"
    ],
    "param-types": [
      "org.bukkit.Warning.WarningState",
      "org.bukkit.Warning"
    ],
    "method": "printFor",
    "id": "org.bukkit.Warning.WarningState#printFor(org.bukkit.Warning)",
    "class": "org.bukkit.Warning.WarningState",
    "return": "boolean"
  },
  {
    "descr": "Set the minimum spawn delay amount (in ticks).",
    "param-names": [
      "CreatureSpawner",
      "Delay"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setMinSpawnDelay",
    "id": "org.bukkit.block.CreatureSpawner#setMinSpawnDelay(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "Removed by an explosion",
    "static": true,
    "field": "EXPLOSION",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#EXPLOSION",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "WAXED_OXIDIZED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#WAXED_OXIDIZED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the input choice.",
    "param-names": ["StonecuttingRecipe"],
    "param-types": ["org.bukkit.inventory.StonecuttingRecipe"],
    "method": "getInputChoice",
    "id": "org.bukkit.inventory.StonecuttingRecipe#getInputChoice()",
    "class": "org.bukkit.inventory.StonecuttingRecipe",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "LARGE_FERN",
    "id": "org.bukkit.Material#LARGE_FERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the maximum number of players sent.",
    "param-names": ["Max Players"],
    "param-types": ["int"],
    "method": "setMaxPlayers",
    "id": "org.bukkit.event.server.ServerListPingEvent#setMaxPlayers(int)",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent"
  },
  {
    "descr": "Tries to drop a randomly selected item from the dropper's inventory,\\nfollowing the normal behavior of a dropper.\\n\\nNormal behavior of a dropper is as follows:\\n\\nIf the block that the dropper is facing is an InventoryHolder,\\nthe randomly selected ItemStack is placed within that\\nInventory in the first slot that's available, starting with 0 and\\ncounting up.  If the inventory is full, nothing happens.\\n\\nIf the block that the dropper is facing is not an InventoryHolder,\\nthe randomly selected ItemStack is dropped on\\nthe ground in the form of an org.bukkit.entity.Item Item.\\n\\nIf the block represented by this state is no longer a dropper, this will\\ndo nothing.",
    "param-names": ["Dropper"],
    "param-types": ["org.bukkit.block.Dropper"],
    "method": "drop",
    "id": "org.bukkit.block.Dropper#drop()",
    "class": "org.bukkit.block.Dropper"
  },
  {
    "descr": "Get the amount of cursors in this collection.",
    "param-names": ["MapCursorCollection"],
    "param-types": ["org.bukkit.map.MapCursorCollection"],
    "method": "size",
    "id": "org.bukkit.map.MapCursorCollection#size()",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "int"
  },
  {
    "descr": "Gets the player who placed the block involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Get the block that caused the TNT to be primed.",
    "method": "getPrimingBlock",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getPrimingBlock()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_CORAL_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CORAL_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the light purple team.",
    "static": true,
    "field": "KILLED_BY_TEAM_LIGHT_PURPLE",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_LIGHT_PURPLE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets a copy of the boots currently being worn by the entity",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getBoots",
    "id": "org.bukkit.inventory.EntityEquipment#getBoots()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.BlockSupport#valueOf(java.lang.String)",
    "class": "org.bukkit.block.BlockSupport",
    "return": "org.bukkit.block.BlockSupport"
  },
  {
    "static": true,
    "field": "BROWN_WOOL",
    "id": "org.bukkit.Material#BROWN_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_BUTCHER",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_BUTCHER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the entity's rotation.\\n\\nNote that if the entity is affected by AI, it may override this rotation.",
    "param-names": [
      "Entity",
      "Yaw",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "float",
      "float"
    ],
    "method": "setRotation",
    "id": "org.bukkit.entity.Entity#setRotation(float,float)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "WHITE_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#WHITE_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_WOOD_HIT",
    "id": "org.bukkit.Sound#BLOCK_WOOD_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_CAULDRON_ITEM",
    "id": "org.bukkit.Material#LEGACY_CAULDRON_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEATHERWORKER_GIFT",
    "id": "org.bukkit.loot.LootTables#LEATHERWORKER_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Apply a material change for an item meta. Do not use under any\\ncircumstances.",
    "param-names": [
      "ItemFactory",
      "Meta",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.Material"
    ],
    "method": "updateMaterial",
    "id": "org.bukkit.inventory.ItemFactory#updateMaterial(org.bukkit.inventory.meta.ItemMeta,org.bukkit.Material)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Decrements the given statistic for this player for the given entity.\\n\\nThis is equivalent to the following code:\\ndecrementStatistic(Statistic, EntityType, 1)",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Entity Type"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType"
    ],
    "method": "decrementStatistic",
    "id": "org.bukkit.OfflinePlayer#decrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Sets the display ItemStack for the thrown projectile.",
    "param-names": [
      "ThrowableProjectile",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ThrowableProjectile",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.entity.ThrowableProjectile#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ThrowableProjectile"
  },
  {
    "static": true,
    "field": "LEGACY_DOUBLE_PLANT",
    "id": "org.bukkit.Material#LEGACY_DOUBLE_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MINE_BLOCK",
    "id": "org.bukkit.Statistic#MINE_BLOCK",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A leash attached to a fencepost.",
    "static": true,
    "field": "LEASH_HITCH",
    "id": "org.bukkit.entity.EntityType#LEASH_HITCH",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the SHA-1 digest of the server resource pack, or empty string if\\nnot specified.",
    "static": true,
    "method": "getResourcePackHash",
    "id": "org.bukkit.Bukkit#getResourcePackHash()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the bucket that the fish will be put into.\\nThis refers to the bucket with the fish, ie\\nMaterial#PUFFERFISH_BUCKET.",
    "method": "getFishBucket",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getFishBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_ATTACK_NODAMAGE",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_ATTACK_NODAMAGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.TabCompleteEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the raw amount of damage caused by the event.\\n\\nFor compatibility this also recalculates the modifiers and scales\\nthem by the difference between the modifier for the previous damage\\nvalue and the new one.",
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#setDamage(double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_SWAG",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_SWAG",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerJoinEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "UI_TOAST_IN",
    "id": "org.bukkit.Sound#UI_TOAST_IN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether this ClickType represents the pressing of a key on a\\nkeyboard.",
    "param-names": ["ClickType"],
    "param-types": ["org.bukkit.event.inventory.ClickType"],
    "method": "isKeyboardClick",
    "id": "org.bukkit.event.inventory.ClickType#isKeyboardClick()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "CREEPER_WALL_HEAD",
    "id": "org.bukkit.Material#CREEPER_WALL_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the chunk which contains this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getChunk",
    "id": "org.bukkit.block.Block#getChunk()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "field": "SQUID",
    "id": "org.bukkit.entity.EntityType#SQUID",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Makes the text appear underlined.",
    "static": true,
    "field": "UNDERLINE",
    "id": "org.bukkit.ChatColor#UNDERLINE",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Gets the shadow radius of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getShadowRadius",
    "id": "org.bukkit.entity.Display#getShadowRadius()",
    "class": "org.bukkit.entity.Display",
    "return": "float"
  },
  {
    "descr": "Returns the armor stand's left arm's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getLeftArmPose",
    "id": "org.bukkit.entity.ArmorStand#getLeftArmPose()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "If the player currently has an inventory window open, this method will\\nset a property of that window, such as the state of a progress bar.",
    "param-names": [
      "HumanEntity",
      "Prop",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.InventoryView.Property",
      "int"
    ],
    "method": "setWindowProperty",
    "id": "org.bukkit.entity.HumanEntity#setWindowProperty(org.bukkit.inventory.InventoryView.Property,int)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_BOOK",
    "id": "org.bukkit.Material#LEGACY_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets a custom name on a mob or block. This name will be used in death\\nmessages and can be sent to the client as a nameplate over the mob.\\n\\nSetting the name to null or an empty string will clear it.\\n\\nThis value has no effect on players, they will always use their real\\nname.",
    "param-names": [
      "Nameable",
      "Name"
    ],
    "param-types": [
      "org.bukkit.Nameable",
      "java.lang.String"
    ],
    "method": "setCustomName",
    "id": "org.bukkit.Nameable#setCustomName(java.lang.String)",
    "class": "org.bukkit.Nameable"
  },
  {
    "descr": "Sets the spawn flags for this.",
    "param-names": [
      "World",
      "Allow Monsters",
      "Allow Animals"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean",
      "boolean"
    ],
    "method": "setSpawnFlags",
    "id": "org.bukkit.World#setSpawnFlags(boolean,boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerMoveEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "ITEM_BUNDLE_INSERT",
    "id": "org.bukkit.Sound#ITEM_BUNDLE_INSERT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_LEAVES_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_LEAVES_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether or not the wither skull is charged.",
    "param-names": ["WitherSkull"],
    "param-types": ["org.bukkit.entity.WitherSkull"],
    "method": "isCharged",
    "id": "org.bukkit.entity.WitherSkull#isCharged()",
    "class": "org.bukkit.entity.WitherSkull",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_SQUISH_SMALL",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_SQUISH_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the bee's anger level.",
    "param-names": ["Bee"],
    "param-types": ["org.bukkit.entity.Bee"],
    "method": "getAnger",
    "id": "org.bukkit.entity.Bee#getAnger()",
    "class": "org.bukkit.entity.Bee",
    "return": "int"
  },
  {
    "descr": "When the target attacks a fellow pig zombie, so the whole group\\nwill target him with this reason.",
    "static": true,
    "field": "PIG_ZOMBIE_TARGET",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#PIG_ZOMBIE_TARGET",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MUNDANE",
    "id": "org.bukkit.potion.PotionType#MUNDANE",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "TROPICAL_FISH",
    "id": "org.bukkit.loot.LootTables#TROPICAL_FISH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Initialize this MapRenderer for the given map.",
    "param-names": [
      "MapRenderer",
      "Map"
    ],
    "param-types": [
      "org.bukkit.map.MapRenderer",
      "org.bukkit.map.MapView"
    ],
    "method": "initialize",
    "id": "org.bukkit.map.MapRenderer#initialize(org.bukkit.map.MapView)",
    "class": "org.bukkit.map.MapRenderer"
  },
  {
    "static": true,
    "field": "BLACK",
    "id": "org.bukkit.entity.Cat.Type#BLACK",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Represents brown dye.",
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.DyeColor#BROWN",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "TUFF",
    "id": "org.bukkit.Material#TUFF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.LeavesDecayEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CYAN_DYE",
    "id": "org.bukkit.Material#CYAN_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The fishing hook has been cast and is either in the air or resting\\nagainst a block on the ground.",
    "static": true,
    "field": "UNHOOKED",
    "id": "org.bukkit.entity.FishHook.HookState#UNHOOKED",
    "class": "org.bukkit.entity.FishHook.HookState",
    "return": "org.bukkit.entity.FishHook.HookState"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "GOLDEN_CHESTPLATE",
    "id": "org.bukkit.Material#GOLDEN_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_GOLD_ORE_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHER_GOLD_ORE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "An item stack with the specified damage / durability",
    "param-names": [
      "Type",
      "Amount",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.Material",
      "int",
      "short"
    ],
    "id": "org.bukkit.inventory.ItemStack#ItemStack(org.bukkit.Material,int,short)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Represents lime dye.",
    "static": true,
    "field": "LIME",
    "id": "org.bukkit.DyeColor#LIME",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "LEGACY_POISONOUS_POTATO",
    "id": "org.bukkit.Material#LEGACY_POISONOUS_POTATO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Block at the given coordinates",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockAt",
    "id": "org.bukkit.World#getBlockAt(int,int,int)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Registers an Objective on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Name",
      "Criteria",
      "Display Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "registerNewObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#registerNewObjective(java.lang.String,java.lang.String,java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "Gets the derailed velocity modifier. Used for minecarts that are on the\\nground, but not on rails.\\n\\nA derailed minecart's velocity is multiplied by this factor each tick.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getDerailedVelocityMod",
    "id": "org.bukkit.entity.Minecart#getDerailedVelocityMod()",
    "class": "org.bukkit.entity.Minecart",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.StructureGrowEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BROWN_SHULKER_BOX",
    "id": "org.bukkit.Material#BROWN_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_HOPPER",
    "id": "org.bukkit.Material#LEGACY_HOPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WITCH_DRINK",
    "id": "org.bukkit.Sound#ENTITY_WITCH_DRINK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Kicks player with custom kick message.",
    "param-names": [
      "Player",
      "Message"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "kickPlayer",
    "id": "org.bukkit.entity.Player#kickPlayer(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the amount of items in this stack",
    "param-names": [
      "ItemStack",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "int"
    ],
    "method": "setAmount",
    "id": "org.bukkit.inventory.ItemStack#setAmount(int)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the anger level of this warden.\\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\\ntarget it will actively pursue it.",
    "param-names": [
      "Warden",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Warden",
      "org.bukkit.entity.Entity"
    ],
    "method": "getAnger",
    "id": "org.bukkit.entity.Warden#getAnger(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Warden",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_GLASS_HIT",
    "id": "org.bukkit.Sound#BLOCK_GLASS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "STRIPEY",
    "id": "org.bukkit.entity.TropicalFish.Pattern#STRIPEY",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "static": true,
    "field": "LEGACY_TRIPWIRE",
    "id": "org.bukkit.Material#LEGACY_TRIPWIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a new note for a natural tone, such as A-natural.",
    "param-names": [
      "Octave",
      "Tone"
    ],
    "static": true,
    "param-types": [
      "int",
      "org.bukkit.Note.Tone"
    ],
    "method": "natural",
    "id": "org.bukkit.Note#natural(int,org.bukkit.Note.Tone)",
    "class": "org.bukkit.Note",
    "return": "org.bukkit.Note"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "NETHER_BRICK_WALL",
    "id": "org.bukkit.Material#NETHER_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_VINE_STEP",
    "id": "org.bukkit.Sound#BLOCK_VINE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.MoistureChangeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ITEM_DYE_USE",
    "id": "org.bukkit.Sound#ITEM_DYE_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHANGE",
    "id": "org.bukkit.GameEvent#BLOCK_CHANGE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_BRICKS_HIT",
    "id": "org.bukkit.Sound#BLOCK_MUD_BRICKS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "No tilt.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.block.data.type.BigDripleaf.Tilt#NONE",
    "class": "org.bukkit.block.data.type.BigDripleaf.Tilt",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt"
  },
  {
    "descr": "Returns the progress of the bar between 0.0 and 1.0",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "getProgress",
    "id": "org.bukkit.boss.BossBar#getProgress()",
    "class": "org.bukkit.boss.BossBar",
    "return": "double"
  },
  {
    "static": true,
    "field": "UI_LOOM_SELECT_PATTERN",
    "id": "org.bukkit.Sound#UI_LOOM_SELECT_PATTERN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SHROOMLIGHT_HIT",
    "id": "org.bukkit.Sound#BLOCK_SHROOMLIGHT_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.MapInitializeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.MapInitializeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the value of the 'type' property.",
    "param-names": ["TechnicalPiston"],
    "param-types": ["org.bukkit.block.data.type.TechnicalPiston"],
    "method": "getType",
    "id": "org.bukkit.block.data.type.TechnicalPiston#getType()",
    "class": "org.bukkit.block.data.type.TechnicalPiston",
    "return": "org.bukkit.block.data.type.TechnicalPiston.Type"
  },
  {
    "static": true,
    "field": "ENDERMAN",
    "id": "org.bukkit.entity.EntityType#ENDERMAN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "In an enchanting inventory, the middle button's enchantment's id",
    "static": true,
    "field": "ENCHANT_ID2",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_ID2",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Sets the ItemStack currently in the clicked slot.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCurrentItem",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#setCurrentItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent"
  },
  {
    "descr": "Add several primary colors to the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Colors"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "org.bukkit.Color[]"
    ],
    "method": "withColor",
    "id": "org.bukkit.FireworkEffect.Builder#withColor(org.bukkit.Color...)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "END_STONE_BRICK_STAIRS",
    "id": "org.bukkit.Material#END_STONE_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Send an equipment change for the target entity. This will not\\nactually change the entity's equipment in any way.",
    "param-names": [
      "Player",
      "Entity",
      "Slot",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "sendEquipmentChange",
    "id": "org.bukkit.entity.Player#sendEquipmentChange(org.bukkit.entity.LivingEntity,org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "When TNT is primed after getting hit with a burning projectile.",
    "static": true,
    "field": "PROJECTILE",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#PROJECTILE",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_LONG_JUMP",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_LONG_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increments automatically when a player kills another player on the dark aqua team.",
    "static": true,
    "field": "TEAM_KILL_DARK_AQUA",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_DARK_AQUA",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the type of connection on the specified face.",
    "param-names": [
      "RedstoneWire",
      "Face",
      "Connection"
    ],
    "param-types": [
      "org.bukkit.block.data.type.RedstoneWire",
      "org.bukkit.block.BlockFace",
      "org.bukkit.block.data.type.RedstoneWire.Connection"
    ],
    "method": "setFace",
    "id": "org.bukkit.block.data.type.RedstoneWire#setFace(org.bukkit.block.BlockFace,org.bukkit.block.data.type.RedstoneWire.Connection)",
    "class": "org.bukkit.block.data.type.RedstoneWire"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_DRIPLEAF_FALL",
    "id": "org.bukkit.Sound#BLOCK_SMALL_DRIPLEAF_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_END_CRYSTAL",
    "id": "org.bukkit.Material#LEGACY_END_CRYSTAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ELECTRIC_SPARK",
    "id": "org.bukkit.Particle#ELECTRIC_SPARK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets whether or not this sign has been waxed. If a sign has been waxed, it\\ncannot be edited by a player.",
    "param-names": ["Sign"],
    "param-types": ["org.bukkit.block.Sign"],
    "method": "isWaxed",
    "id": "org.bukkit.block.Sign#isWaxed()",
    "class": "org.bukkit.block.Sign",
    "return": "boolean"
  },
  {
    "descr": "Sound of a block breaking. Needs block ID as additional info.",
    "static": true,
    "field": "STEP_SOUND",
    "id": "org.bukkit.Effect#STEP_SOUND",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "TNT_MINECART",
    "id": "org.bukkit.Material#TNT_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attempts to get the Material with the given name.\\n\\nThis is a normal lookup, names must be the precise name they are given in\\nthe enum (but optionally including the LEGACY_PREFIX if legacyName is\\ntrue).\\n\\nIf legacyName is true, then the lookup will be against legacy materials,\\nbut the returned Material will be a modern material (ie this method is\\nuseful for updating stored data).",
    "param-names": [
      "Name",
      "Legacy Name"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "boolean"
    ],
    "method": "getMaterial",
    "id": "org.bukkit.Material#getMaterial(java.lang.String,boolean)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMAN_TELEPORT",
    "id": "org.bukkit.Sound#ENTITY_ENDERMAN_TELEPORT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_LADDER_HIT",
    "id": "org.bukkit.Sound#BLOCK_LADDER_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Creates a new bounding box using the given center and extents.",
    "param-names": [
      "Center",
      "X",
      "Y",
      "Z"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Location",
      "double",
      "double",
      "double"
    ],
    "method": "of",
    "id": "org.bukkit.util.BoundingBox#of(org.bukkit.Location,double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "COAL",
    "id": "org.bukkit.Material#COAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHERRY_LEAVES",
    "id": "org.bukkit.Particle#CHERRY_LEAVES",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_CHERRY_GROVE",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_CHERRY_GROVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the upper inventory involved in this transaction.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getTopInventory",
    "id": "org.bukkit.inventory.InventoryView#getTopInventory()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "ITEM_INTERACT_FINISH",
    "id": "org.bukkit.GameEvent#ITEM_INTERACT_FINISH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "SPIDER_SPAWN_EGG",
    "id": "org.bukkit.Material#SPIDER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns a unique id for this entity",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getEntityId",
    "id": "org.bukkit.entity.Entity#getEntityId()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "descr": "Stores data for lightning striking",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent"
  },
  {
    "descr": "Adds a material to the allowed list of materials to barter with.",
    "param-names": [
      "Piglin",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Piglin",
      "org.bukkit.Material"
    ],
    "method": "addBarterMaterial",
    "id": "org.bukkit.entity.Piglin#addBarterMaterial(org.bukkit.Material)",
    "class": "org.bukkit.entity.Piglin",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "BIRCH_SIGN",
    "id": "org.bukkit.Material#BIRCH_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_LAY_EGG",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_LAY_EGG",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the name of this WorldType",
    "param-names": ["WorldType"],
    "param-types": ["org.bukkit.WorldType"],
    "method": "getName",
    "id": "org.bukkit.WorldType#getName()",
    "class": "org.bukkit.WorldType",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_BREAK",
    "id": "org.bukkit.Sound#BLOCK_METAL_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LEGACY_BLACK_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_BLACK_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the UUID of all heroes in this raid.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getHeroes",
    "id": "org.bukkit.Raid#getHeroes()",
    "class": "org.bukkit.Raid",
    "return": "java.util.Set"
  },
  {
    "descr": "Regenerates the Chunk at the specified coordinates",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "regenerateChunk",
    "id": "org.bukkit.World#regenerateChunk(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Adds this user's current IP address to the IpBanList. If a previous ban exists, this will\\nupdate the entry. If #getAddress() is null this method will throw an exception.",
    "param-names": [
      "Player",
      "Reason",
      "Expires",
      "Source",
      "Kick Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.time.Instant",
      "java.lang.String",
      "boolean"
    ],
    "method": "banIp",
    "id": "org.bukkit.entity.Player#banIp(java.lang.String,java.time.Instant,java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Registers an Objective on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Name",
      "Criteria",
      "Display Name",
      "Render Type"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String",
      "org.bukkit.scoreboard.Criteria",
      "java.lang.String",
      "org.bukkit.scoreboard.RenderType"
    ],
    "method": "registerNewObjective",
    "id": "org.bukkit.scoreboard.Scoreboard#registerNewObjective(java.lang.String,org.bukkit.scoreboard.Criteria,java.lang.String,org.bukkit.scoreboard.RenderType)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Objective"
  },
  {
    "descr": "Get the closest cardinal BlockFace direction an entity is\\ncurrently facing.\\n\\nThis will not return any non-cardinal directions such as\\nBlockFace#UP or BlockFace#DOWN.\\n\\nHanging entities will override this call and thus their behavior\\nmay be different.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getFacing",
    "id": "org.bukkit.entity.Entity#getFacing()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Add a location to the explored locations.\\n\\nNote: the location must be in the sniffer's current world for this\\nmethod to have any effect.",
    "param-names": [
      "Sniffer",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Sniffer",
      "org.bukkit.Location"
    ],
    "method": "addExploredLocation",
    "id": "org.bukkit.entity.Sniffer#addExploredLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.Sniffer"
  },
  {
    "descr": "Creates a boss bar instance to display to players. The progress\\ndefaults to 1.0",
    "param-names": [
      "Title",
      "Color",
      "Style",
      "Flags"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "org.bukkit.boss.BarColor",
      "org.bukkit.boss.BarStyle",
      "org.bukkit.boss.BarFlag[]"
    ],
    "method": "createBossBar",
    "id": "org.bukkit.Bukkit#createBossBar(java.lang.String,org.bukkit.boss.BarColor,org.bukkit.boss.BarStyle,org.bukkit.boss.BarFlag...)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "VILLAGER_HAPPY",
    "id": "org.bukkit.Particle#VILLAGER_HAPPY",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "The sensor is cooling down.",
    "static": true,
    "field": "COOLDOWN",
    "id": "org.bukkit.block.data.type.SculkSensor.Phase#COOLDOWN",
    "class": "org.bukkit.block.data.type.SculkSensor.Phase",
    "return": "org.bukkit.block.data.type.SculkSensor.Phase"
  },
  {
    "descr": "BlockData: SculkCatalyst",
    "static": true,
    "field": "SCULK_CATALYST",
    "id": "org.bukkit.Material#SCULK_CATALYST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_BUTTON_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_BUTTON_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the light level between 0-15",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getLightLevel",
    "id": "org.bukkit.block.Block#getLightLevel()",
    "class": "org.bukkit.block.Block",
    "return": "byte"
  },
  {
    "descr": "Gets the current ItemStack on the cursor.",
    "method": "getCursor",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getCursor()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the type of this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getType",
    "id": "org.bukkit.block.Block#getType()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets user-specified limit for number of SpawnCategory mobs that can spawn in\\na chunk.\\nNote: the SpawnCategory#MISC are not consider.",
    "param-names": ["Spawn Category"],
    "static": true,
    "param-types": ["org.bukkit.entity.SpawnCategory"],
    "method": "getSpawnLimit",
    "id": "org.bukkit.Bukkit#getSpawnLimit(org.bukkit.entity.SpawnCategory)",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "YELLOW_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#YELLOW_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Used when saving a structure for easy size calculation. When using this\\nmode, the Structure name MUST match the name in the second Structure\\nblock that is in UsageMode#SAVE.",
    "static": true,
    "field": "CORNER",
    "id": "org.bukkit.block.structure.UsageMode#CORNER",
    "class": "org.bukkit.block.structure.UsageMode",
    "return": "org.bukkit.block.structure.UsageMode"
  },
  {
    "descr": "Gets the value of the 'half' property.",
    "param-names": ["Bisected"],
    "param-types": ["org.bukkit.block.data.Bisected"],
    "method": "getHalf",
    "id": "org.bukkit.block.data.Bisected#getHalf()",
    "class": "org.bukkit.block.data.Bisected",
    "return": "org.bukkit.block.data.Bisected.Half"
  },
  {
    "descr": "Sets whether the chunk at the specified chunk coordinates is force\\nloaded.\\n\\nA force loaded chunk will not be unloaded due to lack of player activity.",
    "param-names": [
      "World",
      "X",
      "Z",
      "Forced"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "boolean"
    ],
    "method": "setChunkForceLoaded",
    "id": "org.bukkit.World#setChunkForceLoaded(int,int,boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Get the scale of this map.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "getScale",
    "id": "org.bukkit.map.MapView#getScale()",
    "class": "org.bukkit.map.MapView",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "static": true,
    "field": "LEGACY_COMPASS",
    "id": "org.bukkit.Material#LEGACY_COMPASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "ACACIA_FENCE",
    "id": "org.bukkit.Material#ACACIA_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the location that this player will move to",
    "param-names": ["To"],
    "param-types": ["org.bukkit.Location"],
    "method": "setTo",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#setTo(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent"
  },
  {
    "descr": "When a player is fishing, ie casting the line out.",
    "static": true,
    "field": "FISHING",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#FISHING",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "static": true,
    "field": "BLOCK_LODESTONE_FALL",
    "id": "org.bukkit.Sound#BLOCK_LODESTONE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player with the given UUID.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["java.util.UUID"],
    "method": "getPlayer",
    "id": "org.bukkit.Bukkit#getPlayer(java.util.UUID)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Server biomes.",
    "static": true,
    "field": "BIOME",
    "id": "org.bukkit.Registry#BIOME",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "MAGENTA_BED",
    "id": "org.bukkit.Material#MAGENTA_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SPRUCE_WOOD_STAIRS",
    "id": "org.bukkit.Material#LEGACY_SPRUCE_WOOD_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets whether the Panda is on its back",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "isOnBack",
    "id": "org.bukkit.entity.Panda#isOnBack()",
    "class": "org.bukkit.entity.Panda",
    "return": "boolean"
  },
  {
    "descr": "The slab occupies the lower y half of the block.",
    "static": true,
    "field": "BOTTOM",
    "id": "org.bukkit.block.data.type.Slab.Type#BOTTOM",
    "class": "org.bukkit.block.data.type.Slab.Type",
    "return": "org.bukkit.block.data.type.Slab.Type"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.CampfireStartEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CLAYFISH",
    "id": "org.bukkit.entity.TropicalFish.Pattern#CLAYFISH",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Sets the result of this event. This will change whether or not this\\nevent is considered cancelled.",
    "param-names": ["New Result"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.CraftItemEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent"
  },
  {
    "static": true,
    "field": "POLISHED_BLACKSTONE_BRICKS",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether this explosion will create fire or not",
    "param-names": ["Fire"],
    "param-types": ["boolean"],
    "method": "setFire",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#setFire(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent"
  },
  {
    "descr": "Called when a player shears an entity",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the aqua team.",
    "static": true,
    "field": "KILLED_BY_TEAM_AQUA",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_AQUA",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "CHISELED_QUARTZ_BLOCK",
    "id": "org.bukkit.Material#CHISELED_QUARTZ_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Adds this user to the ProfileBanList. If a previous ban exists, this will\\nupdate the entry.",
    "param-names": [
      "OfflinePlayer",
      "Reason",
      "Expires",
      "Source"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "java.lang.String",
      "java.util.Date",
      "java.lang.String"
    ],
    "method": "ban",
    "id": "org.bukkit.OfflinePlayer#ban(java.lang.String,java.util.Date,java.lang.String)",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the Entity that has destroyed the vehicle, potentially null",
    "method": "getAttacker",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#getAttacker()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets an array of all loaded Chunks",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getLoadedChunks",
    "id": "org.bukkit.World#getLoadedChunks()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Chunk[]"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "IRON_GOLEM_SPAWN_EGG",
    "id": "org.bukkit.Material#IRON_GOLEM_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GOLDEN_HORSE_ARMOR",
    "id": "org.bukkit.Material#GOLDEN_HORSE_ARMOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_PACKED_MUD_STEP",
    "id": "org.bukkit.Sound#BLOCK_PACKED_MUD_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_FANGS_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_FANGS_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_TILES_HIT",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_TILES_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the BlockProjectileSource object for the dispenser.\\n\\nIf the block represented by this state is no longer a dispenser, this\\nwill return null.",
    "param-names": ["Dispenser"],
    "param-types": ["org.bukkit.block.Dispenser"],
    "method": "getBlockProjectileSource",
    "id": "org.bukkit.block.Dispenser#getBlockProjectileSource()",
    "class": "org.bukkit.block.Dispenser",
    "return": "org.bukkit.projectiles.BlockProjectileSource"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_SIT",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_SIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_SLIME_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether or not this end crystal is showing the\\nbedrock slate underneath it.",
    "param-names": [
      "EnderCrystal",
      "Showing"
    ],
    "param-types": [
      "org.bukkit.entity.EnderCrystal",
      "boolean"
    ],
    "method": "setShowingBottom",
    "id": "org.bukkit.entity.EnderCrystal#setShowingBottom(boolean)",
    "class": "org.bukkit.entity.EnderCrystal"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "Player",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#spawnParticle(org.bukkit.Particle,double,double,double,int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.raid.RaidStopEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the amount of ticks for which this entity should be in love mode.\\nSetting the love mode ticks to 600 is the equivalent of a player\\nfeeding the entity their breeding item of choice.",
    "param-names": [
      "Animals",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Animals",
      "int"
    ],
    "method": "setLoveModeTicks",
    "id": "org.bukkit.entity.Animals#setLoveModeTicks(int)",
    "class": "org.bukkit.entity.Animals"
  },
  {
    "descr": "Removes a custom potion effect from this arrow.",
    "param-names": [
      "Arrow",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Arrow",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "removeCustomEffect",
    "id": "org.bukkit.entity.Arrow#removeCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.Arrow",
    "return": "boolean"
  },
  {
    "descr": "Gets the amount of ticks until this entity will be converted to a Drowned\\nas a result of being underwater.\\nWhen this reaches 0, the entity will be converted.",
    "param-names": ["Zombie"],
    "param-types": ["org.bukkit.entity.Zombie"],
    "method": "getConversionTime",
    "id": "org.bukkit.entity.Zombie#getConversionTime()",
    "class": "org.bukkit.entity.Zombie",
    "return": "int"
  },
  {
    "descr": "Sets the item on the cursor.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCursor",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#setCursor(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.world.PortalCreateEvent.CreateReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.world.PortalCreateEvent.CreateReason",
    "return": "org.bukkit.event.world.PortalCreateEvent.CreateReason"
  },
  {
    "descr": "Cold (green) frog.",
    "static": true,
    "field": "COLD",
    "id": "org.bukkit.entity.Frog.Variant#COLD",
    "class": "org.bukkit.entity.Frog.Variant",
    "return": "org.bukkit.entity.Frog.Variant"
  },
  {
    "static": true,
    "field": "MEETING_POINT",
    "id": "org.bukkit.entity.memory.MemoryKey#MEETING_POINT",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Removed by an uncategorised cause",
    "static": true,
    "field": "DEFAULT",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#DEFAULT",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DIAMOND_BOOTS",
    "id": "org.bukkit.Material#DIAMOND_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "STRAIGHT_CROSS",
    "id": "org.bukkit.block.banner.PatternType#STRAIGHT_CROSS",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "WHITE_CANDLE",
    "id": "org.bukkit.Material#WHITE_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_LOADING_START",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_LOADING_START",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Source",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.BlastingRecipe#BlastingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material,float,int)",
    "class": "org.bukkit.inventory.BlastingRecipe"
  },
  {
    "descr": "Gets the player by the given name, regardless if they are offline or\\nonline.\\n\\nThis method may involve a blocking web request to get the UUID for the\\ngiven name.\\n\\nThis will return an object even if the player does not exist. To this\\nmethod, all players will exist.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getOfflinePlayer",
    "id": "org.bukkit.Bukkit#getOfflinePlayer(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Returns true if the entity is now swims or\\nfalse if the entity stops swimming.",
    "method": "isSwimming",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#isSwimming()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_GLASS_FALL",
    "id": "org.bukkit.Sound#BLOCK_GLASS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_BULLET_HURT",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_BULLET_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "HORN_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#HORN_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the thrower of this item.\\nThe thrower is the entity which dropped the item.",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.entity.Item"],
    "method": "getThrower",
    "id": "org.bukkit.entity.Item#getThrower()",
    "class": "org.bukkit.entity.Item",
    "return": "java.util.UUID"
  },
  {
    "descr": "Didgeridoo is normally played when a note block is on top of a pumpkin block.",
    "static": true,
    "field": "DIDGERIDOO",
    "id": "org.bukkit.Instrument#DIDGERIDOO",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "EYE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#EYE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Holding shift while pressing the right mouse button.",
    "static": true,
    "field": "SHIFT_RIGHT",
    "id": "org.bukkit.event.inventory.ClickType#SHIFT_RIGHT",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.EntityCategory#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "descr": "Get the regeneration rate (1 health per x ticks) of\\nthe HumanEntity when they have no saturation and\\ntheir food level is >= 18. Default is 80.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getUnsaturatedRegenRate",
    "id": "org.bukkit.entity.HumanEntity#getUnsaturatedRegenRate()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "Get the currently active recipe.\\n\\nThis will be null if the items provided by the player do\\nnot match the ingredients of the selected recipe. This does not\\nnecessarily match the recipe selected by the player: If the player has\\nselected the first recipe, the merchant will search all of its offers\\nfor a matching recipe to activate.",
    "param-names": ["MerchantInventory"],
    "param-types": ["org.bukkit.inventory.MerchantInventory"],
    "method": "getSelectedRecipe",
    "id": "org.bukkit.inventory.MerchantInventory#getSelectedRecipe()",
    "class": "org.bukkit.inventory.MerchantInventory",
    "return": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "When an entity is shaking in Powder Snow and a new entity spawns.",
    "static": true,
    "field": "FROZEN",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#FROZEN",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Increments automatically when a player kills another player on the dark red team.",
    "static": true,
    "field": "TEAM_KILL_DARK_RED",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_DARK_RED",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "MANGROVE_SLAB",
    "id": "org.bukkit.Material#MANGROVE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_STAL",
    "id": "org.bukkit.Sound#MUSIC_DISC_STAL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets the amount of damage caused by the event after all damage\\nreduction is applied.",
    "method": "getFinalDamage",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getFinalDamage()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "double"
  },
  {
    "static": true,
    "field": "ZOMBIE",
    "id": "org.bukkit.loot.LootTables#ZOMBIE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_SHROOMLIGHT_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SHROOMLIGHT_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_WOLF_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CONDUIT_DEACTIVATE",
    "id": "org.bukkit.Sound#BLOCK_CONDUIT_DEACTIVATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.WorldUnloadEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_PRESSURE_PLATE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_METAL_PRESSURE_PLATE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether this entity is a patrol leader.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "isPatrolLeader",
    "id": "org.bukkit.entity.Raider#isPatrolLeader()",
    "class": "org.bukkit.entity.Raider",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NETHERITE_SWORD",
    "id": "org.bukkit.Material#NETHERITE_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the Y component.",
    "param-names": [
      "Vector",
      "Y"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "setY",
    "id": "org.bukkit.util.Vector#setY(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "BLOCK_GROWING_PLANT_CROP",
    "id": "org.bukkit.Sound#BLOCK_GROWING_PLANT_CROP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "DARK_OAK_LEAVES",
    "id": "org.bukkit.Material#DARK_OAK_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_HURT_WATER",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_HURT_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the X component.",
    "param-names": [
      "Vector",
      "X"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "setX",
    "id": "org.bukkit.util.Vector#setX(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_FURNACE",
    "id": "org.bukkit.Material#LEGACY_FURNACE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the DyeColor for the given name, possibly doing legacy transformations.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "legacyValueOf",
    "id": "org.bukkit.DyeColor#legacyValueOf(java.lang.String)",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Get the width of the character sprite.",
    "param-names": ["MapFont.CharacterSprite"],
    "param-types": ["org.bukkit.map.MapFont.CharacterSprite"],
    "method": "getWidth",
    "id": "org.bukkit.map.MapFont.CharacterSprite#getWidth()",
    "class": "org.bukkit.map.MapFont.CharacterSprite",
    "return": "int"
  },
  {
    "descr": "Gets the block to which this arrow is attached.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "getAttachedBlock",
    "id": "org.bukkit.entity.AbstractArrow#getAttachedBlock()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the style of this horse.\\nStyles determine what kind of markings or patterns a horse has.\\n\\nAttempting to set a style for any donkey, mule, skeleton horse or\\nundead horse will not result in a change.",
    "param-names": [
      "Horse",
      "Style"
    ],
    "param-types": [
      "org.bukkit.entity.Horse",
      "org.bukkit.entity.Horse.Style"
    ],
    "method": "setStyle",
    "id": "org.bukkit.entity.Horse#setStyle(org.bukkit.entity.Horse.Style)",
    "class": "org.bukkit.entity.Horse"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Creates a new BlockData instance for this Material, with\\nall properties initialized to unspecified defaults.",
    "param-names": [
      "Material",
      "Consumer"
    ],
    "param-types": [
      "org.bukkit.Material",
      "java.util.function.Consumer"
    ],
    "method": "createBlockData",
    "id": "org.bukkit.Material#createBlockData(java.util.function.Consumer<org.bukkit.block.data.BlockData>)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_PLACE",
    "id": "org.bukkit.Sound#BLOCK_METAL_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "DARK_PRISMARINE",
    "id": "org.bukkit.Material#DARK_PRISMARINE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum radius the world is searched for a free space from the\\ngiven location.\\nIf enough free space is found then the portal will be created there, if\\nnot it will force create with air-space at the target location.\\nDoes not apply to end portal target platforms which will always appear at\\nthe target location.",
    "method": "getCreationRadius",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getCreationRadius()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "int"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "PURPUR_STAIRS",
    "id": "org.bukkit.Material#PURPUR_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.PortalCreateEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerChangedWorldEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SMALL_END_ISLANDS",
    "id": "org.bukkit.block.Biome#SMALL_END_ISLANDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the key needed to access the container.",
    "param-names": ["Lockable"],
    "param-types": ["org.bukkit.block.Lockable"],
    "method": "getLock",
    "id": "org.bukkit.block.Lockable#getLock()",
    "class": "org.bukkit.block.Lockable",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "AZALEA",
    "id": "org.bukkit.Material#AZALEA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: TNT",
    "static": true,
    "field": "TNT",
    "id": "org.bukkit.Material#TNT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Enchantment",
      "Enchantment Level",
      "Cost"
    ],
    "param-types": [
      "org.bukkit.enchantments.Enchantment",
      "int",
      "int"
    ],
    "id": "org.bukkit.enchantments.EnchantmentOffer#EnchantmentOffer(org.bukkit.enchantments.Enchantment,int,int)",
    "class": "org.bukkit.enchantments.EnchantmentOffer"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.block.Action#values()",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action[]"
  },
  {
    "static": true,
    "field": "WITHER_SKELETON",
    "id": "org.bukkit.entity.EntityType#WITHER_SKELETON",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets a player's Team on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "getPlayerTeam",
    "id": "org.bukkit.scoreboard.Scoreboard#getPlayerTeam(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "Gets an entity from its id.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "fromId",
    "id": "org.bukkit.entity.EntityType#fromId(int)",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_CHAIN_HIT",
    "id": "org.bukkit.Sound#BLOCK_CHAIN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WARPED_FUNGUS_ON_A_STICK",
    "id": "org.bukkit.Material#WARPED_FUNGUS_ON_A_STICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the current value for a given GameRule.",
    "param-names": [
      "World",
      "Rule"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.GameRule"
    ],
    "method": "getGameRuleValue",
    "id": "org.bukkit.World#<T>getGameRuleValue(org.bukkit.GameRule<T>)",
    "class": "org.bukkit.World",
    "return": "java.lang.Object"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Boat.Status#values()",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status[]"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "CYAN_BED",
    "id": "org.bukkit.Material#CYAN_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DRIPPING_DRIPSTONE_LAVA",
    "id": "org.bukkit.Particle#DRIPPING_DRIPSTONE_LAVA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the inventory corresponding to the clicked slot.",
    "method": "getClickedInventory",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getClickedInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_WARTS",
    "id": "org.bukkit.Material#LEGACY_NETHER_WARTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the entity that this is targeting.\\n\\nThis will be null in the case that the event is called when the mob\\nforgets its target.",
    "method": "getTarget",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getTarget()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Bamboo.Leaves#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Bamboo.Leaves",
    "return": "org.bukkit.block.data.type.Bamboo.Leaves"
  },
  {
    "static": true,
    "field": "BLOCK_SWEET_BERRY_BUSH_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SWEET_BERRY_BUSH_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the currently displayed player list footer for this player.",
    "param-names": [
      "Player",
      "Footer"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "setPlayerListFooter",
    "id": "org.bukkit.entity.Player#setPlayerListFooter(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the players current experience points towards the next level\\n\\nThis is a percentage value. 0 is \"no progress\" and 1 is \"next level\".",
    "param-names": [
      "Player",
      "Exp"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "float"
    ],
    "method": "setExp",
    "id": "org.bukkit.entity.Player#setExp(float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the category which this recipe will appear in the recipe book under.\\nDefaults to CookingBookCategory#MISC if not set.",
    "param-names": ["CookingRecipe"],
    "param-types": ["org.bukkit.inventory.CookingRecipe"],
    "method": "getCategory",
    "id": "org.bukkit.inventory.CookingRecipe#getCategory()",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "org.bukkit.inventory.recipe.CookingBookCategory"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "POLISHED_BLACKSTONE_WALL",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_BLOW_OUT",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_BLOW_OUT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityTransformEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent"
  },
  {
    "descr": "Set the variant of this axolotl in the bucket.",
    "param-names": [
      "AxolotlBucketMeta",
      "Variant"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.AxolotlBucketMeta",
      "org.bukkit.entity.Axolotl.Variant"
    ],
    "method": "setVariant",
    "id": "org.bukkit.inventory.meta.AxolotlBucketMeta#setVariant(org.bukkit.entity.Axolotl.Variant)",
    "class": "org.bukkit.inventory.meta.AxolotlBucketMeta"
  },
  {
    "static": true,
    "field": "BLOCK_DESTROY",
    "id": "org.bukkit.GameEvent#BLOCK_DESTROY",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Called when a player takes action on a resource pack request sent via\\nPlayer#setResourcePack(java.lang.String).",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent"
  },
  {
    "descr": "Sets the result of this event. This will change whether or not this\\nevent is considered cancelled.",
    "param-names": ["New Result"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_FOREST",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_FOREST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Chain this to the constructor to extend the potion's duration.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "extend",
    "id": "org.bukkit.potion.Potion#extend()",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_CONCRETE_POWDER",
    "id": "org.bukkit.Material#LIGHT_BLUE_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SPIDER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SPIDER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_JUNGLE_WOOD_STAIRS",
    "id": "org.bukkit.Material#LEGACY_JUNGLE_WOOD_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SHULKER_SHELL",
    "id": "org.bukkit.Material#LEGACY_SHULKER_SHELL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENCHANTMENT_TABLE",
    "id": "org.bukkit.Particle#ENCHANTMENT_TABLE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the deceleration rate (newSpeed = curSpeed * rate) of occupied\\nboats. The default is 0.2.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getOccupiedDeceleration",
    "id": "org.bukkit.entity.Boat#getOccupiedDeceleration()",
    "class": "org.bukkit.entity.Boat",
    "return": "double"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "Player",
      "Particle",
      "Location",
      "Count",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.entity.Player#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,T)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the durability of this item",
    "param-names": [
      "ItemStack",
      "Durability"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "short"
    ],
    "method": "setDurability",
    "id": "org.bukkit.inventory.ItemStack#setDurability(short)",
    "class": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the team's ability to see PotionEffectType#INVISIBILITY invisible teammates.",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "canSeeFriendlyInvisibles",
    "id": "org.bukkit.scoreboard.Team#canSeeFriendlyInvisibles()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "boolean"
  },
  {
    "descr": "Sets the chance of the off hand item being dropped upon this frame's\\ndestruction.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "ItemFrame",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.entity.ItemFrame",
      "float"
    ],
    "method": "setItemDropChance",
    "id": "org.bukkit.entity.ItemFrame#setItemDropChance(float)",
    "class": "org.bukkit.entity.ItemFrame"
  },
  {
    "descr": "Returns if this tone id is the sharped id of the tone.",
    "param-names": [
      "Note.Tone",
      "Id"
    ],
    "param-types": [
      "org.bukkit.Note.Tone",
      "byte"
    ],
    "method": "isSharped",
    "id": "org.bukkit.Note.Tone#isSharped(byte)",
    "class": "org.bukkit.Note.Tone",
    "return": "boolean"
  },
  {
    "descr": "Gets the value of the given statistic for this player.",
    "param-names": [
      "OfflinePlayer",
      "Statistic"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic"
    ],
    "method": "getStatistic",
    "id": "org.bukkit.OfflinePlayer#getStatistic(org.bukkit.Statistic)",
    "class": "org.bukkit.OfflinePlayer",
    "return": "int"
  },
  {
    "static": true,
    "field": "TERRACOTTA",
    "id": "org.bukkit.Material#TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_NETHER_CRIMSON_FOREST",
    "id": "org.bukkit.Sound#MUSIC_NETHER_CRIMSON_FOREST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_PIGSTEP",
    "id": "org.bukkit.Material#MUSIC_DISC_PIGSTEP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_USE",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_GRAVEL_STEP",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_GRAVEL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "LEGACY_ORANGE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_ORANGE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.ServerCommandEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.GenericGameEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "GRAY_CANDLE_CAKE",
    "id": "org.bukkit.Material#GRAY_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DIODE",
    "id": "org.bukkit.Material#LEGACY_DIODE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Shield breaks.",
    "static": true,
    "field": "SHIELD_BREAK",
    "id": "org.bukkit.EntityEffect#SHIELD_BREAK",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Constructs a new MaterialData relevant for this Material, with the\\ngiven initial data",
    "param-names": [
      "Material",
      "Raw"
    ],
    "param-types": [
      "org.bukkit.Material",
      "byte"
    ],
    "method": "getNewData",
    "id": "org.bukkit.Material#getNewData(byte)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.material.MaterialData"
  },
  {
    "descr": "Gets the MaterialData class associated with this Material",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getData",
    "id": "org.bukkit.Material#getData()",
    "class": "org.bukkit.Material",
    "return": "java.lang.Class"
  },
  {
    "descr": "Sets the amount of experience the villager earns from this trade.",
    "param-names": [
      "MerchantRecipe",
      "Villager Experience"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "int"
    ],
    "method": "setVillagerExperience",
    "id": "org.bukkit.inventory.MerchantRecipe#setVillagerExperience(int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.map.MapPalette#WHITE",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Player walks underwater one centimeter",
    "static": true,
    "field": "WALK_UNDERWATER",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#WALK_UNDERWATER",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "static": true,
    "field": "REGEN",
    "id": "org.bukkit.potion.PotionType#REGEN",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "OXIDIZED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#OXIDIZED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GRADIENT_UP",
    "id": "org.bukkit.block.banner.PatternType#GRADIENT_UP",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "BLOCK_GRASS_HIT",
    "id": "org.bukkit.Sound#BLOCK_GRASS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "A creeper-face effect.",
    "static": true,
    "field": "CREEPER",
    "id": "org.bukkit.FireworkEffect.Type#CREEPER",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "descr": "Increments the given statistic for this player.\\n\\nThis is equivalent to the following code:\\nincrementStatistic(Statistic, 1)",
    "param-names": [
      "OfflinePlayer",
      "Statistic"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic"
    ],
    "method": "incrementStatistic",
    "id": "org.bukkit.OfflinePlayer#incrementStatistic(org.bukkit.Statistic)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "JOB_SITE",
    "id": "org.bukkit.entity.memory.MemoryKey#JOB_SITE",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Gets the Scoreboard displayed to this player",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getScoreboard",
    "id": "org.bukkit.entity.Player#getScoreboard()",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "static": true,
    "field": "SQUARE_BOTTOM_LEFT",
    "id": "org.bukkit.block.banner.PatternType#SQUARE_BOTTOM_LEFT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Gets the shapes which are applicable to this block.",
    "param-names": ["Rail"],
    "param-types": ["org.bukkit.block.data.Rail"],
    "method": "getShapes",
    "id": "org.bukkit.block.data.Rail#getShapes()",
    "class": "org.bukkit.block.data.Rail",
    "return": "java.util.Set"
  },
  {
    "descr": "Gets the lectern involved.",
    "method": "getLectern",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#getLectern()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "org.bukkit.block.Lectern"
  },
  {
    "descr": "Sets the leave message send to all online players",
    "param-names": ["Leave Message"],
    "param-types": ["java.lang.String"],
    "method": "setLeaveMessage",
    "id": "org.bukkit.event.player.PlayerKickEvent#setLeaveMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent"
  },
  {
    "descr": "Called when a player discovers a new recipe in the recipe book.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent"
  },
  {
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "id": "org.bukkit.Vibration.Destination.BlockDestination#BlockDestination(org.bukkit.block.Block)",
    "class": "org.bukkit.Vibration.Destination.BlockDestination"
  },
  {
    "descr": "Set cook time.\\nThis is the amount of time the item is required to cook for.",
    "param-names": [
      "Campfire",
      "Index",
      "Cook Time Total"
    ],
    "param-types": [
      "org.bukkit.block.Campfire",
      "int",
      "int"
    ],
    "method": "setCookTimeTotal",
    "id": "org.bukkit.block.Campfire#setCookTimeTotal(int,int)",
    "class": "org.bukkit.block.Campfire"
  },
  {
    "descr": "Set the type of this cursor.",
    "param-names": [
      "MapCursor",
      "Type"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "org.bukkit.map.MapCursor.Type"
    ],
    "method": "setType",
    "id": "org.bukkit.map.MapCursor#setType(org.bukkit.map.MapCursor.Type)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerCommandSendEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the cause of this teleportation event",
    "method": "getCause",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "WAXED_EXPOSED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#WAXED_EXPOSED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerRiptideEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "This is called immediately after a player unregisters for a plugin channel.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent"
  },
  {
    "descr": "Get result item, may be null.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_MONSTER_EGG",
    "id": "org.bukkit.Material#LEGACY_MONSTER_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerAnimationType#values()",
    "class": "org.bukkit.event.player.PlayerAnimationType",
    "return": "org.bukkit.event.player.PlayerAnimationType[]"
  },
  {
    "static": true,
    "field": "LEGACY_TORCH",
    "id": "org.bukkit.Material#LEGACY_TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the anger level of this warden.\\nAnger is an integer from 0 to 150. Once a Warden reaches 80 anger at a\\ntarget it will actively pursue it.",
    "param-names": ["Warden"],
    "param-types": ["org.bukkit.entity.Warden"],
    "method": "getAnger",
    "id": "org.bukkit.entity.Warden#getAnger()",
    "class": "org.bukkit.entity.Warden",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns whether a vindicator is in \"Johnny\" mode.\\nWhen this mode is active, vindicators will be hostile to all mobs.",
    "param-names": ["Vindicator"],
    "param-types": ["org.bukkit.entity.Vindicator"],
    "method": "isJohnny",
    "id": "org.bukkit.entity.Vindicator#isJohnny()",
    "class": "org.bukkit.entity.Vindicator",
    "return": "boolean"
  },
  {
    "descr": "Gets the quit message to send to all online players",
    "method": "getQuitMessage",
    "id": "org.bukkit.event.player.PlayerQuitEvent#getQuitMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LAPIS_LAZULI",
    "id": "org.bukkit.Material#LAPIS_LAZULI",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets all items to be added to the inventory in this drag.",
    "method": "getNewItems",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getNewItems()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "java.util.Map"
  },
  {
    "descr": "Luck bonus of an Entity.",
    "static": true,
    "field": "GENERIC_LUCK",
    "id": "org.bukkit.attribute.Attribute#GENERIC_LUCK",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "field": "END_STONE",
    "id": "org.bukkit.Material#END_STONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Add a cursor to the collection.",
    "param-names": [
      "MapCursorCollection",
      "X",
      "Y",
      "Direction",
      "Type"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "int",
      "int",
      "byte",
      "byte"
    ],
    "method": "addCursor",
    "id": "org.bukkit.map.MapCursorCollection#addCursor(int,int,byte,byte)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "This creates a new item meta for the material.",
    "param-names": [
      "ItemFactory",
      "Material"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.Material"
    ],
    "method": "getItemMeta",
    "id": "org.bukkit.inventory.ItemFactory#getItemMeta(org.bukkit.Material)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "static": true,
    "field": "GUARDIAN",
    "id": "org.bukkit.entity.EntityType#GUARDIAN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the input of this cooking recipe.",
    "param-names": [
      "StonecuttingRecipe",
      "Input"
    ],
    "param-types": [
      "org.bukkit.inventory.StonecuttingRecipe",
      "org.bukkit.Material"
    ],
    "method": "setInput",
    "id": "org.bukkit.inventory.StonecuttingRecipe#setInput(org.bukkit.Material)",
    "class": "org.bukkit.inventory.StonecuttingRecipe",
    "return": "org.bukkit.inventory.StonecuttingRecipe"
  },
  {
    "descr": "Called when a visible entity is hidden from a player.\\n\\nThis event is only called when the entity's visibility status is actually\\nchanged.\\n\\nThis event is called regardless of if the entity was within tracking range.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent"
  },
  {
    "static": true,
    "field": "ENTITY_DRAGON_FIREBALL_EXPLODE",
    "id": "org.bukkit.Sound#ENTITY_DRAGON_FIREBALL_EXPLODE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_GOLD",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_GOLD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "SPRUCE_WOOD",
    "id": "org.bukkit.Material#SPRUCE_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_TRIPWIRE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_TRIPWIRE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "STRIPE_DOWNRIGHT",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_DOWNRIGHT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "param-names": [
      "BlockState",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "byte"
    ],
    "method": "setRawData",
    "id": "org.bukkit.block.BlockState#setRawData(byte)",
    "class": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Represents a custom Biome",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.block.Biome#CUSTOM",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "THICK",
    "id": "org.bukkit.potion.PotionType#THICK",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.ServerLoadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.ServerLoadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEATHER",
    "id": "org.bukkit.Material#LEATHER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Indicates that the entity will ignore any interaction(s) with\\npistons.\\n\\nBlocks should use PistonMoveReaction#BLOCK.",
    "static": true,
    "field": "IGNORE",
    "id": "org.bukkit.block.PistonMoveReaction#IGNORE",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Remove a renderer from this map.",
    "param-names": [
      "MapView",
      "Renderer"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "org.bukkit.map.MapRenderer"
    ],
    "method": "removeRenderer",
    "id": "org.bukkit.map.MapView#removeRenderer(org.bukkit.map.MapRenderer)",
    "class": "org.bukkit.map.MapView",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_BIRCH_FENCE",
    "id": "org.bukkit.Material#LEGACY_BIRCH_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the exact position of the hit.",
    "param-names": ["RayTraceResult"],
    "param-types": ["org.bukkit.util.RayTraceResult"],
    "method": "getHitPosition",
    "id": "org.bukkit.util.RayTraceResult#getHitPosition()",
    "class": "org.bukkit.util.RayTraceResult",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the location that this entity moved from",
    "method": "getFrom",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "When a bee is released from a beehive/bee nest",
    "static": true,
    "field": "BEEHIVE",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#BEEHIVE",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "LEGACY_BED",
    "id": "org.bukkit.Material#LEGACY_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_IRON_TRAPDOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_IRON_TRAPDOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns true if this face is aligned with one of the unit axes in 3D\\nCartesian space (ie NORTH, SOUTH, EAST, WEST, UP, DOWN).",
    "param-names": ["BlockFace"],
    "param-types": ["org.bukkit.block.BlockFace"],
    "method": "isCartesian",
    "id": "org.bukkit.block.BlockFace#isCartesian()",
    "class": "org.bukkit.block.BlockFace",
    "return": "boolean"
  },
  {
    "descr": "A burst effect.",
    "static": true,
    "field": "BURST",
    "id": "org.bukkit.FireworkEffect.Type#BURST",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "static": true,
    "field": "ENTITY_PHANTOM_HURT",
    "id": "org.bukkit.Sound#ENTITY_PHANTOM_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WATER_WAKE",
    "id": "org.bukkit.Particle#WATER_WAKE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_WET_GRASS_HIT",
    "id": "org.bukkit.Sound#BLOCK_WET_GRASS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "OCELOT",
    "id": "org.bukkit.loot.LootTables#OCELOT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the world which contains the block represented by this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getWorld",
    "id": "org.bukkit.block.BlockState#getWorld()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.World"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "SMOOTH_SANDSTONE_SLAB",
    "id": "org.bukkit.Material#SMOOTH_SANDSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "BIRCH_WALL_SIGN",
    "id": "org.bukkit.Material#BIRCH_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When the effect is removed due to all effects being removed.",
    "static": true,
    "field": "CLEARED",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Action#CLEARED",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Action",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action"
  },
  {
    "static": true,
    "field": "MOJANG",
    "id": "org.bukkit.block.banner.PatternType#MOJANG",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_BLAZE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_BLAZE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Removes all plugin tickets for the specified plugin\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": [
      "World",
      "Plugin"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "removePluginChunkTickets",
    "id": "org.bukkit.World#removePluginChunkTickets(org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "BlockData: SculkSensor",
    "static": true,
    "field": "SCULK_SENSOR",
    "id": "org.bukkit.Material#SCULK_SENSOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SALMON",
    "id": "org.bukkit.loot.LootTables#SALMON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_DOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_DOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Top section.",
    "static": true,
    "field": "FRUSTUM",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#FRUSTUM",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockExpEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_DEATH",
    "id": "org.bukkit.Sound#ENTITY_FOX_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This checks to see if a particular modifier is valid for this event's\\ncaller, such that, #setDamage(DamageModifier, double) will not\\nthrow an UnsupportedOperationException.\\n\\nDamageModifier#BASE is always applicable.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "isApplicable",
    "id": "org.bukkit.event.entity.EntityDamageEvent#isApplicable(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Mirrors the player's armor points (0 for no armor, 20 for maximum armor).",
    "static": true,
    "field": "ARMOR",
    "id": "org.bukkit.scoreboard.Criteria#ARMOR",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Freezes any still water adjacent to ice / frost which player is walking on",
    "static": true,
    "field": "FROST_WALKER",
    "id": "org.bukkit.enchantments.Enchantment#FROST_WALKER",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "MASTER",
    "id": "org.bukkit.SoundCategory#MASTER",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "descr": "Birch tree",
    "static": true,
    "field": "BIRCH",
    "id": "org.bukkit.TreeType#BIRCH",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Set whether or not wait and lure time will be impacted by direct sky\\naccess.\\nTrue by default, causes a 50% time increase on average.",
    "param-names": [
      "FishHook",
      "Sky Influenced"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "boolean"
    ],
    "method": "setSkyInfluenced",
    "id": "org.bukkit.entity.FishHook#setSkyInfluenced(boolean)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "static": true,
    "field": "SNOWY_SLOPES",
    "id": "org.bukkit.block.Biome#SNOWY_SLOPES",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets a list of all blocks associated with the structure.",
    "method": "getBlocks",
    "id": "org.bukkit.event.world.StructureGrowEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Food items consumable by the player including meats, berries, edible\\ndrops from creatures, etc.",
    "static": true,
    "field": "FOOD",
    "id": "org.bukkit.inventory.CreativeCategory#FOOD",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "descr": "Add several firework effects to this firework.",
    "param-names": [
      "FireworkMeta",
      "Effects"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.FireworkMeta",
      "java.lang.Iterable"
    ],
    "method": "addEffects",
    "id": "org.bukkit.inventory.meta.FireworkMeta#addEffects(java.lang.Iterable<org.bukkit.FireworkEffect>)",
    "class": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "WARPED_HYPHAE",
    "id": "org.bukkit.Material#WARPED_HYPHAE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the exact position on the block the player interacted with, this will\\nbe null outside of Action#RIGHT_CLICK_BLOCK.\\n\\nAll vector components are between 0.0 and 1.0 inclusive.",
    "method": "getClickedPosition",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getClickedPosition()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "OCELOT",
    "id": "org.bukkit.entity.EntityType#OCELOT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "The crystal beams are directed from pillar to pillar, regenerating\\ntheir crystals if necessary.",
    "static": true,
    "field": "SUMMONING_PILLARS",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#SUMMONING_PILLARS",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "descr": "Sets whether the horse has a chest equipped. Removing a chest will also\\nclear the chest's inventory.",
    "param-names": [
      "ChestedHorse",
      "Chest"
    ],
    "param-types": [
      "org.bukkit.entity.ChestedHorse",
      "boolean"
    ],
    "method": "setCarryingChest",
    "id": "org.bukkit.entity.ChestedHorse#setCarryingChest(boolean)",
    "class": "org.bukkit.entity.ChestedHorse"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_DRAGON_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ENDER_DRAGON_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Boat.Type#values()",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type[]"
  },
  {
    "descr": "Uses MaterialData as DataType",
    "static": true,
    "field": "LEGACY_BLOCK_CRACK",
    "id": "org.bukkit.Particle#LEGACY_BLOCK_CRACK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent"
  },
  {
    "static": true,
    "field": "BLOCK_MUDDY_MANGROVE_ROOTS_HIT",
    "id": "org.bukkit.Sound#BLOCK_MUDDY_MANGROVE_ROOTS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When the target attacks a nearby entity of the same type, so the entity targets it",
    "static": true,
    "field": "TARGET_ATTACKED_NEARBY_ENTITY",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#TARGET_ATTACKED_NEARBY_ENTITY",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when a CommandSender of any description (ie: player or\\nconsole) attempts to tab complete.\\n\\nNote that due to client changes, if the sender is a Player, this event will\\nonly begin to fire once command arguments are specified, not commands\\nthemselves. Plugins wishing to remove commands from tab completion are\\nadvised to ensure the client does not have permission for the relevant\\ncommands, or use PlayerCommandSendEvent.",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.WorldUnloadEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BLOCK_CONDUIT_AMBIENT_SHORT",
    "id": "org.bukkit.Sound#BLOCK_CONDUIT_AMBIENT_SHORT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_DONKEY_EAT",
    "id": "org.bukkit.Sound#ENTITY_DONKEY_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SLIME",
    "id": "org.bukkit.Particle#SLIME",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets if the wolf is interested",
    "param-names": ["Wolf"],
    "param-types": ["org.bukkit.entity.Wolf"],
    "method": "isInterested",
    "id": "org.bukkit.entity.Wolf#isInterested()",
    "class": "org.bukkit.entity.Wolf",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.EntityEffect#values()",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect[]"
  },
  {
    "descr": "Initialize the map renderer base to be non-contextual. See #isContextual().",
    "id": "org.bukkit.map.MapRenderer#MapRenderer()",
    "class": "org.bukkit.map.MapRenderer"
  },
  {
    "descr": "Ignore fluids.",
    "static": true,
    "field": "NEVER",
    "id": "org.bukkit.FluidCollisionMode#NEVER",
    "class": "org.bukkit.FluidCollisionMode",
    "return": "org.bukkit.FluidCollisionMode"
  },
  {
    "descr": "A currently unknown reason for the entity changing target.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#UNKNOWN",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "BlockData: Beehive",
    "static": true,
    "field": "BEE_NEST",
    "id": "org.bukkit.Material#BEE_NEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.WorldUnloadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Brushable",
    "static": true,
    "field": "SUSPICIOUS_SAND",
    "id": "org.bukkit.Material#SUSPICIOUS_SAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WHITE_CARPET",
    "id": "org.bukkit.Material#WHITE_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the y-coordinate of this location",
    "param-names": [
      "Location",
      "Y"
    ],
    "param-types": [
      "org.bukkit.Location",
      "double"
    ],
    "method": "setY",
    "id": "org.bukkit.Location#setY(double)",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "Gets the future profession of the villager.",
    "method": "getProfession",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getProfession()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Sets the amount of air that the living entity has remaining, in ticks.",
    "param-names": [
      "LivingEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setRemainingAir",
    "id": "org.bukkit.entity.LivingEntity#setRemainingAir(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Gets the damage change for some modifier",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "getDamage",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "double"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_FALL",
    "id": "org.bukkit.Sound#BLOCK_STONE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets this human's current GameMode",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getGameMode",
    "id": "org.bukkit.entity.HumanEntity#getGameMode()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.GameMode"
  },
  {
    "descr": "Gets whether the chunk at the specified chunk coordinates is force\\nloaded.\\n\\nA force loaded chunk will not be unloaded due to lack of player activity.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "isChunkForceLoaded",
    "id": "org.bukkit.World#isChunkForceLoaded(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerFishEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "OAK_PRESSURE_PLATE",
    "id": "org.bukkit.Material#OAK_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the default message that is displayed when the server is stopped.",
    "static": true,
    "method": "getShutdownMessage",
    "id": "org.bukkit.Bukkit#getShutdownMessage()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "AMBIENT_SOUL_SAND_VALLEY_ADDITIONS",
    "id": "org.bukkit.Sound#AMBIENT_SOUL_SAND_VALLEY_ADDITIONS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_SAPLING_FALL",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_SAPLING_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current border damage buffer.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getDamageBuffer",
    "id": "org.bukkit.WorldBorder#getDamageBuffer()",
    "class": "org.bukkit.WorldBorder",
    "return": "double"
  },
  {
    "descr": "Get the unique ID for this modifier.",
    "param-names": ["AttributeModifier"],
    "param-types": ["org.bukkit.attribute.AttributeModifier"],
    "method": "getUniqueId",
    "id": "org.bukkit.attribute.AttributeModifier#getUniqueId()",
    "class": "org.bukkit.attribute.AttributeModifier",
    "return": "java.util.UUID"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.banner.PatternType#values()",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType[]"
  },
  {
    "descr": "Set result item, may be null.",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#setResult(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent"
  },
  {
    "static": true,
    "field": "SWIM",
    "id": "org.bukkit.GameEvent#SWIM",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Saves world to disk",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "save",
    "id": "org.bukkit.World#save()",
    "class": "org.bukkit.World"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called when a player empties a bucket",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent"
  },
  {
    "descr": "Get result item, may be null.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the unbreakable tag. An unbreakable item will not lose durability.",
    "param-names": [
      "ItemMeta",
      "Unbreakable"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "boolean"
    ],
    "method": "setUnbreakable",
    "id": "org.bukkit.inventory.meta.ItemMeta#setUnbreakable(boolean)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_BRAIN_CORAL",
    "id": "org.bukkit.Material#DEAD_BRAIN_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks to see if the skull has an owner.",
    "param-names": ["SkullMeta"],
    "param-types": ["org.bukkit.inventory.meta.SkullMeta"],
    "method": "hasOwner",
    "id": "org.bukkit.inventory.meta.SkullMeta#hasOwner()",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the player damaging the block involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockDamageEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ITEM_BUNDLE_REMOVE_ONE",
    "id": "org.bukkit.Sound#ITEM_BUNDLE_REMOVE_ONE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_VEX",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_VEX",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MOSS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Choices"],
    "param-types": ["java.util.List"],
    "id": "org.bukkit.inventory.RecipeChoice.MaterialChoice#MaterialChoice(java.util.List<org.bukkit.Material>)",
    "class": "org.bukkit.inventory.RecipeChoice.MaterialChoice"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "RED_BANNER",
    "id": "org.bukkit.Material#RED_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if the Chunk at the specified coordinates is loaded",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "isChunkLoaded",
    "id": "org.bukkit.World#isChunkLoaded(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "method": "getProvider",
    "id": "org.bukkit.event.server.ServiceUnregisterEvent#getProvider()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceUnregisterEvent",
    "return": "org.bukkit.plugin.RegisteredServiceProvider"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#values()",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when a plugin is disabled.",
    "event": true,
    "class": "org.bukkit.event.server.PluginDisableEvent"
  },
  {
    "static": true,
    "field": "CLIMB_ONE_CM",
    "id": "org.bukkit.Statistic#CLIMB_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the helmet worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Helmet",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setHelmet",
    "id": "org.bukkit.inventory.EntityEquipment#setHelmet(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the current respawn location",
    "method": "getRespawnLocation",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#getRespawnLocation()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Create a smithing recipe to produce the specified result ItemStack.",
    "param-names": [
      "Key",
      "Template",
      "Base",
      "Addition"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.RecipeChoice",
      "org.bukkit.inventory.RecipeChoice",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "id": "org.bukkit.inventory.SmithingTrimRecipe#SmithingTrimRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.RecipeChoice,org.bukkit.inventory.RecipeChoice,org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.SmithingTrimRecipe"
  },
  {
    "descr": "Gets the player that created the structure.",
    "method": "getPlayer",
    "id": "org.bukkit.event.world.StructureGrowEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "When a plugin respawns the player.",
    "static": true,
    "field": "PLUGIN",
    "id": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason#PLUGIN",
    "class": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason",
    "return": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason"
  },
  {
    "descr": "Returns the involved block",
    "method": "getBlock",
    "id": "org.bukkit.event.entity.EntityInteractEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets the boots worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Boots",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setBoots",
    "id": "org.bukkit.inventory.EntityEquipment#setBoots(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Raining or snowing depending on biome.",
    "static": true,
    "field": "DOWNFALL",
    "id": "org.bukkit.WeatherType#DOWNFALL",
    "class": "org.bukkit.WeatherType",
    "return": "org.bukkit.WeatherType"
  },
  {
    "static": true,
    "field": "DEATHS",
    "id": "org.bukkit.scoreboard.Criterias#DEATHS",
    "class": "org.bukkit.scoreboard.Criterias",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_DIODE_BLOCK_OFF",
    "id": "org.bukkit.Material#LEGACY_DIODE_BLOCK_OFF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the associated map. This is used to determine what map is displayed.\\n\\nThe implementation may allow null to clear the associated map, but\\nthis is not required and is liable to generate a new (undefined) map when\\nthe item is first used.",
    "param-names": [
      "MapMeta",
      "Map"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.MapMeta",
      "org.bukkit.map.MapView"
    ],
    "method": "setMapView",
    "id": "org.bukkit.inventory.meta.MapMeta#setMapView(org.bukkit.map.MapView)",
    "class": "org.bukkit.inventory.meta.MapMeta"
  },
  {
    "descr": "Gets the current side length of the border.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getSize",
    "id": "org.bukkit.WorldBorder#getSize()",
    "class": "org.bukkit.WorldBorder",
    "return": "double"
  },
  {
    "descr": "Get the Recipe for the list of ItemStacks provided.\\nThe list is formatted as a crafting matrix where the index follow\\nthe pattern below:\\n\\n[ 0 1 2 ]\\n[ 3 4 5 ]\\n[ 6 7 8 ]\\n\\nNOTE: This method will not modify the provided ItemStack array, for that, use\\n#craftItem(ItemStack[], World, Player).",
    "param-names": [
      "Crafting Matrix",
      "World"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.inventory.ItemStack[]",
      "org.bukkit.World"
    ],
    "method": "getCraftingRecipe",
    "id": "org.bukkit.Bukkit#getCraftingRecipe(org.bukkit.inventory.ItemStack[],org.bukkit.World)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Recipe"
  },
  {
    "static": true,
    "field": "RED_DYE",
    "id": "org.bukkit.Material#RED_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Warden.AngerLevel#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Warden.AngerLevel",
    "return": "org.bukkit.entity.Warden.AngerLevel"
  },
  {
    "descr": "Get the hand that was used in this event.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "LEGACY_MINECART",
    "id": "org.bukkit.Material#LEGACY_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the plugin involved in this event",
    "method": "getPlugin",
    "id": "org.bukkit.event.server.PluginEnableEvent#getPlugin()",
    "event": true,
    "class": "org.bukkit.event.server.PluginEnableEvent",
    "return": "org.bukkit.plugin.Plugin"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks if this bounding box fully contains the bounding box that is\\ndefined by the given corners.",
    "param-names": [
      "BoundingBox",
      "Min",
      "Max"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "contains",
    "id": "org.bukkit.util.BoundingBox#contains(org.bukkit.util.Vector,org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "OLD_GROWTH_PINE_TAIGA",
    "id": "org.bukkit.block.Biome#OLD_GROWTH_PINE_TAIGA",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the amount of consecutive neighbor updates before skipping\\nadditional ones.",
    "static": true,
    "method": "getMaxChainedNeighborUpdates",
    "id": "org.bukkit.Bukkit#getMaxChainedNeighborUpdates()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "IRON_TRAPDOOR",
    "id": "org.bukkit.Material#IRON_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Damage caused when an entity falls a distance greater than 3 blocks\\n\\nDamage: fall height - 3.0",
    "static": true,
    "field": "FALL",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#FALL",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Gets the minimum corner as vector.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMin",
    "id": "org.bukkit.util.BoundingBox#getMin()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Get the entity which triggered this event, if present.",
    "method": "getEntity",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the height of this interaction entity.",
    "param-names": [
      "Interaction",
      "Height"
    ],
    "param-types": [
      "org.bukkit.entity.Interaction",
      "float"
    ],
    "method": "setInteractionHeight",
    "id": "org.bukkit.entity.Interaction#setInteractionHeight(float)",
    "class": "org.bukkit.entity.Interaction"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#values()",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result[]"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SOIL_STEP",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SOIL_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "A flying experience bottle.",
    "static": true,
    "field": "THROWN_EXP_BOTTLE",
    "id": "org.bukkit.entity.EntityType#THROWN_EXP_BOTTLE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Hearts from a villager.",
    "static": true,
    "field": "VILLAGER_HEART",
    "id": "org.bukkit.EntityEffect#VILLAGER_HEART",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "CAMEL_SPAWN_EGG",
    "id": "org.bukkit.Material#CAMEL_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a player changes their locale in the client settings.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent"
  },
  {
    "descr": "Gets the bucket that the Entity will be put into.\\nThis refers to the bucket with the entity, eg\\nMaterial#PUFFERFISH_BUCKET.",
    "method": "getEntityBucket",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getEntityBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.DyeColor#valueOf(java.lang.String)",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Initialize a new MinecraftFont.",
    "id": "org.bukkit.map.MinecraftFont#MinecraftFont()",
    "class": "org.bukkit.map.MinecraftFont"
  },
  {
    "descr": "Finds the nearest raid close to the given location.",
    "param-names": [
      "World",
      "Location",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "int"
    ],
    "method": "locateNearestRaid",
    "id": "org.bukkit.World#locateNearestRaid(org.bukkit.Location,int)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Raid"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get sky light level for block at corresponding coordinate in the chunk",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockSkyLight",
    "id": "org.bukkit.ChunkSnapshot#getBlockSkyLight(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_BOAT_JUNGLE",
    "id": "org.bukkit.Material#LEGACY_BOAT_JUNGLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attaches a copy of the passed block state to the item.",
    "param-names": [
      "BlockStateMeta",
      "Block State"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BlockStateMeta",
      "org.bukkit.block.BlockState"
    ],
    "method": "setBlockState",
    "id": "org.bukkit.inventory.meta.BlockStateMeta#setBlockState(org.bukkit.block.BlockState)",
    "class": "org.bukkit.inventory.meta.BlockStateMeta"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.HeightMap#valueOf(java.lang.String)",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_FALL",
    "id": "org.bukkit.Sound#BLOCK_MOSS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "JUNGLE_FENCE_GATE",
    "id": "org.bukkit.Material#JUNGLE_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks for a specific custom potion effect type on this suspicious stew.",
    "param-names": [
      "SuspiciousStewMeta",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SuspiciousStewMeta",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "hasCustomEffect",
    "id": "org.bukkit.inventory.meta.SuspiciousStewMeta#hasCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.inventory.meta.SuspiciousStewMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DEFAULT_LOOT_MODIFIER",
    "id": "org.bukkit.loot.LootContext#DEFAULT_LOOT_MODIFIER",
    "class": "org.bukkit.loot.LootContext",
    "return": "int"
  },
  {
    "descr": "Gets an entity on the server by its UUID",
    "param-names": ["Uuid"],
    "static": true,
    "param-types": ["java.util.UUID"],
    "method": "getEntity",
    "id": "org.bukkit.Bukkit#getEntity(java.util.UUID)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Set if the bee has nectar.",
    "param-names": [
      "Bee",
      "Nectar"
    ],
    "param-types": [
      "org.bukkit.entity.Bee",
      "boolean"
    ],
    "method": "setHasNectar",
    "id": "org.bukkit.entity.Bee#setHasNectar(boolean)",
    "class": "org.bukkit.entity.Bee"
  },
  {
    "static": true,
    "field": "POTION",
    "id": "org.bukkit.Material#POTION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WRITTEN_BOOK",
    "id": "org.bukkit.Material#WRITTEN_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This represents the damage reduction caused by the absorption potion\\neffect.",
    "static": true,
    "field": "ABSORPTION",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#ABSORPTION",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "descr": "Gets the chunk being loaded/unloaded",
    "method": "getChunk",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#getChunk()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "GREEN_SHULKER_BOX",
    "id": "org.bukkit.Material#GREEN_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Fuchsia, or (0xFF,0x00,0xFF) in (R,G,B)",
    "static": true,
    "field": "FUCHSIA",
    "id": "org.bukkit.Color#FUCHSIA",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_RETREAT",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_RETREAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "In an enchanting inventory, the top button's enchantment's id",
    "static": true,
    "field": "ENCHANT_ID1",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_ID1",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "POTENTIAL_JOB_SITE",
    "id": "org.bukkit.entity.memory.MemoryKey#POTENTIAL_JOB_SITE",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_ROOTS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BURN_POTTERY_SHERD",
    "id": "org.bukkit.Material#BURN_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_WEEPING_VINES_HIT",
    "id": "org.bukkit.Sound#BLOCK_WEEPING_VINES_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent"
  },
  {
    "static": true,
    "field": "HALF_HORIZONTAL",
    "id": "org.bukkit.block.banner.PatternType#HALF_HORIZONTAL",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Discover a collection of recipes for this player such that they have not\\nalready been discovered. This method will add the keys' associated\\nrecipes to the player's recipe book. If a recipe in the provided\\ncollection has already been discovered, it will be silently ignored.",
    "param-names": [
      "HumanEntity",
      "Recipes"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "java.util.Collection"
    ],
    "method": "discoverRecipes",
    "id": "org.bukkit.entity.HumanEntity#discoverRecipes(java.util.Collection<org.bukkit.NamespacedKey>)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "The fishing hook is bobbing in the water, waiting for a bite.",
    "static": true,
    "field": "BOBBING",
    "id": "org.bukkit.entity.FishHook.HookState#BOBBING",
    "class": "org.bukkit.entity.FishHook.HookState",
    "return": "org.bukkit.entity.FishHook.HookState"
  },
  {
    "descr": "Get the value of the given color in the palette.",
    "param-names": ["Index"],
    "static": true,
    "param-types": ["byte"],
    "method": "getColor",
    "id": "org.bukkit.map.MapPalette#getColor(byte)",
    "class": "org.bukkit.map.MapPalette",
    "return": "java.awt.Color"
  },
  {
    "descr": "Raised when a vehicle is created.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "STRONGHOLD_CORRIDOR",
    "id": "org.bukkit.loot.LootTables#STRONGHOLD_CORRIDOR",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "WHEAT",
    "id": "org.bukkit.Material#WHEAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sound of a bow firing.",
    "static": true,
    "field": "BOW_FIRE",
    "id": "org.bukkit.Effect#BOW_FIRE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "PIGLIN_BRUTE_SPAWN_EGG",
    "id": "org.bukkit.Material#PIGLIN_BRUTE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the char value associated with this color",
    "param-names": ["ChatColor"],
    "param-types": ["org.bukkit.ChatColor"],
    "method": "getChar",
    "id": "org.bukkit.ChatColor#getChar()",
    "class": "org.bukkit.ChatColor",
    "return": "char"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_LEAVES_STEP",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_LEAVES_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_RESPAWN_ANCHOR_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_RESPAWN_ANCHOR_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets if the pig has a saddle or not",
    "param-names": [
      "Steerable",
      "Saddled"
    ],
    "param-types": [
      "org.bukkit.entity.Steerable",
      "boolean"
    ],
    "method": "setSaddle",
    "id": "org.bukkit.entity.Steerable#setSaddle(boolean)",
    "class": "org.bukkit.entity.Steerable"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the previous held slot index",
    "method": "getPreviousSlot",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#getPreviousSlot()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the maximum allowed value of the 'power' property.",
    "param-names": ["AnaloguePowerable"],
    "param-types": ["org.bukkit.block.data.AnaloguePowerable"],
    "method": "getMaximumPower",
    "id": "org.bukkit.block.data.AnaloguePowerable#getMaximumPower()",
    "class": "org.bukkit.block.data.AnaloguePowerable",
    "return": "int"
  },
  {
    "descr": "Gets the peek state of the shulker between 0.0 and 1.0.",
    "param-names": ["Shulker"],
    "param-types": ["org.bukkit.entity.Shulker"],
    "method": "getPeek",
    "id": "org.bukkit.entity.Shulker#getPeek()",
    "class": "org.bukkit.entity.Shulker",
    "return": "float"
  },
  {
    "descr": "Gets the remaining fuel level.",
    "method": "getFuelLevel",
    "id": "org.bukkit.event.inventory.BrewEvent#getFuelLevel()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "int"
  },
  {
    "descr": "Sets the entities armor to the provided array of ItemStacks",
    "param-names": [
      "EntityEquipment",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setArmorContents",
    "id": "org.bukkit.inventory.EntityEquipment#setArmorContents(org.bukkit.inventory.ItemStack[])",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "PAPER",
    "id": "org.bukkit.Material#PAPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERRACK_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHERRACK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the input material.",
    "param-names": ["CookingRecipe"],
    "param-types": ["org.bukkit.inventory.CookingRecipe"],
    "method": "getInput",
    "id": "org.bukkit.inventory.CookingRecipe#getInput()",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.NotePlayEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.BrewEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the registry for the given class.\\n\\nIf no registry is present for the given class null will be returned.\\n\\nDepending on the implementation not every registry present in\\nRegistry will be returned by this method.",
    "param-names": ["T Class"],
    "static": true,
    "param-types": ["java.lang.Class"],
    "method": "getRegistry",
    "id": "org.bukkit.Bukkit#<T>getRegistry(java.lang.Class<T>)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Gets the corresponding place sound for this group.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getPlaceSound",
    "id": "org.bukkit.SoundGroup#getPlaceSound()",
    "class": "org.bukkit.SoundGroup",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns if the living entity despawns when away from players or not.\\n\\nBy default, animals are not removed while other mobs are.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getRemoveWhenFarAway",
    "id": "org.bukkit.entity.LivingEntity#getRemoveWhenFarAway()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Gets the type of the potion, Type matches up with each kind of craftable\\npotion",
    "param-names": ["PotionData"],
    "param-types": ["org.bukkit.potion.PotionData"],
    "method": "getType",
    "id": "org.bukkit.potion.PotionData#getType()",
    "class": "org.bukkit.potion.PotionData",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "ENTITY_BAT_DEATH",
    "id": "org.bukkit.Sound#ENTITY_BAT_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "BLUE_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#BLUE_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the transformation applied to this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getTransformation",
    "id": "org.bukkit.entity.Display#getTransformation()",
    "class": "org.bukkit.entity.Display",
    "return": "org.bukkit.util.Transformation"
  },
  {
    "static": true,
    "field": "LEGACY_BLUE_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_BLUE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gives the player the amount of experience specified.",
    "param-names": [
      "Player",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "int"
    ],
    "method": "giveExp",
    "id": "org.bukkit.entity.Player#giveExp(int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PARROT_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Performs a ray trace that checks for collision with this specific block\\nin its current state using its precise collision shape.",
    "param-names": [
      "Block",
      "Start",
      "Direction",
      "Max Distance",
      "Fluid Collision Mode"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "org.bukkit.FluidCollisionMode"
    ],
    "method": "rayTrace",
    "id": "org.bukkit.block.Block#rayTrace(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode)",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Sets if this skeleton horse is trapped.",
    "param-names": [
      "SkeletonHorse",
      "Trapped"
    ],
    "param-types": [
      "org.bukkit.entity.SkeletonHorse",
      "boolean"
    ],
    "method": "setTrapped",
    "id": "org.bukkit.entity.SkeletonHorse#setTrapped(boolean)",
    "class": "org.bukkit.entity.SkeletonHorse"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Bell.Attachment#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Bell.Attachment",
    "return": "org.bukkit.block.data.type.Bell.Attachment"
  },
  {
    "static": true,
    "field": "TEXT_DISPLAY",
    "id": "org.bukkit.entity.EntityType#TEXT_DISPLAY",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Levelled",
    "static": true,
    "field": "COMPOSTER",
    "id": "org.bukkit.Material#COMPOSTER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the result cursor after the drag is done. The returned value is\\nmutable.",
    "method": "getCursor",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getCursor()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "BLUE_TERRACOTTA",
    "id": "org.bukkit.Material#BLUE_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_HIT",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_DEACTIVATE",
    "id": "org.bukkit.GameEvent#BLOCK_DEACTIVATE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates a world with the specified options.\\n\\nIf the world already exists, it will be loaded from disk and some\\noptions may be ignored.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "createWorld",
    "id": "org.bukkit.WorldCreator#createWorld()",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_HELMET",
    "id": "org.bukkit.Material#LEGACY_GOLD_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Xylophone is normally played when a note block is on top of a bone block.",
    "static": true,
    "field": "XYLOPHONE",
    "id": "org.bukkit.Instrument#XYLOPHONE",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "LEGACY_STAINED_CLAY",
    "id": "org.bukkit.Material#LEGACY_STAINED_CLAY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the instrument of the goat horn.",
    "param-names": ["MusicInstrumentMeta"],
    "param-types": ["org.bukkit.inventory.meta.MusicInstrumentMeta"],
    "method": "getInstrument",
    "id": "org.bukkit.inventory.meta.MusicInstrumentMeta#getInstrument()",
    "class": "org.bukkit.inventory.meta.MusicInstrumentMeta",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "descr": "Get a cursor from this collection.",
    "param-names": [
      "MapCursorCollection",
      "Index"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "int"
    ],
    "method": "getCursor",
    "id": "org.bukkit.map.MapCursorCollection#getCursor(int)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "The particles shown when an ender dragon destroys blocks.",
    "static": true,
    "field": "ENDER_DRAGON_DESTROY_BLOCK",
    "id": "org.bukkit.Effect#ENDER_DRAGON_DESTROY_BLOCK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "BAMBOO_WALL_SIGN",
    "id": "org.bukkit.Material#BAMBOO_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_FRAME_REMOVE_ITEM",
    "id": "org.bukkit.Sound#ENTITY_ITEM_FRAME_REMOVE_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MILK_BUCKET",
    "id": "org.bukkit.Material#MILK_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the maximum experience cost (in levels) to be allowed by the current\\nrepair. The default value set by vanilla Minecraft is 40.",
    "param-names": [
      "AnvilInventory",
      "Levels"
    ],
    "param-types": [
      "org.bukkit.inventory.AnvilInventory",
      "int"
    ],
    "method": "setMaximumRepairCost",
    "id": "org.bukkit.inventory.AnvilInventory#setMaximumRepairCost(int)",
    "class": "org.bukkit.inventory.AnvilInventory"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the regeneration rate (1 health per x ticks) of\\nthe HumanEntity when they have no saturation and\\ntheir food level is >= 18. Default is 80.\\nNot affected if the world's difficulty is peaceful.",
    "param-names": [
      "HumanEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "int"
    ],
    "method": "setUnsaturatedRegenRate",
    "id": "org.bukkit.entity.HumanEntity#setUnsaturatedRegenRate(int)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_STEP_WOOD",
    "id": "org.bukkit.Sound#ENTITY_HORSE_STEP_WOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_BRUTE_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_BRUTE_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the data for the block that would be changed into",
    "method": "getBlockData",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getBlockData()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Creates a new entity at the given Location with the supplied\\nfunction run before the entity is added to the world.\\n\\nNote that when the function is run, the entity will not be actually in\\nthe world. Any operation involving such as teleporting the entity is undefined\\nuntil after this function returns.\\nThe passed function however is run after the potential entity's spawn\\nrandomization and hence already allows access to the values of the mob,\\nwhether or not those were randomized, such as attributes or the entity\\nequipment.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Clazz",
      "Randomize Data",
      "Function"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "java.lang.Class",
      "boolean",
      "org.bukkit.util.Consumer"
    ],
    "method": "spawn",
    "id": "org.bukkit.RegionAccessor#<T>spawn(org.bukkit.Location,java.lang.Class<T>,boolean,org.bukkit.util.Consumer<T>)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_HAT",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_HAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates a RayTraceResult.",
    "param-names": [
      "Hit Position",
      "Hit Entity",
      "Hit Block Face"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.entity.Entity",
      "org.bukkit.block.BlockFace"
    ],
    "id": "org.bukkit.util.RayTraceResult#RayTraceResult(org.bukkit.util.Vector,org.bukkit.entity.Entity,org.bukkit.block.BlockFace)",
    "class": "org.bukkit.util.RayTraceResult"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Difficulty#valueOf(java.lang.String)",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty"
  },
  {
    "descr": "This represents the damage reduction caused by wearing armor.",
    "static": true,
    "field": "ARMOR",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#ARMOR",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "descr": "Sets the leggings worn by the entity",
    "param-names": [
      "EntityEquipment",
      "Leggings",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setLeggings",
    "id": "org.bukkit.inventory.EntityEquipment#setLeggings(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Allows the player to log in",
    "method": "allow",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#allow()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "MUSHROOM_FIELDS",
    "id": "org.bukkit.block.Biome#MUSHROOM_FIELDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the amount that the duration of this cloud will decrease by when it\\napplies an effect to an entity.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getDurationOnUse",
    "id": "org.bukkit.entity.AreaEffectCloud#getDurationOnUse()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.boss.BarColor#values()",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor[]"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the completions offered, overriding any already set.",
    "param-names": ["Completions"],
    "param-types": ["java.util.List"],
    "method": "setCompletions",
    "id": "org.bukkit.event.server.TabCompleteEvent#setCompletions(java.util.List<java.lang.String>)",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent"
  },
  {
    "static": true,
    "field": "PIGLIN_BARTERING",
    "id": "org.bukkit.loot.LootTables#PIGLIN_BARTERING",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "CAULDRON",
    "id": "org.bukkit.Material#CAULDRON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType#values()",
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType",
    "return": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType[]"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "HOPPER_MINECART",
    "id": "org.bukkit.Material#HOPPER_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "NEUTRAL",
    "id": "org.bukkit.SoundCategory#NEUTRAL",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_FLETCHER",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_FLETCHER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the sprite for a given character.",
    "param-names": [
      "MapFont",
      "Ch"
    ],
    "param-types": [
      "org.bukkit.map.MapFont",
      "char"
    ],
    "method": "getChar",
    "id": "org.bukkit.map.MapFont#getChar(char)",
    "class": "org.bukkit.map.MapFont",
    "return": "org.bukkit.map.MapFont.CharacterSprite"
  },
  {
    "descr": "Damage caused by Wither potion effect",
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#WITHER",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "BIRCH_SAPLING",
    "id": "org.bukkit.Material#BIRCH_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent"
  },
  {
    "descr": "Stores details for players attempting to log in.\\n\\nNote that this event is called early in the player initialization\\nprocess. It is recommended that most options involving the Player\\nentity be postponed to the PlayerJoinEvent instead.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent"
  },
  {
    "static": true,
    "field": "RESONATE_14",
    "id": "org.bukkit.GameEvent#RESONATE_14",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "The maximum number of other pushable entities a mob or player can push,\\nbefore taking suffocation damage.\\n\\nSetting to 0 disables this rule.",
    "static": true,
    "field": "MAX_ENTITY_CRAMMING",
    "id": "org.bukkit.GameRule#MAX_ENTITY_CRAMMING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "BLOCK_LADDER_FALL",
    "id": "org.bukkit.Sound#BLOCK_LADDER_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Makes entity start or stop gliding. This will work even if an Elytra\\nis not equipped, but will be reverted by the server immediately after\\nunless an event-cancelling mechanism is put in place.",
    "param-names": [
      "LivingEntity",
      "Gliding"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setGliding",
    "id": "org.bukkit.entity.LivingEntity#setGliding(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "BRAIN_CORAL_FAN",
    "id": "org.bukkit.Material#BRAIN_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_ROOTS_STEP",
    "id": "org.bukkit.Sound#BLOCK_HANGING_ROOTS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_BEE_POLLINATE",
    "id": "org.bukkit.Sound#ENTITY_BEE_POLLINATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the recipe at a certain index of this merchant's trade list.",
    "param-names": [
      "Merchant",
      "I",
      "Recipe"
    ],
    "param-types": [
      "org.bukkit.inventory.Merchant",
      "int",
      "org.bukkit.inventory.MerchantRecipe"
    ],
    "method": "setRecipe",
    "id": "org.bukkit.inventory.Merchant#setRecipe(int,org.bukkit.inventory.MerchantRecipe)",
    "class": "org.bukkit.inventory.Merchant"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "SHEEP_CYAN",
    "id": "org.bukkit.loot.LootTables#SHEEP_CYAN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_PIGLIN_BRUTE",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_PIGLIN_BRUTE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SHEEP_STEP",
    "id": "org.bukkit.Sound#ENTITY_SHEEP_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "VILLAGE_TAIGA_HOUSE",
    "id": "org.bukkit.loot.LootTables#VILLAGE_TAIGA_HOUSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets whether this sign has glowing text. Only affects the Side#FRONT.",
    "param-names": ["Sign"],
    "param-types": ["org.bukkit.block.Sign"],
    "method": "isGlowingText",
    "id": "org.bukkit.block.Sign#isGlowingText()",
    "class": "org.bukkit.block.Sign",
    "return": "boolean"
  },
  {
    "descr": "Get the number of dark ticks remaining for this squid.\\nBravo Six will go dark for 100 ticks (5 seconds) if damaged.",
    "param-names": ["GlowSquid"],
    "param-types": ["org.bukkit.entity.GlowSquid"],
    "method": "getDarkTicksRemaining",
    "id": "org.bukkit.entity.GlowSquid#getDarkTicksRemaining()",
    "class": "org.bukkit.entity.GlowSquid",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HURT",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a set containing all current IPs that are banned.",
    "static": true,
    "method": "getIPBans",
    "id": "org.bukkit.Bukkit#getIPBans()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Set"
  },
  {
    "descr": "When a player regains health from regenerating due to their hunger\\nbeing satisfied",
    "static": true,
    "field": "SATIATED",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#SATIATED",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "descr": "Gets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied\\nboats. The default is -1. Values below 0 indicate that no additional\\ndeceleration is imposed.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getUnoccupiedDeceleration",
    "id": "org.bukkit.entity.Boat#getUnoccupiedDeceleration()",
    "class": "org.bukkit.entity.Boat",
    "return": "double"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerUnregisterChannelEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_TADPOLE_HURT",
    "id": "org.bukkit.Sound#ENTITY_TADPOLE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_POLAR_BEAR_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_POLAR_BEAR_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check whether or not this raider is celebrating a raid victory.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "isCelebrating",
    "id": "org.bukkit.entity.Raider#isCelebrating()",
    "class": "org.bukkit.entity.Raider",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.ChunkPopulateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SAND_FALL",
    "id": "org.bukkit.Sound#BLOCK_SAND_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_EAT",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Setting to show/hide enchants",
    "static": true,
    "field": "HIDE_ENCHANTS",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_ENCHANTS",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_LAMP_OFF",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_LAMP_OFF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Visual effect of an instant splash potion breaking. Needs color data\\nvalue as additional info.",
    "static": true,
    "field": "INSTANT_POTION_BREAK",
    "id": "org.bukkit.Effect#INSTANT_POTION_BREAK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Represents the org.bukkit.potion.PotionEffectType#LUCK that an\\nentity can have. The higher the value the better chance of receiving more\\nloot.",
    "param-names": ["LootContext"],
    "param-types": ["org.bukkit.loot.LootContext"],
    "method": "getLuck",
    "id": "org.bukkit.loot.LootContext#getLuck()",
    "class": "org.bukkit.loot.LootContext",
    "return": "float"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Axis#values()",
    "class": "org.bukkit.Axis",
    "return": "org.bukkit.Axis[]"
  },
  {
    "static": true,
    "field": "LEGACY_BIRCH_WOOD_STAIRS",
    "id": "org.bukkit.Material#LEGACY_BIRCH_WOOD_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GRAVEL",
    "id": "org.bukkit.Material#GRAVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BROWN_CONCRETE",
    "id": "org.bukkit.Material#BROWN_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Statistic#valueOf(java.lang.String)",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the number of pages in the book.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "getPageCount",
    "id": "org.bukkit.inventory.meta.BookMeta#getPageCount()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets whether the server should send a preview of the player's chat\\nmessage to the client when the player sends a message",
    "static": true,
    "method": "shouldSendChatPreviews",
    "id": "org.bukkit.Bukkit#shouldSendChatPreviews()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Gets the world's ticks per SpawnCategory mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn SpawnCategory mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn SpawnCategory mobs in\\nthis world every tick.\\nA value of 400 will mean the server will attempt to spawn SpawnCategory mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, SpawnCategory mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Spawn Category"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.SpawnCategory"
    ],
    "method": "getTicksPerSpawns",
    "id": "org.bukkit.World#getTicksPerSpawns(org.bukkit.entity.SpawnCategory)",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "descr": "Always show the player's nametag.",
    "static": true,
    "field": "ALWAYS",
    "id": "org.bukkit.scoreboard.NameTagVisibility#ALWAYS",
    "class": "org.bukkit.scoreboard.NameTagVisibility",
    "return": "org.bukkit.scoreboard.NameTagVisibility"
  },
  {
    "static": true,
    "field": "PORTAL",
    "id": "org.bukkit.Particle#PORTAL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Get the amount of Y-coordinates to modify to get the represented block",
    "param-names": ["BlockFace"],
    "param-types": ["org.bukkit.block.BlockFace"],
    "method": "getModY",
    "id": "org.bukkit.block.BlockFace#getModY()",
    "class": "org.bukkit.block.BlockFace",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_VILLAGER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the item used to shear the entity.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "The clicked item is moved to the hotbar, and the item currently there\\nis re-added to the player's inventory.\\nThe hotbar includes the player's off hand.",
    "static": true,
    "field": "HOTBAR_MOVE_AND_READD",
    "id": "org.bukkit.event.inventory.InventoryAction#HOTBAR_MOVE_AND_READD",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the underlying event.",
    "method": "getEvent",
    "id": "org.bukkit.event.world.GenericGameEvent#getEvent()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "ENTITY_MULE_EAT",
    "id": "org.bukkit.Sound#ENTITY_MULE_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "static": true,
    "field": "LEGACY_DRAGON_EGG",
    "id": "org.bukkit.Material#LEGACY_DRAGON_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.inventory.ClickType#valueOf(java.lang.String)",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Create a key in the plugin's namespace.\\n\\nNamespaces may only contain lowercase alphanumeric characters, periods,\\nunderscores, and hyphens.\\n\\nKeys may only contain lowercase alphanumeric characters, periods,\\nunderscores, hyphens, and forward slashes.",
    "param-names": [
      "Plugin",
      "Key"
    ],
    "param-types": [
      "org.bukkit.plugin.Plugin",
      "java.lang.String"
    ],
    "id": "org.bukkit.NamespacedKey#NamespacedKey(org.bukkit.plugin.Plugin,java.lang.String)",
    "class": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "Wither skeleton. Generally found in Nether fortresses.",
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.entity.Skeleton.SkeletonType#WITHER",
    "class": "org.bukkit.entity.Skeleton.SkeletonType",
    "return": "org.bukkit.entity.Skeleton.SkeletonType"
  },
  {
    "static": true,
    "field": "PLAYER",
    "id": "org.bukkit.SkullType#PLAYER",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Plays an effect to all players within a default radius around a given\\nlocation.",
    "param-names": [
      "World",
      "Location",
      "Effect",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Effect",
      "int"
    ],
    "method": "playEffect",
    "id": "org.bukkit.World#playEffect(org.bukkit.Location,org.bukkit.Effect,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Get the owner of this item.",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.entity.Item"],
    "method": "getOwner",
    "id": "org.bukkit.entity.Item#getOwner()",
    "class": "org.bukkit.entity.Item",
    "return": "java.util.UUID"
  },
  {
    "static": true,
    "field": "RAID_WIN",
    "id": "org.bukkit.Statistic#RAID_WIN",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Send a hurt animation. This fakes incoming damage towards the player from\\nthe given yaw relative to the player's direction.",
    "param-names": [
      "Player",
      "Yaw"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "float"
    ],
    "method": "sendHurtAnimation",
    "id": "org.bukkit.entity.Player#sendHurtAnimation(float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Set the cursor collection associated with this canvas. This does not\\nusually need to be called since a MapCursorCollection is already\\nprovided.",
    "param-names": [
      "MapCanvas",
      "Cursors"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "org.bukkit.map.MapCursorCollection"
    ],
    "method": "setCursors",
    "id": "org.bukkit.map.MapCanvas#setCursors(org.bukkit.map.MapCursorCollection)",
    "class": "org.bukkit.map.MapCanvas"
  },
  {
    "static": true,
    "field": "LEGACY_TRAP_DOOR",
    "id": "org.bukkit.Material#LEGACY_TRAP_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method to inform the user whether this was a block\\nplacement event.",
    "method": "isBlockInHand",
    "id": "org.bukkit.event.player.PlayerInteractEvent#isBlockInHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_CRIMSON_STEM",
    "id": "org.bukkit.Material#STRIPPED_CRIMSON_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMITE_HURT",
    "id": "org.bukkit.Sound#ENTITY_ENDERMITE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the fuse ticks of this minecart.\\nIf the fuse ticks are set to a non-zero value, this will ignite the\\nexplosive.",
    "param-names": [
      "ExplosiveMinecart",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.minecart.ExplosiveMinecart",
      "int"
    ],
    "method": "setFuseTicks",
    "id": "org.bukkit.entity.minecart.ExplosiveMinecart#setFuseTicks(int)",
    "class": "org.bukkit.entity.minecart.ExplosiveMinecart"
  },
  {
    "static": true,
    "field": "BLOCK_BASALT_HIT",
    "id": "org.bukkit.Sound#BLOCK_BASALT_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_EMPTY_LAVA",
    "id": "org.bukkit.Sound#ITEM_BUCKET_EMPTY_LAVA",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_BLAZE_POWDER",
    "id": "org.bukkit.Material#LEGACY_BLAZE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "WHITE_BED",
    "id": "org.bukkit.Material#WHITE_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,T)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Walk quicker while sneaking",
    "static": true,
    "field": "SWIFT_SNEAK",
    "id": "org.bukkit.enchantments.Enchantment#SWIFT_SNEAK",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "This controls the action to take with the block (if any) that was\\nclicked on. This event gets processed for all blocks, but most don't\\nhave a default action",
    "method": "useInteractedBlock",
    "id": "org.bukkit.event.player.PlayerInteractEvent#useInteractedBlock()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "descr": "A regular slot in the container or the player's inventory; anything\\nnot covered by the other enum values.",
    "static": true,
    "field": "CONTAINER",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#CONTAINER",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERRACK_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHERRACK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the value of the 'axis' property.",
    "param-names": [
      "Orientable",
      "Axis"
    ],
    "param-types": [
      "org.bukkit.block.data.Orientable",
      "org.bukkit.Axis"
    ],
    "method": "setAxis",
    "id": "org.bukkit.block.data.Orientable#setAxis(org.bukkit.Axis)",
    "class": "org.bukkit.block.data.Orientable"
  },
  {
    "descr": "Represents gold",
    "static": true,
    "field": "GOLD",
    "id": "org.bukkit.ChatColor#GOLD",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Banned IP addresses",
    "static": true,
    "field": "IP",
    "id": "org.bukkit.BanList.Type#IP",
    "class": "org.bukkit.BanList.Type",
    "return": "org.bukkit.BanList.Type"
  },
  {
    "descr": "Thrown when a LivingEntity is tamed",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "VILLAGE_TANNERY",
    "id": "org.bukkit.loot.LootTables#VILLAGE_TANNERY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Returns a copy of the ItemStack for this thrown potion.\\n\\nAltering this copy will not alter the thrown potion directly. If you want\\nto alter the thrown potion, you must use the #setItem(ItemStack) setItemStack method.",
    "param-names": ["ThrownPotion"],
    "param-types": ["org.bukkit.entity.ThrownPotion"],
    "method": "getItem",
    "id": "org.bukkit.entity.ThrownPotion#getItem()",
    "class": "org.bukkit.entity.ThrownPotion",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Called when a Creeper is struck by lightning.\\n\\nIf a Creeper Power event is cancelled, the Creeper will not be powered.",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent"
  },
  {
    "descr": "Returns a list of items which would drop by destroying this block with\\na specific tool",
    "param-names": [
      "Block",
      "Tool"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "getDrops",
    "id": "org.bukkit.block.Block#getDrops(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.block.Block",
    "return": "java.util.Collection"
  },
  {
    "descr": "Return the block clicked",
    "method": "getBlockClicked",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getBlockClicked()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "RESONATE_13",
    "id": "org.bukkit.GameEvent#RESONATE_13",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Villager type.",
    "static": true,
    "field": "VILLAGER_TYPE",
    "id": "org.bukkit.Registry#VILLAGER_TYPE",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "static": true,
    "field": "DESERT_WELL_ARCHAEOLOGY",
    "id": "org.bukkit.loot.LootTables#DESERT_WELL_ARCHAEOLOGY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the item to the given ItemStack, this will replace whatever the\\nuser was moving. Will always be empty if the player currently has no\\nopen window.",
    "param-names": [
      "HumanEntity",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemOnCursor",
    "id": "org.bukkit.entity.HumanEntity#setItemOnCursor(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "GREEN_CONCRETE_POWDER",
    "id": "org.bukkit.Material#GREEN_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "HUNTED_RECENTLY",
    "id": "org.bukkit.entity.memory.MemoryKey#HUNTED_RECENTLY",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.NetherWartsState#valueOf(java.lang.String)",
    "class": "org.bukkit.NetherWartsState",
    "return": "org.bukkit.NetherWartsState"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_HIT",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets user-specified limit for number of monsters that can spawn in a\\nchunk.",
    "static": true,
    "method": "getMonsterSpawnLimit",
    "id": "org.bukkit.Bukkit#getMonsterSpawnLimit()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_INFECT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_INFECT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Provides protection against projectile damage",
    "static": true,
    "field": "PROTECTION_PROJECTILE",
    "id": "org.bukkit.enchantments.Enchantment#PROTECTION_PROJECTILE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "TURTLE_SPAWN_EGG",
    "id": "org.bukkit.Material#TURTLE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When an illusion illager makes himself disappear.",
    "static": true,
    "field": "ILLUSION",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#ILLUSION",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Constructor for deserialization.",
    "param-names": ["Map"],
    "param-types": ["java.util.Map"],
    "id": "org.bukkit.potion.PotionEffect#PotionEffect(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.potion.PotionEffect"
  },
  {
    "descr": "Indicate the spawn was set by the use of plugins.",
    "static": true,
    "field": "PLUGIN",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#PLUGIN",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "static": true,
    "field": "ENTITY_GUARDIAN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_GUARDIAN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the current result of the login, as an enum",
    "method": "getResult",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "static": true,
    "field": "TORCH",
    "id": "org.bukkit.Material#TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.attribute.Attribute#valueOf(java.lang.String)",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "Gets the type of ItemStack that may fit this Enchantment.",
    "param-names": ["Enchantment"],
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "getItemTarget",
    "id": "org.bukkit.enchantments.Enchantment#getItemTarget()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Returns whether this armor stand has arms.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "hasArms",
    "id": "org.bukkit.entity.ArmorStand#hasArms()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "boolean"
  },
  {
    "descr": "Set if the falling block will break into an item if it cannot be placed.\\n\\nNote that if #getCancelDrop() is true, the falling block\\nwill not drop an item regardless of whether or not the value is set to\\ntrue.",
    "param-names": [
      "FallingBlock",
      "Drop"
    ],
    "param-types": [
      "org.bukkit.entity.FallingBlock",
      "boolean"
    ],
    "method": "setDropItem",
    "id": "org.bukkit.entity.FallingBlock#setDropItem(boolean)",
    "class": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Registers an effect type with the given object.\\n\\nGenerally not to be used from within a plugin.",
    "param-names": ["Type"],
    "static": true,
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "registerPotionEffectType",
    "id": "org.bukkit.potion.PotionEffectType#registerPotionEffectType(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the collision shape of this block.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getCollisionShape",
    "id": "org.bukkit.block.Block#getCollisionShape()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.util.VoxelShape"
  },
  {
    "static": true,
    "field": "SNOW",
    "id": "org.bukkit.entity.Fox.Type#SNOW",
    "class": "org.bukkit.entity.Fox.Type",
    "return": "org.bukkit.entity.Fox.Type"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENDERMITE",
    "id": "org.bukkit.loot.LootTables#ENDERMITE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "BUBBLE_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#BUBBLE_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entities of the arthropod family. These creatures:\\n\\nTake additional damage and receive PotionEffectType#SLOW\\nfrom Enchantment#DAMAGE_ARTHROPODS.\\nAre immune to PotionEffectType#POISON if they are spiders.\\n",
    "static": true,
    "field": "ARTHROPOD",
    "id": "org.bukkit.entity.EntityCategory#ARTHROPOD",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "static": true,
    "field": "SQUID",
    "id": "org.bukkit.loot.LootTables#SQUID",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "YELLOW_BED",
    "id": "org.bukkit.Material#YELLOW_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_MAP",
    "id": "org.bukkit.Material#LEGACY_MAP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the current PVP setting for this world.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getPVP",
    "id": "org.bukkit.World#getPVP()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.MoistureChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "When an Allay duplicate itself",
    "static": true,
    "field": "DUPLICATION",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#DUPLICATION",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.world.TimeSkipEvent.SkipReason#values()",
    "class": "org.bukkit.event.world.TimeSkipEvent.SkipReason",
    "return": "org.bukkit.event.world.TimeSkipEvent.SkipReason[]"
  },
  {
    "param-names": ["RecipeChoice"],
    "param-types": ["org.bukkit.inventory.RecipeChoice"],
    "method": "clone",
    "id": "org.bukkit.inventory.RecipeChoice#clone()",
    "class": "org.bukkit.inventory.RecipeChoice",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.Bisected.Half#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.Bisected.Half",
    "return": "org.bukkit.block.data.Bisected.Half"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_SPADE",
    "id": "org.bukkit.Material#LEGACY_WOOD_SPADE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Force this player to break a Block using the item in their main hand.\\nThis method will respect enchantments, handle item durability (if\\napplicable) and drop experience and the correct items according to the\\ntool/item in the player's hand.\\n\\nNote that this method will call a BlockBreakEvent, meaning that\\nthis method may not be successful in breaking the block if the event was\\ncancelled by a third party plugin. Care should be taken if running this\\nmethod in a BlockBreakEvent listener as recursion may be possible if it\\nis invoked on the same Block being broken in the event.\\n\\nAdditionally, a BlockDropItemEvent is called for the items\\ndropped by this method (if successful).\\n\\nThe block must be in the same world as the player.",
    "param-names": [
      "Player",
      "Block"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.block.Block"
    ],
    "method": "breakBlock",
    "id": "org.bukkit.entity.Player#breakBlock(org.bukkit.block.Block)",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "boolean"
  },
  {
    "descr": "Represents when a player has an item repaired via the Mending enchantment.\\n\\nThis event is fired directly before the PlayerExpChangeEvent, and the\\nresults of this event directly affect the PlayerExpChangeEvent.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent"
  },
  {
    "static": true,
    "field": "GOLDEN_CARROT",
    "id": "org.bukkit.Material#GOLDEN_CARROT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FIRSTPERSON_LEFTHAND",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#FIRSTPERSON_LEFTHAND",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "Create a shapeless recipe to craft the specified ItemStack. The\\nconstructor merely determines the result and type; to set the actual\\nrecipe, you'll need to call the appropriate methods.",
    "param-names": [
      "Key",
      "Result"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack"
    ],
    "id": "org.bukkit.inventory.ShapelessRecipe#ShapelessRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Gets the type of slot that was clicked.",
    "method": "getSlotType",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getSlotType()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Entity being extinguished.",
    "static": true,
    "field": "EXTINGUISH",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#EXTINGUISH",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Indicates the block is fragile and will break if pushed on.",
    "static": true,
    "field": "BREAK",
    "id": "org.bukkit.block.PistonMoveReaction#BREAK",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "DIORITE_SLAB",
    "id": "org.bukkit.Material#DIORITE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MINECART",
    "id": "org.bukkit.Material#MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns a map of which plugins have tickets for what chunks. The returned\\nmap is not updated when plugin tickets are added or removed to chunks. If\\na plugin has no tickets, it will be absent from the map.\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getPluginChunkTickets",
    "id": "org.bukkit.World#getPluginChunkTickets()",
    "class": "org.bukkit.World",
    "return": "java.util.Map"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Whether the map will show a smaller position cursor (true), or no\\nposition cursor (false) when cursor is outside of map's range.",
    "param-names": [
      "MapView",
      "Unlimited"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "boolean"
    ],
    "method": "setUnlimitedTracking",
    "id": "org.bukkit.map.MapView#setUnlimitedTracking(boolean)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "descr": "Thrown when a player picks an item up from the ground",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent"
  },
  {
    "descr": "All crystals (including those from the pillars) are aimed towards the\\nsky. Shortly thereafter summoning the dragon and destroying the\\ncrystals used to initiate the dragon's respawn.",
    "static": true,
    "field": "SUMMONING_DRAGON",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#SUMMONING_DRAGON",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_DOOR_BLOCK",
    "id": "org.bukkit.Material#LEGACY_IRON_DOOR_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "IN_WATER",
    "id": "org.bukkit.entity.Boat.Status#IN_WATER",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "descr": "Gets the value of the 'instrument' property.",
    "param-names": ["NoteBlock"],
    "param-types": ["org.bukkit.block.data.type.NoteBlock"],
    "method": "getInstrument",
    "id": "org.bukkit.block.data.type.NoteBlock#getInstrument()",
    "class": "org.bukkit.block.data.type.NoteBlock",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "BLOCK_LANTERN_FALL",
    "id": "org.bukkit.Sound#BLOCK_LANTERN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Can pivot around center point.",
    "static": true,
    "field": "CENTER",
    "id": "org.bukkit.entity.Display.Billboard#CENTER",
    "class": "org.bukkit.entity.Display.Billboard",
    "return": "org.bukkit.entity.Display.Billboard"
  },
  {
    "descr": "Get the original title of this inventory window, before any changes were\\nmade using #setTitle(String).",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getOriginalTitle",
    "id": "org.bukkit.inventory.InventoryView#getOriginalTitle()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "PUFFERFISH",
    "id": "org.bukkit.loot.LootTables#PUFFERFISH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_IMITATE_CREEPER",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_IMITATE_CREEPER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the InventoryAction that triggered this event.\\n\\nThis action cannot be changed, and represents what the normal outcome\\nof the event will be. To change the behavior of this\\nInventoryClickEvent, changes must be manually applied.",
    "method": "getAction",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getAction()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Get the game port that the server runs on.",
    "static": true,
    "method": "getPort",
    "id": "org.bukkit.Bukkit#getPort()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "RED_SAND",
    "id": "org.bukkit.Material#RED_SAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a tadpole converts to a frog",
    "static": true,
    "field": "METAMORPHOSIS",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#METAMORPHOSIS",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "This method checks the item meta to confirm that it is applicable (no\\ndata lost if applied) to the specified ItemStack.\\n\\nA SkullMeta would not be valid for a sword, but a normal ItemMeta from an enchanted dirt block would.",
    "param-names": [
      "ItemFactory",
      "Meta",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "isApplicable",
    "id": "org.bukkit.inventory.ItemFactory#isApplicable(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "boolean"
  },
  {
    "descr": "Adds a charged projectile to this item.",
    "param-names": [
      "CrossbowMeta",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.CrossbowMeta",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "addChargedProjectile",
    "id": "org.bukkit.inventory.meta.CrossbowMeta#addChargedProjectile(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.meta.CrossbowMeta"
  },
  {
    "descr": "Get whether boats can work on land.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getWorkOnLand",
    "id": "org.bukkit.entity.Boat#getWorkOnLand()",
    "class": "org.bukkit.entity.Boat",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "FIRE_CORAL",
    "id": "org.bukkit.Material#FIRE_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set cook time.\\nThis is the amount of time the item has been cooking for.",
    "param-names": [
      "Campfire",
      "Index",
      "Cook Time"
    ],
    "param-types": [
      "org.bukkit.block.Campfire",
      "int",
      "int"
    ],
    "method": "setCookTime",
    "id": "org.bukkit.block.Campfire#setCookTime(int,int)",
    "class": "org.bukkit.block.Campfire"
  },
  {
    "descr": "Fletcher profession. Wears a brown robe. Fletchers primarily trade\\nfor string, bows, and arrows.",
    "static": true,
    "field": "FLETCHER",
    "id": "org.bukkit.entity.Villager.Profession#FLETCHER",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets the potion color that is set. A custom potion color will alter the\\ndisplay of the potion in an inventory slot.\\n\\nPlugins should check that hasColor() returns true before\\ncalling this method.",
    "param-names": ["PotionMeta"],
    "param-types": ["org.bukkit.inventory.meta.PotionMeta"],
    "method": "getColor",
    "id": "org.bukkit.inventory.meta.PotionMeta#getColor()",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.PortalType#values()",
    "class": "org.bukkit.PortalType",
    "return": "org.bukkit.PortalType[]"
  },
  {
    "static": true,
    "field": "LEGACY_PISTON_MOVING_PIECE",
    "id": "org.bukkit.Material#LEGACY_PISTON_MOVING_PIECE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Input",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.BlastingRecipe#BlastingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,float,int)",
    "class": "org.bukkit.inventory.BlastingRecipe"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent"
  },
  {
    "descr": "Uses DustTransition as DataType",
    "static": true,
    "field": "DUST_COLOR_TRANSITION",
    "id": "org.bukkit.Particle#DUST_COLOR_TRANSITION",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "ARCHER_POTTERY_SHERD",
    "id": "org.bukkit.Material#ARCHER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POOL",
    "id": "org.bukkit.Art#POOL",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "STONE_HOE",
    "id": "org.bukkit.Material#STONE_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GHAST",
    "id": "org.bukkit.entity.EntityType#GHAST",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_DESERT",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_DESERT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the value of the 'short' property.",
    "param-names": [
      "PistonHead",
      "_short"
    ],
    "param-types": [
      "org.bukkit.block.data.type.PistonHead",
      "boolean"
    ],
    "method": "setShort",
    "id": "org.bukkit.block.data.type.PistonHead#setShort(boolean)",
    "class": "org.bukkit.block.data.type.PistonHead"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a left\\nclick.",
    "method": "isLeftClick",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#isLeftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "boolean"
  },
  {
    "descr": "An alternate click sound.",
    "static": true,
    "field": "CLICK2",
    "id": "org.bukkit.Effect#CLICK2",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "POTTED_OAK_SAPLING",
    "id": "org.bukkit.Material#POTTED_OAK_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents a player related inventory event",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent"
  },
  {
    "descr": "Clears the existing book recipes, and sets the book to use the provided\\nrecipes.",
    "param-names": [
      "KnowledgeBookMeta",
      "Recipes"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.KnowledgeBookMeta",
      "java.util.List"
    ],
    "method": "setRecipes",
    "id": "org.bukkit.inventory.meta.KnowledgeBookMeta#setRecipes(java.util.List<org.bukkit.NamespacedKey>)",
    "class": "org.bukkit.inventory.meta.KnowledgeBookMeta"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockDispenseEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the custom name on a mob or block. If there is no name this method\\nwill return null.\\n\\nThis value has no effect on players, they will always use their real\\nname.",
    "param-names": ["Nameable"],
    "param-types": ["org.bukkit.Nameable"],
    "method": "getCustomName",
    "id": "org.bukkit.Nameable#getCustomName()",
    "class": "org.bukkit.Nameable",
    "return": "java.lang.String"
  },
  {
    "descr": "Represents the dead looking grass.",
    "static": true,
    "field": "DEAD",
    "id": "org.bukkit.GrassSpecies#DEAD",
    "class": "org.bukkit.GrassSpecies",
    "return": "org.bukkit.GrassSpecies"
  },
  {
    "static": true,
    "field": "LEGACY_QUARTZ",
    "id": "org.bukkit.Material#LEGACY_QUARTZ",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent"
  },
  {
    "descr": "Gets a set of recipients that this chat message will be displayed to",
    "method": "getRecipients",
    "id": "org.bukkit.event.player.PlayerChatEvent#getRecipients()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "AMBIENT_WARPED_FOREST_LOOP",
    "id": "org.bukkit.Sound#AMBIENT_WARPED_FOREST_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLUE_POINTER",
    "id": "org.bukkit.map.MapCursor.Type#BLUE_POINTER",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Get the map this canvas is attached to.",
    "param-names": ["MapCanvas"],
    "param-types": ["org.bukkit.map.MapCanvas"],
    "method": "getMapView",
    "id": "org.bukkit.map.MapCanvas#getMapView()",
    "class": "org.bukkit.map.MapCanvas",
    "return": "org.bukkit.map.MapView"
  },
  {
    "descr": "The rail forms a curve connecting the south and west faces of the\\nblock.",
    "static": true,
    "field": "SOUTH_WEST",
    "id": "org.bukkit.block.data.Rail.Shape#SOUTH_WEST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "The wire does not connect in this direction.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.block.data.type.RedstoneWire.Connection#NONE",
    "class": "org.bukkit.block.data.type.RedstoneWire.Connection",
    "return": "org.bukkit.block.data.type.RedstoneWire.Connection"
  },
  {
    "descr": "When a potion effect is changed due to the /effect command.",
    "static": true,
    "field": "COMMAND",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#COMMAND",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "RAISER_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#RAISER_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "JUNGLE_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#JUNGLE_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get cook time total.\\nThis is the amount of time the item is required to cook for.",
    "param-names": ["Furnace"],
    "param-types": ["org.bukkit.block.Furnace"],
    "method": "getCookTimeTotal",
    "id": "org.bukkit.block.Furnace#getCookTimeTotal()",
    "class": "org.bukkit.block.Furnace",
    "return": "int"
  },
  {
    "descr": "Called when a map is initialized.",
    "event": true,
    "class": "org.bukkit.event.server.MapInitializeEvent"
  },
  {
    "descr": "Cartography inventory with 2 CRAFTING slots, and 1 RESULT slot.",
    "static": true,
    "field": "CARTOGRAPHY",
    "id": "org.bukkit.event.inventory.InventoryType#CARTOGRAPHY",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_5",
    "id": "org.bukkit.Material#MUSIC_DISC_5",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the command that this CommandMinecart will run when activated.\\nThis will never return null.  If the CommandMinecart does not have a\\ncommand, an empty String will be returned instead.",
    "param-names": ["CommandMinecart"],
    "param-types": ["org.bukkit.entity.minecart.CommandMinecart"],
    "method": "getCommand",
    "id": "org.bukkit.entity.minecart.CommandMinecart#getCommand()",
    "class": "org.bukkit.entity.minecart.CommandMinecart",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the inventory view the player is currently viewing. If they do not\\nhave an inventory window open, it returns their internal crafting view.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getOpenInventory",
    "id": "org.bukkit.entity.HumanEntity#getOpenInventory()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Mechanical entity with an inventory for placing weapons / armor into.",
    "static": true,
    "field": "ARMOR_STAND",
    "id": "org.bukkit.entity.EntityType#ARMOR_STAND",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "BLACK_BANNER",
    "id": "org.bukkit.Material#BLACK_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'eye' property.",
    "param-names": [
      "EndPortalFrame",
      "Eye"
    ],
    "param-types": [
      "org.bukkit.block.data.type.EndPortalFrame",
      "boolean"
    ],
    "method": "setEye",
    "id": "org.bukkit.block.data.type.EndPortalFrame#setEye(boolean)",
    "class": "org.bukkit.block.data.type.EndPortalFrame"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Causes the allay to start dancing because of the provided jukebox\\nlocation.",
    "param-names": [
      "Allay",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Allay",
      "org.bukkit.Location"
    ],
    "method": "startDancing",
    "id": "org.bukkit.entity.Allay#startDancing(org.bukkit.Location)",
    "class": "org.bukkit.entity.Allay"
  },
  {
    "descr": "The \"wololo\" spell.",
    "static": true,
    "field": "WOLOLO",
    "id": "org.bukkit.entity.Spellcaster.Spell#WOLOLO",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "descr": "When an entity eats a LONG_GRASS block.",
    "static": true,
    "field": "SHEEP_EAT",
    "id": "org.bukkit.EntityEffect#SHEEP_EAT",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "DRAGON_BREATH",
    "id": "org.bukkit.Particle#DRAGON_BREATH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_SWIM",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the entity's current fire ticks (ticks before the entity stops\\nbeing on fire).",
    "param-names": [
      "Entity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "int"
    ],
    "method": "setFireTicks",
    "id": "org.bukkit.entity.Entity#setFireTicks(int)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MUD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_LAND",
    "id": "org.bukkit.Sound#ENTITY_HORSE_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.PistonMoveReaction#valueOf(java.lang.String)",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Return whether or not this end crystal is showing the\\nbedrock slate underneath it.",
    "param-names": ["EnderCrystal"],
    "param-types": ["org.bukkit.entity.EnderCrystal"],
    "method": "isShowingBottom",
    "id": "org.bukkit.entity.EnderCrystal#isShowingBottom()",
    "class": "org.bukkit.entity.EnderCrystal",
    "return": "boolean"
  },
  {
    "descr": "Called when a player gets kicked from the server",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent"
  },
  {
    "descr": "Increments automatically when a player kills another player on the blue team.",
    "static": true,
    "field": "TEAM_KILL_BLUE",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_BLUE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Get an option for this team",
    "param-names": [
      "Team",
      "Option"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.scoreboard.Team.Option"
    ],
    "method": "getOption",
    "id": "org.bukkit.scoreboard.Team#getOption(org.bukkit.scoreboard.Team.Option)",
    "class": "org.bukkit.scoreboard.Team",
    "return": "org.bukkit.scoreboard.Team.OptionStatus"
  },
  {
    "descr": "Called when a bell is being rung.",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent"
  },
  {
    "static": true,
    "field": "ENTITY_ARMOR_STAND_BREAK",
    "id": "org.bukkit.Sound#ENTITY_ARMOR_STAND_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "TOTEM",
    "id": "org.bukkit.Particle#TOTEM",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "The dragon will hover at its current location, not performing any actions.",
    "static": true,
    "field": "HOVER",
    "id": "org.bukkit.entity.EnderDragon.Phase#HOVER",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "An arrow projectile; may get stuck in the ground.",
    "static": true,
    "field": "ARROW",
    "id": "org.bukkit.entity.EntityType#ARROW",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "SPRUCE_HANGING_SIGN",
    "id": "org.bukkit.Material#SPRUCE_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks if the specified enchantment conflicts with any enchantments in\\nthis ItemMeta.",
    "param-names": [
      "ItemMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "hasConflictingEnchant",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasConflictingEnchant(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the world's ticks per ambient mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn ambient mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn ambient mobs in\\nthis world every tick.\\nA value of 400 will mean the server will attempt to spawn ambient mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, ambient mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTicksPerAmbientSpawns",
    "id": "org.bukkit.World#getTicksPerAmbientSpawns()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "descr": "A chest inventory, with 0, 9, 18, 27, 36, 45, or 54 slots of type\\nCONTAINER.",
    "static": true,
    "field": "CHEST",
    "id": "org.bukkit.event.inventory.InventoryType#CHEST",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "EGG",
    "id": "org.bukkit.Material#EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the type of the block at the given coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int"
    ],
    "method": "getType",
    "id": "org.bukkit.RegionAccessor#getType(int,int,int)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if the chunk is loaded.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "isLoaded",
    "id": "org.bukkit.Chunk#isLoaded()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Performs a ray trace that checks for block collisions using the blocks'\\nprecise collision shapes.\\n\\nThis takes collisions with passable blocks into account, but ignores\\nfluids.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rayTraceBlocks",
    "id": "org.bukkit.World#rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "The dragon will search for a player to attack with dragon breath.\\nIf no player is close enough to the dragon for 5 seconds, the\\ndragon will charge at a player within 150 blocks or will take off\\nand begin circling if no player is found.",
    "static": true,
    "field": "SEARCH_FOR_BREATH_ATTACK_TARGET",
    "id": "org.bukkit.entity.EnderDragon.Phase#SEARCH_FOR_BREATH_ATTACK_TARGET",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "static": true,
    "field": "HAS_HUNTING_COOLDOWN",
    "id": "org.bukkit.entity.memory.MemoryKey#HAS_HUNTING_COOLDOWN",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "BlockData: Tripwire",
    "static": true,
    "field": "TRIPWIRE",
    "id": "org.bukkit.Material#TRIPWIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the face on the clicked block",
    "method": "getBlockFace",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getBlockFace()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "MUSIC_NETHER_NETHER_WASTES",
    "id": "org.bukkit.Sound#MUSIC_NETHER_NETHER_WASTES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents green dye.",
    "static": true,
    "field": "GREEN",
    "id": "org.bukkit.DyeColor#GREEN",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "LEGACY_BONE_BLOCK",
    "id": "org.bukkit.Material#LEGACY_BONE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Slab.Type#values()",
    "class": "org.bukkit.block.data.type.Slab.Type",
    "return": "org.bukkit.block.data.type.Slab.Type[]"
  },
  {
    "static": true,
    "field": "BLOCK_TUFF_FALL",
    "id": "org.bukkit.Sound#BLOCK_TUFF_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BOAT_ONE_CM",
    "id": "org.bukkit.Statistic#BOAT_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Blue, or (0x00,0x00,0xFF) in (R,G,B)",
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.Color#BLUE",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "BLOCK_WET_GRASS_FALL",
    "id": "org.bukkit.Sound#BLOCK_WET_GRASS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The dragon will roar before performing a breath attack.",
    "static": true,
    "field": "ROAR_BEFORE_ATTACK",
    "id": "org.bukkit.entity.EnderDragon.Phase#ROAR_BEFORE_ATTACK",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "This event is called when a player takes items out of the furnace",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent"
  },
  {
    "descr": "Remove a modifier from this instance.",
    "param-names": [
      "AttributeInstance",
      "Modifier"
    ],
    "param-types": [
      "org.bukkit.attribute.AttributeInstance",
      "org.bukkit.attribute.AttributeModifier"
    ],
    "method": "removeModifier",
    "id": "org.bukkit.attribute.AttributeInstance#removeModifier(org.bukkit.attribute.AttributeModifier)",
    "class": "org.bukkit.attribute.AttributeInstance"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockFromToEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The player is allowed to log in",
    "static": true,
    "field": "ALLOWED",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#ALLOWED",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "CLAY_BALL",
    "id": "org.bukkit.Material#CLAY_BALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SCULK_SOUL",
    "id": "org.bukkit.Particle#SCULK_SOUL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "CHICKEN",
    "id": "org.bukkit.Material#CHICKEN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "* Whether mob explosions will destroy dropped items.",
    "static": true,
    "field": "MOB_EXPLOSION_DROP_DECAY",
    "id": "org.bukkit.GameRule#MOB_EXPLOSION_DROP_DECAY",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Creates a new Color object with specified component",
    "param-names": [
      "Color",
      "Alpha"
    ],
    "param-types": [
      "org.bukkit.Color",
      "int"
    ],
    "method": "setAlpha",
    "id": "org.bukkit.Color#setAlpha(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SHROOMLIGHT",
    "id": "org.bukkit.Material#SHROOMLIGHT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Player moves on the surface of water one centimeter",
    "static": true,
    "field": "WALK_ON_WATER",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#WALK_ON_WATER",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "This event will sometimes fire synchronously, depending on how it was\\ntriggered.\\n\\nThe constructor provides a boolean to indicate if the event was fired\\nsynchronously or asynchronously. When asynchronous, this event can be\\ncalled from any thread, sans the main thread, and has limited access to the\\nAPI.\\n\\nIf a player is the direct cause of this event by an incoming packet, this\\nevent will be asynchronous. If a plugin triggers this event by compelling a\\nplayer to chat, this event will be synchronous.\\n\\nCare should be taken to check #isAsynchronous() and treat the event\\nappropriately.",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent"
  },
  {
    "descr": "A constant denoting infinite potion duration.",
    "static": true,
    "field": "INFINITE_DURATION",
    "id": "org.bukkit.potion.PotionEffect#INFINITE_DURATION",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "int"
  },
  {
    "descr": "Checks if this player has had their profile banned.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "isBanned",
    "id": "org.bukkit.OfflinePlayer#isBanned()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "boolean"
  },
  {
    "descr": "Creates a new 1x1x1 sized bounding box containing the given block.",
    "param-names": ["Block"],
    "static": true,
    "param-types": ["org.bukkit.block.Block"],
    "method": "of",
    "id": "org.bukkit.util.BoundingBox#of(org.bukkit.block.Block)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "TORCHFLOWER_SEEDS",
    "id": "org.bukkit.Material#TORCHFLOWER_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increments the given statistic for this player for the given entity.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Entity Type",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType",
      "int"
    ],
    "method": "incrementStatistic",
    "id": "org.bukkit.OfflinePlayer#incrementStatistic(org.bukkit.Statistic,org.bukkit.entity.EntityType,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the folder of this world on disk.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWorldFolder",
    "id": "org.bukkit.World#getWorldFolder()",
    "class": "org.bukkit.World",
    "return": "java.io.File"
  },
  {
    "descr": "Get the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": ["CookingRecipe"],
    "param-types": ["org.bukkit.inventory.CookingRecipe"],
    "method": "getGroup",
    "id": "org.bukkit.inventory.CookingRecipe#getGroup()",
    "class": "org.bukkit.inventory.CookingRecipe",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the radius of the explosion",
    "method": "getRadius",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getRadius()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "float"
  },
  {
    "descr": "Gets the new phase that the dragon will switch to.",
    "method": "getNewPhase",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getNewPhase()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.ServerCommandEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the turtle is laying an egg",
    "param-names": ["Turtle"],
    "param-types": ["org.bukkit.entity.Turtle"],
    "method": "isLayingEgg",
    "id": "org.bukkit.entity.Turtle#isLayingEgg()",
    "class": "org.bukkit.entity.Turtle",
    "return": "boolean"
  },
  {
    "descr": "Sets the width of this interaction entity.",
    "param-names": [
      "Interaction",
      "Width"
    ],
    "param-types": [
      "org.bukkit.entity.Interaction",
      "float"
    ],
    "method": "setInteractionWidth",
    "id": "org.bukkit.entity.Interaction#setInteractionWidth(float)",
    "class": "org.bukkit.entity.Interaction"
  },
  {
    "descr": "Gets the entity that was hit, if it was an entity that was hit.",
    "method": "getHitEntity",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getHitEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Called when a player throws an egg and it might hatch",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "BROWN_CANDLE",
    "id": "org.bukkit.Material#BROWN_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Decreases damage dealt to an entity.",
    "static": true,
    "field": "DAMAGE_RESISTANCE",
    "id": "org.bukkit.potion.PotionEffectType#DAMAGE_RESISTANCE",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Represents the \"end\" map",
    "static": true,
    "field": "THE_END",
    "id": "org.bukkit.World.Environment#THE_END",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment"
  },
  {
    "descr": "Get the maximum fuse ticks for this Creeper, where the ticks is the\\namount of time in which a creeper has been in the primed state.",
    "param-names": ["Creeper"],
    "param-types": ["org.bukkit.entity.Creeper"],
    "method": "getFuseTicks",
    "id": "org.bukkit.entity.Creeper#getFuseTicks()",
    "class": "org.bukkit.entity.Creeper",
    "return": "int"
  },
  {
    "descr": "Gets the type of portal that is trying to be created.",
    "method": "getPortalType",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getPortalType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "org.bukkit.PortalType"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_SMALL_FALL",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_SMALL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WARPED_ROOTS",
    "id": "org.bukkit.Material#WARPED_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "OLD_GROWTH_BIRCH_FOREST",
    "id": "org.bukkit.block.Biome#OLD_GROWTH_BIRCH_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "All game logic except entities is processed.",
    "static": true,
    "field": "TICKING",
    "id": "org.bukkit.Chunk.LoadLevel#TICKING",
    "class": "org.bukkit.Chunk.LoadLevel",
    "return": "org.bukkit.Chunk.LoadLevel"
  },
  {
    "param-names": ["EntityType"],
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "getEntityClass",
    "id": "org.bukkit.entity.EntityType#getEntityClass()",
    "class": "org.bukkit.entity.EntityType",
    "return": "java.lang.Class"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.WorldUnloadEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLUE_CONCRETE_POWDER",
    "id": "org.bukkit.Material#BLUE_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason",
    "return": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason"
  },
  {
    "static": true,
    "field": "LAPIS_BLOCK",
    "id": "org.bukkit.Material#LAPIS_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_PAPER",
    "id": "org.bukkit.Material#LEGACY_PAPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerChangedWorldEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get if the bee has nectar.",
    "param-names": ["Bee"],
    "param-types": ["org.bukkit.entity.Bee"],
    "method": "hasNectar",
    "id": "org.bukkit.entity.Bee#hasNectar()",
    "class": "org.bukkit.entity.Bee",
    "return": "boolean"
  },
  {
    "descr": "Sets the current type of this cat.",
    "param-names": [
      "Ocelot",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Ocelot",
      "org.bukkit.entity.Ocelot.Type"
    ],
    "method": "setCatType",
    "id": "org.bukkit.entity.Ocelot#setCatType(org.bukkit.entity.Ocelot.Type)",
    "class": "org.bukkit.entity.Ocelot"
  },
  {
    "static": true,
    "field": "BLOCK_COPPER_HIT",
    "id": "org.bukkit.Sound#BLOCK_COPPER_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block represented by this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getBlock",
    "id": "org.bukkit.block.BlockState#getBlock()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the block which ignited this block.",
    "method": "getIgnitingBlock",
    "id": "org.bukkit.event.block.BlockBurnEvent#getIgnitingBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "TUBE_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#TUBE_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SOIL_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SOIL_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_AXE_WAX_OFF",
    "id": "org.bukkit.Sound#ITEM_AXE_WAX_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the ID of this cat type.",
    "param-names": ["Ocelot.Type"],
    "param-types": ["org.bukkit.entity.Ocelot.Type"],
    "method": "getId",
    "id": "org.bukkit.entity.Ocelot.Type#getId()",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "int"
  },
  {
    "descr": "Checks for a specific custom potion effect type on this cloud.",
    "param-names": [
      "AreaEffectCloud",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "hasCustomEffect",
    "id": "org.bukkit.entity.AreaEffectCloud#hasCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_STICK",
    "id": "org.bukkit.Material#LEGACY_STICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockFormEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SHULKER_CLOSE",
    "id": "org.bukkit.GameEvent#SHULKER_CLOSE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.StructureGrowEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CORNFLOWER",
    "id": "org.bukkit.Material#CORNFLOWER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PANDA",
    "id": "org.bukkit.loot.LootTables#PANDA",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Cow Bell is normally played when a note block is on top of a soul sand block.",
    "static": true,
    "field": "COW_BELL",
    "id": "org.bukkit.Instrument#COW_BELL",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Clears the entity of all armor and held items",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "clear",
    "id": "org.bukkit.inventory.EntityEquipment#clear()",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Provides protection against fire damage",
    "static": true,
    "field": "PROTECTION_FIRE",
    "id": "org.bukkit.enchantments.Enchantment#PROTECTION_FIRE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "HONEYCOMB_BLOCK",
    "id": "org.bukkit.Material#HONEYCOMB_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "OAK_DOOR",
    "id": "org.bukkit.Material#OAK_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "POLISHED_DIORITE_SLAB",
    "id": "org.bukkit.Material#POLISHED_DIORITE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the criteria this objective tracks.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getTrackedCriteria",
    "id": "org.bukkit.scoreboard.Objective#getTrackedCriteria()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Gets the current ItemStack on the cursor.",
    "method": "getCursor",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getCursor()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.GrassSpecies#values()",
    "class": "org.bukkit.GrassSpecies",
    "return": "org.bukkit.GrassSpecies[]"
  },
  {
    "descr": "Get the new amount of arrows in the entity's body.",
    "method": "getNewAmount",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getNewAmount()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "int"
  },
  {
    "descr": "Makes a line appear through the text.",
    "static": true,
    "field": "STRIKETHROUGH",
    "id": "org.bukkit.ChatColor#STRIKETHROUGH",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_MEADOW",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_MEADOW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Rotates the vector around the y axis.\\n\\nThis piece of math is based on the standard rotation matrix for vectors\\nin three dimensional space. This matrix can be found here:\\nRotation\\nMatrix.",
    "param-names": [
      "Vector",
      "Angle"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rotateAroundY",
    "id": "org.bukkit.util.Vector#rotateAroundY(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Get the type of this rule.",
    "param-names": ["GameRule"],
    "param-types": ["org.bukkit.GameRule"],
    "method": "getType",
    "id": "org.bukkit.GameRule#getType()",
    "class": "org.bukkit.GameRule",
    "return": "java.lang.Class"
  },
  {
    "descr": "Gets the red component",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "getRed",
    "id": "org.bukkit.Color#getRed()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "descr": "Armor bonus of an Entity.",
    "static": true,
    "field": "GENERIC_ARMOR",
    "id": "org.bukkit.attribute.Attribute#GENERIC_ARMOR",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "Do not use for any reason.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isLegacy",
    "id": "org.bukkit.Material#isLegacy()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Checks for the presence of custom potion effects.",
    "param-names": ["Arrow"],
    "param-types": ["org.bukkit.entity.Arrow"],
    "method": "hasCustomEffects",
    "id": "org.bukkit.entity.Arrow#hasCustomEffects()",
    "class": "org.bukkit.entity.Arrow",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.World.Environment#valueOf(java.lang.String)",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment"
  },
  {
    "descr": "Used to get the index of the trade the player clicked on.",
    "method": "getIndex",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getIndex()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "int"
  },
  {
    "descr": "Returns the amount of time that this arrow will apply\\nthe glowing effect for.",
    "param-names": ["SpectralArrow"],
    "param-types": ["org.bukkit.entity.SpectralArrow"],
    "method": "getGlowingTicks",
    "id": "org.bukkit.entity.SpectralArrow#getGlowingTicks()",
    "class": "org.bukkit.entity.SpectralArrow",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_STEP",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CHEST_BOAT",
    "id": "org.bukkit.entity.EntityType#CHEST_BOAT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WEATHERED_COPPER",
    "id": "org.bukkit.Material#WEATHERED_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the title of the book.\\n\\nLimited to 32 characters. Removes title when given null.",
    "param-names": [
      "BookMeta",
      "Title"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "java.lang.String"
    ],
    "method": "setTitle",
    "id": "org.bukkit.inventory.meta.BookMeta#setTitle(java.lang.String)",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "boolean"
  },
  {
    "method": "spliterator",
    "id": "org.bukkit.event.server.ServerListPingEvent#spliterator()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "java.util.Spliterator"
  },
  {
    "descr": "Gets user-specified limit for number of animals that can spawn in a\\nchunk.",
    "static": true,
    "method": "getAnimalSpawnLimit",
    "id": "org.bukkit.Bukkit#getAnimalSpawnLimit()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_CROSSBOW_QUICK_CHARGE_2",
    "id": "org.bukkit.Sound#ITEM_CROSSBOW_QUICK_CHARGE_2",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "PIGLIN_BANNER_PATTERN",
    "id": "org.bukkit.Material#PIGLIN_BANNER_PATTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent"
  },
  {
    "static": true,
    "field": "HEAD",
    "id": "org.bukkit.inventory.EquipmentSlot#HEAD",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Gets whether the sniffer can dig in the current Location below\\nits head.",
    "param-names": ["Sniffer"],
    "param-types": ["org.bukkit.entity.Sniffer"],
    "method": "canDig",
    "id": "org.bukkit.entity.Sniffer#canDig()",
    "class": "org.bukkit.entity.Sniffer",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Horse"],
    "param-types": ["org.bukkit.entity.Horse"],
    "method": "isCarryingChest",
    "id": "org.bukkit.entity.Horse#isCarryingChest()",
    "class": "org.bukkit.entity.Horse",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_SPLASH_POTION_THROW",
    "id": "org.bukkit.Sound#ENTITY_SPLASH_POTION_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Small bush that grows in the jungle",
    "static": true,
    "field": "JUNGLE_BUSH",
    "id": "org.bukkit.TreeType#JUNGLE_BUSH",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Get the variant of this axolotl.",
    "param-names": ["Axolotl"],
    "param-types": ["org.bukkit.entity.Axolotl"],
    "method": "getVariant",
    "id": "org.bukkit.entity.Axolotl#getVariant()",
    "class": "org.bukkit.entity.Axolotl",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "Called when an EnderDragon switches controller phase.",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent"
  },
  {
    "static": true,
    "field": "AWKWARD",
    "id": "org.bukkit.potion.PotionType#AWKWARD",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "AMBIENT_BASALT_DELTAS_MOOD",
    "id": "org.bukkit.Sound#AMBIENT_BASALT_DELTAS_MOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the entity currently perched on the left shoulder or null if no\\nentity.\\n\\nThe returned entity will not be spawned within the world, so most\\noperations are invalid unless the entity is first spawned in.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getShoulderEntityLeft",
    "id": "org.bukkit.entity.HumanEntity#getShoulderEntityLeft()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Checks if this object contains an override for the specified Permission",
    "param-names": [
      "Permissible",
      "Perm"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.permissions.Permission"
    ],
    "method": "isPermissionSet",
    "id": "org.bukkit.permissions.Permissible#isPermissionSet(org.bukkit.permissions.Permission)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_PURPLE_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_PURPLE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Action#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Action",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.WorldType#NORMAL",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType"
  },
  {
    "static": true,
    "field": "EVOKER_SPAWN_EGG",
    "id": "org.bukkit.Material#EVOKER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the trap time for the horse.\\nValues greater than 18000 will cause the horse to despawn on the next\\ntick.",
    "param-names": [
      "SkeletonHorse",
      "Trap Time"
    ],
    "param-types": [
      "org.bukkit.entity.SkeletonHorse",
      "int"
    ],
    "method": "setTrapTime",
    "id": "org.bukkit.entity.SkeletonHorse#setTrapTime(int)",
    "class": "org.bukkit.entity.SkeletonHorse"
  },
  {
    "static": true,
    "field": "DOLPHIN",
    "id": "org.bukkit.Particle#DOLPHIN",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_SLIME_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SLIME_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "POLISHED_DIORITE_STAIRS",
    "id": "org.bukkit.Material#POLISHED_DIORITE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "OAK_CHEST_BOAT",
    "id": "org.bukkit.Material#OAK_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the Material at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Material"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "org.bukkit.Material"
    ],
    "method": "setType",
    "id": "org.bukkit.RegionAccessor#setType(org.bukkit.Location,org.bukkit.Material)",
    "class": "org.bukkit.RegionAccessor"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the value of the 'pickles' property.",
    "param-names": ["SeaPickle"],
    "param-types": ["org.bukkit.block.data.type.SeaPickle"],
    "method": "getPickles",
    "id": "org.bukkit.block.data.type.SeaPickle#getPickles()",
    "class": "org.bukkit.block.data.type.SeaPickle",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the color represented by the specified color code",
    "param-names": ["Code"],
    "static": true,
    "param-types": ["char"],
    "method": "getByChar",
    "id": "org.bukkit.ChatColor#getByChar(char)",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "ENTITY_ARROW_HIT_PLAYER",
    "id": "org.bukkit.Sound#ENTITY_ARROW_HIT_PLAYER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "FIRSTPERSON_RIGHTHAND",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#FIRSTPERSON_RIGHTHAND",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "Add an entity to the block.",
    "param-names": [
      "EntityBlockStorage",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.block.EntityBlockStorage",
      "org.bukkit.entity.Entity"
    ],
    "method": "addEntity",
    "id": "org.bukkit.block.EntityBlockStorage#addEntity(T)",
    "class": "org.bukkit.block.EntityBlockStorage"
  },
  {
    "descr": "Gets the current type of this fox.",
    "param-names": ["Fox"],
    "param-types": ["org.bukkit.entity.Fox"],
    "method": "getFoxType",
    "id": "org.bukkit.entity.Fox#getFoxType()",
    "class": "org.bukkit.entity.Fox",
    "return": "org.bukkit.entity.Fox.Type"
  },
  {
    "descr": "Entity breaks item in boot slot",
    "static": true,
    "field": "BREAK_EQUIPMENT_BOOTS",
    "id": "org.bukkit.EntityEffect#BREAK_EQUIPMENT_BOOTS",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "LEGACY_CHAINMAIL_BOOTS",
    "id": "org.bukkit.Material#LEGACY_CHAINMAIL_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: AnaloguePowerable",
    "static": true,
    "field": "LIGHT_WEIGHTED_PRESSURE_PLATE",
    "id": "org.bukkit.Material#LIGHT_WEIGHTED_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_PINK_TULIP",
    "id": "org.bukkit.Material#POTTED_PINK_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the absolute value of the maximum x/z center coordinate of a\\nWorldBorder.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getMaxCenterCoordinate",
    "id": "org.bukkit.WorldBorder#getMaxCenterCoordinate()",
    "class": "org.bukkit.WorldBorder",
    "return": "double"
  },
  {
    "descr": "Sets the color of the fish's pattern.\\n\\nSetting this when hasVariant() returns false will initialize\\nall other values to unspecified defaults.",
    "param-names": [
      "TropicalFishBucketMeta",
      "Color"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.TropicalFishBucketMeta",
      "org.bukkit.DyeColor"
    ],
    "method": "setPatternColor",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#setPatternColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta"
  },
  {
    "descr": "Salt and pepper colored, whatever that means.",
    "static": true,
    "field": "SALT_AND_PEPPER",
    "id": "org.bukkit.entity.Rabbit.Type#SALT_AND_PEPPER",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "PURPUR_PILLAR",
    "id": "org.bukkit.Material#PURPUR_PILLAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_CREDITS",
    "id": "org.bukkit.Sound#MUSIC_CREDITS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "PIGLIN_SPAWN_EGG",
    "id": "org.bukkit.Material#PIGLIN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'hanging' property.",
    "param-names": ["Hangable"],
    "param-types": ["org.bukkit.block.data.Hangable"],
    "method": "isHanging",
    "id": "org.bukkit.block.data.Hangable#isHanging()",
    "class": "org.bukkit.block.data.Hangable",
    "return": "boolean"
  },
  {
    "descr": "Sets the operator status of this object",
    "param-names": [
      "ServerOperator",
      "Value"
    ],
    "param-types": [
      "org.bukkit.permissions.ServerOperator",
      "boolean"
    ],
    "method": "setOp",
    "id": "org.bukkit.permissions.ServerOperator#setOp(boolean)",
    "class": "org.bukkit.permissions.ServerOperator"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks if this is a substatistic.\\n\\nA substatistic exists en masse for each block, item, or entitytype, depending on\\n#getType().\\n\\nThis is a redundant method and equivalent to checking\\ngetType() != Type.UNTYPED",
    "param-names": ["Statistic"],
    "param-types": ["org.bukkit.Statistic"],
    "method": "isSubstatistic",
    "id": "org.bukkit.Statistic#isSubstatistic()",
    "class": "org.bukkit.Statistic",
    "return": "boolean"
  },
  {
    "descr": "Removes the entry from this team.",
    "param-names": [
      "Team",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "java.lang.String"
    ],
    "method": "removeEntry",
    "id": "org.bukkit.scoreboard.Team#removeEntry(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_MIRROR_MOVE",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_MIRROR_MOVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the minimum number of ticks one has to wait for a fish to bite\\nafter appearing.\\n\\nThe default is 20 ticks (1 second).\\nLure does not affect this value.\\nThis will also effect the radius (0.1 * lureTime) of where\\nthe fish will appear.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getMinLureTime",
    "id": "org.bukkit.entity.FishHook#getMinLureTime()",
    "class": "org.bukkit.entity.FishHook",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_SIGN",
    "id": "org.bukkit.Material#LEGACY_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ZOGLIN_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_ZOGLIN_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_BROWN_MUSHROOM",
    "id": "org.bukkit.Material#LEGACY_BROWN_MUSHROOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'leaves' property.",
    "param-names": [
      "Bamboo",
      "Leaves"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Bamboo",
      "org.bukkit.block.data.type.Bamboo.Leaves"
    ],
    "method": "setLeaves",
    "id": "org.bukkit.block.data.type.Bamboo#setLeaves(org.bukkit.block.data.type.Bamboo.Leaves)",
    "class": "org.bukkit.block.data.type.Bamboo"
  },
  {
    "static": true,
    "field": "LEGACY_BEETROOT_SEEDS",
    "id": "org.bukkit.Material#LEGACY_BEETROOT_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ILLUSIONER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ILLUSIONER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This method returns the corresponding warning state for the given\\nstring value.",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "value",
    "id": "org.bukkit.Warning.WarningState#value(java.lang.String)",
    "class": "org.bukkit.Warning.WarningState",
    "return": "org.bukkit.Warning.WarningState"
  },
  {
    "descr": "Set the rotation of the frame's item",
    "param-names": [
      "ItemFrame",
      "Rotation"
    ],
    "param-types": [
      "org.bukkit.entity.ItemFrame",
      "org.bukkit.Rotation"
    ],
    "method": "setRotation",
    "id": "org.bukkit.entity.ItemFrame#setRotation(org.bukkit.Rotation)",
    "class": "org.bukkit.entity.ItemFrame"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerAdvancementDoneEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the UUID of the entity that caused this entity to enter the\\n#canBreed() state.",
    "param-names": [
      "Animals",
      "Uuid"
    ],
    "param-types": [
      "org.bukkit.entity.Animals",
      "java.util.UUID"
    ],
    "method": "setBreedCause",
    "id": "org.bukkit.entity.Animals#setBreedCause(java.util.UUID)",
    "class": "org.bukkit.entity.Animals"
  },
  {
    "descr": "Get the category of spawn to which this entity belongs.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getSpawnCategory",
    "id": "org.bukkit.entity.Entity#getSpawnCategory()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "static": true,
    "field": "ENTITY_PHANTOM_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PHANTOM_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the Material that the block is changing into",
    "method": "getTo",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_BLUE_ORCHID",
    "id": "org.bukkit.Material#POTTED_BLUE_ORCHID",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DIAMOND_HELMET",
    "id": "org.bukkit.Material#DIAMOND_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "JUNGLE_PRESSURE_PLATE",
    "id": "org.bukkit.Material#JUNGLE_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A smithing inventory, with 3 CRAFTING slots and 1 RESULT slot.",
    "static": true,
    "field": "SMITHING",
    "id": "org.bukkit.event.inventory.InventoryType#SMITHING",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the TreeSpecies with the given data value",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByData",
    "id": "org.bukkit.TreeSpecies#getByData(byte)",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "descr": "Whether drowning damage is enabled or not.",
    "static": true,
    "field": "DROWNING_DAMAGE",
    "id": "org.bukkit.GameRule#DROWNING_DAMAGE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "BLOCK_FROGSPAWN_STEP",
    "id": "org.bukkit.Sound#BLOCK_FROGSPAWN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the portal block the entity is touching",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "BAMBOO_MOSAIC_STAIRS",
    "id": "org.bukkit.Material#BAMBOO_MOSAIC_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets an entity type from its name.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "fromName",
    "id": "org.bukkit.entity.EntityType#fromName(java.lang.String)",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "GLASS",
    "id": "org.bukkit.Material#GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["InventoryType"],
    "param-types": ["org.bukkit.event.inventory.InventoryType"],
    "method": "getDefaultSize",
    "id": "org.bukkit.event.inventory.InventoryType#getDefaultSize()",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "int"
  },
  {
    "descr": "Get the loot table used to generate loot.",
    "method": "getLootTable",
    "id": "org.bukkit.event.world.LootGenerateEvent#getLootTable()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.loot.LootTable"
  },
  {
    "descr": "Set the amount of damage inflicted upon entities multiplied by the distance\\nthat the block had fallen when this falling block lands on them.\\n\\nIf damage is non-zero, this method will automatically call\\n#setHurtEntities(boolean) setHurtEntities(true).",
    "param-names": [
      "FallingBlock",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.entity.FallingBlock",
      "float"
    ],
    "method": "setDamagePerBlock",
    "id": "org.bukkit.entity.FallingBlock#setDamagePerBlock(float)",
    "class": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "WEEPING_VINES",
    "id": "org.bukkit.Material#WEEPING_VINES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the highest non-empty (impassable) coordinate at the given\\nLocation.",
    "param-names": [
      "RegionAccessor",
      "Location"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location"
    ],
    "method": "getHighestBlockYAt",
    "id": "org.bukkit.RegionAccessor#getHighestBlockYAt(org.bukkit.Location)",
    "class": "org.bukkit.RegionAccessor",
    "return": "int"
  },
  {
    "descr": "Returns whether the item frame is \"fixed\" or not.\\nWhen true it's not possible to destroy/move the frame (e.g. by damage,\\ninteraction, pistons, or missing supporting blocks), rotate the item or\\nplace/remove items.",
    "param-names": ["ItemFrame"],
    "param-types": ["org.bukkit.entity.ItemFrame"],
    "method": "isFixed",
    "id": "org.bukkit.entity.ItemFrame#isFixed()",
    "class": "org.bukkit.entity.ItemFrame",
    "return": "boolean"
  },
  {
    "descr": "Return a new random key in the #BUKKIT namespace.",
    "static": true,
    "method": "randomKey",
    "id": "org.bukkit.NamespacedKey#randomKey()",
    "class": "org.bukkit.NamespacedKey",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "Returns whether this skeleton horse is trapped.\\n\\nWhen a horse is trapped and a player comes within 10 blocks of a trapped\\nhorse, lightning will strike the horse. When struck, the skeleton trap\\nwill activate, turning the horse into a skeleton horseman as well as\\nspawning three additional horsemen nearby.",
    "param-names": ["SkeletonHorse"],
    "param-types": ["org.bukkit.entity.SkeletonHorse"],
    "method": "isTrapped",
    "id": "org.bukkit.entity.SkeletonHorse#isTrapped()",
    "class": "org.bukkit.entity.SkeletonHorse",
    "return": "boolean"
  },
  {
    "descr": "Called when a Sculk sensor receives a game event and hence might activate.\\nWill be called cancelled if the block's default behavior is to ignore the\\nevent.",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent"
  },
  {
    "descr": "The namespace representing all inbuilt keys.",
    "static": true,
    "field": "MINECRAFT",
    "id": "org.bukkit.NamespacedKey#MINECRAFT",
    "class": "org.bukkit.NamespacedKey",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SIDEBAR_GOLD",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_GOLD",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "LEGACY_ENDER_PORTAL",
    "id": "org.bukkit.Material#LEGACY_ENDER_PORTAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Create a new ItemStack given the supplied input.\\n\\nThe input should match the same input as expected by Minecraft's /give\\ncommand. For example, \"minecraft:diamond_sword{Enchantments:[{id:\"minecraft:sharpness\", lvl:3}]}\"\\nwould yield an ItemStack of Material#DIAMOND_SWORD with an ItemMeta\\ncontaining a level 3 Enchantment#DAMAGE_ALL\\nenchantment.",
    "param-names": [
      "ItemFactory",
      "Input"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "java.lang.String"
    ],
    "method": "createItemStack",
    "id": "org.bukkit.inventory.ItemFactory#createItemStack(java.lang.String)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the complete block data for this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getBlockData",
    "id": "org.bukkit.block.Block#getBlockData()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Render to the given map.",
    "param-names": [
      "MapRenderer",
      "Map",
      "Canvas",
      "Player"
    ],
    "param-types": [
      "org.bukkit.map.MapRenderer",
      "org.bukkit.map.MapView",
      "org.bukkit.map.MapCanvas",
      "org.bukkit.entity.Player"
    ],
    "method": "render",
    "id": "org.bukkit.map.MapRenderer#render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player)",
    "class": "org.bukkit.map.MapRenderer"
  },
  {
    "descr": "Gets the alpha component",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "getAlpha",
    "id": "org.bukkit.Color#getAlpha()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "descr": "Damage caused by direct exposure to lava\\n\\nDamage: 4",
    "static": true,
    "field": "LAVA",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#LAVA",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "OXIDIZED_COPPER",
    "id": "org.bukkit.Material#OXIDIZED_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WHITE_CONCRETE",
    "id": "org.bukkit.Material#WHITE_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a block is destroyed as a result of being burnt by fire.\\n\\nIf a Block Burn event is cancelled, the block will not be destroyed as a\\nresult of being burnt by fire.",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent"
  },
  {
    "static": true,
    "field": "ENTITY_EXPERIENCE_BOTTLE_THROW",
    "id": "org.bukkit.Sound#ENTITY_EXPERIENCE_BOTTLE_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets an array of all the registered Enchantments",
    "static": true,
    "method": "values",
    "id": "org.bukkit.enchantments.Enchantment#values()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment[]"
  },
  {
    "descr": "Called when a Campfire starts to cook.",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent"
  },
  {
    "descr": "Called when the fluid level of a block changes due to changes in adjacent\\nblocks.",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent"
  },
  {
    "descr": "Force sets the dancing status of the allay.\\n\\nNote: This method forces the allay to dance, ignoring any nearby\\njukebox being required.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "startDancing",
    "id": "org.bukkit.entity.Allay#startDancing()",
    "class": "org.bukkit.entity.Allay"
  },
  {
    "static": true,
    "field": "ENTITY_CHICKEN_STEP",
    "id": "org.bukkit.Sound#ENTITY_CHICKEN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SHEEP_RED",
    "id": "org.bukkit.loot.LootTables#SHEEP_RED",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_SEEDS",
    "id": "org.bukkit.Material#LEGACY_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a slime splits",
    "static": true,
    "field": "SLIME_SPLIT",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SLIME_SPLIT",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_FILL_AXOLOTL",
    "id": "org.bukkit.Sound#ITEM_BUCKET_FILL_AXOLOTL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the amount of air the entity has left (measured in ticks).",
    "method": "getAmount",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#getAmount()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "int"
  },
  {
    "descr": "Set the amount of experience dropped by the block after the event has\\nprocessed",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setExpToDrop",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#setExpToDrop(int)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent"
  },
  {
    "static": true,
    "field": "BELOW_NAME",
    "id": "org.bukkit.scoreboard.DisplaySlot#BELOW_NAME",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.entity.EntityType#WITHER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Effect#valueOf(java.lang.String)",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Sets the value of the 'conditional' property.",
    "param-names": [
      "CommandBlock",
      "Conditional"
    ],
    "param-types": [
      "org.bukkit.block.data.type.CommandBlock",
      "boolean"
    ],
    "method": "setConditional",
    "id": "org.bukkit.block.data.type.CommandBlock#setConditional(boolean)",
    "class": "org.bukkit.block.data.type.CommandBlock"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_BREAK",
    "id": "org.bukkit.Sound#ENTITY_ITEM_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates a tree at the given Location",
    "param-names": [
      "World",
      "Loc",
      "Type",
      "Delegate"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.TreeType",
      "org.bukkit.BlockChangeDelegate"
    ],
    "method": "generateTree",
    "id": "org.bukkit.World#generateTree(org.bukkit.Location,org.bukkit.TreeType,org.bukkit.BlockChangeDelegate)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Set breedability of the animal, if the animal is a baby and set to\\nbreed it will instantly grow up.",
    "param-names": [
      "Ageable",
      "Breed"
    ],
    "param-types": [
      "org.bukkit.entity.Ageable",
      "boolean"
    ],
    "method": "setBreed",
    "id": "org.bukkit.entity.Ageable#setBreed(boolean)",
    "class": "org.bukkit.entity.Ageable"
  },
  {
    "descr": "All damage to other targets will knock them back when hit",
    "static": true,
    "field": "KNOCKBACK",
    "id": "org.bukkit.enchantments.Enchantment#KNOCKBACK",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "PURPLE_BANNER",
    "id": "org.bukkit.Material#PURPLE_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Tests if this chunk contains the specified block.",
    "param-names": [
      "Chunk",
      "Block"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "contains",
    "id": "org.bukkit.Chunk#contains(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SOUTH_UP",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#SOUTH_UP",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "static": true,
    "field": "BOOKSHELF",
    "id": "org.bukkit.Material#BOOKSHELF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Dark brown",
    "static": true,
    "field": "DARK_BROWN",
    "id": "org.bukkit.entity.Horse.Color#DARK_BROWN",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "static": true,
    "field": "PITCHER_POD",
    "id": "org.bukkit.Material#PITCHER_POD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Damage caused when an entity runs into a wall.\\n\\nDamage: variable",
    "static": true,
    "field": "FLY_INTO_WALL",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#FLY_INTO_WALL",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "BRICK_WALL",
    "id": "org.bukkit.Material#BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_LEATHER_LEGGINGS",
    "id": "org.bukkit.Material#LEGACY_LEATHER_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.TimeSkipEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MOJANG_BANNER_PATTERN",
    "id": "org.bukkit.Material#MOJANG_BANNER_PATTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the X position of this cursor.",
    "param-names": [
      "MapCursor",
      "X"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "byte"
    ],
    "method": "setX",
    "id": "org.bukkit.map.MapCursor#setX(byte)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "static": true,
    "field": "DIAMOND_CHESTPLATE",
    "id": "org.bukkit.Material#DIAMOND_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'hinge' property.",
    "param-names": [
      "Door",
      "Hinge"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Door",
      "org.bukkit.block.data.type.Door.Hinge"
    ],
    "method": "setHinge",
    "id": "org.bukkit.block.data.type.Door#setHinge(org.bukkit.block.data.type.Door.Hinge)",
    "class": "org.bukkit.block.data.type.Door"
  },
  {
    "descr": "Gets the face relation of this block compared to the given block.\\n\\nFor example:\\ncurrent = world.getBlockAt(100, 100, 100);\\nBlock target = world.getBlockAt(100, 101, 100);\\ncurrent.getFace(target) == BlockFace.Up;\\n\\n\\nIf the given block is not connected to this block, null may be returned",
    "param-names": [
      "Block",
      "Block"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.Block"
    ],
    "method": "getFace",
    "id": "org.bukkit.block.Block#getFace(org.bukkit.block.Block)",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "BLAZE",
    "id": "org.bukkit.loot.LootTables#BLAZE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Get the time in ticks this entity's movement is being increased.\\nMovement speed is often increased as a result of using the\\n#getSteerMaterial().",
    "param-names": ["Steerable"],
    "param-types": ["org.bukkit.entity.Steerable"],
    "method": "getBoostTicks",
    "id": "org.bukkit.entity.Steerable#getBoostTicks()",
    "class": "org.bukkit.entity.Steerable",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerShowEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the reason for this ban.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "getReason",
    "id": "org.bukkit.BanEntry#getReason()",
    "class": "org.bukkit.BanEntry",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the Biome for the given block coordinates",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z",
      "Biome"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int",
      "org.bukkit.block.Biome"
    ],
    "method": "setBiome",
    "id": "org.bukkit.RegionAccessor#setBiome(int,int,int,org.bukkit.block.Biome)",
    "class": "org.bukkit.RegionAccessor"
  },
  {
    "descr": "The spell that summons Fangs.",
    "static": true,
    "field": "FANGS",
    "id": "org.bukkit.entity.Spellcaster.Spell#FANGS",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "descr": "Gets the message that is displayed on the server list.",
    "static": true,
    "method": "getMotd",
    "id": "org.bukkit.Bukkit#getMotd()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets whether the entity is silent or not.\\n\\nWhen an entity is silent it will not produce any sound.",
    "param-names": [
      "Entity",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setSilent",
    "id": "org.bukkit.entity.Entity#setSilent(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets a unit-vector pointing in the direction that this Location is\\nfacing.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getDirection",
    "id": "org.bukkit.Location#getDirection()",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Get the maximum distance(squared) a player can be in order for this\\nspawner to be active.\\n\\nIf this value is less than or equal to 0, this spawner is always active\\n(given that there are players online).\\n\\nDefault value is 16.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getRequiredPlayerRange",
    "id": "org.bukkit.block.CreatureSpawner#getRequiredPlayerRange()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIFIED_PIGLIN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIFIED_PIGLIN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an entity is missing a SpawnReason",
    "static": true,
    "field": "DEFAULT",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#DEFAULT",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Returns the first empty Slot.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "firstEmpty",
    "id": "org.bukkit.inventory.Inventory#firstEmpty()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "int"
  },
  {
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCollisionCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#setCollisionCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent"
  },
  {
    "descr": "The advancement this progress is concerning.",
    "param-names": ["AdvancementProgress"],
    "param-types": ["org.bukkit.advancement.AdvancementProgress"],
    "method": "getAdvancement",
    "id": "org.bukkit.advancement.AdvancementProgress#getAdvancement()",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "org.bukkit.advancement.Advancement"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_DOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_DOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Sets the jump strength of this horse.\\n\\nA higher jump strength increases how high a jump will go.\\nSetting a jump strength to 0 will result in no jump.\\nYou cannot set a jump strength to a value below 0 or\\nabove 2.",
    "param-names": [
      "AbstractHorse",
      "Strength"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractHorse",
      "double"
    ],
    "method": "setJumpStrength",
    "id": "org.bukkit.entity.AbstractHorse#setJumpStrength(double)",
    "class": "org.bukkit.entity.AbstractHorse"
  },
  {
    "descr": "This is the UUID of the specified AnimalTamer.",
    "param-names": ["AnimalTamer"],
    "param-types": ["org.bukkit.entity.AnimalTamer"],
    "method": "getUniqueId",
    "id": "org.bukkit.entity.AnimalTamer#getUniqueId()",
    "class": "org.bukkit.entity.AnimalTamer",
    "return": "java.util.UUID"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "BLACKSTONE_STAIRS",
    "id": "org.bukkit.Material#BLACKSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Request that the player's client download and switch resource packs.\\n\\nThe player's client will download the new resource pack asynchronously\\nin the background, and will automatically switch to it once the\\ndownload is complete. If the client has downloaded and cached a\\nresource pack with the same hash in the past it will not download but\\ndirectly apply the cached pack. If the hash is null and the client has\\ndownloaded and cached the same resource pack in the past, it will\\nperform a file size check against the response content to determine if\\nthe resource pack has changed and needs to be downloaded again. When\\nthis request is sent for the very first time from a given server, the\\nclient will first display a confirmation GUI to the player before\\nproceeding with the download.\\n\\nNotes:\\n\\nPlayers can disable server resources on their client, in which\\ncase this method will have no affect on them. Use the\\nPlayerResourcePackStatusEvent to figure out whether or not\\nthe player loaded the pack!\\nThere is no concept of resetting resource packs back to default\\nwithin Minecraft, so players will have to relog to do so or you\\nhave to send an empty pack.\\nThe request is sent with empty string as the hash when the hash is\\nnot provided. This might result in newer versions not loading the\\npack correctly.\\n",
    "param-names": [
      "Player",
      "Url",
      "Hash",
      "Prompt"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "byte[]",
      "java.lang.String"
    ],
    "method": "setResourcePack",
    "id": "org.bukkit.entity.Player#setResourcePack(java.lang.String,byte[],java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the associated wool data value representing this color.",
    "param-names": ["DyeColor"],
    "param-types": ["org.bukkit.DyeColor"],
    "method": "getWoolData",
    "id": "org.bukkit.DyeColor#getWoolData()",
    "class": "org.bukkit.DyeColor",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_GRAVEL_HIT",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_GRAVEL_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "WARPED_BUTTON",
    "id": "org.bukkit.Material#WARPED_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_PLACE",
    "id": "org.bukkit.GameEvent#BLOCK_PLACE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "When the player exits the end through the end portal.",
    "static": true,
    "field": "END_PORTAL",
    "id": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason#END_PORTAL",
    "class": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason",
    "return": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason"
  },
  {
    "static": true,
    "field": "LEGACY_BLAZE_ROD",
    "id": "org.bukkit.Material#LEGACY_BLAZE_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The sound played when a villager is converted by\\na zombie",
    "static": true,
    "field": "ZOMBIE_CONVERTED_VILLAGER",
    "id": "org.bukkit.Effect#ZOMBIE_CONVERTED_VILLAGER",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Gets whether this arrow is in a block or not.\\n\\nArrows in a block are motionless and may be picked up by players.",
    "param-names": ["AbstractArrow"],
    "param-types": ["org.bukkit.entity.AbstractArrow"],
    "method": "isInBlock",
    "id": "org.bukkit.entity.AbstractArrow#isInBlock()",
    "class": "org.bukkit.entity.AbstractArrow",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent"
  },
  {
    "descr": "Gets the effect type specified by the unique id.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getById",
    "id": "org.bukkit.potion.PotionEffectType#getById(int)",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "WATER_SPLASH",
    "id": "org.bukkit.Particle#WATER_SPLASH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_ITEM_FRAME_PLACE",
    "id": "org.bukkit.Sound#ENTITY_GLOW_ITEM_FRAME_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent"
  },
  {
    "static": true,
    "field": "BLOCK_CHAIN_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CHAIN_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "RELOAD",
    "id": "org.bukkit.event.server.ServerLoadEvent.LoadType#RELOAD",
    "class": "org.bukkit.event.server.ServerLoadEvent.LoadType",
    "return": "org.bukkit.event.server.ServerLoadEvent.LoadType"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "SMOOTH_STONE_SLAB",
    "id": "org.bukkit.Material#SMOOTH_STONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the mob is an adult.",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.entity.Ageable"],
    "method": "isAdult",
    "id": "org.bukkit.entity.Ageable#isAdult()",
    "class": "org.bukkit.entity.Ageable",
    "return": "boolean"
  },
  {
    "descr": "Sets if this arrow was shot from a crossbow.",
    "param-names": [
      "AbstractArrow",
      "Shot From Crossbow"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractArrow",
      "boolean"
    ],
    "method": "setShotFromCrossbow",
    "id": "org.bukkit.entity.AbstractArrow#setShotFromCrossbow(boolean)",
    "class": "org.bukkit.entity.AbstractArrow"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Switch.Face#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Switch.Face",
    "return": "org.bukkit.block.data.type.Switch.Face"
  },
  {
    "static": true,
    "field": "LEGACY_BREAD",
    "id": "org.bukkit.Material#LEGACY_BREAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Second growth stage",
    "static": true,
    "field": "STAGE_TWO",
    "id": "org.bukkit.NetherWartsState#STAGE_TWO",
    "class": "org.bukkit.NetherWartsState",
    "return": "org.bukkit.NetherWartsState"
  },
  {
    "descr": "Sets whether this mob is aware of its surroundings.\\nUnaware mobs will still move if pushed, attacked, etc. but will not move\\nor perform any actions on their own. Unaware mobs may also have other\\nunspecified behaviours disabled, such as drowning.",
    "param-names": [
      "Mob",
      "Aware"
    ],
    "param-types": [
      "org.bukkit.entity.Mob",
      "boolean"
    ],
    "method": "setAware",
    "id": "org.bukkit.entity.Mob#setAware(boolean)",
    "class": "org.bukkit.entity.Mob"
  },
  {
    "descr": "Stop the specified sound from playing.",
    "param-names": [
      "Player",
      "Sound",
      "Category"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Sound",
      "org.bukkit.SoundCategory"
    ],
    "method": "stopSound",
    "id": "org.bukkit.entity.Player#stopSound(org.bukkit.Sound,org.bukkit.SoundCategory)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_MOB_SPAWNER",
    "id": "org.bukkit.Material#LEGACY_MOB_SPAWNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_SQUISH",
    "id": "org.bukkit.Sound#ENTITY_SLIME_SQUISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the record item inserted into the jukebox.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "getRecord",
    "id": "org.bukkit.block.Jukebox#getRecord()",
    "class": "org.bukkit.block.Jukebox",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets the player's cooldown between picking up experience orbs..\\nNote: Setting this to 0 allows the player to pick up\\ninstantly, but setting this to a negative value will cause the player to\\nbe unable to pick up xp-orbs.\\nCalling this Method will result in PlayerExpCooldownChangeEvent\\nbeing called.",
    "param-names": [
      "Player",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "int"
    ],
    "method": "setExpCooldown",
    "id": "org.bukkit.entity.Player#setExpCooldown(int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Represents an event that is called when a player interacts with an object or\\nair, potentially fired once for each hand. The hand can be determined using\\n#getHand().\\n\\nThis event will fire as cancelled if the vanilla behavior is to do nothing\\n(e.g interacting with air). For the purpose of avoiding doubt, this means\\nthat the event will only be in the cancelled state if it is fired as a result\\nof some prediction made by the server where no subsequent code will run,\\nrather than when the subsequent interaction activity (e.g. placing a block in\\nan illegal position (BlockCanBuildEvent) will fail.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.ChunkLoadEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "RIB_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#RIB_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the amount the item is to be repaired.\\nThe default value is twice the value of the consumed experience orb\\nor the remaining damage left on the item, whichever is smaller.",
    "method": "getRepairAmount",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getRepairAmount()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockDropItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent"
  },
  {
    "descr": "This controls the action to take with the bed that was clicked on.\\n\\nIn case of org.bukkit.event.Event.Result#DEFAULT, the default outcome is described by\\n#getBedEnterResult().",
    "method": "useBed",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#useBed()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "static": true,
    "field": "TRIDENT",
    "id": "org.bukkit.entity.EntityType#TRIDENT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns an iterator starting at the given index. If the index is\\npositive, then the first call to next() will return the item at that\\nindex; if it is negative, the first call to previous will return the\\nitem at index (getSize() + index).",
    "param-names": [
      "Inventory",
      "Index"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "int"
    ],
    "method": "iterator",
    "id": "org.bukkit.inventory.Inventory#iterator(int)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "java.util.ListIterator"
  },
  {
    "descr": "Sets the suffix appended to the display of entries on this team.",
    "param-names": [
      "Team",
      "Suffix"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "java.lang.String"
    ],
    "method": "setSuffix",
    "id": "org.bukkit.scoreboard.Team#setSuffix(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "Stonecutter inventory with 1 CRAFTING slot, and 1 RESULT slot.",
    "static": true,
    "field": "STONECUTTER",
    "id": "org.bukkit.event.inventory.InventoryType#STONECUTTER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.structure.StructureRotation#valueOf(java.lang.String)",
    "class": "org.bukkit.block.structure.StructureRotation",
    "return": "org.bukkit.block.structure.StructureRotation"
  },
  {
    "descr": "Gets the value of the 'up' property.",
    "param-names": ["Wall"],
    "param-types": ["org.bukkit.block.data.type.Wall"],
    "method": "isUp",
    "id": "org.bukkit.block.data.type.Wall#isUp()",
    "class": "org.bukkit.block.data.type.Wall",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Pinball.",
    "static": true,
    "field": "FULL",
    "id": "org.bukkit.block.data.type.BigDripleaf.Tilt#FULL",
    "class": "org.bukkit.block.data.type.BigDripleaf.Tilt",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt"
  },
  {
    "descr": "In an enchanting inventory, the middle button's experience level\\nvalue.",
    "static": true,
    "field": "ENCHANT_BUTTON2",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_BUTTON2",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "SMOOTH",
    "id": "org.bukkit.SandstoneType#SMOOTH",
    "class": "org.bukkit.SandstoneType",
    "return": "org.bukkit.SandstoneType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.SandstoneType#valueOf(java.lang.String)",
    "class": "org.bukkit.SandstoneType",
    "return": "org.bukkit.SandstoneType"
  },
  {
    "descr": "Sets the particle which this cloud will be composed of",
    "param-names": [
      "AreaEffectCloud",
      "Particle"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.Particle"
    ],
    "method": "setParticle",
    "id": "org.bukkit.entity.AreaEffectCloud#setParticle(org.bukkit.Particle)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "field": "ENTITY_DONKEY_HURT",
    "id": "org.bukkit.Sound#ENTITY_DONKEY_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Regular tree, no branches",
    "static": true,
    "field": "TREE",
    "id": "org.bukkit.TreeType#TREE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "BLOCK_BARREL_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_BARREL_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get a cursor by its internal value.",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["byte"],
    "method": "byValue",
    "id": "org.bukkit.map.MapCursor.Type#byValue(byte)",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "LEGACY_WHITE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_WHITE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A shulker box inventory, with 27 slots of type CONTAINER.",
    "static": true,
    "field": "SHULKER_BOX",
    "id": "org.bukkit.event.inventory.InventoryType#SHULKER_BOX",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Sets how much EXP should be dropped from this death.\\n\\nThis does not indicate how much EXP should be taken from the entity in\\nquestion, merely how much should be created after its death.",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setDroppedExp",
    "id": "org.bukkit.event.entity.EntityDeathEvent#setDroppedExp(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent"
  },
  {
    "descr": "Gets the amount of ticks until this entity will be converted to a Zoglin.\\nWhen this reaches 300, the entity will be converted.",
    "param-names": ["Hoglin"],
    "param-types": ["org.bukkit.entity.Hoglin"],
    "method": "getConversionTime",
    "id": "org.bukkit.entity.Hoglin#getConversionTime()",
    "class": "org.bukkit.entity.Hoglin",
    "return": "int"
  },
  {
    "descr": "Get a collection of all entities in this World matching any of the\\ngiven classes/interfaces",
    "param-names": [
      "World",
      "Classes"
    ],
    "param-types": [
      "org.bukkit.World",
      "java.lang.Class[]"
    ],
    "method": "getEntitiesByClasses",
    "id": "org.bukkit.World#getEntitiesByClasses(java.lang.Class<?>...)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets the value of the 'has_record' property.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.data.type.Jukebox"],
    "method": "hasRecord",
    "id": "org.bukkit.block.data.type.Jukebox#hasRecord()",
    "class": "org.bukkit.block.data.type.Jukebox",
    "return": "boolean"
  },
  {
    "descr": "Sets the amount of damage a player takes when outside the border plus the border buffer.",
    "param-names": [
      "WorldBorder",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "double"
    ],
    "method": "setDamageAmount",
    "id": "org.bukkit.WorldBorder#setDamageAmount(double)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "static": true,
    "field": "LEGACY_SLIME_BLOCK",
    "id": "org.bukkit.Material#LEGACY_SLIME_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the location that this entity moved to",
    "method": "getTo",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Returns the entity being leashed.",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Event that is called when an organic structure attempts to grow (Sapling ->\\nTree), (Mushroom -> Huge Mushroom), naturally or using bonemeal.",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent"
  },
  {
    "descr": "BlockData: PointedDripstone",
    "static": true,
    "field": "POINTED_DRIPSTONE",
    "id": "org.bukkit.Material#POINTED_DRIPSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "STRIPE_SMALL",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_SMALL",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_BAMBOO_BLOCK",
    "id": "org.bukkit.Material#STRIPPED_BAMBOO_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MAP",
    "id": "org.bukkit.Material#MAP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set both the minimum (default 0) and maximum (default 360) angle of where\\na fish will appear after the wait time.\\n0 degrees is positive Z, 90 degrees is negative X.",
    "param-names": [
      "FishHook",
      "Min",
      "Max"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "float",
      "float"
    ],
    "method": "setLureAngle",
    "id": "org.bukkit.entity.FishHook#setLureAngle(float,float)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "static": true,
    "field": "LEGACY_CARROT_ITEM",
    "id": "org.bukkit.Material#LEGACY_CARROT_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the currently displayed player list header for this player.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPlayerListHeader",
    "id": "org.bukkit.entity.Player#getPlayerListHeader()",
    "class": "org.bukkit.entity.Player",
    "return": "java.lang.String"
  },
  {
    "descr": "When an entity drowns in water and a new entity spawns.",
    "static": true,
    "field": "DROWNED",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#DROWNED",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "The icon that is used for this advancement.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "getIcon",
    "id": "org.bukkit.advancement.AdvancementDisplay#getIcon()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "An assortment of building blocks including dirt, bricks, planks, ores\\nslabs, etc.",
    "static": true,
    "field": "BUILDING_BLOCKS",
    "id": "org.bukkit.inventory.CreativeCategory#BUILDING_BLOCKS",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "static": true,
    "field": "BEE_SPAWN_EGG",
    "id": "org.bukkit.Material#BEE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.SpawnCategory#values()",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory[]"
  },
  {
    "descr": "Get block data for block at corresponding coordinate in the chunk",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getData",
    "id": "org.bukkit.ChunkSnapshot#getData(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "int"
  },
  {
    "descr": "A flying snowball.",
    "static": true,
    "field": "SNOWBALL",
    "id": "org.bukkit.entity.EntityType#SNOWBALL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "FIRE_CORAL_BLOCK",
    "id": "org.bukkit.Material#FIRE_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the text background color.",
    "param-names": [
      "TextDisplay",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "org.bukkit.Color"
    ],
    "method": "setBackgroundColor",
    "id": "org.bukkit.entity.TextDisplay#setBackgroundColor(org.bukkit.Color)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "descr": "Sets the item the entity is holding in their main hand.",
    "param-names": [
      "EntityEquipment",
      "Item",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setItemInMainHand",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInMainHand(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "This method allows you to change the maximum stack size for an\\ninventory.\\n\\nCaveats:\\n\\nNot all inventories respect this value.\\nStacks larger than 127 may be clipped when the world is saved.\\nThis value is not guaranteed to be preserved; be sure to set it\\nbefore every time you want to set a slot over the max stack size.\\nStacks larger than the default max size for this type of inventory\\nmay not display correctly in the client.\\n",
    "param-names": [
      "Inventory",
      "Size"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "int"
    ],
    "method": "setMaxStackSize",
    "id": "org.bukkit.inventory.Inventory#setMaxStackSize(int)",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "When a silverfish spawns from a block",
    "static": true,
    "field": "SILVERFISH_BLOCK",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SILVERFISH_BLOCK",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets the original damage for the specified modifier, as defined at this\\nevent's construction.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "getOriginalDamage",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getOriginalDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "double"
  },
  {
    "static": true,
    "field": "BLOCK_SMALL_DRIPLEAF_STEP",
    "id": "org.bukkit.Sound#BLOCK_SMALL_DRIPLEAF_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_EAT",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_GRASS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_GRASS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": [
      "Result",
      "Source"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.material.MaterialData"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "ERODED_BADLANDS",
    "id": "org.bukkit.block.Biome#ERODED_BADLANDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "KELP",
    "id": "org.bukkit.Material#KELP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the Enchantment that was displayed as a hint to the player\\non the selected enchantment offer.",
    "method": "getEnchantmentHint",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getEnchantmentHint()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "EGG_CRACK",
    "id": "org.bukkit.Particle#EGG_CRACK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Uses ItemStack as DataType",
    "static": true,
    "field": "ITEM_CRACK",
    "id": "org.bukkit.Particle#ITEM_CRACK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_STEP",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "In an beacon inventory, the levels of the beacon",
    "static": true,
    "field": "LEVELS",
    "id": "org.bukkit.inventory.InventoryView.Property#LEVELS",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Returns the tone to id. Also returning the semitones.",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["byte"],
    "method": "getById",
    "id": "org.bukkit.Note.Tone#getById(byte)",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "descr": "This is the name of the specified AnimalTamer.",
    "param-names": ["AnimalTamer"],
    "param-types": ["org.bukkit.entity.AnimalTamer"],
    "method": "getName",
    "id": "org.bukkit.entity.AnimalTamer#getName()",
    "class": "org.bukkit.entity.AnimalTamer",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "CYAN_WOOL",
    "id": "org.bukkit.Material#CYAN_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SPREAD",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SPREAD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when an entity combusts.\\n\\nIf an Entity Combust event is cancelled, the entity will not combust.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent"
  },
  {
    "descr": "Get if this entity is in the process of converting to a Zoglin.",
    "param-names": ["Hoglin"],
    "param-types": ["org.bukkit.entity.Hoglin"],
    "method": "isConverting",
    "id": "org.bukkit.entity.Hoglin#isConverting()",
    "class": "org.bukkit.entity.Hoglin",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "YELLOW_WALL_BANNER",
    "id": "org.bukkit.Material#YELLOW_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the new data of the changed block. Must be of the same Material as\\nthe old one.",
    "param-names": ["New Data"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "setNewData",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#setNewData(org.bukkit.block.data.BlockData)",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_HURT",
    "id": "org.bukkit.Sound#ENTITY_CAT_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_TRAPDOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_TRAPDOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Makes this entity swing their main hand.\\nThis method does nothing if this entity does not have an animation for\\nswinging their main hand.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "swingMainHand",
    "id": "org.bukkit.entity.LivingEntity#swingMainHand()",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "BlockData: Levelled",
    "static": true,
    "field": "LAVA",
    "id": "org.bukkit.Material#LAVA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.TNTPrimeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent"
  },
  {
    "descr": "Sets the value of the 'rotation' property.",
    "param-names": [
      "Rotatable",
      "Rotation"
    ],
    "param-types": [
      "org.bukkit.block.data.Rotatable",
      "org.bukkit.block.BlockFace"
    ],
    "method": "setRotation",
    "id": "org.bukkit.block.data.Rotatable#setRotation(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.data.Rotatable"
  },
  {
    "descr": "Get if this entity is in the process of converting to a Drowned as a\\nresult of being underwater.",
    "param-names": ["Zombie"],
    "param-types": ["org.bukkit.entity.Zombie"],
    "method": "isConverting",
    "id": "org.bukkit.entity.Zombie#isConverting()",
    "class": "org.bukkit.entity.Zombie",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_DESTROY",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_DESTROY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_SANDSTONE_STAIRS",
    "id": "org.bukkit.Material#LEGACY_SANDSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if string is a valid game rule",
    "param-names": [
      "World",
      "Rule"
    ],
    "param-types": [
      "org.bukkit.World",
      "java.lang.String"
    ],
    "method": "isGameRule",
    "id": "org.bukkit.World#isGameRule(java.lang.String)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the item frame should be fixed or not.\\nWhen set to true it's not possible to destroy/move the frame (e.g. by\\ndamage, interaction, pistons, or missing supporting blocks), rotate the\\nitem or place/remove items.",
    "param-names": [
      "ItemFrame",
      "Fixed"
    ],
    "param-types": [
      "org.bukkit.entity.ItemFrame",
      "boolean"
    ],
    "method": "setFixed",
    "id": "org.bukkit.entity.ItemFrame#setFixed(boolean)",
    "class": "org.bukkit.entity.ItemFrame"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_SAPLING_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_SAPLING_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_BAT_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_BAT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the location at which the entity is spawning.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "BLOCK_WEEPING_VINES_BREAK",
    "id": "org.bukkit.Sound#BLOCK_WEEPING_VINES_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Return the ItemStack from the leg slot",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getLeggings",
    "id": "org.bukkit.inventory.PlayerInventory#getLeggings()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Increases damage dealt.",
    "static": true,
    "field": "INCREASE_DAMAGE",
    "id": "org.bukkit.potion.PotionEffectType#INCREASE_DAMAGE",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the value of the 'waterlogged' property.",
    "param-names": ["Waterlogged"],
    "param-types": ["org.bukkit.block.data.Waterlogged"],
    "method": "isWaterlogged",
    "id": "org.bukkit.block.data.Waterlogged#isWaterlogged()",
    "class": "org.bukkit.block.data.Waterlogged",
    "return": "boolean"
  },
  {
    "descr": "The raid is in progress.",
    "static": true,
    "field": "ONGOING",
    "id": "org.bukkit.Raid.RaidStatus#ONGOING",
    "class": "org.bukkit.Raid.RaidStatus",
    "return": "org.bukkit.Raid.RaidStatus"
  },
  {
    "descr": "Gets whether this snowman is in \"derp mode\", meaning it is not wearing a\\npumpkin.",
    "param-names": ["Snowman"],
    "param-types": ["org.bukkit.entity.Snowman"],
    "method": "isDerp",
    "id": "org.bukkit.entity.Snowman#isDerp()",
    "class": "org.bukkit.entity.Snowman",
    "return": "boolean"
  },
  {
    "descr": "Gets a player object by the given username.\\n\\nThis method may not return objects for offline players.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getPlayer",
    "id": "org.bukkit.Bukkit#getPlayer(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "BLACKSTONE_WALL",
    "id": "org.bukkit.Material#BLACKSTONE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cooldown before the allay can duplicate again.",
    "param-names": [
      "Allay",
      "Cooldown"
    ],
    "param-types": [
      "org.bukkit.entity.Allay",
      "long"
    ],
    "method": "setDuplicationCooldown",
    "id": "org.bukkit.entity.Allay#setDuplicationCooldown(long)",
    "class": "org.bukkit.entity.Allay"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PotionSplashEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent"
  },
  {
    "descr": "Checks the current waking state of this bat.\\n\\nThis does not imply any persistence of state past the method call.",
    "param-names": ["Bat"],
    "param-types": ["org.bukkit.entity.Bat"],
    "method": "isAwake",
    "id": "org.bukkit.entity.Bat#isAwake()",
    "class": "org.bukkit.entity.Bat",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "MUD_BRICK_STAIRS",
    "id": "org.bukkit.Material#MUD_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the source block involved in this event.",
    "method": "getSource",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ENTITY_MULE_CHEST",
    "id": "org.bukkit.Sound#ENTITY_MULE_CHEST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerChangedMainHandEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "VILLAGER_SPAWN_EGG",
    "id": "org.bukkit.Material#VILLAGER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get whether the lure enchantment should be applied to reduce the wait\\ntime.\\n\\nThe default is true.\\nLure reduces the wait time by 100 ticks (5 seconds) for each level of the\\nenchantment.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getApplyLure",
    "id": "org.bukkit.entity.FishHook#getApplyLure()",
    "class": "org.bukkit.entity.FishHook",
    "return": "boolean"
  },
  {
    "descr": "Get the type of this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "getType",
    "id": "org.bukkit.map.MapCursor#getType()",
    "class": "org.bukkit.map.MapCursor",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the Player that is breaking the block involved in this event.",
    "method": "getPlayer",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Check if the player is currently blocking (ie with a shield).",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "isBlocking",
    "id": "org.bukkit.entity.HumanEntity#isBlocking()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "The foot is the lower half of the bed.",
    "static": true,
    "field": "FOOT",
    "id": "org.bukkit.block.data.type.Bed.Part#FOOT",
    "class": "org.bukkit.block.data.type.Bed.Part",
    "return": "org.bukkit.block.data.type.Bed.Part"
  },
  {
    "static": true,
    "field": "ENDER_EYE",
    "id": "org.bukkit.Material#ENDER_EYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "STRING",
    "id": "org.bukkit.Material#STRING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_TADPOLE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_TADPOLE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks for existence of a variant tag indicating a specific fish will be\\nspawned.",
    "param-names": ["TropicalFishBucketMeta"],
    "param-types": ["org.bukkit.inventory.meta.TropicalFishBucketMeta"],
    "method": "hasVariant",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#hasVariant()",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta",
    "return": "boolean"
  },
  {
    "descr": "Represents an event that is called when a player right clicks an entity.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent"
  },
  {
    "descr": "Gets the format to use to display this chat message.\\n\\nWhen this event finishes execution, the first format parameter is the\\nPlayer#getDisplayName() and the second parameter is #getMessage()",
    "method": "getFormat",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getFormat()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_COPPER_PLACE",
    "id": "org.bukkit.Sound#BLOCK_COPPER_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIFIED_PIGLIN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIFIED_PIGLIN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_AIR",
    "id": "org.bukkit.Material#LEGACY_AIR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_FISHING_ROD",
    "id": "org.bukkit.Material#LEGACY_FISHING_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the amount of ticks until this entity will be converted to a stray\\nas a result of being frozen by a powdered snow block.\\n\\nWhen this reaches 0, the entity will be converted.",
    "param-names": ["Skeleton"],
    "param-types": ["org.bukkit.entity.Skeleton"],
    "method": "getConversionTime",
    "id": "org.bukkit.entity.Skeleton#getConversionTime()",
    "class": "org.bukkit.entity.Skeleton",
    "return": "int"
  },
  {
    "descr": "Construct the vector with provided float components.",
    "param-names": [
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "float",
      "float",
      "float"
    ],
    "id": "org.bukkit.util.Vector#Vector(float,float,float)",
    "class": "org.bukkit.util.Vector"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the maximum components of two vectors.",
    "param-names": [
      "V1",
      "V2"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "getMaximum",
    "id": "org.bukkit.util.Vector#getMaximum(org.bukkit.util.Vector,org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Create a smithing recipe to produce the specified result ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Base",
      "Addition"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "id": "org.bukkit.inventory.SmithingRecipe#SmithingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.SmithingRecipe"
  },
  {
    "static": true,
    "field": "LEGACY_RAILS",
    "id": "org.bukkit.Material#LEGACY_RAILS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TALKED_TO_VILLAGER",
    "id": "org.bukkit.Statistic#TALKED_TO_VILLAGER",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Mirrors this blockdata using the specified Mirror.\\n\\nThis has no effect on blocks that do not have any mirrorable states.",
    "param-names": [
      "BlockData",
      "Mirror"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.block.structure.Mirror"
    ],
    "method": "mirror",
    "id": "org.bukkit.block.data.BlockData#mirror(org.bukkit.block.structure.Mirror)",
    "class": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "GRAY_BANNER",
    "id": "org.bukkit.Material#GRAY_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_ROOTS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Reloads the whitelist from disk.",
    "static": true,
    "method": "reloadWhitelist",
    "id": "org.bukkit.Bukkit#reloadWhitelist()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "BLOCK_DRIPSTONE_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_DRIPSTONE_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the world's ticks per monster spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn monsters.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn monsters in\\nthis world on every tick.\\nA value of 400 will mean the server will attempt to spawn monsters\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, monsters spawning will be disabled for this world. We\\nrecommend using #setSpawnFlags(boolean, boolean) to control\\nthis instead.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Ticks Per Monster Spawns"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setTicksPerMonsterSpawns",
    "id": "org.bukkit.World#setTicksPerMonsterSpawns(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Adds a ban to this list. If a previous ban exists, this will\\nupdate the previous entry.",
    "param-names": [
      "BanList",
      "Target",
      "Reason",
      "Expires",
      "Source"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.Object",
      "java.lang.String",
      "java.time.Instant",
      "java.lang.String"
    ],
    "method": "addBan",
    "id": "org.bukkit.BanList#addBan(T,java.lang.String,java.time.Instant,java.lang.String)",
    "class": "org.bukkit.BanList",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the current ItemStack on the cursor.",
    "method": "getCursor",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getCursor()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the player's estimated ping in milliseconds.\\nIn Vanilla this value represents a weighted average of the response time\\nto application layer ping packets sent. This value does not represent the\\nnetwork round trip time and as such may have less granularity and be\\nimpacted by other sources. For these reasons it should not be used\\nfor anti-cheat purposes. Its recommended use is only as a\\nqualitative indicator of connection quality (Vanilla uses it for\\nthis purpose in the tab list).",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPing",
    "id": "org.bukkit.entity.Player#getPing()",
    "class": "org.bukkit.entity.Player",
    "return": "int"
  },
  {
    "descr": "Get the name of this criteria (its unique id).",
    "param-names": ["Criteria"],
    "param-types": ["org.bukkit.scoreboard.Criteria"],
    "method": "getName",
    "id": "org.bukkit.scoreboard.Criteria#getName()",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Darkens the sky like during fighting a wither.",
    "static": true,
    "field": "DARKEN_SKY",
    "id": "org.bukkit.boss.BarFlag#DARKEN_SKY",
    "class": "org.bukkit.boss.BarFlag",
    "return": "org.bukkit.boss.BarFlag"
  },
  {
    "descr": "Returns the bucket used in this event",
    "method": "getBucket",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerLocaleChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLocaleChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_CHAINMAIL_HELMET",
    "id": "org.bukkit.Material#LEGACY_CHAINMAIL_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets a set of recipients that this chat message will be displayed to.\\n\\nThe set returned is not guaranteed to be mutable and may auto-populate\\non access. Any listener accessing the returned set should be aware that\\nit may reduce performance for a lazy set implementation.\\n\\nListeners should be aware that modifying the list may throw UnsupportedOperationException if the event caller provides an\\nunmodifiable set.",
    "method": "getRecipients",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getRecipients()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_AMBIENT_LAND",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_AMBIENT_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MINECART_MOB_SPAWNER",
    "id": "org.bukkit.entity.EntityType#MINECART_MOB_SPAWNER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the display ItemStack for the fireball.",
    "param-names": [
      "SizedFireball",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.SizedFireball",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setDisplayItem",
    "id": "org.bukkit.entity.SizedFireball#setDisplayItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.SizedFireball"
  },
  {
    "descr": "Gets whether this ClickType indicates that the shift key was pressed\\ndown when the click was made.",
    "param-names": ["ClickType"],
    "param-types": ["org.bukkit.event.inventory.ClickType"],
    "method": "isShiftClick",
    "id": "org.bukkit.event.inventory.ClickType#isShiftClick()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCKFISH",
    "id": "org.bukkit.entity.TropicalFish.Pattern#BLOCKFISH",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Fluid#valueOf(java.lang.String)",
    "class": "org.bukkit.Fluid",
    "return": "org.bukkit.Fluid"
  },
  {
    "descr": "Set cook time.\\nThis is the amount of time the item has been cooking for.",
    "param-names": [
      "Furnace",
      "Cook Time"
    ],
    "param-types": [
      "org.bukkit.block.Furnace",
      "short"
    ],
    "method": "setCookTime",
    "id": "org.bukkit.block.Furnace#setCookTime(short)",
    "class": "org.bukkit.block.Furnace"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "GLOW",
    "id": "org.bukkit.Particle#GLOW",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "BAMBOO_TRAPDOOR",
    "id": "org.bukkit.Material#BAMBOO_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the BlockState at the given coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockState",
    "id": "org.bukkit.RegionAccessor#getBlockState(int,int,int)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Gets the height of the world.",
    "param-names": ["BlockChangeDelegate"],
    "param-types": ["org.bukkit.BlockChangeDelegate"],
    "method": "getHeight",
    "id": "org.bukkit.BlockChangeDelegate#getHeight()",
    "class": "org.bukkit.BlockChangeDelegate",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the Block radius to search in for available portals.",
    "param-names": ["Search Radius"],
    "param-types": ["int"],
    "method": "setSearchRadius",
    "id": "org.bukkit.event.entity.EntityPortalEvent#setSearchRadius(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent"
  },
  {
    "static": true,
    "field": "IRON_PICKAXE",
    "id": "org.bukkit.Material#IRON_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_WOOL",
    "id": "org.bukkit.Material#LIGHT_GRAY_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SKELETON_SPAWN_EGG",
    "id": "org.bukkit.Material#SKELETON_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.World.Environment#values()",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment[]"
  },
  {
    "static": true,
    "field": "OCEAN_RUIN_WARM_ARCHAEOLOGY",
    "id": "org.bukkit.loot.LootTables#OCEAN_RUIN_WARM_ARCHAEOLOGY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_SHULKER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_SHULKER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when the GameMode of the player is changed.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent"
  },
  {
    "static": true,
    "field": "COMPOSTER",
    "id": "org.bukkit.Particle#COMPOSTER",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Removes multiple instances of an ingredient from the list. If there are\\nless instances then specified, all will be removed. Only removes exact\\nmatches, with a data value of 0.",
    "param-names": [
      "ShapelessRecipe",
      "Count",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "int",
      "org.bukkit.Material"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(int,org.bukkit.Material)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Gets the name of this Objective",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getName",
    "id": "org.bukkit.scoreboard.Objective#getName()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Placed on floor.",
    "static": true,
    "field": "FLOOR",
    "id": "org.bukkit.block.data.type.Bell.Attachment#FLOOR",
    "class": "org.bukkit.block.data.type.Bell.Attachment",
    "return": "org.bukkit.block.data.type.Bell.Attachment"
  },
  {
    "descr": "The player is not allowed to log in, due to them not being on the\\nwhite list",
    "static": true,
    "field": "KICK_WHITELIST",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#KICK_WHITELIST",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "The crystal beams remain directed upwards.",
    "static": true,
    "field": "PREPARING_TO_SUMMON_PILLARS",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#PREPARING_TO_SUMMON_PILLARS",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "When a slime splits into multiple smaller slimes.",
    "static": true,
    "field": "SPLIT",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#SPLIT",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "SPRUCE_LOG",
    "id": "org.bukkit.Material#SPRUCE_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item being dispensed.",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setItem",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#setItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent"
  },
  {
    "static": true,
    "field": "BUST",
    "id": "org.bukkit.Art#BUST",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "CRIT",
    "id": "org.bukkit.Particle#CRIT",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Spawn an entity of a specific class at the given Location",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Clazz"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "java.lang.Class"
    ],
    "method": "spawn",
    "id": "org.bukkit.RegionAccessor#<T>spawn(org.bukkit.Location,java.lang.Class<T>)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_WORRIED_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PANDA_WORRIED_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the item count being retrieved",
    "method": "getItemAmount",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getItemAmount()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "int"
  },
  {
    "descr": "Gets the block lighting component of this brightness.",
    "param-names": ["Display.Brightness"],
    "param-types": ["org.bukkit.entity.Display.Brightness"],
    "method": "getBlockLight",
    "id": "org.bukkit.entity.Display.Brightness#getBlockLight()",
    "class": "org.bukkit.entity.Display.Brightness",
    "return": "int"
  },
  {
    "descr": "Gets the ItemStack currently in the clicked slot.",
    "method": "getCurrentItem",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getCurrentItem()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Represents the\\norg.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS the\\n#getKiller() entity has on their equipped item.\\nThis value is only set via\\nLootContext.Builder#lootingModifier(int). If not set, the\\n#getKiller() entity's looting level will be used instead.",
    "param-names": ["LootContext"],
    "param-types": ["org.bukkit.loot.LootContext"],
    "method": "getLootingModifier",
    "id": "org.bukkit.loot.LootContext#getLootingModifier()",
    "class": "org.bukkit.loot.LootContext",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Loot table unluck.",
    "static": true,
    "field": "UNLUCK",
    "id": "org.bukkit.potion.PotionEffectType#UNLUCK",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockIgniteEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the ItemStack currently in the clicked slot.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCurrentItem",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#setCurrentItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent"
  },
  {
    "descr": "Set the maximum amount of entities this block can hold.",
    "param-names": [
      "EntityBlockStorage",
      "Max"
    ],
    "param-types": [
      "org.bukkit.block.EntityBlockStorage",
      "int"
    ],
    "method": "setMaxEntities",
    "id": "org.bukkit.block.EntityBlockStorage#setMaxEntities(int)",
    "class": "org.bukkit.block.EntityBlockStorage"
  },
  {
    "static": true,
    "field": "SHEEP_LIME",
    "id": "org.bukkit.loot.LootTables#SHEEP_LIME",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "NETHER_BRICKS",
    "id": "org.bukkit.Material#NETHER_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_BOTTLE_FILL_DRAGONBREATH",
    "id": "org.bukkit.Sound#ITEM_BOTTLE_FILL_DRAGONBREATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the amount of ticks that this mob has exited the bounds of a village\\nas a raid participant.\\n\\nThis value is increased only when the mob has had no action for 2,400 ticks\\n(according to #getNoActionTicks()). Once both the no action ticks have\\nreached that value and the ticks outside a raid exceeds 30, the mob will be\\nexpelled from the raid.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "getTicksOutsideRaid",
    "id": "org.bukkit.entity.Raider#getTicksOutsideRaid()",
    "class": "org.bukkit.entity.Raider",
    "return": "int"
  },
  {
    "static": true,
    "field": "WITHER_SPAWN_EGG",
    "id": "org.bukkit.Material#WITHER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a list of all players in this World",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getPlayers",
    "id": "org.bukkit.World#getPlayers()",
    "class": "org.bukkit.World",
    "return": "java.util.List"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Axolotl.Variant#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "When the entity's target has died, and so it no longer targets it",
    "static": true,
    "field": "TARGET_DIED",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#TARGET_DIED",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "This event is called when the player drags an item in their cursor across\\nthe inventory. The ItemStack is distributed across the slots the\\nHumanEntity dragged over. The method of distribution is described by the\\nDragType returned by #getType().\\n\\nCanceling this event will result in none of the changes described in\\n#getNewItems() being applied to the Inventory.\\n\\nBecause InventoryDragEvent occurs within a modification of the Inventory,\\nnot all Inventory related methods are safe to use.\\n\\nThe following should never be invoked by an EventHandler for\\nInventoryDragEvent using the HumanEntity or InventoryView associated with\\nthis event.\\n\\nHumanEntity#closeInventory()\\nHumanEntity#openInventory(Inventory)\\nHumanEntity#openWorkbench(Location, boolean)\\nHumanEntity#openEnchanting(Location, boolean)\\nInventoryView#close()\\n\\nTo invoke one of these methods, schedule a task using\\nBukkitScheduler#runTask(Plugin, Runnable), which will run the task\\non the next tick.  Also be aware that this is not an exhaustive list, and\\nother methods could potentially create issues as well.\\n\\nAssuming the EntityHuman associated with this event is an instance of a\\nPlayer, manipulating the MaxStackSize or contents of an Inventory will\\nrequire an Invocation of Player#updateInventory().\\n\\nAny modifications to slots that are modified by the results of this\\nInventoryDragEvent will be overwritten. To change these slots, this event\\nshould be cancelled and the changes applied. Alternatively, scheduling a\\ntask using BukkitScheduler#runTask(Plugin, Runnable), which would\\nexecute the task on the next tick, would work as well.",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent"
  },
  {
    "descr": "Gets the tongue target of this frog.",
    "param-names": ["Frog"],
    "param-types": ["org.bukkit.entity.Frog"],
    "method": "getTongueTarget",
    "id": "org.bukkit.entity.Frog#getTongueTarget()",
    "class": "org.bukkit.entity.Frog",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.EntityType#values()",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType[]"
  },
  {
    "static": true,
    "field": "UI_STONECUTTER_TAKE_RESULT",
    "id": "org.bukkit.Sound#UI_STONECUTTER_TAKE_RESULT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Furnace",
    "static": true,
    "field": "BLAST_FURNACE",
    "id": "org.bukkit.Material#BLAST_FURNACE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When the target is forgotten for whatever reason.",
    "static": true,
    "field": "FORGOT_TARGET",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#FORGOT_TARGET",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "static": true,
    "field": "LEGACY_PINK_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_PINK_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the spawn location of the world",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Angle"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "int",
      "float"
    ],
    "method": "setSpawnLocation",
    "id": "org.bukkit.World#setSpawnLocation(int,int,int,float)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Called when an entity is about to be replaced by another entity.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_INGOT",
    "id": "org.bukkit.Material#LEGACY_GOLD_INGOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_PUMPKIN_PIE",
    "id": "org.bukkit.Material#LEGACY_PUMPKIN_PIE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the namespaced key of the discovered recipe.",
    "method": "getRecipe",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "Whether the server should skip checking player speed when the player is\\nwearing elytra.",
    "static": true,
    "field": "DISABLE_ELYTRA_MOVEMENT_CHECK",
    "id": "org.bukkit.GameRule#DISABLE_ELYTRA_MOVEMENT_CHECK",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Jungle tree with cocoa plants; 1 block wide",
    "static": true,
    "field": "COCOA_TREE",
    "id": "org.bukkit.TreeType#COCOA_TREE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "static": true,
    "field": "BLOCK_WEEPING_VINES_STEP",
    "id": "org.bukkit.Sound#BLOCK_WEEPING_VINES_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "BAMBOO_HANGING_SIGN",
    "id": "org.bukkit.Material#BAMBOO_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when a World is saved.",
    "event": true,
    "class": "org.bukkit.event.world.WorldSaveEvent"
  },
  {
    "descr": "Initialize the map cursor.",
    "param-names": [
      "X",
      "Y",
      "Direction",
      "Type",
      "Visible"
    ],
    "param-types": [
      "byte",
      "byte",
      "byte",
      "byte",
      "boolean"
    ],
    "id": "org.bukkit.map.MapCursor#MapCursor(byte,byte,byte,byte,boolean)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "A star-shaped effect.",
    "static": true,
    "field": "STAR",
    "id": "org.bukkit.FireworkEffect.Type#STAR",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "static": true,
    "field": "LEGACY_KNOWLEDGE_BOOK",
    "id": "org.bukkit.Material#LEGACY_KNOWLEDGE_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the horse's color.\\n\\nAttempting to set a color for any donkey, mule, skeleton horse or\\nundead horse will not result in a change.",
    "param-names": [
      "Horse",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.Horse",
      "org.bukkit.entity.Horse.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.entity.Horse#setColor(org.bukkit.entity.Horse.Color)",
    "class": "org.bukkit.entity.Horse"
  },
  {
    "descr": "Gets the minimum allowed value of the 'layers' property.",
    "param-names": ["Snow"],
    "param-types": ["org.bukkit.block.data.type.Snow"],
    "method": "getMinimumLayers",
    "id": "org.bukkit.block.data.type.Snow#getMinimumLayers()",
    "class": "org.bukkit.block.data.type.Snow",
    "return": "int"
  },
  {
    "descr": "Create a cooking recipe to craft the specified ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Source",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.CookingRecipe#CookingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material,float,int)",
    "class": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "descr": "Block ignition caused by an Ender Crystal.",
    "static": true,
    "field": "ENDER_CRYSTAL",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#ENDER_CRYSTAL",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerRegisterChannelEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRegisterChannelEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Remove the specified stored enchantment from this item meta.",
    "param-names": [
      "EnchantmentStorageMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.EnchantmentStorageMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "removeStoredEnchant",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#removeStoredEnchant(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the sound to play if the skull is placed on a note block.\\n\\nNote: This only works for player heads. For other heads,\\nsee org.bukkit.Instrument.",
    "param-names": ["SkullMeta"],
    "param-types": ["org.bukkit.inventory.meta.SkullMeta"],
    "method": "getNoteBlockSound",
    "id": "org.bukkit.inventory.meta.SkullMeta#getNoteBlockSound()",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "POLISHED_BLACKSTONE_SLAB",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Makes entity start or stop swimming.\\nThis may have unexpected results if the entity is not in water.",
    "param-names": [
      "LivingEntity",
      "Swimming"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setSwimming",
    "id": "org.bukkit.entity.LivingEntity#setSwimming(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockFromToEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Bastion remnant.",
    "static": true,
    "field": "BASTION_REMNANT",
    "id": "org.bukkit.StructureType#BASTION_REMNANT",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_AMBIENT_WATER",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_AMBIENT_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MEADOW",
    "id": "org.bukkit.block.Biome#MEADOW",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "param-names": ["Block"],
    "param-types": ["org.bukkit.Location"],
    "id": "org.bukkit.Vibration.Destination.BlockDestination#BlockDestination(org.bukkit.Location)",
    "class": "org.bukkit.Vibration.Destination.BlockDestination"
  },
  {
    "descr": "Sets the transformation applied to this display",
    "param-names": [
      "Display",
      "Transformation"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "org.bukkit.util.Transformation"
    ],
    "method": "setTransformation",
    "id": "org.bukkit.entity.Display#setTransformation(org.bukkit.util.Transformation)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "When beacon effects get applied due to the entity being nearby.",
    "static": true,
    "field": "BEACON",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#BEACON",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BLUE_SHULKER_BOX",
    "id": "org.bukkit.Material#BLUE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_SNIFF",
    "id": "org.bukkit.Sound#ENTITY_FOX_SNIFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The sound played / particles shown when an eye of ender is placed into an\\nender portal frame.",
    "static": true,
    "field": "END_PORTAL_FRAME_FILL",
    "id": "org.bukkit.Effect#END_PORTAL_FRAME_FILL",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "RESONATE_5",
    "id": "org.bukkit.GameEvent#RESONATE_5",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "SHEEP_LIGHT_BLUE",
    "id": "org.bukkit.loot.LootTables#SHEEP_LIGHT_BLUE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Performs a ray trace that checks for block collisions using the blocks'\\nprecise collision shapes.\\n\\nThis takes collisions with passable blocks into account.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "World",
      "Start",
      "Direction",
      "Max Distance",
      "Fluid Collision Mode"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.util.Vector",
      "double",
      "org.bukkit.FluidCollisionMode"
    ],
    "method": "rayTraceBlocks",
    "id": "org.bukkit.World#rayTraceBlocks(org.bukkit.Location,org.bukkit.util.Vector,double,org.bukkit.FluidCollisionMode)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "When the potion effect is added because the entity didn't have it's\\ntype.",
    "static": true,
    "field": "ADDED",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Action#ADDED",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Action",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Action"
  },
  {
    "static": true,
    "field": "SIDEBAR_DARK_BLUE",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_DARK_BLUE",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Sound#values()",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound[]"
  },
  {
    "static": true,
    "field": "BLOCK_LEVER_CLICK",
    "id": "org.bukkit.Sound#BLOCK_LEVER_CLICK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Performs the specified EntityEffect for this entity.\\n\\nThis will be viewable to all players near the entity.\\n\\nIf the effect is not applicable to this class of entity, it will not play.",
    "param-names": [
      "Entity",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.EntityEffect"
    ],
    "method": "playEffect",
    "id": "org.bukkit.entity.Entity#playEffect(org.bukkit.EntityEffect)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerLoginEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "HOSTILE",
    "id": "org.bukkit.SoundCategory#HOSTILE",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "descr": "Remove a passenger from the vehicle.",
    "param-names": [
      "Entity",
      "Passenger"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.entity.Entity"
    ],
    "method": "removePassenger",
    "id": "org.bukkit.entity.Entity#removePassenger(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Get the hand used to place the entity.",
    "method": "getHand",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Gets the highest non-air coordinate at the given coordinates",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int"
    ],
    "method": "getHighestBlockYAt",
    "id": "org.bukkit.ChunkSnapshot#getHighestBlockYAt(int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "int"
  },
  {
    "descr": "Ring this bell in the direction that the bell is facing. This will call a\\nBellRingEvent.",
    "param-names": [
      "Bell",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.block.Bell",
      "org.bukkit.entity.Entity"
    ],
    "method": "ring",
    "id": "org.bukkit.block.Bell#ring(org.bukkit.entity.Entity)",
    "class": "org.bukkit.block.Bell",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "LILAC",
    "id": "org.bukkit.Material#LILAC",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get if this entity is in the process of converting to a Zombified Piglin.",
    "param-names": ["PiglinAbstract"],
    "param-types": ["org.bukkit.entity.PiglinAbstract"],
    "method": "isConverting",
    "id": "org.bukkit.entity.PiglinAbstract#isConverting()",
    "class": "org.bukkit.entity.PiglinAbstract",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_WITCH_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_WITCH_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Stores details for players attempting to log in.\\n\\nThis event is asynchronous, and not run using main thread.",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "CHISELED_POLISHED_BLACKSTONE",
    "id": "org.bukkit.Material#CHISELED_POLISHED_BLACKSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SHULKER_BOX_OPEN",
    "id": "org.bukkit.Sound#BLOCK_SHULKER_BOX_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the width of the given text as it would be rendered using this\\nfont.",
    "param-names": [
      "MapFont",
      "Text"
    ],
    "param-types": [
      "org.bukkit.map.MapFont",
      "java.lang.String"
    ],
    "method": "getWidth",
    "id": "org.bukkit.map.MapFont#getWidth(java.lang.String)",
    "class": "org.bukkit.map.MapFont",
    "return": "int"
  },
  {
    "descr": "Gets the data for this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getBlockData",
    "id": "org.bukkit.block.BlockState#getBlockData()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "PUMPKIN_STEM",
    "id": "org.bukkit.Material#PUMPKIN_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "SPECTRAL_ARROW",
    "id": "org.bukkit.Material#SPECTRAL_ARROW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The smoke when taming a wolf fails.",
    "static": true,
    "field": "WOLF_SMOKE",
    "id": "org.bukkit.EntityEffect#WOLF_SMOKE",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Get the HumanEntity who killed the #getLootedEntity().\\nCan be null.",
    "param-names": ["LootContext"],
    "param-types": ["org.bukkit.loot.LootContext"],
    "method": "getKiller",
    "id": "org.bukkit.loot.LootContext#getKiller()",
    "class": "org.bukkit.loot.LootContext",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.ServerCommandEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: RedstoneWire",
    "static": true,
    "field": "REDSTONE_WIRE",
    "id": "org.bukkit.Material#REDSTONE_WIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if this block is empty.\\n\\nA block is considered empty when #getType() returns Material#AIR.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "isEmpty",
    "id": "org.bukkit.block.Block#isEmpty()",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Called when a projectile hits an object",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent"
  },
  {
    "static": true,
    "field": "ENTITY_SALMON_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SALMON_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Indicate the spawn was set by the player interacting with a bed.",
    "static": true,
    "field": "BED",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#BED",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "descr": "Blocks and items typically used for decorative purposes including\\ncandles, saplings, flora, fauna, fences, walls, carpets, etc.",
    "static": true,
    "field": "DECORATIONS",
    "id": "org.bukkit.inventory.CreativeCategory#DECORATIONS",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "static": true,
    "field": "HOWL_POTTERY_SHERD",
    "id": "org.bukkit.Material#HOWL_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the default spawn Location of this world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getSpawnLocation",
    "id": "org.bukkit.World#getSpawnLocation()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#values()",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause[]"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_RAVAGER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_RAVAGER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the number of ticks until the minecart runs out of fuel.",
    "param-names": ["PoweredMinecart"],
    "param-types": ["org.bukkit.entity.minecart.PoweredMinecart"],
    "method": "getFuel",
    "id": "org.bukkit.entity.minecart.PoweredMinecart#getFuel()",
    "class": "org.bukkit.entity.minecart.PoweredMinecart",
    "return": "int"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a left\\nclick.",
    "method": "isLeftClick",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#isLeftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "ACACIA_HANGING_SIGN",
    "id": "org.bukkit.Material#ACACIA_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_LOOM",
    "id": "org.bukkit.Statistic#INTERACT_WITH_LOOM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the current type of this cat.",
    "param-names": ["Cat"],
    "param-types": ["org.bukkit.entity.Cat"],
    "method": "getCatType",
    "id": "org.bukkit.entity.Cat#getCatType()",
    "class": "org.bukkit.entity.Cat",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "This event is called when a player clicks the button to take a book of a\\nLectern. If this event is cancelled the book remains on the lectern.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent"
  },
  {
    "static": true,
    "field": "PERSIAN",
    "id": "org.bukkit.entity.Cat.Type#PERSIAN",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Get the minimum angle (in degrees, 0 being positive Z 90 being negative\\nX) of where a fish will appear after the wait time.\\n\\nThe default is 0 degrees.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getMinLureAngle",
    "id": "org.bukkit.entity.FishHook#getMinLureAngle()",
    "class": "org.bukkit.entity.FishHook",
    "return": "float"
  },
  {
    "descr": "Ripe stage",
    "static": true,
    "field": "RIPE",
    "id": "org.bukkit.CropState#RIPE",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "Gets the chunk at the represented location",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getChunk",
    "id": "org.bukkit.Location#getChunk()",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "field": "CRACKED_POLISHED_BLACKSTONE_BRICKS",
    "id": "org.bukkit.Material#CRACKED_POLISHED_BLACKSTONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.raid.RaidFinishEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "FOX",
    "id": "org.bukkit.loot.LootTables#FOX",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_HEARTBEAT",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_HEARTBEAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Damage caused when attacked by a projectile.\\n\\nDamage: variable",
    "static": true,
    "field": "PROJECTILE",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#PROJECTILE",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityTransformEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when a portal is created",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent"
  },
  {
    "static": true,
    "field": "LEGACY_WHEAT",
    "id": "org.bukkit.Material#LEGACY_WHEAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SOUND",
    "id": "org.bukkit.Effect.Type#SOUND",
    "class": "org.bukkit.Effect.Type",
    "return": "org.bukkit.Effect.Type"
  },
  {
    "static": true,
    "field": "TWISTING_VINES_PLANT",
    "id": "org.bukkit.Material#TWISTING_VINES_PLANT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the team friendly fire state",
    "param-names": [
      "Team",
      "Enabled"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "boolean"
    ],
    "method": "setAllowFriendlyFire",
    "id": "org.bukkit.scoreboard.Team#setAllowFriendlyFire(boolean)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "DARK_OAK_BUTTON",
    "id": "org.bukkit.Material#DARK_OAK_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if this meta has an effect.",
    "param-names": ["FireworkEffectMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkEffectMeta"],
    "method": "hasEffect",
    "id": "org.bukkit.inventory.meta.FireworkEffectMeta#hasEffect()",
    "class": "org.bukkit.inventory.meta.FireworkEffectMeta",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "boolean"
  },
  {
    "descr": "Some entities cannot be spawned using World#spawnEntity(Location, EntityType) or World#spawn(Location, Class), usually because they require additional\\ninformation in order to spawn.",
    "param-names": ["EntityType"],
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "isSpawnable",
    "id": "org.bukkit.entity.EntityType#isSpawnable()",
    "class": "org.bukkit.entity.EntityType",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Set the shape of this recipe to the specified rows. Each character\\nrepresents a different ingredient; exactly what each character\\nrepresents is set separately. The first row supplied corresponds with\\nthe upper most part of the recipe on the workbench e.g. if all three\\nrows are supplies the first string represents the top row on the\\nworkbench.",
    "param-names": [
      "ShapedRecipe",
      "Shape"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "java.lang.String[]"
    ],
    "method": "shape",
    "id": "org.bukkit.inventory.ShapedRecipe#shape(java.lang.String...)",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "GRAY_CANDLE",
    "id": "org.bukkit.Material#GRAY_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_PICKAXE",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RABBIT",
    "id": "org.bukkit.Material#RABBIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This method retrieves the amount of experience to be created.\\n\\nThe number indicates a total amount to be divided into orbs.",
    "method": "getExperience",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getExperience()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_GENERIC",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_GENERIC",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get whether or not the consumable item should be consumed in this event.",
    "method": "shouldConsumeItem",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#shouldConsumeItem()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_SLAB2",
    "id": "org.bukkit.Material#LEGACY_STONE_SLAB2",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the speed at which the given player would break this block, taking\\ninto account tools, potion effects, whether or not the player is in\\nwater, enchantments, etc.\\nThe returned value is the amount of progress made in breaking the block\\neach tick. When the total breaking progress reaches 1.0f, the\\nblock is broken. Note that the break speed can change in the course of\\nbreaking a block, e.g. if a potion effect is applied or expires, or the\\nplayer jumps/enters water.",
    "param-names": [
      "Block",
      "Player"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.entity.Player"
    ],
    "method": "getBreakSpeed",
    "id": "org.bukkit.block.Block#getBreakSpeed(org.bukkit.entity.Player)",
    "class": "org.bukkit.block.Block",
    "return": "float"
  },
  {
    "descr": "Gets the entity that was sheared.",
    "method": "getEntity",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Set the org.bukkit.entity.HumanEntity that killed\\n#getLootedEntity(). This entity will be used to get the\\nlooting level if #lootingModifier(int) is not set.",
    "param-names": [
      "LootContext.Builder",
      "Killer"
    ],
    "param-types": [
      "org.bukkit.loot.LootContext.Builder",
      "org.bukkit.entity.HumanEntity"
    ],
    "method": "killer",
    "id": "org.bukkit.loot.LootContext.Builder#killer(org.bukkit.entity.HumanEntity)",
    "class": "org.bukkit.loot.LootContext.Builder",
    "return": "org.bukkit.loot.LootContext.Builder"
  },
  {
    "descr": "Set the thrower of this item.\\nThe thrower is the entity which dropped the item. This affects the\\ntrigger criteria for item pickups, for things such as advancements.",
    "param-names": [
      "Item",
      "Uuid"
    ],
    "param-types": [
      "org.bukkit.entity.Item",
      "java.util.UUID"
    ],
    "method": "setThrower",
    "id": "org.bukkit.entity.Item#setThrower(java.util.UUID)",
    "class": "org.bukkit.entity.Item"
  },
  {
    "static": true,
    "field": "TURTLE",
    "id": "org.bukkit.loot.LootTables#TURTLE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "SLOWNESS",
    "id": "org.bukkit.potion.PotionType#SLOWNESS",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "LEGACY_CARROT_STICK",
    "id": "org.bukkit.Material#LEGACY_CARROT_STICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_STEM_STEP",
    "id": "org.bukkit.Sound#BLOCK_STEM_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Mansions (also known as woodland mansions) are massive house structures\\nthat generate in dark forests, containing a wide variety of rooms.\\n\\nThey are the only place where evokers, vindicators, and vexes spawn\\nnaturally (but only once)",
    "static": true,
    "field": "WOODLAND_MANSION",
    "id": "org.bukkit.StructureType#WOODLAND_MANSION",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "static": true,
    "field": "SWEET_BERRIES",
    "id": "org.bukkit.Material#SWEET_BERRIES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_FIRE_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_FIRE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the number of ticks until the minecart runs out of fuel.",
    "param-names": [
      "PoweredMinecart",
      "Fuel"
    ],
    "param-types": [
      "org.bukkit.entity.minecart.PoweredMinecart",
      "int"
    ],
    "method": "setFuel",
    "id": "org.bukkit.entity.minecart.PoweredMinecart#setFuel(int)",
    "class": "org.bukkit.entity.minecart.PoweredMinecart"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the item currently being worn by the armor stand on its legs.",
    "param-names": [
      "ArmorStand",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setLeggings",
    "id": "org.bukkit.entity.ArmorStand#setLeggings(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Gets the text alignment for this display.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "getAlignment",
    "id": "org.bukkit.entity.TextDisplay#getAlignment()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "org.bukkit.entity.TextDisplay.TextAlignment"
  },
  {
    "descr": "Get the visibility status of this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "isVisible",
    "id": "org.bukkit.map.MapCursor#isVisible()",
    "class": "org.bukkit.map.MapCursor",
    "return": "boolean"
  },
  {
    "descr": "Gets a new Scoreboard to be tracked by the server. This scoreboard will\\nbe tracked as long as a reference is kept, either by a player or by a\\nplugin.",
    "param-names": ["ScoreboardManager"],
    "param-types": ["org.bukkit.scoreboard.ScoreboardManager"],
    "method": "getNewScoreboard",
    "id": "org.bukkit.scoreboard.ScoreboardManager#getNewScoreboard()",
    "class": "org.bukkit.scoreboard.ScoreboardManager",
    "return": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "descr": "Release all the entities currently stored in the block.",
    "param-names": ["EntityBlockStorage"],
    "param-types": ["org.bukkit.block.EntityBlockStorage"],
    "method": "releaseEntities",
    "id": "org.bukkit.block.EntityBlockStorage#releaseEntities()",
    "class": "org.bukkit.block.EntityBlockStorage",
    "return": "java.util.List"
  },
  {
    "descr": "Sends this sender multiple messages",
    "param-names": [
      "CommandSender",
      "Messages"
    ],
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.String[]"
    ],
    "method": "sendMessage",
    "id": "org.bukkit.command.CommandSender#sendMessage(java.lang.String...)",
    "class": "org.bukkit.command.CommandSender"
  },
  {
    "descr": "Sets the complete data for this block",
    "param-names": [
      "Block",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.block.Block#setBlockData(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.block.Block"
  },
  {
    "descr": "Get the recipe to replenish.",
    "method": "getRecipe",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Gets the block at the given offsets",
    "param-names": [
      "Block",
      "Mod X",
      "Mod Y",
      "Mod Z"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "int",
      "int",
      "int"
    ],
    "method": "getRelative",
    "id": "org.bukkit.block.Block#getRelative(int,int,int)",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the value of the 'shape' property.",
    "param-names": ["Stairs"],
    "param-types": ["org.bukkit.block.data.type.Stairs"],
    "method": "getShape",
    "id": "org.bukkit.block.data.type.Stairs#getShape()",
    "class": "org.bukkit.block.data.type.Stairs",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "static": true,
    "field": "GUNPOWDER",
    "id": "org.bukkit.Material#GUNPOWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "PINK_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#PINK_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_HANGING_SIGN_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_HANGING_SIGN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the passenger of a vehicle.",
    "param-names": [
      "Entity",
      "Passenger"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.entity.Entity"
    ],
    "method": "setPassenger",
    "id": "org.bukkit.entity.Entity#setPassenger(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Sets the living entity's current no damage ticks.",
    "param-names": [
      "LivingEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setNoDamageTicks",
    "id": "org.bukkit.entity.LivingEntity#setNoDamageTicks(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Sets the owner of this item.\\nOther entities will not be able to pickup this item when an owner is set.",
    "param-names": [
      "Item",
      "Owner"
    ],
    "param-types": [
      "org.bukkit.entity.Item",
      "java.util.UUID"
    ],
    "method": "setOwner",
    "id": "org.bukkit.entity.Item#setOwner(java.util.UUID)",
    "class": "org.bukkit.entity.Item"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_PLATE",
    "id": "org.bukkit.Material#LEGACY_WOOD_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BRUSH",
    "id": "org.bukkit.Material#BRUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_ZOGLIN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ZOGLIN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Ring this bell. This will call a BellRingEvent.",
    "param-names": [
      "Bell",
      "Entity",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.block.Bell",
      "org.bukkit.entity.Entity",
      "org.bukkit.block.BlockFace"
    ],
    "method": "ring",
    "id": "org.bukkit.block.Bell#ring(org.bukkit.entity.Entity,org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Bell",
    "return": "boolean"
  },
  {
    "descr": "Get the Recipe for the given key.",
    "param-names": ["Recipe Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getRecipe",
    "id": "org.bukkit.Bukkit#getRecipe(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Recipe"
  },
  {
    "static": true,
    "field": "BLACK_CARPET",
    "id": "org.bukkit.Material#BLACK_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the lower inventory involved in this transaction.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getBottomInventory",
    "id": "org.bukkit.inventory.InventoryView#getBottomInventory()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Skeleton.SkeletonType#values()",
    "class": "org.bukkit.entity.Skeleton.SkeletonType",
    "return": "org.bukkit.entity.Skeleton.SkeletonType[]"
  },
  {
    "descr": "Gets the source of this primed TNT. The source is the entity\\nresponsible for the creation of this primed TNT. (I.E. player ignites\\nTNT with flint and steel.) Take note that this can be null if there is\\nno suitable source. (created by the org.bukkit.World#spawn(Location, Class) method, for example.)\\n\\nThe source will become null if the chunk this primed TNT is in is\\nunloaded then reloaded. The source entity may be invalid if for example\\nit has since died or been unloaded. Callers should check\\nEntity#isValid().",
    "param-names": ["TNTPrimed"],
    "param-types": ["org.bukkit.entity.TNTPrimed"],
    "method": "getSource",
    "id": "org.bukkit.entity.TNTPrimed#getSource()",
    "class": "org.bukkit.entity.TNTPrimed",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Check if this event was triggered by a tool repair operation rather\\nthan a crafting recipe.",
    "method": "isRepair",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#isRepair()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WOLF",
    "id": "org.bukkit.loot.LootTables#WOLF",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "POLISHED_BLACKSTONE_PRESSURE_PLATE",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockFromToEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_FALL",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BUBBLE_COLUMN_UP",
    "id": "org.bukkit.Particle#BUBBLE_COLUMN_UP",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Get cook time total.\\nThis is the amount of time the item is required to cook for.",
    "param-names": [
      "Campfire",
      "Index"
    ],
    "param-types": [
      "org.bukkit.block.Campfire",
      "int"
    ],
    "method": "getCookTimeTotal",
    "id": "org.bukkit.block.Campfire#getCookTimeTotal(int)",
    "class": "org.bukkit.block.Campfire",
    "return": "int"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "JUNGLE_WALL_SIGN",
    "id": "org.bukkit.Material#JUNGLE_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerHideEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns whether the player is sleeping ignored.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isSleepingIgnored",
    "id": "org.bukkit.entity.Player#isSleepingIgnored()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_YELLOW_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_YELLOW_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "When a wither boss is spawned by being built",
    "static": true,
    "field": "BUILD_WITHER",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#BUILD_WITHER",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Recalculates the permissions for this object, if the attachments have\\nchanged values.\\n\\nThis should very rarely need to be called from a plugin.",
    "param-names": ["Permissible"],
    "param-types": ["org.bukkit.permissions.Permissible"],
    "method": "recalculatePermissions",
    "id": "org.bukkit.permissions.Permissible#recalculatePermissions()",
    "class": "org.bukkit.permissions.Permissible"
  },
  {
    "method": "getDuration",
    "id": "org.bukkit.event.entity.EntityCombustEvent#getDuration()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "int"
  },
  {
    "descr": "Set result item, may be null.",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.PrepareAnvilEvent#setResult(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareAnvilEvent"
  },
  {
    "static": true,
    "field": "IS_TEMPTED",
    "id": "org.bukkit.entity.memory.MemoryKey#IS_TEMPTED",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "static": true,
    "field": "BLOCK_FENCE_GATE_OPEN",
    "id": "org.bukkit.Sound#BLOCK_FENCE_GATE_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the world the player is switching from.",
    "method": "getFrom",
    "id": "org.bukkit.event.player.PlayerChangedWorldEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets user-specified limit for number of ambient mobs that can spawn in\\na chunk.",
    "static": true,
    "method": "getAmbientSpawnLimit",
    "id": "org.bukkit.Bukkit#getAmbientSpawnLimit()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "ELYTRA_GLIDE",
    "id": "org.bukkit.GameEvent#ELYTRA_GLIDE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "MUSHROOM_COW",
    "id": "org.bukkit.entity.EntityType#MUSHROOM_COW",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Set the message that is displayed on the server list.",
    "param-names": ["Motd"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "setMotd",
    "id": "org.bukkit.Bukkit#setMotd(java.lang.String)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Returns all ItemStacks from the inventory",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getContents",
    "id": "org.bukkit.inventory.Inventory#getContents()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "descr": "Create a new LootContext instance using the supplied\\nparameters.",
    "param-names": ["LootContext.Builder"],
    "param-types": ["org.bukkit.loot.LootContext.Builder"],
    "method": "build",
    "id": "org.bukkit.loot.LootContext.Builder#build()",
    "class": "org.bukkit.loot.LootContext.Builder",
    "return": "org.bukkit.loot.LootContext"
  },
  {
    "descr": "Trim patterns.",
    "static": true,
    "field": "TRIM_PATTERN",
    "id": "org.bukkit.Registry#TRIM_PATTERN",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "param-names": ["Arg0"],
    "param-types": ["java.util.function.Consumer"],
    "method": "forEach",
    "id": "org.bukkit.event.server.ServerListPingEvent#forEach(java.util.function.Consumer<? super T>)",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent"
  },
  {
    "descr": "Gets the cause for the hanging entity's removal",
    "method": "getCause",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "static": true,
    "field": "AMBIENT_NETHER_WASTES_LOOP",
    "id": "org.bukkit.Sound#AMBIENT_NETHER_WASTES_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_VEIN_STEP",
    "id": "org.bukkit.Sound#BLOCK_SCULK_VEIN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "RIVER",
    "id": "org.bukkit.block.Biome#RIVER",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Shifts this bounding box by the given amounts.",
    "param-names": [
      "BoundingBox",
      "Shift"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector"
    ],
    "method": "shift",
    "id": "org.bukkit.util.BoundingBox#shift(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "ENTITY_EXPERIENCE_ORB_PICKUP",
    "id": "org.bukkit.Sound#ENTITY_EXPERIENCE_ORB_PICKUP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Goal icons have a rounded icon frame.",
    "static": true,
    "field": "GOAL",
    "id": "org.bukkit.advancement.AdvancementDisplayType#GOAL",
    "class": "org.bukkit.advancement.AdvancementDisplayType",
    "return": "org.bukkit.advancement.AdvancementDisplayType"
  },
  {
    "static": true,
    "field": "ENTITY_PLACE",
    "id": "org.bukkit.GameEvent#ENTITY_PLACE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_FLINT_AND_STEEL",
    "id": "org.bukkit.Material#LEGACY_FLINT_AND_STEEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a block of TNT in the world become primed.\\n\\nIf a TNT Prime event is cancelled, the block of TNT will not become primed.",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent"
  },
  {
    "descr": "Gets the format to use to display this chat message.\\n\\nWhen this event finishes execution, the first format parameter is the\\nPlayer#getDisplayName() and the second parameter is #getMessage()",
    "method": "getFormat",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getFormat()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates a new color object from an integer that contains the red,\\ngreen, and blue bytes in the lowest order 24 bits.",
    "param-names": ["Rgb"],
    "static": true,
    "param-types": ["int"],
    "method": "fromRGB",
    "id": "org.bukkit.Color#fromRGB(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent"
  },
  {
    "static": true,
    "field": "RED_X",
    "id": "org.bukkit.map.MapCursor.Type#RED_X",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_TILES_STEP",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_TILES_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "DIORITE_STAIRS",
    "id": "org.bukkit.Material#DIORITE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether or not the living entity despawns when away from players\\nor not.",
    "param-names": [
      "LivingEntity",
      "Remove"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setRemoveWhenFarAway",
    "id": "org.bukkit.entity.LivingEntity#setRemoveWhenFarAway(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Sets the target of this bullet",
    "param-names": [
      "ShulkerBullet",
      "Target"
    ],
    "param-types": [
      "org.bukkit.entity.ShulkerBullet",
      "org.bukkit.entity.Entity"
    ],
    "method": "setTarget",
    "id": "org.bukkit.entity.ShulkerBullet#setTarget(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.ShulkerBullet"
  },
  {
    "descr": "Called when an ItemStack is about to increase the fuel level of a brewing\\nstand.",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent"
  },
  {
    "descr": "Returns the Entity that triggered this portal creation (if available)",
    "method": "getEntity",
    "id": "org.bukkit.event.world.PortalCreateEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "DAMAGE_DEALT_RESISTED",
    "id": "org.bukkit.Statistic#DAMAGE_DEALT_RESISTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockFromToEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the generator that will be used to create or load the world.\\n\\nThis may be null, in which case the \"natural\" generator for this\\nenvironment will be used.",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "generator",
    "id": "org.bukkit.WorldCreator#generator()",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.generator.ChunkGenerator"
  },
  {
    "static": true,
    "field": "AMBIENT_CRIMSON_FOREST_MOOD",
    "id": "org.bukkit.Sound#AMBIENT_CRIMSON_FOREST_MOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SQUARE_TOP_LEFT",
    "id": "org.bukkit.block.banner.PatternType#SQUARE_TOP_LEFT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "LAPIS_ORE",
    "id": "org.bukkit.Material#LAPIS_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the maximum allowed value of the 'moisture' property.",
    "param-names": ["Farmland"],
    "param-types": ["org.bukkit.block.data.type.Farmland"],
    "method": "getMaximumMoisture",
    "id": "org.bukkit.block.data.type.Farmland#getMaximumMoisture()",
    "class": "org.bukkit.block.data.type.Farmland",
    "return": "int"
  },
  {
    "descr": "BlockData: Piston",
    "static": true,
    "field": "STICKY_PISTON",
    "id": "org.bukkit.Material#STICKY_PISTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SKELETON_HORSE",
    "id": "org.bukkit.entity.EntityType#SKELETON_HORSE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Holding shift while pressing the left mouse button.",
    "static": true,
    "field": "SHIFT_LEFT",
    "id": "org.bukkit.event.inventory.ClickType#SHIFT_LEFT",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Get the time in ticks this entity's movement has been increased as of the\\nmost recent boost.\\nCurrent boost ticks will never be > #getBoostTicks().",
    "param-names": ["Steerable"],
    "param-types": ["org.bukkit.entity.Steerable"],
    "method": "getCurrentBoostTicks",
    "id": "org.bukkit.entity.Steerable#getCurrentBoostTicks()",
    "class": "org.bukkit.entity.Steerable",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DROWNED_SPAWN_EGG",
    "id": "org.bukkit.Material#DROWNED_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.",
    "param-names": [
      "WorldBorder",
      "Distance"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "int"
    ],
    "method": "setWarningDistance",
    "id": "org.bukkit.WorldBorder#setWarningDistance(int)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "descr": "Triggered by an enchanted trident.",
    "static": true,
    "field": "TRIDENT",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#TRIDENT",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "static": true,
    "field": "DARK_GREEN",
    "id": "org.bukkit.map.MapPalette#DARK_GREEN",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Expands this bounding box in the specified direction.\\n\\nNegative values will expand the bounding box in the negative direction,\\npositive values will expand it in the positive direction. The magnitudes\\nof the direction components determine the corresponding amounts of\\nexpansion.",
    "param-names": [
      "BoundingBox",
      "Dir X",
      "Dir Y",
      "Dir Z"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double"
    ],
    "method": "expandDirectional",
    "id": "org.bukkit.util.BoundingBox#expandDirectional(double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "ANDESITE_STAIRS",
    "id": "org.bukkit.Material#ANDESITE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_SAND_HIT",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_SAND_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BANNER_LIME",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_LIME",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "CRIMSON_FENCE_GATE",
    "id": "org.bukkit.Material#CRIMSON_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RAID_TRIGGER",
    "id": "org.bukkit.Statistic#RAID_TRIGGER",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "IDLING",
    "id": "org.bukkit.entity.Sniffer.State#IDLING",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "descr": "Gets a copy of the item the player is currently holding\\nin their main hand.",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getItemInMainHand",
    "id": "org.bukkit.inventory.PlayerInventory#getItemInMainHand()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Apply this option for only team members.",
    "static": true,
    "field": "FOR_OWN_TEAM",
    "id": "org.bukkit.scoreboard.Team.OptionStatus#FOR_OWN_TEAM",
    "class": "org.bukkit.scoreboard.Team.OptionStatus",
    "return": "org.bukkit.scoreboard.Team.OptionStatus"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_LEATHER_HELMET",
    "id": "org.bukkit.Material#LEGACY_LEATHER_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_SAND_STEP",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_SAND_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Entity is dead.",
    "static": true,
    "field": "DYING",
    "id": "org.bukkit.entity.Pose#DYING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Triggered by the /summon command.",
    "static": true,
    "field": "COMMAND",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#COMMAND",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.MoistureChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.scoreboard.RenderType#valueOf(java.lang.String)",
    "class": "org.bukkit.scoreboard.RenderType",
    "return": "org.bukkit.scoreboard.RenderType"
  },
  {
    "descr": "Get biome at given coordinates",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getBiome",
    "id": "org.bukkit.ChunkSnapshot#getBiome(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockDispenseEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTED_DIRT_HIT",
    "id": "org.bukkit.Sound#BLOCK_ROOTED_DIRT_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_POWERED_MINECART",
    "id": "org.bukkit.Material#LEGACY_POWERED_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the players current experience points.\\n\\nThis refers to the total amount of experience the player has collected\\nover time and is not currently displayed to the client.",
    "param-names": [
      "Player",
      "Exp"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "int"
    ],
    "method": "setTotalExperience",
    "id": "org.bukkit.entity.Player#setTotalExperience(int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "param-names": [
      "Name",
      "Amount",
      "Operation"
    ],
    "param-types": [
      "java.lang.String",
      "double",
      "org.bukkit.attribute.AttributeModifier.Operation"
    ],
    "id": "org.bukkit.attribute.AttributeModifier#AttributeModifier(java.lang.String,double,org.bukkit.attribute.AttributeModifier.Operation)",
    "class": "org.bukkit.attribute.AttributeModifier"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockFormEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets if the spawn position will be used regardless of bed obstruction\\nrules.",
    "method": "isForced",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#isForced()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Rotated clockwise 180 degrees.",
    "static": true,
    "field": "CLOCKWISE_180",
    "id": "org.bukkit.block.structure.StructureRotation#CLOCKWISE_180",
    "class": "org.bukkit.block.structure.StructureRotation",
    "return": "org.bukkit.block.structure.StructureRotation"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MANGROVE_CHEST_BOAT",
    "id": "org.bukkit.Material#MANGROVE_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Whether pillager raids are enabled or not.",
    "static": true,
    "field": "DISABLE_RAIDS",
    "id": "org.bukkit.GameRule#DISABLE_RAIDS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "LEGACY_STRUCTURE_BLOCK",
    "id": "org.bukkit.Material#LEGACY_STRUCTURE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ALLAY",
    "id": "org.bukkit.entity.EntityType#ALLAY",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "STRIDER",
    "id": "org.bukkit.entity.EntityType#STRIDER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "END_ROD",
    "id": "org.bukkit.Particle#END_ROD",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the minimum allowed value of the 'eggs' property.",
    "param-names": ["TurtleEgg"],
    "param-types": ["org.bukkit.block.data.type.TurtleEgg"],
    "method": "getMinimumEggs",
    "id": "org.bukkit.block.data.type.TurtleEgg#getMinimumEggs()",
    "class": "org.bukkit.block.data.type.TurtleEgg",
    "return": "int"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "COBBLED_DEEPSLATE_SLAB",
    "id": "org.bukkit.Material#COBBLED_DEEPSLATE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_GILDED_BLACKSTONE_FALL",
    "id": "org.bukkit.Sound#BLOCK_GILDED_BLACKSTONE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a view of all currently logged in players. This Collections#unmodifiableCollection(Collection) view is a reused\\nobject, making some operations like Collection#size()\\nzero-allocation.\\n\\nThe collection is a view backed by the internal representation, such\\nthat, changes to the internal state of the server will be reflected\\nimmediately. However, the reuse of the returned collection (identity)\\nis not strictly guaranteed for future or all implementations. Casting\\nthe collection, or relying on interface implementations (like Serializable or List), is deprecated.\\n\\nIteration behavior is undefined outside of self-contained main-thread\\nuses. Normal and immediate iterator use without consequences that\\naffect the collection are fully supported. The effects following\\n(non-exhaustive) Entity#teleport(Location) teleportation,\\nPlayer#setHealth(double) death, and Player#kickPlayer(\\nString) kicking are undefined. Any use of this collection from\\nasynchronous threads is unsafe.\\n\\nFor safe consequential iteration or mimicking the old array behavior,\\nusing Collection#toArray(Object[]) is recommended. For making\\nsnapshots, ImmutableList#copyOf(Collection) is recommended.",
    "static": true,
    "method": "getOnlinePlayers",
    "id": "org.bukkit.Bukkit#getOnlinePlayers()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets the value of the 'distance' property.",
    "param-names": ["Scaffolding"],
    "param-types": ["org.bukkit.block.data.type.Scaffolding"],
    "method": "getDistance",
    "id": "org.bukkit.block.data.type.Scaffolding#getDistance()",
    "class": "org.bukkit.block.data.type.Scaffolding",
    "return": "int"
  },
  {
    "static": true,
    "field": "FIREWORKS_SPARK",
    "id": "org.bukkit.Particle#FIREWORKS_SPARK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY",
    "id": "org.bukkit.map.MapPalette#LIGHT_GRAY",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the inventory corresponding to the clicked slot.",
    "method": "getClickedInventory",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getClickedInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets a set containing every BanEntry in this list.",
    "param-names": ["BanList"],
    "param-types": ["org.bukkit.BanList"],
    "method": "getEntries",
    "id": "org.bukkit.BanList#getEntries()",
    "class": "org.bukkit.BanList",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "EVENT_RAID_HORN",
    "id": "org.bukkit.Sound#EVENT_RAID_HORN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates a tree at the given Location",
    "param-names": [
      "World",
      "Location",
      "Type"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.TreeType"
    ],
    "method": "generateTree",
    "id": "org.bukkit.World#generateTree(org.bukkit.Location,org.bukkit.TreeType)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.scoreboard.DisplaySlot#values()",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot[]"
  },
  {
    "descr": "The progress of the down-pointing arrow in a brewing inventory.",
    "static": true,
    "field": "BREW_TIME",
    "id": "org.bukkit.inventory.InventoryView.Property#BREW_TIME",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Sets the relative in-game time on the server.\\n\\nThe relative time is analogous to hours * 1000\\n\\nNote that setting the relative time below the current relative time\\nwill actually move the clock forward a day. If you require to rewind\\ntime, please see #setFullTime(long)",
    "param-names": [
      "World",
      "Time"
    ],
    "param-types": [
      "org.bukkit.World",
      "long"
    ],
    "method": "setTime",
    "id": "org.bukkit.World#setTime(long)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Sets the value of the 'shape' property.",
    "param-names": [
      "Rail",
      "Shape"
    ],
    "param-types": [
      "org.bukkit.block.data.Rail",
      "org.bukkit.block.data.Rail.Shape"
    ],
    "method": "setShape",
    "id": "org.bukkit.block.data.Rail#setShape(org.bukkit.block.data.Rail.Shape)",
    "class": "org.bukkit.block.data.Rail"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.BlockFace#valueOf(java.lang.String)",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockFromToEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks to see if this has a repair penalty",
    "param-names": ["Repairable"],
    "param-types": ["org.bukkit.inventory.meta.Repairable"],
    "method": "hasRepairCost",
    "id": "org.bukkit.inventory.meta.Repairable#hasRepairCost()",
    "class": "org.bukkit.inventory.meta.Repairable",
    "return": "boolean"
  },
  {
    "descr": "Set the bee's hive location.",
    "param-names": [
      "Bee",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Bee",
      "org.bukkit.Location"
    ],
    "method": "setHive",
    "id": "org.bukkit.entity.Bee#setHive(org.bukkit.Location)",
    "class": "org.bukkit.entity.Bee"
  },
  {
    "descr": "Gets the location where the possible moving block might be if the\\nretracting piston is sticky.",
    "method": "getRetractLocation",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getRetractLocation()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_ADMIRING_ITEM",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_ADMIRING_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockSpreadEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent"
  },
  {
    "descr": "Gets the LivingEntity which summoned the fangs.",
    "param-names": ["EvokerFangs"],
    "param-types": ["org.bukkit.entity.EvokerFangs"],
    "method": "getOwner",
    "id": "org.bukkit.entity.EvokerFangs#getOwner()",
    "class": "org.bukkit.entity.EvokerFangs",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "No respawn is in progress.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#NONE",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "descr": "Render text to the map using fancy formatting. Newline (\\n) characters\\nwill move down one line and return to the original column, and the text\\ncolor can be changed using sequences such as \"Â§12;\", replacing 12 with\\nthe palette index of the color (see MapPalette).",
    "param-names": [
      "MapCanvas",
      "X",
      "Y",
      "Font",
      "Text"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int",
      "org.bukkit.map.MapFont",
      "java.lang.String"
    ],
    "method": "drawText",
    "id": "org.bukkit.map.MapCanvas#drawText(int,int,org.bukkit.map.MapFont,java.lang.String)",
    "class": "org.bukkit.map.MapCanvas"
  },
  {
    "descr": "Get the spell to be cast in this event.\\nThis is a convenience method equivalent to\\nSpellcaster#getSpell().",
    "method": "getSpell",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#getSpell()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "org.bukkit.entity.Spellcaster.Spell"
  },
  {
    "static": true,
    "field": "BLUE_DYE",
    "id": "org.bukkit.Material#BLUE_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.InventoryBlockStartEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called when an entity is spawned into a world.\\n\\nIf an Entity Spawn event is cancelled, the entity will not spawn.",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent"
  },
  {
    "static": true,
    "field": "BLOCK_CAVE_VINES_PICK_BERRIES",
    "id": "org.bukkit.Sound#BLOCK_CAVE_VINES_PICK_BERRIES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DRAGON",
    "id": "org.bukkit.SkullType#DRAGON",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERITE_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHERITE_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "NETHERITE_PICKAXE",
    "id": "org.bukkit.Material#NETHERITE_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sound of zombies chewing on wooden doors.",
    "static": true,
    "field": "ZOMBIE_CHEW_WOODEN_DOOR",
    "id": "org.bukkit.Effect#ZOMBIE_CHEW_WOODEN_DOOR",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "LIGHT_BLUE_CANDLE_CAKE",
    "id": "org.bukkit.Material#LIGHT_BLUE_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the amount of time in ticks that this chunk has been inhabited.\\nNote that the time is incremented once per tick per player within mob\\nspawning distance of this chunk.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getInhabitedTime",
    "id": "org.bukkit.Chunk#getInhabitedTime()",
    "class": "org.bukkit.Chunk",
    "return": "long"
  },
  {
    "descr": "The resource pack has been successfully downloaded and applied to the\\nclient.",
    "static": true,
    "field": "SUCCESSFULLY_LOADED",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status#SUCCESSFULLY_LOADED",
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "LIGHT_GRAY_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#LIGHT_GRAY_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_RESPAWN_ANCHOR_CHARGE",
    "id": "org.bukkit.Sound#BLOCK_RESPAWN_ANCHOR_CHARGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a zombie targeting an entity summons reinforcements, so the reinforcements target the same entity",
    "static": true,
    "field": "REINFORCEMENT_TARGET",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#REINFORCEMENT_TARGET",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Gets all teams on this Scoreboard",
    "param-names": ["Scoreboard"],
    "param-types": ["org.bukkit.scoreboard.Scoreboard"],
    "method": "getTeams",
    "id": "org.bukkit.scoreboard.Scoreboard#getTeams()",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Gets the y-coordinate of this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getY",
    "id": "org.bukkit.block.Block#getY()",
    "class": "org.bukkit.block.Block",
    "return": "int"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the black team.",
    "static": true,
    "field": "KILLED_BY_TEAM_BLACK",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_BLACK",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "SMOKE_LARGE",
    "id": "org.bukkit.Particle#SMOKE_LARGE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Set the idle kick timeout. Any players idle for the specified amount of\\ntime will be automatically kicked.\\n\\nA value of 0 will disable the idle kick timeout.",
    "param-names": ["Threshold"],
    "static": true,
    "param-types": ["int"],
    "method": "setIdleTimeout",
    "id": "org.bukkit.Bukkit#setIdleTimeout(int)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_6",
    "id": "org.bukkit.Material#LEGACY_RECORD_6",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The sound played when a pointed dripstone drips lava into a cauldron.",
    "static": true,
    "field": "POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON",
    "id": "org.bukkit.Effect#POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Called when an ItemStack is inserted in an enchantment table - can be\\ncalled multiple times",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent"
  },
  {
    "descr": "Gets the velocity in meters per tick.\\n\\nNote: Modifying the returned Vector will not change the velocity, you\\nmust use #setVelocity(org.bukkit.util.Vector) instead.",
    "method": "getVelocity",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getVelocity()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#values()",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason[]"
  },
  {
    "descr": "Gets whether the respawn location is the player's respawn anchor.",
    "method": "isAnchorSpawn",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#isAnchorSpawn()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "AMBIENT_UNDERWATER_EXIT",
    "id": "org.bukkit.Sound#AMBIENT_UNDERWATER_EXIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DOLPHIN",
    "id": "org.bukkit.entity.EntityType#DOLPHIN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "ENTITY_PHANTOM_BITE",
    "id": "org.bukkit.Sound#ENTITY_PHANTOM_BITE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Player cleaning a shulker box.",
    "static": true,
    "field": "SHULKER_WASH",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#SHULKER_WASH",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "boolean"
  },
  {
    "descr": "Removes the player from this team.",
    "param-names": [
      "Team",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "removePlayer",
    "id": "org.bukkit.scoreboard.Team#removePlayer(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Team",
    "return": "boolean"
  },
  {
    "descr": "Gets the player's cooldown between picking up experience orbs.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getExpCooldown",
    "id": "org.bukkit.entity.Player#getExpCooldown()",
    "class": "org.bukkit.entity.Player",
    "return": "int"
  },
  {
    "descr": "Immediately explode this minecart with the given power.",
    "param-names": [
      "ExplosiveMinecart",
      "Power"
    ],
    "param-types": [
      "org.bukkit.entity.minecart.ExplosiveMinecart",
      "double"
    ],
    "method": "explode",
    "id": "org.bukkit.entity.minecart.ExplosiveMinecart#explode(double)",
    "class": "org.bukkit.entity.minecart.ExplosiveMinecart"
  },
  {
    "static": true,
    "field": "SMOOTH_QUARTZ",
    "id": "org.bukkit.Material#SMOOTH_QUARTZ",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GHAST_TEAR",
    "id": "org.bukkit.Material#LEGACY_GHAST_TEAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.scoreboard.NameTagVisibility#valueOf(java.lang.String)",
    "class": "org.bukkit.scoreboard.NameTagVisibility",
    "return": "org.bukkit.scoreboard.NameTagVisibility"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_SHEPHERD",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_SHEPHERD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "INTERACTION",
    "id": "org.bukkit.entity.EntityType#INTERACTION",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_ATTACH",
    "id": "org.bukkit.GameEvent#BLOCK_ATTACH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_SWIM",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BAT",
    "id": "org.bukkit.entity.EntityType#BAT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_1",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_1",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns a unique and persistent id for this entity",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getUniqueId",
    "id": "org.bukkit.entity.Entity#getUniqueId()",
    "class": "org.bukkit.entity.Entity",
    "return": "java.util.UUID"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a right\\nclick.",
    "method": "isRightClick",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#isRightClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_SAPLING_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_SAPLING_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the limit for number of water animals that can spawn in a chunk in\\nthis world\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setWaterAnimalSpawnLimit",
    "id": "org.bukkit.World#setWaterAnimalSpawnLimit(int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Sets the owner of the skull.\\n\\nPlugins should check that hasOwner() returns true before calling this\\nplugin.",
    "param-names": [
      "SkullMeta",
      "Owner"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SkullMeta",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "setOwningPlayer",
    "id": "org.bukkit.inventory.meta.SkullMeta#setOwningPlayer(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "boolean"
  },
  {
    "descr": "Get raw biome temperature at given coordinates",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int"
    ],
    "method": "getRawBiomeTemperature",
    "id": "org.bukkit.ChunkSnapshot#getRawBiomeTemperature(int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "double"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent"
  },
  {
    "static": true,
    "field": "LEGACY_BIRCH_FENCE_GATE",
    "id": "org.bukkit.Material#LEGACY_BIRCH_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if the Chunk at the specified coordinates is loaded and\\nin use by one or more players",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "isChunkInUse",
    "id": "org.bukkit.World#isChunkInUse(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_DONKEY_DEATH",
    "id": "org.bukkit.Sound#ENTITY_DONKEY_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a potion effect is modified through the plugin methods.",
    "static": true,
    "field": "PLUGIN",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#PLUGIN",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Returns the face of the block that was clicked",
    "method": "getBlockFace",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getBlockFace()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Returns the PotionType of this potion.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "getType",
    "id": "org.bukkit.potion.Potion#getType()",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Whether patrols should naturally spawn.",
    "static": true,
    "field": "DO_PATROL_SPAWNING",
    "id": "org.bukkit.GameRule#DO_PATROL_SPAWNING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "LEGACY_DROPPER",
    "id": "org.bukkit.Material#LEGACY_DROPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_BRICKS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_BRICKS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "FIREWORK_ROCKET",
    "id": "org.bukkit.Material#FIREWORK_ROCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_SWIM",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Guardian plays the attack sound effect.",
    "static": true,
    "field": "GUARDIAN_TARGET",
    "id": "org.bukkit.EntityEffect#GUARDIAN_TARGET",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "LIKED_PLAYER",
    "id": "org.bukkit.entity.memory.MemoryKey#LIKED_PLAYER",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "LIGHT_BLUE_BANNER",
    "id": "org.bukkit.Material#LIGHT_BLUE_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the AreaEffectCloud spawned",
    "method": "getAreaEffectCloud",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getAreaEffectCloud()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "descr": "Get the z coordinate of the origin chunk of the structure.\\nNote, it is not safe to attempt to retrieve or interact with this\\nchunk. This event is informative only!",
    "method": "getChunkZ",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getChunkZ()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "int"
  },
  {
    "descr": "Gets the inventory of the chest block represented by this block state.\\n\\nIf the chest is a double chest, it returns just the portion of the\\ninventory linked to the half of the chest corresponding to this block state.\\n\\nIf the block was changed to a different type in the meantime, the\\nreturned inventory might no longer be valid.\\n\\nIf this block state is not placed this will return the captured\\ninventory snapshot instead.",
    "param-names": ["Chest"],
    "param-types": ["org.bukkit.block.Chest"],
    "method": "getBlockInventory",
    "id": "org.bukkit.block.Chest#getBlockInventory()",
    "class": "org.bukkit.block.Chest",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the visible description of the advancement.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "getDescription",
    "id": "org.bukkit.advancement.AdvancementDisplay#getDescription()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "java.lang.String"
  },
  {
    "descr": "The y axis.",
    "static": true,
    "field": "Y",
    "id": "org.bukkit.Axis#Y",
    "class": "org.bukkit.Axis",
    "return": "org.bukkit.Axis"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_HIT",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the duration (in ticks) that a laser attack takes.",
    "param-names": ["Guardian"],
    "param-types": ["org.bukkit.entity.Guardian"],
    "method": "getLaserDuration",
    "id": "org.bukkit.entity.Guardian#getLaserDuration()",
    "class": "org.bukkit.entity.Guardian",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_SAPLING_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_SAPLING_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_DROWNED_STEP",
    "id": "org.bukkit.Sound#ENTITY_DROWNED_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_TADPOLE_GROW_UP",
    "id": "org.bukkit.Sound#ENTITY_TADPOLE_GROW_UP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": [
      "ShapelessRecipe",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Sets whether this zombie can break doors\\nThis will be ignored if the entity is a Drowned. Will also stop the action if\\nthe entity is currently breaking a door.",
    "param-names": [
      "Zombie",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Zombie",
      "boolean"
    ],
    "method": "setCanBreakDoors",
    "id": "org.bukkit.entity.Zombie#setCanBreakDoors(boolean)",
    "class": "org.bukkit.entity.Zombie"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_DEATH",
    "id": "org.bukkit.Sound#ENTITY_FROG_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_LEVER",
    "id": "org.bukkit.Material#LEGACY_LEVER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a Structure is naturally generated in the world.",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent"
  },
  {
    "descr": "Gets the source ItemStack for this event.",
    "method": "getSource",
    "id": "org.bukkit.event.block.BrewingStartEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.advancement.AdvancementDisplayType#valueOf(java.lang.String)",
    "class": "org.bukkit.advancement.AdvancementDisplayType",
    "return": "org.bukkit.advancement.AdvancementDisplayType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockFormEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.raid.RaidStopEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The inventory is searched for the same material, and they are put on\\nthe cursor up to org.bukkit.Material#getMaxStackSize().",
    "static": true,
    "field": "COLLECT_TO_CURSOR",
    "id": "org.bukkit.event.inventory.InventoryAction#COLLECT_TO_CURSOR",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Switch.Face#values()",
    "class": "org.bukkit.block.data.type.Switch.Face",
    "return": "org.bukkit.block.data.type.Switch.Face[]"
  },
  {
    "descr": "Gets the current owning AnimalTamer",
    "param-names": ["Tameable"],
    "param-types": ["org.bukkit.entity.Tameable"],
    "method": "getOwner",
    "id": "org.bukkit.entity.Tameable#getOwner()",
    "class": "org.bukkit.entity.Tameable",
    "return": "org.bukkit.entity.AnimalTamer"
  },
  {
    "static": true,
    "field": "LUSH_CAVES",
    "id": "org.bukkit.block.Biome#LUSH_CAVES",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets a copy of the helmet currently being worn by the entity",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getHelmet",
    "id": "org.bukkit.inventory.EntityEquipment#getHelmet()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "PUFFERFISH",
    "id": "org.bukkit.Material#PUFFERFISH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "LEGACY_SANDSTONE",
    "id": "org.bukkit.Material#LEGACY_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WEAKNESS",
    "id": "org.bukkit.potion.PotionType#WEAKNESS",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "BLOCK_SHROOMLIGHT_FALL",
    "id": "org.bukkit.Sound#BLOCK_SHROOMLIGHT_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The bottom half of the block, normally with the lower y coordinate.",
    "static": true,
    "field": "BOTTOM",
    "id": "org.bukkit.block.data.Bisected.Half#BOTTOM",
    "class": "org.bukkit.block.data.Bisected.Half",
    "return": "org.bukkit.block.data.Bisected.Half"
  },
  {
    "descr": "Sets the anger of this wolf.\\n\\nAn angry wolf can not be fed or tamed.",
    "param-names": [
      "Wolf",
      "Angry"
    ],
    "param-types": [
      "org.bukkit.entity.Wolf",
      "boolean"
    ],
    "method": "setAngry",
    "id": "org.bukkit.entity.Wolf#setAngry(boolean)",
    "class": "org.bukkit.entity.Wolf"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityInteractEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets whether the item frame should be visible or not.",
    "param-names": [
      "ItemFrame",
      "Visible"
    ],
    "param-types": [
      "org.bukkit.entity.ItemFrame",
      "boolean"
    ],
    "method": "setVisible",
    "id": "org.bukkit.entity.ItemFrame#setVisible(boolean)",
    "class": "org.bukkit.entity.ItemFrame"
  },
  {
    "descr": "BlockData: TurtleEgg",
    "static": true,
    "field": "TURTLE_EGG",
    "id": "org.bukkit.Material#TURTLE_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when an entity is damaged by an entity",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent"
  },
  {
    "descr": "Get the EquipmentSlot this AttributeModifier is active on,\\nor null if this modifier is applicable for any slot.",
    "param-names": ["AttributeModifier"],
    "param-types": ["org.bukkit.attribute.AttributeModifier"],
    "method": "getSlot",
    "id": "org.bukkit.attribute.AttributeModifier#getSlot()",
    "class": "org.bukkit.attribute.AttributeModifier",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "ENTITY_LEASH_KNOT_PLACE",
    "id": "org.bukkit.Sound#ENTITY_LEASH_KNOT_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ANCIENT_DEBRIS",
    "id": "org.bukkit.Material#ANCIENT_DEBRIS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_WHINE",
    "id": "org.bukkit.Sound#ENTITY_WOLF_WHINE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the hostname that the player used to connect to the server, or\\nblank if unknown",
    "method": "getHostname",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getHostname()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.raid.RaidTriggerEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidTriggerEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the billboard setting of this entity.\\nThe billboard setting controls the automatic rotation of the entity to\\nface the player.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getBillboard",
    "id": "org.bukkit.entity.Display#getBillboard()",
    "class": "org.bukkit.entity.Display",
    "return": "org.bukkit.entity.Display.Billboard"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityBreedEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent"
  },
  {
    "descr": "How many total ticks the current smelting should last.",
    "static": true,
    "field": "TICKS_FOR_CURRENT_SMELTING",
    "id": "org.bukkit.inventory.InventoryView.Property#TICKS_FOR_CURRENT_SMELTING",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Remove a cursor from the collection.",
    "param-names": [
      "MapCursorCollection",
      "Cursor"
    ],
    "param-types": [
      "org.bukkit.map.MapCursorCollection",
      "org.bukkit.map.MapCursor"
    ],
    "method": "removeCursor",
    "id": "org.bukkit.map.MapCursorCollection#removeCursor(org.bukkit.map.MapCursor)",
    "class": "org.bukkit.map.MapCursorCollection",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Disallows the player from logging in, with the given reason",
    "param-names": [
      "Result",
      "Message"
    ],
    "param-types": [
      "org.bukkit.event.player.PlayerPreLoginEvent.Result",
      "java.lang.String"
    ],
    "method": "disallow",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#disallow(org.bukkit.event.player.PlayerPreLoginEvent.Result,java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "LEGACY_ENDER_CHEST",
    "id": "org.bukkit.Material#LEGACY_ENDER_CHEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VEX_CHARGE",
    "id": "org.bukkit.Sound#ENTITY_VEX_CHARGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This event is fired when the player is almost about to enter the bed.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIME_SHULKER_BOX",
    "id": "org.bukkit.Material#LIME_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the amount of ticks until this entity will be converted to a\\nZombified Piglin.\\nWhen this reaches 300, the entity will be converted.",
    "param-names": ["PiglinAbstract"],
    "param-types": ["org.bukkit.entity.PiglinAbstract"],
    "method": "getConversionTime",
    "id": "org.bukkit.entity.PiglinAbstract#getConversionTime()",
    "class": "org.bukkit.entity.PiglinAbstract",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_FUNGUS_STEP",
    "id": "org.bukkit.Sound#BLOCK_FUNGUS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the item the armor stand is currently holding.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getItemInHand",
    "id": "org.bukkit.entity.ArmorStand#getItemInHand()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "SKULL_BANNER_PATTERN",
    "id": "org.bukkit.Material#SKULL_BANNER_PATTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Send block damage. This fakes block break progress at a certain location\\nsourced by the provided entity. This will not actually change the block's\\nbreak progress in any way.\\n\\nAt the same location for each unique damage source sent to the player, a\\nseparate damage overlay will be displayed with the given progress. This allows\\nfor block damage at different progress from multiple entities at once.",
    "param-names": [
      "Player",
      "Loc",
      "Progress",
      "Source"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "float",
      "org.bukkit.entity.Entity"
    ],
    "method": "sendBlockDamage",
    "id": "org.bukkit.entity.Player#sendBlockDamage(org.bukkit.Location,float,org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.PotionSplashEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the horse is grazing hay.",
    "param-names": [
      "AbstractHorse",
      "Eating Haystack"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractHorse",
      "boolean"
    ],
    "method": "setEatingHaystack",
    "id": "org.bukkit.entity.AbstractHorse#setEatingHaystack(boolean)",
    "class": "org.bukkit.entity.AbstractHorse"
  },
  {
    "descr": "Challenge icons have a stylised icon frame.",
    "static": true,
    "field": "CHALLENGE",
    "id": "org.bukkit.advancement.AdvancementDisplayType#CHALLENGE",
    "class": "org.bukkit.advancement.AdvancementDisplayType",
    "return": "org.bukkit.advancement.AdvancementDisplayType"
  },
  {
    "param-names": ["RecipeChoice.ExactChoice"],
    "param-types": ["org.bukkit.inventory.RecipeChoice.ExactChoice"],
    "method": "getChoices",
    "id": "org.bukkit.inventory.RecipeChoice.ExactChoice#getChoices()",
    "class": "org.bukkit.inventory.RecipeChoice.ExactChoice",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "HONEY_BLOCK",
    "id": "org.bukkit.Material#HONEY_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_PREPARE_MIRROR",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_PREPARE_MIRROR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Plays an effect to all players within a given radius around a location.",
    "param-names": [
      "World",
      "Location",
      "Effect",
      "Data",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Effect",
      "java.lang.Object",
      "int"
    ],
    "method": "playEffect",
    "id": "org.bukkit.World#<T>playEffect(org.bukkit.Location,org.bukkit.Effect,T,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Set the bee's flower location.",
    "param-names": [
      "Bee",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Bee",
      "org.bukkit.Location"
    ],
    "method": "setFlower",
    "id": "org.bukkit.entity.Bee#setFlower(org.bukkit.Location)",
    "class": "org.bukkit.entity.Bee"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates a new entity at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Loc",
      "Type",
      "Randomize Data"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "org.bukkit.entity.EntityType",
      "boolean"
    ],
    "method": "spawnEntity",
    "id": "org.bukkit.RegionAccessor#spawnEntity(org.bukkit.Location,org.bukkit.entity.EntityType,boolean)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Get the name of this modifier.",
    "param-names": ["AttributeModifier"],
    "param-types": ["org.bukkit.attribute.AttributeModifier"],
    "method": "getName",
    "id": "org.bukkit.attribute.AttributeModifier#getName()",
    "class": "org.bukkit.attribute.AttributeModifier",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the bed block involved in this event.",
    "method": "getBed",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#getBed()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the entry being tracked by this Score",
    "param-names": ["Score"],
    "param-types": ["org.bukkit.scoreboard.Score"],
    "method": "getEntry",
    "id": "org.bukkit.scoreboard.Score#getEntry()",
    "class": "org.bukkit.scoreboard.Score",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "POWDER_SNOW_BUCKET",
    "id": "org.bukkit.Material#POWDER_SNOW_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_ORANGE_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_ORANGE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TEMPTATION_COOLDOWN_TICKS",
    "id": "org.bukkit.entity.memory.MemoryKey#TEMPTATION_COOLDOWN_TICKS",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Gets whether the entity is silent or not.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isSilent",
    "id": "org.bukkit.entity.Entity#isSilent()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "A player's crafting inventory, with 4 CRAFTING slots and a RESULT slot.\\nAlso implies that the 4 ARMOR slots are accessible.",
    "static": true,
    "field": "CRAFTING",
    "id": "org.bukkit.event.inventory.InventoryType#CRAFTING",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Thrown whenever a LivingEntity dies",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent"
  },
  {
    "descr": "Returns whether the item has any items.",
    "param-names": ["BundleMeta"],
    "param-types": ["org.bukkit.inventory.meta.BundleMeta"],
    "method": "hasItems",
    "id": "org.bukkit.inventory.meta.BundleMeta#hasItems()",
    "class": "org.bukkit.inventory.meta.BundleMeta",
    "return": "boolean"
  },
  {
    "descr": "Construct the vector with provided double components.",
    "param-names": [
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "double",
      "double",
      "double"
    ],
    "id": "org.bukkit.util.Vector#Vector(double,double,double)",
    "class": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the Sound this entity will make on death.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getDeathSound",
    "id": "org.bukkit.entity.LivingEntity#getDeathSound()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.inventory.EquipmentSlot#valueOf(java.lang.String)",
    "class": "org.bukkit.inventory.EquipmentSlot",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Called when the recipe of an Item is completed inside a smithing table.",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent"
  },
  {
    "descr": "Stepping onto or into a block (Ass-pressure)\\nExamples:\\n\\nJumping on soil\\nStanding on pressure plate\\nTriggering redstone ore\\nTriggering tripwire\\n",
    "static": true,
    "field": "PHYSICAL",
    "id": "org.bukkit.event.block.Action#PHYSICAL",
    "class": "org.bukkit.event.block.Action",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "descr": "Teleports this entity to the target Entity. If this entity is riding a\\nvehicle, it will be dismounted prior to teleportation.",
    "param-names": [
      "Entity",
      "Destination",
      "Cause"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.entity.Entity",
      "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
    ],
    "method": "teleport",
    "id": "org.bukkit.entity.Entity#teleport(org.bukkit.entity.Entity,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "TEMPLE",
    "id": "org.bukkit.map.MapCursor.Type#TEMPLE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Sets the world's ticks per ambient mob spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn ambient mobs.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn ambient mobs in\\nthis world on every tick.\\nA value of 400 will mean the server will attempt to spawn ambient mobs\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, ambient mobs spawning will be disabled for this world.\\n\\nMinecraft default: 1.",
    "param-names": [
      "World",
      "Ticks Per Ambient Spawns"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setTicksPerAmbientSpawns",
    "id": "org.bukkit.World#setTicksPerAmbientSpawns(int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BLOCK_AMETHYST_BLOCK_CHIME",
    "id": "org.bukkit.Sound#BLOCK_AMETHYST_BLOCK_CHIME",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the amount of experience dropped by the block after the event has\\nprocessed",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setExpToDrop",
    "id": "org.bukkit.event.block.BlockBreakEvent#setExpToDrop(int)",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent"
  },
  {
    "static": true,
    "field": "BEACON_INTERACTION",
    "id": "org.bukkit.Statistic#BEACON_INTERACTION",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the highest block corresponding to the HeightMap at the\\ngiven coordinates.",
    "param-names": [
      "World",
      "X",
      "Z",
      "Height Map"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "org.bukkit.HeightMap"
    ],
    "method": "getHighestBlockAt",
    "id": "org.bukkit.World#getHighestBlockAt(int,int,org.bukkit.HeightMap)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Get the location this EnderSignal is moving towards.",
    "param-names": ["EnderSignal"],
    "param-types": ["org.bukkit.entity.EnderSignal"],
    "method": "getTargetLocation",
    "id": "org.bukkit.entity.EnderSignal#getTargetLocation()",
    "class": "org.bukkit.entity.EnderSignal",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_SHEEP_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SHEEP_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set if the boss bar is displayed to attached players.",
    "param-names": [
      "BossBar",
      "Visible"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "boolean"
    ],
    "method": "setVisible",
    "id": "org.bukkit.boss.BossBar#setVisible(boolean)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "ENTITY_MULE_HURT",
    "id": "org.bukkit.Sound#ENTITY_MULE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_SKULL_ITEM",
    "id": "org.bukkit.Material#LEGACY_SKULL_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the humidity for the given block coordinates.\\n\\nIt is safe to run this method when the block does not exist, it will\\nnot create the block.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "getHumidity",
    "id": "org.bukkit.World#getHumidity(int,int)",
    "class": "org.bukkit.World",
    "return": "double"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "OAK_LEAVES",
    "id": "org.bukkit.Material#OAK_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_POWDER_SNOW_BREAK",
    "id": "org.bukkit.Sound#BLOCK_POWDER_SNOW_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_CELEBRATE",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_CELEBRATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the in-game time on the server\\n\\nNote that this sets the full time of the world, which may cause adverse\\neffects such as breaking redstone clocks and any scheduled events",
    "param-names": [
      "World",
      "Time"
    ],
    "param-types": [
      "org.bukkit.World",
      "long"
    ],
    "method": "setFullTime",
    "id": "org.bukkit.World#setFullTime(long)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Completely replaces the inventory's contents. Removes all existing\\ncontents and replaces it with the ItemStacks given in the array.",
    "param-names": [
      "Inventory",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setContents",
    "id": "org.bukkit.inventory.Inventory#setContents(org.bukkit.inventory.ItemStack[])",
    "class": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Decrements the given statistic for this player for the given material.\\n\\nThis is equivalent to the following code:\\ndecrementStatistic(Statistic, Material, 1)",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Material"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.Material"
    ],
    "method": "decrementStatistic",
    "id": "org.bukkit.OfflinePlayer#decrementStatistic(org.bukkit.Statistic,org.bukkit.Material)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_SWIM",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Item entity that was picked up",
    "method": "getItem",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "static": true,
    "field": "DEAD_BUBBLE_CORAL_BLOCK",
    "id": "org.bukkit.Material#DEAD_BUBBLE_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "DARK_OAK_WALL_SIGN",
    "id": "org.bukkit.Material#DARK_OAK_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHEST_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_CHEST_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHEST_LOCKED",
    "id": "org.bukkit.Sound#BLOCK_CHEST_LOCKED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "CYAN_CONCRETE",
    "id": "org.bukkit.Material#CYAN_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BANNER_RED",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_RED",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "BIRCH_FENCE_GATE",
    "id": "org.bukkit.Material#BIRCH_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Entity is croaking.",
    "static": true,
    "field": "CROAKING",
    "id": "org.bukkit.entity.Pose#CROAKING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Gets the durability of this item",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getDurability",
    "id": "org.bukkit.inventory.ItemStack#getDurability()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "short"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_10",
    "id": "org.bukkit.Material#LEGACY_RECORD_10",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'open' property.",
    "param-names": ["Openable"],
    "param-types": ["org.bukkit.block.data.Openable"],
    "method": "isOpen",
    "id": "org.bukkit.block.data.Openable#isOpen()",
    "class": "org.bukkit.block.data.Openable",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_COMPOSTER_EMPTY",
    "id": "org.bukkit.Sound#BLOCK_COMPOSTER_EMPTY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent"
  },
  {
    "descr": "Set the name of whoever created this structure.",
    "param-names": [
      "Structure",
      "Author"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "java.lang.String"
    ],
    "method": "setAuthor",
    "id": "org.bukkit.block.Structure#setAuthor(java.lang.String)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Gets the block being used to enchant the item",
    "method": "getEnchantBlock",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getEnchantBlock()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets if this compass is tracking a specific lodestone.\\nIf true the compass will only work if there is a lodestone at the tracked\\nlocation.",
    "param-names": [
      "CompassMeta",
      "Tracked"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.CompassMeta",
      "boolean"
    ],
    "method": "setLodestoneTracked",
    "id": "org.bukkit.inventory.meta.CompassMeta#setLodestoneTracked(boolean)",
    "class": "org.bukkit.inventory.meta.CompassMeta"
  },
  {
    "static": true,
    "field": "VILLAGE_PLAINS_HOUSE",
    "id": "org.bukkit.loot.LootTables#VILLAGE_PLAINS_HOUSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_BEEHIVE_ENTER",
    "id": "org.bukkit.Sound#BLOCK_BEEHIVE_ENTER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "TRANSPARENT",
    "id": "org.bukkit.map.MapPalette#TRANSPARENT",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Sets the given statistic for this player for the given material.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Material",
      "New Value"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "org.bukkit.Material",
      "int"
    ],
    "method": "setStatistic",
    "id": "org.bukkit.OfflinePlayer#setStatistic(org.bukkit.Statistic,org.bukkit.Material,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "POTTED_RED_TULIP",
    "id": "org.bukkit.Material#POTTED_RED_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Input",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.SmokingRecipe#SmokingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,float,int)",
    "class": "org.bukkit.inventory.SmokingRecipe"
  },
  {
    "static": true,
    "field": "LINGERING_POTION",
    "id": "org.bukkit.Material#LINGERING_POTION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Event that gets called each time a Hopper attempts to find its\\nsource/attached containers.",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "DAMAGED_ANVIL",
    "id": "org.bukkit.Material#DAMAGED_ANVIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "SPRUCE_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#SPRUCE_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the primary effect on this beacon, or null to clear.",
    "param-names": [
      "Beacon",
      "Effect"
    ],
    "param-types": [
      "org.bukkit.block.Beacon",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "setPrimaryEffect",
    "id": "org.bukkit.block.Beacon#setPrimaryEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.block.Beacon"
  },
  {
    "descr": "Sets the new anger resulting from this event.",
    "param-names": ["New Anger"],
    "param-types": ["int"],
    "method": "setNewAnger",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#setNewAnger(int)",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent"
  },
  {
    "descr": "No mirroring.\\n\\nPositive X to Positive Z",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.block.structure.Mirror#NONE",
    "class": "org.bukkit.block.structure.Mirror",
    "return": "org.bukkit.block.structure.Mirror"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "boolean"
  },
  {
    "descr": "Entities not related to a mob, eg: Player, ArmorStand, Boat, etc.",
    "static": true,
    "field": "MISC",
    "id": "org.bukkit.entity.SpawnCategory#MISC",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Applies the effects that would be applied by this potion to the given\\nLivingEntity.",
    "param-names": [
      "Potion",
      "To"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "apply",
    "id": "org.bukkit.potion.Potion#apply(org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Gets the old amount of arrows in the entity's body.",
    "method": "getOldAmount",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getOldAmount()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Adds the specified ingredient.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient",
      "Rawdata"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.Material",
      "int"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "static": true,
    "field": "SMOOTH_SANDSTONE",
    "id": "org.bukkit.Material#SMOOTH_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "VOID_AIR",
    "id": "org.bukkit.Material#VOID_AIR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RED_MUSHROOM",
    "id": "org.bukkit.Material#RED_MUSHROOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerChangedWorldEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets whether this ClickType represents the pressing of a mouse button",
    "param-names": ["ClickType"],
    "param-types": ["org.bukkit.event.inventory.ClickType"],
    "method": "isMouseClick",
    "id": "org.bukkit.event.inventory.ClickType#isMouseClick()",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "boolean"
  },
  {
    "descr": "BlockData: MultipleFacing",
    "static": true,
    "field": "BROWN_MUSHROOM_BLOCK",
    "id": "org.bukkit.Material#BROWN_MUSHROOM_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set whether the stand has this bottle present.",
    "param-names": [
      "BrewingStand",
      "Bottle",
      "Has"
    ],
    "param-types": [
      "org.bukkit.block.data.type.BrewingStand",
      "int",
      "boolean"
    ],
    "method": "setBottle",
    "id": "org.bukkit.block.data.type.BrewingStand#setBottle(int,boolean)",
    "class": "org.bukkit.block.data.type.BrewingStand"
  },
  {
    "descr": "Sets the generator that will be used to create or load the world.\\n\\nThis may be null, in which case the \"natural\" generator for this\\nenvironment will be used.\\n\\nIf the generator cannot be found for the given name, the natural\\nenvironment generator will be used instead and a warning will be\\nprinted to the console.",
    "param-names": [
      "WorldCreator",
      "Generator"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "java.lang.String"
    ],
    "method": "generator",
    "id": "org.bukkit.WorldCreator#generator(java.lang.String)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "static": true,
    "field": "DAMAGE_DEALT",
    "id": "org.bukkit.Statistic#DAMAGE_DEALT",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Set the ticks that this firework has been alive. If this value exceeds\\n#getMaxLife(), the firework will detonate.",
    "param-names": [
      "Firework",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Firework",
      "int"
    ],
    "method": "setLife",
    "id": "org.bukkit.entity.Firework#setLife(int)",
    "class": "org.bukkit.entity.Firework",
    "return": "boolean"
  },
  {
    "descr": "Gets the socket address of this player",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getAddress",
    "id": "org.bukkit.entity.Player#getAddress()",
    "class": "org.bukkit.entity.Player",
    "return": "java.net.InetSocketAddress"
  },
  {
    "descr": "Get the bounding box of the structure.",
    "method": "getBoundingBox",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getBoundingBox()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "DARK_OAK_LOG",
    "id": "org.bukkit.Material#DARK_OAK_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PIG_SADDLE",
    "id": "org.bukkit.Sound#ENTITY_PIG_SADDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the location this player moved to",
    "method": "getTo",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Triggered by weather.",
    "static": true,
    "field": "WEATHER",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#WEATHER",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "descr": "Gets the lore that is set.\\n\\nPlugins should check if hasLore() returns true before\\ncalling this method.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getLore",
    "id": "org.bukkit.inventory.meta.ItemMeta#getLore()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.util.List"
  },
  {
    "descr": "Find the closest nearby structure of a given Structure. Finding\\nunexplored structures can, and will, block if the world is looking in\\nchunks that gave not generated yet. This can lead to the world\\ntemporarily freezing while locating an unexplored structure.\\n\\nThe radius is not a rigid square radius. Each structure may alter\\nhow many chunks to check for each iteration. Do not assume that only a\\nradius x radius chunk area will be checked. For example,\\nStructure#MANSION can potentially check up to 20,000 blocks away\\n(or more) regardless of the radius used.\\n\\nThis will not load or generate chunks. This can also lead to\\ninstances where the server can hang if you are only looking for\\nunexplored structures. This is because it will keep looking further and\\nfurther out in order to find the structure.\\n\\nThe difference between searching for a StructureType and a\\nStructure is, that a StructureType can refer to multiple\\nStructure Structures while searching for a Structure\\nwhile only search for the given Structure.",
    "param-names": [
      "World",
      "Origin",
      "Structure",
      "Radius",
      "Find Unexplored"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.generator.structure.Structure",
      "int",
      "boolean"
    ],
    "method": "locateNearestStructure",
    "id": "org.bukkit.World#locateNearestStructure(org.bukkit.Location,org.bukkit.generator.structure.Structure,int,boolean)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.util.StructureSearchResult"
  },
  {
    "static": true,
    "field": "CENTER",
    "id": "org.bukkit.entity.Wither.Head#CENTER",
    "class": "org.bukkit.entity.Wither.Head",
    "return": "org.bukkit.entity.Wither.Head"
  },
  {
    "descr": "Gets the version string of this server implementation.",
    "static": true,
    "method": "getVersion",
    "id": "org.bukkit.Bukkit#getVersion()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when leaves are decaying naturally.\\n\\nIf a Leaves Decay event is cancelled, the leaves will not decay.",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent"
  },
  {
    "descr": "Gets the highest non-empty (impassable) coordinate at the given\\ncoordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int"
    ],
    "method": "getHighestBlockYAt",
    "id": "org.bukkit.RegionAccessor#getHighestBlockYAt(int,int)",
    "class": "org.bukkit.RegionAccessor",
    "return": "int"
  },
  {
    "descr": "Returns a list of entities within the given bounding box.\\n\\nThis may not consider entities in currently unloaded chunks. Some\\nimplementations may impose artificial restrictions on the size of the\\nsearch bounding box.",
    "param-names": [
      "World",
      "Bounding Box",
      "Filter"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.util.BoundingBox",
      "java.util.function.Predicate"
    ],
    "method": "getNearbyEntities",
    "id": "org.bukkit.World#getNearbyEntities(org.bukkit.util.BoundingBox,java.util.function.Predicate<org.bukkit.entity.Entity>)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleUpdateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleUpdateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Return the direction in which the piston will operate.",
    "method": "getDirection",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getDirection()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_ENDER_CHEST_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_ENDER_CHEST_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This event is fired when the player is leaving a bed.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent"
  },
  {
    "param-names": ["PotionType"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "method": "isInstant",
    "id": "org.bukkit.potion.PotionType#isInstant()",
    "class": "org.bukkit.potion.PotionType",
    "return": "boolean"
  },
  {
    "descr": "Gets a player's Score for an Objective on this Scoreboard",
    "param-names": [
      "Objective",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Objective",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "getScore",
    "id": "org.bukkit.scoreboard.Objective#getScore(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "org.bukkit.scoreboard.Score"
  },
  {
    "descr": "Creates a new note for a flat tone, such as A-flat.",
    "param-names": [
      "Octave",
      "Tone"
    ],
    "static": true,
    "param-types": [
      "int",
      "org.bukkit.Note.Tone"
    ],
    "method": "flat",
    "id": "org.bukkit.Note#flat(int,org.bukkit.Note.Tone)",
    "class": "org.bukkit.Note",
    "return": "org.bukkit.Note"
  },
  {
    "descr": "Get the name of this GameRule.",
    "param-names": ["GameRule"],
    "param-types": ["org.bukkit.GameRule"],
    "method": "getName",
    "id": "org.bukkit.GameRule#getName()",
    "class": "org.bukkit.GameRule",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD",
    "id": "org.bukkit.Material#LEGACY_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Bed.Part#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Bed.Part",
    "return": "org.bukkit.block.data.type.Bed.Part"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BEE",
    "id": "org.bukkit.entity.EntityType#BEE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Get all registered StructureTypes.",
    "static": true,
    "method": "getStructureTypes",
    "id": "org.bukkit.StructureType#getStructureTypes()",
    "class": "org.bukkit.StructureType",
    "return": "java.util.Map"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_FALL",
    "id": "org.bukkit.Sound#BLOCK_SCULK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.TNTPrimeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the Enchantment at the specified name",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByName",
    "id": "org.bukkit.enchantments.Enchantment#getByName(java.lang.String)",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "java.util.List"
  },
  {
    "descr": "The player is not allowed to log in, due to the server being full",
    "static": true,
    "field": "KICK_FULL",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#KICK_FULL",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.Biome#values()",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome[]"
  },
  {
    "descr": "Get a pixel from the canvas.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int"
    ],
    "method": "getPixel",
    "id": "org.bukkit.map.MapCanvas#getPixel(int,int)",
    "class": "org.bukkit.map.MapCanvas",
    "return": "byte"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_ATTACK_IRON_DOOR",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_ATTACK_IRON_DOOR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_GRAVEL_BREAK",
    "id": "org.bukkit.Sound#BLOCK_GRAVEL_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_HOSTILE_HURT",
    "id": "org.bukkit.Sound#ENTITY_HOSTILE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BASTION_OTHER",
    "id": "org.bukkit.loot.LootTables#BASTION_OTHER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "RABBIT_STEW",
    "id": "org.bukkit.Material#RABBIT_STEW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SPIDER_EYE",
    "id": "org.bukkit.Material#LEGACY_SPIDER_EYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Modifies the amount of the given ItemStack in the same way as\\nMerchantRecipe dynamically adjusts the amount of the first ingredient\\nduring trading.\\n\\nThis is calculated by adding up the original amount of the item, the\\ndemand scaled by the recipe's\\n#getPriceMultiplier price multiplier and truncated to the next\\nlowest integer value greater than or equal to 0, and the special price,\\nand then constraining the resulting value between 1 and the\\nItemStack's ItemStack#getMaxStackSize() maximum stack size.",
    "param-names": [
      "MerchantRecipe",
      "Item Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "adjust",
    "id": "org.bukkit.inventory.MerchantRecipe#adjust(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "SNOWBALL",
    "id": "org.bukkit.Material#SNOWBALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The minimum spawn delay amount (in ticks).\\n\\nThis value is used when the spawner resets its delay (for any reason).\\nIt will choose a random number between #getMinSpawnDelay()\\nand #getMaxSpawnDelay() for its next #getDelay().\\n\\nDefault value is 200 ticks.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getMinSpawnDelay",
    "id": "org.bukkit.block.CreatureSpawner#getMinSpawnDelay()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Removes the specified Enchantment if it exists on this\\nItemStack",
    "param-names": [
      "ItemStack",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "removeEnchantment",
    "id": "org.bukkit.inventory.ItemStack#removeEnchantment(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockFadeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets entity superclass which this affect is applicable to.",
    "param-names": ["EntityEffect"],
    "param-types": ["org.bukkit.EntityEffect"],
    "method": "getApplicable",
    "id": "org.bukkit.EntityEffect#getApplicable()",
    "class": "org.bukkit.EntityEffect",
    "return": "java.lang.Class"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.BrewEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the author of the book.\\n\\nPlugins should check that hasAuthor() returns true before calling this\\nmethod.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "getAuthor",
    "id": "org.bukkit.inventory.meta.BookMeta#getAuthor()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets if the Player should keep all EXP at respawn.\\n\\nThis overrides all other EXP settings\\n\\nThis doesn't prevent the EXP from dropping.\\n#setDroppedExp(int) should be used stop the\\nEXP from dropping.",
    "param-names": ["Keep Level"],
    "param-types": ["boolean"],
    "method": "setKeepLevel",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#setKeepLevel(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent"
  },
  {
    "descr": "Gets the horse's color.\\n\\nColors only apply to horses, not to donkeys, mules, skeleton horses\\nor undead horses.",
    "param-names": ["Horse"],
    "param-types": ["org.bukkit.entity.Horse"],
    "method": "getColor",
    "id": "org.bukkit.entity.Horse#getColor()",
    "class": "org.bukkit.entity.Horse",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockExplodeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockExplodeEvent"
  },
  {
    "descr": "Thrown when a entity picks an item up from the ground",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent"
  },
  {
    "descr": "White socks or stripes",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.entity.Horse.Style#WHITE",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "descr": "Set the regeneration rate (1 health per x ticks) of\\nthe HumanEntity when they have saturation and\\ntheir food level is >= 20. Default is 10.\\nNot affected if the world's difficulty is peaceful.",
    "param-names": [
      "HumanEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "int"
    ],
    "method": "setSaturatedRegenRate",
    "id": "org.bukkit.entity.HumanEntity#setSaturatedRegenRate(int)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Gets the hanging entity involved in this event.",
    "method": "getEntity",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "org.bukkit.entity.Hanging"
  },
  {
    "static": true,
    "field": "LEGACY_GRAY_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_GRAY_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "CRIMSON_SLAB",
    "id": "org.bukkit.Material#CRIMSON_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a list of items that are being harvested from this block.",
    "method": "getItemsHarvested",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getItemsHarvested()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "java.util.List"
  },
  {
    "descr": "The raid took a long time without a final result.",
    "static": true,
    "field": "TIMEOUT",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#TIMEOUT",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "static": true,
    "field": "BLOCK_SLIME_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_SLIME_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Constructor for deserialization.",
    "param-names": ["Map"],
    "param-types": ["java.util.Map"],
    "id": "org.bukkit.block.banner.Pattern#Pattern(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.block.banner.Pattern"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_CANT_BREED",
    "id": "org.bukkit.Sound#ENTITY_PANDA_CANT_BREED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "ORANGE_BANNER",
    "id": "org.bukkit.Material#ORANGE_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the org.bukkit.event.Event.Result of this event. The Result describes the\\nbehavior that will be applied to the inventory in relation to this\\nevent.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "descr": "Gets the entity that was right-clicked by the player.",
    "method": "getRightClicked",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getRightClicked()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Plays an effect to all players within a default radius around a given\\nlocation.",
    "param-names": [
      "World",
      "Location",
      "Effect",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Effect",
      "java.lang.Object"
    ],
    "method": "playEffect",
    "id": "org.bukkit.World#<T>playEffect(org.bukkit.Location,org.bukkit.Effect,T)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Get the recipes used in this furnace.\\nNote: These recipes used are reset when the result item is\\nmanually taken from the furnace.",
    "param-names": ["Furnace"],
    "param-types": ["org.bukkit.block.Furnace"],
    "method": "getRecipesUsed",
    "id": "org.bukkit.block.Furnace#getRecipesUsed()",
    "class": "org.bukkit.block.Furnace",
    "return": "java.util.Map"
  },
  {
    "descr": "Checks if the potion type has an extended state.\\nThis refers to the extended duration potions",
    "param-names": ["PotionType"],
    "param-types": ["org.bukkit.potion.PotionType"],
    "method": "isExtendable",
    "id": "org.bukkit.potion.PotionType#isExtendable()",
    "class": "org.bukkit.potion.PotionType",
    "return": "boolean"
  },
  {
    "descr": "The raid was beaten by heroes.",
    "static": true,
    "field": "VICTORY",
    "id": "org.bukkit.Raid.RaidStatus#VICTORY",
    "class": "org.bukkit.Raid.RaidStatus",
    "return": "org.bukkit.Raid.RaidStatus"
  },
  {
    "static": true,
    "field": "BLOCK_GILDED_BLACKSTONE_HIT",
    "id": "org.bukkit.Sound#BLOCK_GILDED_BLACKSTONE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.StriderTemperatureChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.StriderTemperatureChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "boolean"
  },
  {
    "descr": "Gives the player the amount of experience levels specified. Levels can\\nbe taken by specifying a negative amount.",
    "param-names": [
      "Player",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "int"
    ],
    "method": "giveExpLevels",
    "id": "org.bukkit.entity.Player#giveExpLevels(int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Called when a server list ping is coming in. Displayed players can be\\nchecked and removed by #iterator() iterating over this event.\\n\\nNote: The players in #iterator() will not be shown in the\\nserver info if Bukkit#getHideOnlinePlayers() is true.",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerChatEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get an environment by ID",
    "param-names": ["Id"],
    "static": true,
    "param-types": ["int"],
    "method": "getEnvironment",
    "id": "org.bukkit.World.Environment#getEnvironment(int)",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment"
  },
  {
    "descr": "Gets the entity who ignited this block",
    "method": "getIgnitingEntity",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getIgnitingEntity()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_HORN_CORAL_FAN",
    "id": "org.bukkit.Material#DEAD_HORN_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHEEP_BLACK",
    "id": "org.bukkit.loot.LootTables#SHEEP_BLACK",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "BAMBOO_BUTTON",
    "id": "org.bukkit.Material#BAMBOO_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE",
    "id": "org.bukkit.Sound#AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the shadow strength of this display.",
    "param-names": [
      "Display",
      "Strength"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "float"
    ],
    "method": "setShadowStrength",
    "id": "org.bukkit.entity.Display#setShadowStrength(float)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "static": true,
    "field": "WILD_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#WILD_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CHARGE",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CHARGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CLAY",
    "id": "org.bukkit.Material#CLAY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerItemHeldEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Whether the player should keep items in their inventory after death.",
    "static": true,
    "field": "KEEP_INVENTORY",
    "id": "org.bukkit.GameRule#KEEP_INVENTORY",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Gets the color of the team.\\n\\nThis only sets the team outline, other occurrences of colors such as in\\nnames are handled by prefixes / suffixes.",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getColor",
    "id": "org.bukkit.scoreboard.Team#getColor()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "org.bukkit.ChatColor"
  },
  {
    "static": true,
    "field": "SPLASH_POTION",
    "id": "org.bukkit.Material#SPLASH_POTION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SHEEP_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SHEEP_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a block is broken by a player.\\n\\nIf you wish to have the block drop experience, you must set the experience\\nvalue above 0. By default, experience will be set in the event if:\\n\\nThe player is not in creative or adventure mode\\nThe player can loot the block (ie: does not destroy it completely, by\\nusing the correct tool)\\nThe player does not have silk touch\\nThe block drops experience in vanilla Minecraft\\n\\n\\nNote:\\nPlugins wanting to simulate a traditional block drop should set the block\\nto air and utilize their own methods for determining what the default drop\\nfor the block being broken is and what to do about it, if anything.\\n\\nIf a Block Break event is cancelled, the block will not break and\\nexperience will not drop.",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent"
  },
  {
    "static": true,
    "field": "SNEEZE",
    "id": "org.bukkit.Particle#SNEEZE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Converts this potion to an ItemStack with the specified amount\\nand a correct damage value.",
    "param-names": [
      "Potion",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "int"
    ],
    "method": "toItemStack",
    "id": "org.bukkit.potion.Potion#toItemStack(int)",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.inventory.ItemFlag#valueOf(java.lang.String)",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "descr": "Gets the player's name.",
    "method": "getName",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getName()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "java.lang.String"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerChatEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Change the number of mobs coming out of the hatched egg\\n\\nThe boolean hatching will override this number. Ie. If hatching =\\nfalse, this number will not matter",
    "param-names": ["Num Hatches"],
    "param-types": ["byte"],
    "method": "setNumHatches",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#setNumHatches(byte)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent"
  },
  {
    "static": true,
    "field": "TARGET_HIT",
    "id": "org.bukkit.Statistic#TARGET_HIT",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.BlockFace#values()",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace[]"
  },
  {
    "descr": "BlockData: PinkPetals",
    "static": true,
    "field": "PINK_PETALS",
    "id": "org.bukkit.Material#PINK_PETALS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Chocolate colored rabbit.",
    "static": true,
    "field": "BROWN",
    "id": "org.bukkit.entity.Rabbit.Type#BROWN",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "static": true,
    "field": "BLOCK_ANCIENT_DEBRIS_FALL",
    "id": "org.bukkit.Sound#BLOCK_ANCIENT_DEBRIS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the bonus uses added.",
    "method": "getBonus",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getBonus()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "BOW",
    "id": "org.bukkit.Material#BOW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FLINT_AND_STEEL",
    "id": "org.bukkit.Material#FLINT_AND_STEEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a NamespacedKey from the supplied string with a default namespace if\\na namespace is not defined. This is a utility method meant to fetch a\\nNamespacedKey from user input. Please note that casing does matter and\\nany instance of uppercase characters will be considered invalid. The\\ninput contract is as follows:\\n\\nfromString(\"foo\", plugin) -> \"plugin:foo\"\\nfromString(\"foo:bar\", plugin) -> \"foo:bar\"\\nfromString(\":foo\", null) -> \"minecraft:foo\"\\nfromString(\"foo\", null) -> \"minecraft:foo\"\\nfromString(\"Foo\", plugin) -> null\\nfromString(\":Foo\", plugin) -> null\\nfromString(\"foo:bar:bazz\", plugin) -> null\\nfromString(\"\", plugin) -> null\\n",
    "param-names": [
      "String",
      "Default Namespace"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "fromString",
    "id": "org.bukkit.NamespacedKey#fromString(java.lang.String,org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.NamespacedKey",
    "return": "org.bukkit.NamespacedKey"
  },
  {
    "descr": "This represents the damage reduction caused by the combination of:\\n\\n\\nArmor enchantments\\n\\nWitch's potion resistance\\n\\n",
    "static": true,
    "field": "MAGIC",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#MAGIC",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_TWINKLE",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_TWINKLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "SANDSTONE_SLAB",
    "id": "org.bukkit.Material#SANDSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_BRICK",
    "id": "org.bukkit.Material#LEGACY_NETHER_BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Loads the specified Chunk.\\n\\nThis method will keep the specified chunk loaded until one of the\\nunload methods is manually called. Callers are advised to instead use\\ngetChunkAt which will only temporarily load the requested chunk.",
    "param-names": [
      "World",
      "Chunk"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Chunk"
    ],
    "method": "loadChunk",
    "id": "org.bukkit.World#loadChunk(org.bukkit.Chunk)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "When the target attacks the owner of the entity, so the entity\\ntargets it.",
    "static": true,
    "field": "TARGET_ATTACKED_OWNER",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#TARGET_ATTACKED_OWNER",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "static": true,
    "field": "LUKEWARM_OCEAN",
    "id": "org.bukkit.block.Biome#LUKEWARM_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Set how much luck to have when generating loot.",
    "param-names": [
      "LootContext.Builder",
      "Luck"
    ],
    "param-types": [
      "org.bukkit.loot.LootContext.Builder",
      "float"
    ],
    "method": "luck",
    "id": "org.bukkit.loot.LootContext.Builder#luck(float)",
    "class": "org.bukkit.loot.LootContext.Builder",
    "return": "org.bukkit.loot.LootContext.Builder"
  },
  {
    "descr": "Set the cooking time for this recipe in ticks.",
    "param-names": [
      "CookingRecipe",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.inventory.CookingRecipe",
      "int"
    ],
    "method": "setCookingTime",
    "id": "org.bukkit.inventory.CookingRecipe#setCookingTime(int)",
    "class": "org.bukkit.inventory.CookingRecipe"
  },
  {
    "descr": "Create a new potion of the given type and level.",
    "param-names": [
      "Type",
      "Level"
    ],
    "param-types": [
      "org.bukkit.potion.PotionType",
      "int"
    ],
    "id": "org.bukkit.potion.Potion#Potion(org.bukkit.potion.PotionType,int)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Checks if the container has a valid (non empty) key.",
    "param-names": ["Lockable"],
    "param-types": ["org.bukkit.block.Lockable"],
    "method": "isLocked",
    "id": "org.bukkit.block.Lockable#isLocked()",
    "class": "org.bukkit.block.Lockable",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "GRAHAM",
    "id": "org.bukkit.Art#GRAHAM",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "CHARCOAL",
    "id": "org.bukkit.Material#CHARCOAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Charges crossbows quickly",
    "static": true,
    "field": "QUICK_CHARGE",
    "id": "org.bukkit.enchantments.Enchantment#QUICK_CHARGE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "CARVED_PUMPKIN",
    "id": "org.bukkit.Material#CARVED_PUMPKIN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks to see if this player is currently flying or not.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isFlying",
    "id": "org.bukkit.entity.Player#isFlying()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RESONATE_6",
    "id": "org.bukkit.GameEvent#RESONATE_6",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "The arrow can only be picked up by players in creative mode.",
    "static": true,
    "field": "CREATIVE_ONLY",
    "id": "org.bukkit.entity.AbstractArrow.PickupStatus#CREATIVE_ONLY",
    "class": "org.bukkit.entity.AbstractArrow.PickupStatus",
    "return": "org.bukkit.entity.AbstractArrow.PickupStatus"
  },
  {
    "descr": "Sent when an entity's swimming status is toggled.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent"
  },
  {
    "descr": "Removes the given PermissionAttachment from this object",
    "param-names": [
      "Permissible",
      "Attachment"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.permissions.PermissionAttachment"
    ],
    "method": "removeAttachment",
    "id": "org.bukkit.permissions.Permissible#removeAttachment(org.bukkit.permissions.PermissionAttachment)",
    "class": "org.bukkit.permissions.Permissible"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_BUBBLE_COLUMN_BUBBLE_POP",
    "id": "org.bukkit.Sound#BLOCK_BUBBLE_COLUMN_BUBBLE_POP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the fish's pattern.",
    "param-names": ["TropicalFish"],
    "param-types": ["org.bukkit.entity.TropicalFish"],
    "method": "getPattern",
    "id": "org.bukkit.entity.TropicalFish#getPattern()",
    "class": "org.bukkit.entity.TropicalFish",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.WorldInitEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.WorldInitEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.entity.Cat.Type#WHITE",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Third growth stage",
    "static": true,
    "field": "SMALL",
    "id": "org.bukkit.CropState#SMALL",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "static": true,
    "field": "LEGACY_FIREWORK",
    "id": "org.bukkit.Material#LEGACY_FIREWORK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_JUMP",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increases damage against targets when using a sweep attack",
    "static": true,
    "field": "SWEEPING_EDGE",
    "id": "org.bukkit.enchantments.Enchantment#SWEEPING_EDGE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Set the maximum size of this structure from the origin point. Maximum\\nallowed size is 48x48x48.",
    "param-names": [
      "Structure",
      "Vector"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "org.bukkit.util.BlockVector"
    ],
    "method": "setStructureSize",
    "id": "org.bukkit.block.Structure#setStructureSize(org.bukkit.util.BlockVector)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Checks for a specific custom potion effect type on this potion.",
    "param-names": [
      "PotionMeta",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.PotionMeta",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "hasCustomEffect",
    "id": "org.bukkit.inventory.meta.PotionMeta#hasCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_QUARTZ_BLOCK",
    "id": "org.bukkit.Material#LEGACY_QUARTZ_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
    "return": "boolean"
  },
  {
    "descr": "All items related to brewing and potions including all types of potions,\\ntheir variants, and ingredients to brew them.",
    "static": true,
    "field": "BREWING",
    "id": "org.bukkit.inventory.CreativeCategory#BREWING",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "descr": "Checks for the level of the specified enchantment.",
    "param-names": [
      "ItemMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "getEnchantLevel",
    "id": "org.bukkit.inventory.meta.ItemMeta#getEnchantLevel(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "int"
  },
  {
    "static": true,
    "field": "PURPUR_BLOCK",
    "id": "org.bukkit.Material#PURPUR_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sound of fire being extinguished.",
    "static": true,
    "field": "EXTINGUISH",
    "id": "org.bukkit.Effect#EXTINGUISH",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockExpEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns a MemoryKey by a NamespacedKey.",
    "param-names": ["Namespaced Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getByKey",
    "id": "org.bukkit.entity.memory.MemoryKey#getByKey(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Sets the type of the world that will be created or loaded",
    "param-names": [
      "WorldCreator",
      "Type"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "org.bukkit.WorldType"
    ],
    "method": "type",
    "id": "org.bukkit.WorldCreator#type(org.bukkit.WorldType)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "static": true,
    "field": "ZOGLIN",
    "id": "org.bukkit.loot.LootTables#ZOGLIN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Comparator.Mode#values()",
    "class": "org.bukkit.block.data.type.Comparator.Mode",
    "return": "org.bukkit.block.data.type.Comparator.Mode[]"
  },
  {
    "descr": "Set whether the firework effect should flicker.",
    "param-names": [
      "FireworkEffect.Builder",
      "Flicker"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "boolean"
    ],
    "method": "flicker",
    "id": "org.bukkit.FireworkEffect.Builder#flicker(boolean)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "static": true,
    "field": "SIAMESE",
    "id": "org.bukkit.entity.Cat.Type#SIAMESE",
    "class": "org.bukkit.entity.Cat.Type",
    "return": "org.bukkit.entity.Cat.Type"
  },
  {
    "descr": "Rotated counter clockwise 90 degrees.\\n\\nEquivalent to rotating clockwise 270 degrees.",
    "static": true,
    "field": "COUNTERCLOCKWISE_90",
    "id": "org.bukkit.block.structure.StructureRotation#COUNTERCLOCKWISE_90",
    "class": "org.bukkit.block.structure.StructureRotation",
    "return": "org.bukkit.block.structure.StructureRotation"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_CAT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the Biome at the given coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int"
    ],
    "method": "getBiome",
    "id": "org.bukkit.RegionAccessor#getBiome(int,int,int)",
    "class": "org.bukkit.RegionAccessor",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Increments the given statistic for this player.",
    "param-names": [
      "OfflinePlayer",
      "Statistic",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "org.bukkit.Statistic",
      "int"
    ],
    "method": "incrementStatistic",
    "id": "org.bukkit.OfflinePlayer#incrementStatistic(org.bukkit.Statistic,int)",
    "class": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "STRIPE_TOP",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_TOP",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_SNOWY_SLOPES",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_SNOWY_SLOPES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Closes the inventory view.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "close",
    "id": "org.bukkit.inventory.InventoryView#close()",
    "class": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "A single item from the cursor is moved to the clicked slot.",
    "static": true,
    "field": "PLACE_ONE",
    "id": "org.bukkit.event.inventory.InventoryAction#PLACE_ONE",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Whether water blocks can convert into water source blocks.",
    "static": true,
    "field": "WATER_SOURCE_CONVERSION",
    "id": "org.bukkit.GameRule#WATER_SOURCE_CONVERSION",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Broadcast a message to all players.\\n\\nThis is the same as calling #broadcast(java.lang.String,\\njava.lang.String) to Server#BROADCAST_CHANNEL_USERS",
    "param-names": ["Message"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "broadcastMessage",
    "id": "org.bukkit.Bukkit#broadcastMessage(java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent"
  },
  {
    "descr": "Sets the underlying potion data",
    "param-names": [
      "Arrow",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Arrow",
      "org.bukkit.potion.PotionData"
    ],
    "method": "setBasePotionData",
    "id": "org.bukkit.entity.Arrow#setBasePotionData(org.bukkit.potion.PotionData)",
    "class": "org.bukkit.entity.Arrow"
  },
  {
    "descr": "Set the art on this painting",
    "param-names": [
      "Painting",
      "Art",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.Painting",
      "org.bukkit.Art",
      "boolean"
    ],
    "method": "setArt",
    "id": "org.bukkit.entity.Painting#setArt(org.bukkit.Art,boolean)",
    "class": "org.bukkit.entity.Painting",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_COD_DEATH",
    "id": "org.bukkit.Sound#ENTITY_COD_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_SILVER_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_SILVER_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the maximum number of players sent.",
    "method": "getMaxPlayers",
    "id": "org.bukkit.event.server.ServerListPingEvent#getMaxPlayers()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_COD_FLOP",
    "id": "org.bukkit.Sound#ENTITY_COD_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_LOG",
    "id": "org.bukkit.Material#LEGACY_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets an extra property of this inventory if supported by that\\ninventory, for example the state of a progress bar.",
    "param-names": [
      "InventoryView",
      "Prop",
      "Value"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "org.bukkit.inventory.InventoryView.Property",
      "int"
    ],
    "method": "setProperty",
    "id": "org.bukkit.inventory.InventoryView#setProperty(org.bukkit.inventory.InventoryView.Property,int)",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockBreakEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent"
  },
  {
    "descr": "Get the amount of ticks since this bell has been shaking, or 0 if the\\nbell is not currently shaking.\\n\\nA bell will typically shake for 50 ticks.",
    "param-names": ["Bell"],
    "param-types": ["org.bukkit.block.Bell"],
    "method": "getShakingTicks",
    "id": "org.bukkit.block.Bell#getShakingTicks()",
    "class": "org.bukkit.block.Bell",
    "return": "int"
  },
  {
    "static": true,
    "field": "STRIPE_LEFT",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_LEFT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "EXPOSED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#EXPOSED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_BOTTLE_FILL",
    "id": "org.bukkit.Sound#ITEM_BOTTLE_FILL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the search radius value for finding an available portal.",
    "method": "getSearchRadius",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getSearchRadius()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_PORK",
    "id": "org.bukkit.Material#LEGACY_PORK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_END_BRICKS",
    "id": "org.bukkit.Material#LEGACY_END_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the maximum domestication level of this horse.\\n\\nThe higher this level is, the longer it will likely take\\nfor the horse to be tamed.",
    "param-names": ["AbstractHorse"],
    "param-types": ["org.bukkit.entity.AbstractHorse"],
    "method": "getMaxDomestication",
    "id": "org.bukkit.entity.AbstractHorse#getMaxDomestication()",
    "class": "org.bukkit.entity.AbstractHorse",
    "return": "int"
  },
  {
    "static": true,
    "field": "OAK_BOAT",
    "id": "org.bukkit.Material#OAK_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when an item is dispensed from a block.\\n\\nIf a Block Dispense event is cancelled, the block will not dispense the\\nitem.",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent"
  },
  {
    "descr": "Called when a player joins a server",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleUpdateEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleUpdateEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "PURPLE_CARPET",
    "id": "org.bukkit.Material#PURPLE_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PAINTING",
    "id": "org.bukkit.Material#PAINTING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PANDA_EAT",
    "id": "org.bukkit.Sound#ENTITY_PANDA_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_BEE_LOOP_AGGRESSIVE",
    "id": "org.bukkit.Sound#ENTITY_BEE_LOOP_AGGRESSIVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_SNOW_BLOCK",
    "id": "org.bukkit.Material#LEGACY_SNOW_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BREWING_STAND_BREW",
    "id": "org.bukkit.Sound#BLOCK_BREWING_STAND_BREW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_HURT",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIGHT_BLUE_SHULKER_BOX",
    "id": "org.bukkit.Material#LIGHT_BLUE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the type of skull",
    "param-names": [
      "Skull",
      "Skull Type"
    ],
    "param-types": [
      "org.bukkit.block.Skull",
      "org.bukkit.SkullType"
    ],
    "method": "setSkullType",
    "id": "org.bukkit.block.Skull#setSkullType(org.bukkit.SkullType)",
    "class": "org.bukkit.block.Skull"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_PISTON_BASE",
    "id": "org.bukkit.Material#LEGACY_PISTON_BASE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.inventory.MainHand#valueOf(java.lang.String)",
    "class": "org.bukkit.inventory.MainHand",
    "return": "org.bukkit.inventory.MainHand"
  },
  {
    "descr": "Get the vehicle that this entity is inside. If there is no vehicle,\\nnull will be returned.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getVehicle",
    "id": "org.bukkit.entity.Entity#getVehicle()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Llama.Color#values()",
    "class": "org.bukkit.entity.Llama.Color",
    "return": "org.bukkit.entity.Llama.Color[]"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerUnregisterChannelEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.scoreboard.Team.OptionStatus#valueOf(java.lang.String)",
    "class": "org.bukkit.scoreboard.Team.OptionStatus",
    "return": "org.bukkit.scoreboard.Team.OptionStatus"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "CYAN_CANDLE",
    "id": "org.bukkit.Material#CYAN_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Block ignition caused by explosion.",
    "static": true,
    "field": "EXPLOSION",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#EXPLOSION",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "descr": "Checks if the specified enchantment conflicts with any enchantments in\\nthis ItemMeta.",
    "param-names": [
      "EnchantmentStorageMeta",
      "Ench"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.EnchantmentStorageMeta",
      "org.bukkit.enchantments.Enchantment"
    ],
    "method": "hasConflictingStoredEnchant",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#hasConflictingStoredEnchant(org.bukkit.enchantments.Enchantment)",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "boolean"
  },
  {
    "descr": "Get the volume these sounds are played at.\\nNote that this volume does not always represent the actual volume\\nreceived by the client.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getVolume",
    "id": "org.bukkit.SoundGroup#getVolume()",
    "class": "org.bukkit.SoundGroup",
    "return": "float"
  },
  {
    "descr": "Set the time in ticks this entity's movement has been increased relative\\nto the most recent boost.",
    "param-names": [
      "Steerable",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Steerable",
      "int"
    ],
    "method": "setCurrentBoostTicks",
    "id": "org.bukkit.entity.Steerable#setCurrentBoostTicks(int)",
    "class": "org.bukkit.entity.Steerable"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_DRAGON_GROWL",
    "id": "org.bukkit.Sound#ENTITY_ENDER_DRAGON_GROWL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when the amount of air an entity has remaining changes.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent"
  },
  {
    "descr": "Adds the specified enchantment to this item meta.",
    "param-names": [
      "ItemMeta",
      "Ench",
      "Level",
      "Ignore Level Restriction"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.enchantments.Enchantment",
      "int",
      "boolean"
    ],
    "method": "addEnchant",
    "id": "org.bukkit.inventory.meta.ItemMeta#addEnchant(org.bukkit.enchantments.Enchantment,int,boolean)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.SoundCategory#valueOf(java.lang.String)",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "descr": "Shows if this score has been set at any point in time.",
    "param-names": ["Score"],
    "param-types": ["org.bukkit.scoreboard.Score"],
    "method": "isScoreSet",
    "id": "org.bukkit.scoreboard.Score#isScoreSet()",
    "class": "org.bukkit.scoreboard.Score",
    "return": "boolean"
  },
  {
    "descr": "Gets the block the raider is targeting to patrol.",
    "param-names": ["Raider"],
    "param-types": ["org.bukkit.entity.Raider"],
    "method": "getPatrolTarget",
    "id": "org.bukkit.entity.Raider#getPatrolTarget()",
    "class": "org.bukkit.entity.Raider",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Check whether or not this bell is resonating. A bell is considered to be\\nresonating if #isShaking() while shaking, raiders were detected\\nin the area and are ready to be highlighted to nearby players.\\n\\nA bell will typically resonate for 40 ticks.",
    "param-names": ["Bell"],
    "param-types": ["org.bukkit.block.Bell"],
    "method": "isResonating",
    "id": "org.bukkit.block.Bell#isResonating()",
    "class": "org.bukkit.block.Bell",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#values()",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State[]"
  },
  {
    "descr": "Gets the total brew time associated with this event.",
    "method": "getTotalBrewTime",
    "id": "org.bukkit.event.block.BrewingStartEvent#getTotalBrewTime()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "CHAINMAIL_HELMET",
    "id": "org.bukkit.Material#CHAINMAIL_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "VILLAGE_SHEPHERD",
    "id": "org.bukkit.loot.LootTables#VILLAGE_SHEPHERD",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "SPRUCE_BOAT",
    "id": "org.bukkit.Material#SPRUCE_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Create a new explorer map targeting the closest nearby structure of a\\ngiven StructureType.\\n\\nThis method uses implementation default values for radius and\\nfindUnexplored (usually 100, true).",
    "param-names": [
      "World",
      "Location",
      "Structure Type",
      "Radius",
      "Find Unexplored"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.StructureType",
      "int",
      "boolean"
    ],
    "method": "createExplorerMap",
    "id": "org.bukkit.Bukkit#createExplorerMap(org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType,int,boolean)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_BIRCH_DOOR_ITEM",
    "id": "org.bukkit.Material#LEGACY_BIRCH_DOOR_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Randomly teleports the Enderman in a 64x64x64 block cuboid region.\\n\\nIf the randomly selected point is in the ground, the point is moved 1 block\\ndown until air is found or until it goes under\\norg.bukkit.World#getMinHeight().\\n\\nThis method will return false if this Enderman is not alive, or if the\\nteleport location was obstructed, or if the teleport location is in water.",
    "param-names": ["Enderman"],
    "param-types": ["org.bukkit.entity.Enderman"],
    "method": "teleport",
    "id": "org.bukkit.entity.Enderman#teleport()",
    "class": "org.bukkit.entity.Enderman",
    "return": "boolean"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Replaces the projectile which will be launched",
    "param-names": ["Projectile"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "setProjectile",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#setProjectile(org.bukkit.entity.Entity)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "GRAY_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#GRAY_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_CREATIVE",
    "id": "org.bukkit.Sound#MUSIC_CREATIVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "COBBLESTONE_WALL",
    "id": "org.bukkit.Material#COBBLESTONE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the last 'token' of the message being tab-completed.\\n\\nThe token is the substring starting with the character after the last\\nspace in the message.",
    "method": "getLastToken",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getLastToken()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the default ticks per water ambient mob spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water ambient mobs\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn water ambient mobs\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, ambient mobs spawning will be disabled.\\n\\nMinecraft default: 1.",
    "static": true,
    "method": "getTicksPerWaterAmbientSpawns",
    "id": "org.bukkit.Bukkit#getTicksPerWaterAmbientSpawns()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "GROUND",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#GROUND",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "The chat color used by Minecraft for this advancement.",
    "param-names": ["AdvancementDisplayType"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplayType"],
    "method": "getColor",
    "id": "org.bukkit.advancement.AdvancementDisplayType#getColor()",
    "class": "org.bukkit.advancement.AdvancementDisplayType",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Gets an immutable list containing all custom potion effects applied to\\nthis cloud.\\n\\nPlugins should check that hasCustomEffects() returns true before calling\\nthis method.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getCustomEffects",
    "id": "org.bukkit.entity.AreaEffectCloud#getCustomEffects()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "java.util.List"
  },
  {
    "descr": "Add a renderer to this map.",
    "param-names": [
      "MapView",
      "Renderer"
    ],
    "param-types": [
      "org.bukkit.map.MapView",
      "org.bukkit.map.MapRenderer"
    ],
    "method": "addRenderer",
    "id": "org.bukkit.map.MapView#addRenderer(org.bukkit.map.MapRenderer)",
    "class": "org.bukkit.map.MapView"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockBurnEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets the value of the 'enabled' property.",
    "param-names": [
      "Hopper",
      "Enabled"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Hopper",
      "boolean"
    ],
    "method": "setEnabled",
    "id": "org.bukkit.block.data.type.Hopper#setEnabled(boolean)",
    "class": "org.bukkit.block.data.type.Hopper"
  },
  {
    "static": true,
    "field": "BLOCK_FLOWERING_AZALEA_BREAK",
    "id": "org.bukkit.Sound#BLOCK_FLOWERING_AZALEA_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Request that the player's client download and switch resource packs.\\n\\nThe player's client will download the new resource pack asynchronously\\nin the background, and will automatically switch to it once the\\ndownload is complete. If the client has downloaded and cached a\\nresource pack with the same hash in the past it will not download but\\ndirectly apply the cached pack. If the hash is null and the client has\\ndownloaded and cached the same resource pack in the past, it will\\nperform a file size check against the response content to determine if\\nthe resource pack has changed and needs to be downloaded again. When\\nthis request is sent for the very first time from a given server, the\\nclient will first display a confirmation GUI to the player before\\nproceeding with the download.\\n\\nNotes:\\n\\nPlayers can disable server resources on their client, in which\\ncase this method will have no affect on them. Use the\\nPlayerResourcePackStatusEvent to figure out whether or not\\nthe player loaded the pack!\\nThere is no concept of resetting resource packs back to default\\nwithin Minecraft, so players will have to relog to do so or you\\nhave to send an empty pack.\\nThe request is sent with empty string as the hash when the hash is\\nnot provided. This might result in newer versions not loading the\\npack correctly.\\n",
    "param-names": [
      "Player",
      "Url",
      "Hash",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "byte[]",
      "boolean"
    ],
    "method": "setResourcePack",
    "id": "org.bukkit.entity.Player#setResourcePack(java.lang.String,byte[],boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the limit for number of ambient mobs that can spawn in a chunk in\\nthis world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getAmbientSpawnLimit",
    "id": "org.bukkit.World#getAmbientSpawnLimit()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "static": true,
    "field": "JUNGLE",
    "id": "org.bukkit.entity.Boat.Type#JUNGLE",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Called when an entity is spawned into a world by a spawner.\\n\\nIf a Spawner Spawn event is cancelled, the entity will not spawn.",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent"
  },
  {
    "descr": "Sets the record being played.",
    "param-names": [
      "Jukebox",
      "Record"
    ],
    "param-types": [
      "org.bukkit.block.Jukebox",
      "org.bukkit.Material"
    ],
    "method": "setPlaying",
    "id": "org.bukkit.block.Jukebox#setPlaying(org.bukkit.Material)",
    "class": "org.bukkit.block.Jukebox"
  },
  {
    "descr": "Gets the world's ticks per monster spawns value\\n\\nThis value determines how many ticks there are between attempts to\\nspawn monsters.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn monsters in\\nthis world every tick.\\nA value of 400 will mean the server will attempt to spawn monsters\\nin this world every 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote:\\nIf set to 0, monsters spawning will be disabled for this world. We\\nrecommend using #setSpawnFlags(boolean, boolean) to control\\nthis instead.\\n\\nMinecraft default: 1.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTicksPerMonsterSpawns",
    "id": "org.bukkit.World#getTicksPerMonsterSpawns()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityDeathEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "OAK_TRAPDOOR",
    "id": "org.bukkit.Material#OAK_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COOKED_PORKCHOP",
    "id": "org.bukkit.Material#COOKED_PORKCHOP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the internal value of the cursor.",
    "param-names": ["MapCursor.Type"],
    "param-types": ["org.bukkit.map.MapCursor.Type"],
    "method": "getValue",
    "id": "org.bukkit.map.MapCursor.Type#getValue()",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BLOCK_STEM_FALL",
    "id": "org.bukkit.Sound#BLOCK_STEM_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent"
  },
  {
    "descr": "When the entity is inflicted with a potion effect due to an entity\\nattack (e.g. a cave spider or a shulker bullet).",
    "static": true,
    "field": "ATTACK",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#ATTACK",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "BIRCH_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#BIRCH_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the Spell the Evoker is currently using.",
    "param-names": [
      "Evoker",
      "Spell"
    ],
    "param-types": [
      "org.bukkit.entity.Evoker",
      "org.bukkit.entity.Evoker.Spell"
    ],
    "method": "setCurrentSpell",
    "id": "org.bukkit.entity.Evoker#setCurrentSpell(org.bukkit.entity.Evoker.Spell)",
    "class": "org.bukkit.entity.Evoker"
  },
  {
    "static": true,
    "field": "LEGACY_OBSERVER",
    "id": "org.bukkit.Material#LEGACY_OBSERVER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_SLEEP",
    "id": "org.bukkit.Sound#ENTITY_FOX_SLEEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WITHER_SKELETON_SPAWN_EGG",
    "id": "org.bukkit.Material#WITHER_SKELETON_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_QUARTZ_STAIRS",
    "id": "org.bukkit.Material#LEGACY_QUARTZ_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the pattern at the specified index",
    "param-names": [
      "Banner",
      "I"
    ],
    "param-types": [
      "org.bukkit.block.Banner",
      "int"
    ],
    "method": "getPattern",
    "id": "org.bukkit.block.Banner#getPattern(int)",
    "class": "org.bukkit.block.Banner",
    "return": "org.bukkit.block.banner.Pattern"
  },
  {
    "descr": "Sets the fish's pattern.\\n\\nSetting this when hasVariant() returns false will initialize\\nall other values to unspecified defaults.",
    "param-names": [
      "TropicalFishBucketMeta",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.TropicalFishBucketMeta",
      "org.bukkit.entity.TropicalFish.Pattern"
    ],
    "method": "setPattern",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#setPattern(org.bukkit.entity.TropicalFish.Pattern)",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_BIG_FALL",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_BIG_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "EXPOSED_COPPER",
    "id": "org.bukkit.Material#EXPOSED_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the server is in hardcore mode or not.",
    "static": true,
    "method": "isHardcore",
    "id": "org.bukkit.Bukkit#isHardcore()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'triggered' property.",
    "param-names": [
      "Dispenser",
      "Triggered"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Dispenser",
      "boolean"
    ],
    "method": "setTriggered",
    "id": "org.bukkit.block.data.type.Dispenser#setTriggered(boolean)",
    "class": "org.bukkit.block.data.type.Dispenser"
  },
  {
    "static": true,
    "field": "IRON_GOLEM",
    "id": "org.bukkit.entity.EntityType#IRON_GOLEM",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "MAGMA_CUBE",
    "id": "org.bukkit.loot.LootTables#MAGMA_CUBE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets if the living entity can pick up items.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getCanPickupItems",
    "id": "org.bukkit.entity.LivingEntity#getCanPickupItems()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Called when an equippable item is dispensed from a block and equipped on a\\nnearby entity.\\n\\nIf a Block Dispense Armor event is cancelled, the equipment will not be\\nequipped on the target entity.",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_ROOTS_HIT",
    "id": "org.bukkit.Sound#BLOCK_HANGING_ROOTS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the value of the 'signal_fire' property.",
    "param-names": [
      "Campfire",
      "Signal Fire"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Campfire",
      "boolean"
    ],
    "method": "setSignalFire",
    "id": "org.bukkit.block.data.type.Campfire#setSignalFire(boolean)",
    "class": "org.bukkit.block.data.type.Campfire"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "PIG",
    "id": "org.bukkit.entity.EntityType#PIG",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_DOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_DOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a copy of the chest plate currently being worn by the entity",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getChestplate",
    "id": "org.bukkit.inventory.EntityEquipment#getChestplate()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Can pivot around vertical axis.",
    "static": true,
    "field": "VERTICAL",
    "id": "org.bukkit.entity.Display.Billboard#VERTICAL",
    "class": "org.bukkit.entity.Display.Billboard",
    "return": "org.bukkit.entity.Display.Billboard"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "AMBIENT_NETHER_WASTES_MOOD",
    "id": "org.bukkit.Sound#AMBIENT_NETHER_WASTES_MOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "DARK_OAK_FENCE",
    "id": "org.bukkit.Material#DARK_OAK_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether the player is sprinting or not.",
    "param-names": [
      "Player",
      "Sprinting"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "boolean"
    ],
    "method": "setSprinting",
    "id": "org.bukkit.entity.Player#setSprinting(boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerExpChangeEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpChangeEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets entities on fire when hit by arrows shot from a bow",
    "static": true,
    "field": "ARROW_FIRE",
    "id": "org.bukkit.enchantments.Enchantment#ARROW_FIRE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_BUBBLE_CORAL",
    "id": "org.bukkit.Material#DEAD_BUBBLE_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Campfire"],
    "param-types": ["org.bukkit.block.Campfire"],
    "method": "getSize",
    "id": "org.bukkit.block.Campfire#getSize()",
    "class": "org.bukkit.block.Campfire",
    "return": "int"
  },
  {
    "descr": "The place where the raid occurs no longer be a village.",
    "static": true,
    "field": "NOT_IN_VILLAGE",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#NOT_IN_VILLAGE",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "descr": "Returns whether this potion is a splash potion.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "isSplash",
    "id": "org.bukkit.potion.Potion#isSplash()",
    "class": "org.bukkit.potion.Potion",
    "return": "boolean"
  },
  {
    "descr": "The dragon will attack with dragon breath at its current location.",
    "static": true,
    "field": "BREATH_ATTACK",
    "id": "org.bukkit.entity.EnderDragon.Phase#BREATH_ATTACK",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerInteractEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent"
  },
  {
    "descr": "Get an immutable list of the blocks which will be moved by the\\nextending.",
    "method": "getBlocks",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the map color that is set. A custom map color will alter the display\\nof the map in an inventory slot.\\n\\nPlugins should check that hasColor() returns true before\\ncalling this method.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "getColor",
    "id": "org.bukkit.inventory.meta.MapMeta#getColor()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "TROPICAL_FISH_SPAWN_EGG",
    "id": "org.bukkit.Material#TROPICAL_FISH_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_AXE",
    "id": "org.bukkit.Material#LEGACY_IRON_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DAMAGE_INDICATOR",
    "id": "org.bukkit.Particle#DAMAGE_INDICATOR",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_PORTAL_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_PORTAL_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "HORSE",
    "id": "org.bukkit.entity.EntityType#HORSE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "POTTED_AZALEA_BUSH",
    "id": "org.bukkit.Material#POTTED_AZALEA_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SHROOMLIGHT_STEP",
    "id": "org.bukkit.Sound#BLOCK_SHROOMLIGHT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Strikes lightning at the given Location without doing damage",
    "param-names": [
      "World",
      "Loc"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location"
    ],
    "method": "strikeLightningEffect",
    "id": "org.bukkit.World#strikeLightningEffect(org.bukkit.Location)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.LightningStrike"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_SHAKE",
    "id": "org.bukkit.Sound#ENTITY_WOLF_SHAKE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'unstable' property.",
    "param-names": ["TNT"],
    "param-types": ["org.bukkit.block.data.type.TNT"],
    "method": "isUnstable",
    "id": "org.bukkit.block.data.type.TNT#isUnstable()",
    "class": "org.bukkit.block.data.type.TNT",
    "return": "boolean"
  },
  {
    "descr": "Cat taming succeeded.",
    "static": true,
    "field": "CAT_TAME_SUCCESS",
    "id": "org.bukkit.EntityEffect#CAT_TAME_SUCCESS",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Sets the kick message to display if getResult() != Result.ALLOWED",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setKickMessage",
    "id": "org.bukkit.event.player.PlayerLoginEvent#setKickMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent"
  },
  {
    "static": true,
    "field": "SPIDER",
    "id": "org.bukkit.loot.LootTables#SPIDER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the raw amount of damage caused by the event",
    "method": "getDamage",
    "id": "org.bukkit.event.entity.EntityDamageEvent#getDamage()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent",
    "return": "double"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "POLISHED_GRANITE_STAIRS",
    "id": "org.bukkit.Material#POLISHED_GRANITE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_13",
    "id": "org.bukkit.Material#MUSIC_DISC_13",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if the potion is in an upgraded state. This refers to whether or\\nnot the potion is Tier 2, such as Potion of Fire Resistance II.",
    "param-names": ["PotionData"],
    "param-types": ["org.bukkit.potion.PotionData"],
    "method": "isUpgraded",
    "id": "org.bukkit.potion.PotionData#isUpgraded()",
    "class": "org.bukkit.potion.PotionData",
    "return": "boolean"
  },
  {
    "descr": "Sets the velocity vector in meters per tick that will be sent to the player",
    "param-names": ["Velocity"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "setVelocity",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#setVelocity(org.bukkit.util.Vector)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent"
  },
  {
    "static": true,
    "field": "WITHER_SKELETON",
    "id": "org.bukkit.loot.LootTables#WITHER_SKELETON",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the block that this block was placed against",
    "method": "getBlockAgainst",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getBlockAgainst()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Set a cooldown on the specified material for a certain amount of ticks.\\nticks. 0 ticks will result in the removal of the cooldown.\\n\\nCooldowns are used by the server for items such as ender pearls and\\nshields to prevent them from being used repeatedly.\\n\\nNote that cooldowns will not by themselves stop an item from being used\\nfor attacking.",
    "param-names": [
      "HumanEntity",
      "Material",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Material",
      "int"
    ],
    "method": "setCooldown",
    "id": "org.bukkit.entity.HumanEntity#setCooldown(org.bukkit.Material,int)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the resultant food level that the entity involved in this event\\nshould be set to.\\n\\nWhere 20 is a full food bar and 0 is an empty one.",
    "method": "getFoodLevel",
    "id": "org.bukkit.event.entity.FoodLevelChangeEvent#getFoodLevel()",
    "event": true,
    "class": "org.bukkit.event.entity.FoodLevelChangeEvent",
    "return": "int"
  },
  {
    "descr": "Sets the patterns used on this banner",
    "param-names": [
      "BannerMeta",
      "Patterns"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BannerMeta",
      "java.util.List"
    ],
    "method": "setPatterns",
    "id": "org.bukkit.inventory.meta.BannerMeta#setPatterns(java.util.List<org.bukkit.block.banner.Pattern>)",
    "class": "org.bukkit.inventory.meta.BannerMeta"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.TabCompleteEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "boolean"
  },
  {
    "descr": "The ender chest inventory, with 27 slots.",
    "static": true,
    "field": "ENDER_CHEST",
    "id": "org.bukkit.event.inventory.InventoryType#ENDER_CHEST",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Structure is mirrored left to right.\\n\\nSimilar to looking in a mirror. Positive X to Negative Z",
    "static": true,
    "field": "LEFT_RIGHT",
    "id": "org.bukkit.block.structure.Mirror#LEFT_RIGHT",
    "class": "org.bukkit.block.structure.Mirror",
    "return": "org.bukkit.block.structure.Mirror"
  },
  {
    "static": true,
    "field": "BLOCK_WART_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_WART_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Guitar is normally played when a note block is on top of a woolen block.",
    "static": true,
    "field": "GUITAR",
    "id": "org.bukkit.Instrument#GUITAR",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Check whether the given text is valid.",
    "param-names": [
      "MapFont",
      "Text"
    ],
    "param-types": [
      "org.bukkit.map.MapFont",
      "java.lang.String"
    ],
    "method": "isValid",
    "id": "org.bukkit.map.MapFont#isValid(java.lang.String)",
    "class": "org.bukkit.map.MapFont",
    "return": "boolean"
  },
  {
    "descr": "Sets the command that the player will send.\\n\\nAll commands begin with a special character; implementations do not\\nconsider the first character when executing the content.",
    "param-names": ["Command"],
    "param-types": ["java.lang.String"],
    "method": "setMessage",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#setMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent"
  },
  {
    "descr": "Returns the reaction of the block when moved by a piston",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "getPistonMoveReaction",
    "id": "org.bukkit.block.data.BlockData#getPistonMoveReaction()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Stores the ItemStack at the given equipment slot in the inventory.",
    "param-names": [
      "EntityEquipment",
      "Slot",
      "Item",
      "Silent"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.EntityEquipment#setItem(org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_HANGING_SIGN_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_HANGING_SIGN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "PINK_CANDLE",
    "id": "org.bukkit.Material#PINK_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_DRINK_MILK",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_DRINK_MILK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "JUNGLE_BOAT",
    "id": "org.bukkit.Material#JUNGLE_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks for existence of a map color.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "hasColor",
    "id": "org.bukkit.inventory.meta.MapMeta#hasColor()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "boolean"
  },
  {
    "descr": "Entity breaks item in legging slot",
    "static": true,
    "field": "BREAK_EQUIPMENT_LEGGINGS",
    "id": "org.bukkit.EntityEffect#BREAK_EQUIPMENT_LEGGINGS",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Human readable description of the circumstances, in which the type is\\nnullable.",
    "param-names": ["UndefinedNullability"],
    "param-types": ["org.bukkit.UndefinedNullability"],
    "method": "value",
    "id": "org.bukkit.UndefinedNullability#value()",
    "class": "org.bukkit.UndefinedNullability",
    "return": "java.lang.String"
  },
  {
    "descr": "Shows the demo screen to the player, this screen is normally only seen in\\nthe demo version of the game.\\n\\nServers can modify the text on this screen using a resource pack.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "showDemoScreen",
    "id": "org.bukkit.entity.Player#showDemoScreen()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the category which this recipe will appear in the recipe book under.\\nDefaults to CraftingBookCategory#MISC if not set.",
    "param-names": [
      "ShapelessRecipe",
      "Category"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.inventory.recipe.CraftingBookCategory"
    ],
    "method": "setCategory",
    "id": "org.bukkit.inventory.ShapelessRecipe#setCategory(org.bukkit.inventory.recipe.CraftingBookCategory)",
    "class": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Gets the item from which the hanging entity originated",
    "method": "getItemStack",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getItemStack()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Sets whether the entity is invulnerable or not.\\n\\nWhen an entity is invulnerable it can only be damaged by players in\\ncreative mode.",
    "param-names": [
      "Entity",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setInvulnerable",
    "id": "org.bukkit.entity.Entity#setInvulnerable(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the cause of the damage.",
    "method": "getCause",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "LEGACY_EXP_BOTTLE",
    "id": "org.bukkit.Material#LEGACY_EXP_BOTTLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LLAMA_SPAWN_EGG",
    "id": "org.bukkit.Material#LLAMA_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a wolf shakes (after being wet).",
    "static": true,
    "field": "WOLF_SHAKE",
    "id": "org.bukkit.EntityEffect#WOLF_SHAKE",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.FurnaceExtractEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceExtractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the Y position of this cursor.",
    "param-names": [
      "MapCursor",
      "Y"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "byte"
    ],
    "method": "setY",
    "id": "org.bukkit.map.MapCursor#setY(byte)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityCombustEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Apply this option to everyone.",
    "static": true,
    "field": "ALWAYS",
    "id": "org.bukkit.scoreboard.Team.OptionStatus#ALWAYS",
    "class": "org.bukkit.scoreboard.Team.OptionStatus",
    "return": "org.bukkit.scoreboard.Team.OptionStatus"
  },
  {
    "descr": "Sets the id and data of the block that the Enderman is carrying.",
    "param-names": [
      "Enderman",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Enderman",
      "org.bukkit.material.MaterialData"
    ],
    "method": "setCarriedMaterial",
    "id": "org.bukkit.entity.Enderman#setCarriedMaterial(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.entity.Enderman"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "WEATHERED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#WEATHERED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent"
  },
  {
    "descr": "Get the face on the clicked block",
    "method": "getBlockFace",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getBlockFace()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Get the view distance from this server.",
    "static": true,
    "method": "getViewDistance",
    "id": "org.bukkit.Bukkit#getViewDistance()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the maximum line width before wrapping.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "getLineWidth",
    "id": "org.bukkit.entity.TextDisplay#getLineWidth()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_DONKEY_CHEST",
    "id": "org.bukkit.Sound#ENTITY_DONKEY_CHEST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BellResonateEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the org.bukkit.map.MapCursor.Type that this structure can use on maps. If\\nthis is null, this structure will not appear on explorer maps.",
    "param-names": ["StructureType"],
    "param-types": ["org.bukkit.StructureType"],
    "method": "getMapIcon",
    "id": "org.bukkit.StructureType#getMapIcon()",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "method": "getReason",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "static": true,
    "field": "GHAST_SPAWN_EGG",
    "id": "org.bukkit.Material#GHAST_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the maximum allowed value of the 'honey_level' property.",
    "param-names": ["Beehive"],
    "param-types": ["org.bukkit.block.data.type.Beehive"],
    "method": "getMaximumHoneyLevel",
    "id": "org.bukkit.block.data.type.Beehive#getMaximumHoneyLevel()",
    "class": "org.bukkit.block.data.type.Beehive",
    "return": "int"
  },
  {
    "descr": "Get the pig zombie's current anger level.",
    "param-names": ["PigZombie"],
    "param-types": ["org.bukkit.entity.PigZombie"],
    "method": "getAnger",
    "id": "org.bukkit.entity.PigZombie#getAnger()",
    "class": "org.bukkit.entity.PigZombie",
    "return": "int"
  },
  {
    "descr": "The particles shown when oxidation is scraped of an oxidized copper\\nblock.",
    "static": true,
    "field": "OXIDISED_COPPER_SCRAPE",
    "id": "org.bukkit.Effect#OXIDISED_COPPER_SCRAPE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Server structures.",
    "static": true,
    "field": "STRUCTURE",
    "id": "org.bukkit.Registry#STRUCTURE",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ExpBottleEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "MUSIC_NETHER_SOUL_SAND_VALLEY",
    "id": "org.bukkit.Sound#MUSIC_NETHER_SOUL_SAND_VALLEY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Performs scalar multiplication, multiplying all components with a\\nscalar.",
    "param-names": [
      "Vector",
      "M"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "float"
    ],
    "method": "multiply",
    "id": "org.bukkit.util.Vector#multiply(float)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.raid.RaidFinishEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_HURT",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Lantern",
    "static": true,
    "field": "SOUL_LANTERN",
    "id": "org.bukkit.Material#SOUL_LANTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the MapColorCache has values cached, if not it will\\nreturn false.\\nA case where it might return false is when the cache is not build jet.",
    "param-names": ["MapPalette.MapColorCache"],
    "param-types": ["org.bukkit.map.MapPalette.MapColorCache"],
    "method": "isCached",
    "id": "org.bukkit.map.MapPalette.MapColorCache#isCached()",
    "class": "org.bukkit.map.MapPalette.MapColorCache",
    "return": "boolean"
  },
  {
    "descr": "Snow white",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.entity.Horse.Color#WHITE",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "static": true,
    "field": "BLOCK_TRIPWIRE_ATTACH",
    "id": "org.bukkit.Sound#BLOCK_TRIPWIRE_ATTACH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Indicates the teleportation was caused by a player teleporting to a\\nEntity/Player via the spectator menu",
    "static": true,
    "field": "SPECTATE",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#SPECTATE",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "Get if the falling block will break into an item if it cannot be placed.\\n\\nNote that if #getCancelDrop() is true, the falling block\\nwill not drop an item regardless of whether or not the returned value is\\ntrue.",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "getDropItem",
    "id": "org.bukkit.entity.FallingBlock#getDropItem()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "boolean"
  },
  {
    "descr": "Starts a trade between the player and the villager.\\nNote that only one player may trade with a villager at once. You must use\\nthe force parameter for this.",
    "param-names": [
      "HumanEntity",
      "Trader",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.entity.Villager",
      "boolean"
    ],
    "method": "openMerchant",
    "id": "org.bukkit.entity.HumanEntity#openMerchant(org.bukkit.entity.Villager,boolean)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.SmithItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "CHERRY_BUTTON",
    "id": "org.bukkit.Material#CHERRY_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set if this entity will be subject to collisions with other entities.\\n\\nExemptions to this rule can be managed with\\n#getCollidableExemptions()",
    "param-names": [
      "LivingEntity",
      "Collidable"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "boolean"
    ],
    "method": "setCollidable",
    "id": "org.bukkit.entity.LivingEntity#setCollidable(boolean)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Gets the last date and time that this player was witnessed on this\\nserver.\\n\\nIf the player has never played before, this will return 0. Otherwise,\\nit will be the amount of milliseconds since midnight, January 1, 1970\\nUTC.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "getLastPlayed",
    "id": "org.bukkit.OfflinePlayer#getLastPlayed()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "long"
  },
  {
    "descr": "Performs scalar multiplication, multiplying all components with a\\nscalar.",
    "param-names": [
      "Vector",
      "M"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "multiply",
    "id": "org.bukkit.util.Vector#multiply(double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns the patrol leader.",
    "method": "getPatrolLeader",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getPatrolLeader()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "org.bukkit.entity.Raider"
  },
  {
    "descr": "Allows breathing underwater.",
    "static": true,
    "field": "WATER_BREATHING",
    "id": "org.bukkit.potion.PotionEffectType#WATER_BREATHING",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "TOTEM_OF_UNDYING",
    "id": "org.bukkit.Material#TOTEM_OF_UNDYING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CREEPER",
    "id": "org.bukkit.block.banner.PatternType#CREEPER",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Determine the type of the slot by its raw slot ID.\\n\\nIf the type of the slot is unknown, then\\nInventoryType.SlotType#CONTAINER will be returned.",
    "param-names": [
      "InventoryView",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "int"
    ],
    "method": "getSlotType",
    "id": "org.bukkit.inventory.InventoryView#getSlotType(int)",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Set the variant of this frog.",
    "param-names": [
      "Frog",
      "Variant"
    ],
    "param-types": [
      "org.bukkit.entity.Frog",
      "org.bukkit.entity.Frog.Variant"
    ],
    "method": "setVariant",
    "id": "org.bukkit.entity.Frog#setVariant(org.bukkit.entity.Frog.Variant)",
    "class": "org.bukkit.entity.Frog"
  },
  {
    "descr": "This event is called when a player clicks in an inventory.\\n\\nBecause InventoryClickEvent occurs within a modification of the Inventory,\\nnot all Inventory related methods are safe to use.\\n\\nThe following should never be invoked by an EventHandler for\\nInventoryClickEvent using the HumanEntity or InventoryView associated with\\nthis event:\\n\\nHumanEntity#closeInventory()\\nHumanEntity#openInventory(Inventory)\\nHumanEntity#openWorkbench(Location, boolean)\\nHumanEntity#openEnchanting(Location, boolean)\\nInventoryView#close()\\n\\nTo invoke one of these methods, schedule a task using\\nBukkitScheduler#runTask(Plugin, Runnable), which will run the task\\non the next tick. Also be aware that this is not an exhaustive list, and\\nother methods could potentially create issues as well.\\n\\nAssuming the EntityHuman associated with this event is an instance of a\\nPlayer, manipulating the MaxStackSize or contents of an Inventory will\\nrequire an Invocation of Player#updateInventory().\\n\\nModifications to slots that are modified by the results of this\\nInventoryClickEvent can be overwritten. To change these slots, this event\\nshould be cancelled and all desired changes to the inventory applied.\\nAlternatively, scheduling a task using BukkitScheduler#runTask(\\nPlugin, Runnable), which would execute the task on the next tick, would\\nwork as well.",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent"
  },
  {
    "descr": "Resizes this bounding box to represent the intersection of this and the\\ngiven bounding box.",
    "param-names": [
      "BoundingBox",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.BoundingBox"
    ],
    "method": "intersection",
    "id": "org.bukkit.util.BoundingBox#intersection(org.bukkit.util.BoundingBox)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Gets the name of this server implementation.",
    "static": true,
    "method": "getName",
    "id": "org.bukkit.Bukkit#getName()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "descr": "Retrieve the direction this fireball is heading toward",
    "param-names": ["Fireball"],
    "param-types": ["org.bukkit.entity.Fireball"],
    "method": "getDirection",
    "id": "org.bukkit.entity.Fireball#getDirection()",
    "class": "org.bukkit.entity.Fireball",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Called when a sign is changed by a player.\\n\\nIf a Sign Change event is cancelled, the sign will not be changed.",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_WITHER_SKELETON",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_WITHER_SKELETON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Hurts an entity.",
    "static": true,
    "field": "HARM",
    "id": "org.bukkit.potion.PotionEffectType#HARM",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.scoreboard.RenderType#values()",
    "class": "org.bukkit.scoreboard.RenderType",
    "return": "org.bukkit.scoreboard.RenderType[]"
  },
  {
    "descr": "Gets the yaw of this location, measured in degrees.\\n\\nA yaw of 0 or 360 represents the positive z direction.\\nA yaw of 180 represents the negative z direction.\\nA yaw of 90 represents the negative x direction.\\nA yaw of 270 represents the positive x direction.\\n\\nIncreasing yaw values are the equivalent of turning to your\\nright-facing, increasing the scale of the next respective axis, and\\ndecreasing the scale of the previous axis.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getYaw",
    "id": "org.bukkit.Location#getYaw()",
    "class": "org.bukkit.Location",
    "return": "float"
  },
  {
    "descr": "Gets the entity (if any) which triggered this anger update.",
    "method": "getTarget",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getTarget()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Set the maximum spawn delay amount (in ticks).\\n\\nThis value must be greater than 0, as well as greater than or\\nequal to #getMinSpawnDelay()",
    "param-names": [
      "CreatureSpawner",
      "Delay"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setMaxSpawnDelay",
    "id": "org.bukkit.block.CreatureSpawner#setMaxSpawnDelay(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "static": true,
    "field": "COAL",
    "id": "org.bukkit.CoalType#COAL",
    "class": "org.bukkit.CoalType",
    "return": "org.bukkit.CoalType"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_PICKAXE",
    "id": "org.bukkit.Material#LEGACY_IRON_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_CREEPER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_CREEPER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "STEP",
    "id": "org.bukkit.GameEvent#STEP",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_BARDING",
    "id": "org.bukkit.Material#LEGACY_GOLD_BARDING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_POWDER_SNOW_STEP",
    "id": "org.bukkit.Sound#BLOCK_POWDER_SNOW_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_WOOD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_WOOD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LAVA_CAULDRON",
    "id": "org.bukkit.Material#LAVA_CAULDRON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the approximate power of the firework. Each level of power is half\\na second of flight time.",
    "param-names": [
      "FireworkMeta",
      "Power"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.FireworkMeta",
      "int"
    ],
    "method": "setPower",
    "id": "org.bukkit.inventory.meta.FireworkMeta#setPower(int)",
    "class": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "descr": "Gets the item being damaged.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "AZTEC2",
    "id": "org.bukkit.Art#AZTEC2",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "ENTITY_DAMAGED",
    "id": "org.bukkit.GameEvent#ENTITY_DAMAGED",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "PHANTOM_SPAWN_EGG",
    "id": "org.bukkit.Material#PHANTOM_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the item that is being dispensed. Modifying the returned item will\\nhave no effect, you must use #setItem(org.bukkit.inventory.ItemStack) instead.",
    "method": "getItem",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the original damage for the specified modifier, as defined at this\\nevent's construction.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "getOriginalDamage",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getOriginalDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "double"
  },
  {
    "descr": "Gets the cause of the damage.",
    "method": "getCause",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Used to run specific custom functions, which can only be used for certain\\nStructures. The structure block is removed after this function completes.\\nThe data tags (functions) can be found on the\\nwiki.",
    "static": true,
    "field": "DATA",
    "id": "org.bukkit.block.structure.UsageMode#DATA",
    "class": "org.bukkit.block.structure.UsageMode",
    "return": "org.bukkit.block.structure.UsageMode"
  },
  {
    "static": true,
    "field": "ITEM_SPYGLASS_USE",
    "id": "org.bukkit.Sound#ITEM_SPYGLASS_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the ItemDrop created by the player",
    "method": "getItemDrop",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#getItemDrop()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_DOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_DOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PIG_STEP",
    "id": "org.bukkit.Sound#ENTITY_PIG_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_BIRCH_WOOD",
    "id": "org.bukkit.Material#STRIPPED_BIRCH_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "CYAN_WALL_BANNER",
    "id": "org.bukkit.Material#CYAN_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the block vector of this vector.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "toBlockVector",
    "id": "org.bukkit.util.Vector#toBlockVector()",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.BlockVector"
  },
  {
    "static": true,
    "field": "DEEPSLATE_BRICKS",
    "id": "org.bukkit.Material#DEEPSLATE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the amount of experience granted by breeding.",
    "param-names": ["Experience"],
    "param-types": ["int"],
    "method": "setExperience",
    "id": "org.bukkit.event.entity.EntityBreedEvent#setExperience(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent"
  },
  {
    "descr": "Play a sound for a player at the location of the entity.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "Player",
      "Entity",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Entity",
      "org.bukkit.Sound",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.entity.Entity,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns an instance of PotionBrewer.",
    "static": true,
    "method": "getBrewer",
    "id": "org.bukkit.potion.Potion#getBrewer()",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.potion.PotionBrewer"
  },
  {
    "static": true,
    "field": "INFESTED_MOSSY_STONE_BRICKS",
    "id": "org.bukkit.Material#INFESTED_MOSSY_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_STEP",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "JUNGLE_LEAVES",
    "id": "org.bukkit.Material#JUNGLE_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SUGAR_CANE",
    "id": "org.bukkit.Material#LEGACY_SUGAR_CANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "WARPED_SLAB",
    "id": "org.bukkit.Material#WARPED_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the explosion radius in which this Creeper's explosion will affect.",
    "param-names": ["Creeper"],
    "param-types": ["org.bukkit.entity.Creeper"],
    "method": "getExplosionRadius",
    "id": "org.bukkit.entity.Creeper#getExplosionRadius()",
    "class": "org.bukkit.entity.Creeper",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "MUDDY_MANGROVE_ROOTS",
    "id": "org.bukkit.Material#MUDDY_MANGROVE_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Horse",
      "Chest"
    ],
    "param-types": [
      "org.bukkit.entity.Horse",
      "boolean"
    ],
    "method": "setCarryingChest",
    "id": "org.bukkit.entity.Horse#setCarryingChest(boolean)",
    "class": "org.bukkit.entity.Horse"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_DOOR",
    "id": "org.bukkit.Material#LEGACY_WOOD_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Makes this entity flash red as if they were damaged.",
    "param-names": [
      "LivingEntity",
      "Yaw"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "float"
    ],
    "method": "playHurtAnimation",
    "id": "org.bukkit.entity.LivingEntity#playHurtAnimation(float)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "ACACIA_DOOR",
    "id": "org.bukkit.Material#ACACIA_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When an entity comes in contact with a wither rose.",
    "static": true,
    "field": "WITHER_ROSE",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#WITHER_ROSE",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Sets the flying velocity modifier. Used for minecarts that are in\\nmid-air. A flying minecart's velocity is multiplied by this factor each\\ntick.",
    "param-names": [
      "Minecart",
      "Flying"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "org.bukkit.util.Vector"
    ],
    "method": "setFlyingVelocityMod",
    "id": "org.bukkit.entity.Minecart#setFlyingVelocityMod(org.bukkit.util.Vector)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "static": true,
    "field": "RESONATE_15",
    "id": "org.bukkit.GameEvent#RESONATE_15",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "GRAY_2",
    "id": "org.bukkit.map.MapPalette#GRAY_2",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "BlockData: MultipleFacing",
    "static": true,
    "field": "MUSHROOM_STEM",
    "id": "org.bukkit.Material#MUSHROOM_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_0",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_0",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns a public custom tag container capable of storing tags on the\\nitem.\\nThose tags will be sent to the client with all of their content, so the\\nclient is capable of reading them. This will result in the player seeing\\na NBT Tag notification on the item.\\nThese tags can also be modified by the client once in creative mode",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getCustomTagContainer",
    "id": "org.bukkit.inventory.meta.ItemMeta#getCustomTagContainer()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "org.bukkit.inventory.meta.tags.CustomItemTagContainer"
  },
  {
    "static": true,
    "field": "EAST_SOUTH_EAST",
    "id": "org.bukkit.block.BlockFace#EAST_SOUTH_EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "DONKEY_KONG",
    "id": "org.bukkit.Art#DONKEY_KONG",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_WOOL",
    "id": "org.bukkit.Material#LIGHT_BLUE_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item currently being worn by the armor stand on its chest.",
    "param-names": [
      "ArmorStand",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setChestplate",
    "id": "org.bukkit.entity.ArmorStand#setChestplate(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "static": true,
    "field": "DRIP_WATER",
    "id": "org.bukkit.Particle#DRIP_WATER",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Provides a knockback when an entity is hit by an arrow from a bow",
    "static": true,
    "field": "ARROW_KNOCKBACK",
    "id": "org.bukkit.enchantments.Enchantment#ARROW_KNOCKBACK",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Note.Tone#values()",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone[]"
  },
  {
    "descr": "Placed on one wall.",
    "static": true,
    "field": "SINGLE_WALL",
    "id": "org.bukkit.block.data.type.Bell.Attachment#SINGLE_WALL",
    "class": "org.bukkit.block.data.type.Bell.Attachment",
    "return": "org.bukkit.block.data.type.Bell.Attachment"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerShowEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Thrown when a newly generated chunk has finished being populated.\\n\\nNote: Do not use this to generated blocks in a newly generated chunk.\\nUse a BlockPopulator instead.",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent"
  },
  {
    "static": true,
    "field": "LEGACY_JUNGLE_DOOR_ITEM",
    "id": "org.bukkit.Material#LEGACY_JUNGLE_DOOR_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CALCITE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CALCITE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This event is called when either the server startup or reload has completed.",
    "event": true,
    "class": "org.bukkit.event.server.ServerLoadEvent"
  },
  {
    "descr": "Set the ItemMeta of this ItemStack.",
    "param-names": [
      "ItemStack",
      "Item Meta"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.meta.ItemMeta"
    ],
    "method": "setItemMeta",
    "id": "org.bukkit.inventory.ItemStack#setItemMeta(org.bukkit.inventory.meta.ItemMeta)",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RED_CONCRETE",
    "id": "org.bukkit.Material#RED_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "HEART",
    "id": "org.bukkit.Particle#HEART",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_CHAIN_FALL",
    "id": "org.bukkit.Sound#BLOCK_CHAIN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns whether this minecart will slow down faster without a passenger\\noccupying it",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "isSlowWhenEmpty",
    "id": "org.bukkit.entity.Minecart#isSlowWhenEmpty()",
    "class": "org.bukkit.entity.Minecart",
    "return": "boolean"
  },
  {
    "method": "getDuration",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getDuration()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_ENCHANTED",
    "id": "org.bukkit.Statistic#ITEM_ENCHANTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Power change caused by something else (probably a plugin)\\n\\nPowered state: true",
    "static": true,
    "field": "SET_ON",
    "id": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause#SET_ON",
    "class": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause",
    "return": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause"
  },
  {
    "descr": "Expands this bounding box in the specified direction.\\n\\nThe magnitude of the direction will scale the expansion. A negative\\nexpansion value will shrink the bounding box in this direction. Shrinking\\nwill be limited to the bounding box's current size.",
    "param-names": [
      "BoundingBox",
      "Direction",
      "Expansion"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(org.bukkit.util.Vector,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "SWAMP",
    "id": "org.bukkit.entity.Villager.Type#SWAMP",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "descr": "One of the items on the clicked slot are moved to the cursor.",
    "static": true,
    "field": "PICKUP_ONE",
    "id": "org.bukkit.event.inventory.InventoryAction#PICKUP_ONE",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "param-names": ["EntityType"],
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "isAlive",
    "id": "org.bukkit.entity.EntityType#isAlive()",
    "class": "org.bukkit.entity.EntityType",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "YELLOW_WOOL",
    "id": "org.bukkit.Material#YELLOW_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Rabbit"],
    "param-types": ["org.bukkit.entity.Rabbit"],
    "method": "getRabbitType",
    "id": "org.bukkit.entity.Rabbit#getRabbitType()",
    "class": "org.bukkit.entity.Rabbit",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_LEGGINGS",
    "id": "org.bukkit.Material#LEGACY_GOLD_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a bobber is stuck in the ground.",
    "static": true,
    "field": "IN_GROUND",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#IN_GROUND",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "static": true,
    "field": "NETHERITE_SHOVEL",
    "id": "org.bukkit.Material#NETHERITE_SHOVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the hanging entity involved in this event.",
    "method": "getEntity",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.entity.Hanging"
  },
  {
    "descr": "Expands this bounding box to contain (or border) the specified position.",
    "param-names": [
      "BoundingBox",
      "Position"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.Location"
    ],
    "method": "union",
    "id": "org.bukkit.util.BoundingBox#union(org.bukkit.Location)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Allows the enchantment to be placed on items with durability.",
    "static": true,
    "field": "BREAKABLE",
    "id": "org.bukkit.enchantments.EnchantmentTarget#BREAKABLE",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "static": true,
    "field": "BLOCK_CHORUS_FLOWER_DEATH",
    "id": "org.bukkit.Sound#BLOCK_CHORUS_FLOWER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a zombie transforms into a villager by shaking violently.",
    "static": true,
    "field": "ZOMBIE_TRANSFORM",
    "id": "org.bukkit.EntityEffect#ZOMBIE_TRANSFORM",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_11",
    "id": "org.bukkit.Material#LEGACY_RECORD_11",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CAVE_SPIDER",
    "id": "org.bukkit.loot.LootTables#CAVE_SPIDER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "GROVE",
    "id": "org.bukkit.block.Biome#GROVE",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the damage done to the vehicle",
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#setDamage(double)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockFromToEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent"
  },
  {
    "descr": "Returns the list of players within the beacon's range of effect.\\n\\nThis will return an empty list if the block represented by this state is\\nno longer a beacon.",
    "param-names": ["Beacon"],
    "param-types": ["org.bukkit.block.Beacon"],
    "method": "getEntitiesInRange",
    "id": "org.bukkit.block.Beacon#getEntitiesInRange()",
    "class": "org.bukkit.block.Beacon",
    "return": "java.util.Collection"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerMoveEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "WET_SPONGE",
    "id": "org.bukkit.Material#WET_SPONGE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_WITHER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the time in ticks until the next arrow leaves the entity's body.",
    "param-names": [
      "LivingEntity",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setArrowCooldown",
    "id": "org.bukkit.entity.LivingEntity#setArrowCooldown(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "When an effect is inflicted due to food (e.g. when a player eats or a\\ncookie is given to a parrot).",
    "static": true,
    "field": "FOOD",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#FOOD",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "BLOCK_GLASS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_GLASS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates a new Color object from a red, green, and blue",
    "param-names": [
      "Red",
      "Green",
      "Blue"
    ],
    "static": true,
    "param-types": [
      "int",
      "int",
      "int"
    ],
    "method": "fromRGB",
    "id": "org.bukkit.Color#fromRGB(int,int,int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Entity is sitting.",
    "static": true,
    "field": "SITTING",
    "id": "org.bukkit.entity.Pose#SITTING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Sound of ghast shrieking.",
    "static": true,
    "field": "GHAST_SHRIEK",
    "id": "org.bukkit.Effect#GHAST_SHRIEK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "The highest block that blocks motion or contains a fluid.",
    "static": true,
    "field": "MOTION_BLOCKING",
    "id": "org.bukkit.HeightMap#MOTION_BLOCKING",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "BROWN_CONCRETE_POWDER",
    "id": "org.bukkit.Material#BROWN_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "NETHER_WASTES",
    "id": "org.bukkit.block.Biome#NETHER_WASTES",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "When a player fails to catch a bite while fishing usually due to\\npoor timing.",
    "static": true,
    "field": "FAILED_ATTEMPT",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#FAILED_ATTEMPT",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "descr": "Sets the offset of the display block.",
    "param-names": [
      "Minecart",
      "Offset"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "int"
    ],
    "method": "setDisplayBlockOffset",
    "id": "org.bukkit.entity.Minecart#setDisplayBlockOffset(int)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Gets the custom prompt message to be shown when the server resource\\npack is required, or empty string if not specified.",
    "static": true,
    "method": "getResourcePackPrompt",
    "id": "org.bukkit.Bukkit#getResourcePackPrompt()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A result slot in a furnace or crafting inventory.",
    "static": true,
    "field": "RESULT",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#RESULT",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "static": true,
    "field": "ENTITY_TROPICAL_FISH_FLOP",
    "id": "org.bukkit.Sound#ENTITY_TROPICAL_FISH_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the maximum amount of damage that can be inflicted upon entities when\\nthis falling block lands on them.\\n\\nIf damage is non-zero, this method will automatically call\\n#setHurtEntities(boolean) setHurtEntities(true).",
    "param-names": [
      "FallingBlock",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.entity.FallingBlock",
      "int"
    ],
    "method": "setMaxDamage",
    "id": "org.bukkit.entity.FallingBlock#setMaxDamage(int)",
    "class": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_SPROUTS_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHER_SPROUTS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "KILL_ENTITY",
    "id": "org.bukkit.Statistic#KILL_ENTITY",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "PLAYERS",
    "id": "org.bukkit.SoundCategory#PLAYERS",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.inventory.meta.BookMeta.Generation#values()",
    "class": "org.bukkit.inventory.meta.BookMeta.Generation",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation[]"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Pose#values()",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose[]"
  },
  {
    "static": true,
    "field": "FEATHER",
    "id": "org.bukkit.Material#FEATHER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent"
  },
  {
    "static": true,
    "field": "ENTITY_SNOWBALL_THROW",
    "id": "org.bukkit.Sound#ENTITY_SNOWBALL_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the maximum number of uses this trade has.",
    "param-names": [
      "MerchantRecipe",
      "Max Uses"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "int"
    ],
    "method": "setMaxUses",
    "id": "org.bukkit.inventory.MerchantRecipe#setMaxUses(int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Indicates the teleportation was caused by an event not covered by\\nthis enum",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#UNKNOWN",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BROWN_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#BROWN_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the height of the specified face.",
    "param-names": [
      "Wall",
      "Face",
      "Height"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Wall",
      "org.bukkit.block.BlockFace",
      "org.bukkit.block.data.type.Wall.Height"
    ],
    "method": "setHeight",
    "id": "org.bukkit.block.data.type.Wall#setHeight(org.bukkit.block.BlockFace,org.bukkit.block.data.type.Wall.Height)",
    "class": "org.bukkit.block.data.type.Wall"
  },
  {
    "descr": "Checks for the existence of an author in the book.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "hasAuthor",
    "id": "org.bukkit.inventory.meta.BookMeta#hasAuthor()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DOLPHIN",
    "id": "org.bukkit.loot.LootTables#DOLPHIN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ATTACHED_MELON_STEM",
    "id": "org.bukkit.Material#ATTACHED_MELON_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether the Server is in online mode or not.",
    "static": true,
    "method": "getOnlineMode",
    "id": "org.bukkit.Bukkit#getOnlineMode()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RAW_GOLD",
    "id": "org.bukkit.Material#RAW_GOLD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MAGMA_CREAM",
    "id": "org.bukkit.Material#MAGMA_CREAM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Performs a ray trace that provides information on the targeted block.\\n\\nThis takes the blocks' precise collision shapes into account. Fluids are\\nignored.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "LivingEntity",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "double"
    ],
    "method": "rayTraceBlocks",
    "id": "org.bukkit.entity.LivingEntity#rayTraceBlocks(double)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockBurnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BANNER_BROWN",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_BROWN",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "BLOCK_FIRE_EXTINGUISH",
    "id": "org.bukkit.Sound#BLOCK_FIRE_EXTINGUISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "When an ender dragon regains health from an ender crystal",
    "static": true,
    "field": "ENDER_CRYSTAL",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#ENDER_CRYSTAL",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "static": true,
    "field": "BRICK",
    "id": "org.bukkit.Material#BRICK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the resulting item in hand after the bucket event",
    "method": "getItemStack",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getItemStack()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_BOOK_AND_QUILL",
    "id": "org.bukkit.Material#LEGACY_BOOK_AND_QUILL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ECHO_SHARD",
    "id": "org.bukkit.Material#ECHO_SHARD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates an empty WorldCreationOptions for the given world name",
    "param-names": ["Name"],
    "param-types": ["java.lang.String"],
    "id": "org.bukkit.WorldCreator#WorldCreator(java.lang.String)",
    "class": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the highest non-empty (impassable) block at the given coordinates.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "getHighestBlockAt",
    "id": "org.bukkit.World#getHighestBlockAt(int,int)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "ENTITY_MOUNT",
    "id": "org.bukkit.GameEvent#ENTITY_MOUNT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Reloads the server, refreshing settings and plugin information.",
    "static": true,
    "method": "reload",
    "id": "org.bukkit.Bukkit#reload()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Set the Y component.",
    "param-names": [
      "Vector",
      "Y"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "int"
    ],
    "method": "setY",
    "id": "org.bukkit.util.Vector#setY(int)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Called when an arrow enters or exists an entity's body.",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DEEP_LUKEWARM_OCEAN",
    "id": "org.bukkit.block.Biome#DEEP_LUKEWARM_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the value of the 'bites' property.",
    "param-names": [
      "Cake",
      "Bites"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Cake",
      "int"
    ],
    "method": "setBites",
    "id": "org.bukkit.block.data.type.Cake#setBites(int)",
    "class": "org.bukkit.block.data.type.Cake"
  },
  {
    "descr": "Get block type for block at corresponding coordinate in the chunk",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockType",
    "id": "org.bukkit.ChunkSnapshot#getBlockType(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.ChunkPopulateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "SPRUCE_WALL_SIGN",
    "id": "org.bukkit.Material#SPRUCE_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Setting to show/hide dyes from colored leather armor.",
    "static": true,
    "field": "HIDE_DYE",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_DYE",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "static": true,
    "field": "RED_POINTER",
    "id": "org.bukkit.map.MapCursor.Type#RED_POINTER",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "When an Iron Golem gives a rose.",
    "static": true,
    "field": "IRON_GOLEM_ROSE",
    "id": "org.bukkit.EntityEffect#IRON_GOLEM_ROSE",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "DESERT_PYRAMID_ARCHAEOLOGY",
    "id": "org.bukkit.loot.LootTables#DESERT_PYRAMID_ARCHAEOLOGY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Set whether or not this strider is shivering.\\nNote that the shivering state is updated frequently on the server,\\ntherefore this method may not affect the entity for long enough to have a\\nnoticeable difference.",
    "param-names": [
      "Strider",
      "Shivering"
    ],
    "param-types": [
      "org.bukkit.entity.Strider",
      "boolean"
    ],
    "method": "setShivering",
    "id": "org.bukkit.entity.Strider#setShivering(boolean)",
    "class": "org.bukkit.entity.Strider"
  },
  {
    "descr": "Gets the minimum z value.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMinZ",
    "id": "org.bukkit.util.BoundingBox#getMinZ()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "static": true,
    "field": "TURTLE_HELMET",
    "id": "org.bukkit.Material#TURTLE_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the block is being indirectly powered by Redstone.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "isBlockIndirectlyPowered",
    "id": "org.bukkit.block.Block#isBlockIndirectlyPowered()",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Copies the options from the specified WorldCreator",
    "param-names": [
      "WorldCreator",
      "Creator"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "org.bukkit.WorldCreator"
    ],
    "method": "copy",
    "id": "org.bukkit.WorldCreator#copy(org.bukkit.WorldCreator)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Comparator.Mode#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Comparator.Mode",
    "return": "org.bukkit.block.data.type.Comparator.Mode"
  },
  {
    "descr": "Sets the player's visible Scoreboard.",
    "param-names": [
      "Player",
      "Scoreboard"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.scoreboard.Scoreboard"
    ],
    "method": "setScoreboard",
    "id": "org.bukkit.entity.Player#setScoreboard(org.bukkit.scoreboard.Scoreboard)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_PLACE",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_BUBBLE_CORAL_FAN",
    "id": "org.bukkit.Material#DEAD_BUBBLE_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.NetherWartsState#values()",
    "class": "org.bukkit.NetherWartsState",
    "return": "org.bukkit.NetherWartsState[]"
  },
  {
    "descr": "Gets the item that is being dispensed. Modifying the returned item will\\nhave no effect, you must use #setItem(org.bukkit.inventory.ItemStack) instead.",
    "method": "getItem",
    "id": "org.bukkit.event.block.BlockDispenseEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Set the fuse ticks for this Creeper, where the ticks is the amount of\\ntime in which a creeper has been in the primed state.",
    "param-names": [
      "Creeper",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Creeper",
      "int"
    ],
    "method": "setFuseTicks",
    "id": "org.bukkit.entity.Creeper#setFuseTicks(int)",
    "class": "org.bukkit.entity.Creeper"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_EAT",
    "id": "org.bukkit.Sound#ENTITY_PARROT_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Clears the list of crafting recipes.",
    "static": true,
    "method": "clearRecipes",
    "id": "org.bukkit.Bukkit#clearRecipes()",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Gets the update folder. The update folder is used to safely update\\nplugins at the right moment on a plugin load.",
    "static": true,
    "method": "getUpdateFolderFile",
    "id": "org.bukkit.Bukkit#getUpdateFolderFile()",
    "class": "org.bukkit.Bukkit",
    "return": "java.io.File"
  },
  {
    "descr": "Lime, or (0x00,0xFF,0x00) in (R,G,B)",
    "static": true,
    "field": "LIME",
    "id": "org.bukkit.Color#LIME",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Gets an ItemStack representing the cursor prior to any modifications\\nas a result of this drag.",
    "method": "getOldCursor",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#getOldCursor()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_PRESSURE_PLATE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_STONE_PRESSURE_PLATE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "In an enchanting inventory, the first four bits of the player's xpSeed.",
    "static": true,
    "field": "ENCHANT_XP_SEED",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_XP_SEED",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "field": "GLOW_SQUID_SPAWN_EGG",
    "id": "org.bukkit.Material#GLOW_SQUID_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTS_FALL",
    "id": "org.bukkit.Sound#BLOCK_ROOTS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the name to be applied to the repaired item. An empty string denotes\\nthe default item name.",
    "param-names": ["AnvilInventory"],
    "param-types": ["org.bukkit.inventory.AnvilInventory"],
    "method": "getRenameText",
    "id": "org.bukkit.inventory.AnvilInventory#getRenameText()",
    "class": "org.bukkit.inventory.AnvilInventory",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLACK_WOOL",
    "id": "org.bukkit.Material#BLACK_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PILLAGER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PILLAGER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the inventory slot number for the book item that triggered this\\nevent.\\n\\nThis is a slot number on the player's hotbar in the range 0-8, or -1 for\\noff hand.",
    "method": "getSlot",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "int"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the owner of the skull.",
    "param-names": ["SkullMeta"],
    "param-types": ["org.bukkit.inventory.meta.SkullMeta"],
    "method": "getOwner",
    "id": "org.bukkit.inventory.meta.SkullMeta#getOwner()",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "CUT_COPPER",
    "id": "org.bukkit.Material#CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "CRIMSON_STAIRS",
    "id": "org.bukkit.Material#CRIMSON_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the current lectern page.",
    "param-names": ["Lectern"],
    "param-types": ["org.bukkit.block.Lectern"],
    "method": "getPage",
    "id": "org.bukkit.block.Lectern#getPage()",
    "class": "org.bukkit.block.Lectern",
    "return": "int"
  },
  {
    "descr": "Checks to see if a player has been hidden from this player",
    "param-names": [
      "Player",
      "Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Player"
    ],
    "method": "canSee",
    "id": "org.bukkit.entity.Player#canSee(org.bukkit.entity.Player)",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockGrowEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Retrieve the last EntityDamageEvent inflicted on this entity.\\nThis event may have been cancelled.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getLastDamageCause",
    "id": "org.bukkit.entity.Entity#getLastDamageCause()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "descr": "Safely unloads and optionally saves the Chunk at the specified\\ncoordinates.",
    "param-names": [
      "World",
      "X",
      "Z",
      "Save"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "boolean"
    ],
    "method": "unloadChunk",
    "id": "org.bukkit.World#unloadChunk(int,int,boolean)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_TUFF_PLACE",
    "id": "org.bukkit.Sound#BLOCK_TUFF_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockSpreadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the block face that was hit, if it was a block that was hit and the\\nface was provided in the vent.",
    "method": "getHitBlockFace",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getHitBlockFace()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Called whenever a villager acquires a new trade.",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.ChunkLoadEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "When the entity gets the effect from a dolphin.",
    "static": true,
    "field": "DOLPHIN",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#DOLPHIN",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_COMPARATOR_OFF",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_COMPARATOR_OFF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Ignite this minecart's fuse naturally.",
    "param-names": ["ExplosiveMinecart"],
    "param-types": ["org.bukkit.entity.minecart.ExplosiveMinecart"],
    "method": "ignite",
    "id": "org.bukkit.entity.minecart.ExplosiveMinecart#ignite()",
    "class": "org.bukkit.entity.minecart.ExplosiveMinecart"
  },
  {
    "descr": "Sets the item on the cursor of one of the viewing players.",
    "param-names": [
      "InventoryView",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setCursor",
    "id": "org.bukkit.inventory.InventoryView#setCursor(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.InventoryView"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.LeavesDecayEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Bass guitar is normally played when a note block is on top of a wooden\\nblock.",
    "static": true,
    "field": "BASS_GUITAR",
    "id": "org.bukkit.Instrument#BASS_GUITAR",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "BLOCK_FLOWERING_AZALEA_PLACE",
    "id": "org.bukkit.Sound#BLOCK_FLOWERING_AZALEA_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_MEDIUM_AMETHYST_BUD_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MEDIUM_AMETHYST_BUD_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the last interacted inventory slot.",
    "param-names": ["ChiseledBookshelf"],
    "param-types": ["org.bukkit.block.ChiseledBookshelf"],
    "method": "getLastInteractedSlot",
    "id": "org.bukkit.block.ChiseledBookshelf#getLastInteractedSlot()",
    "class": "org.bukkit.block.ChiseledBookshelf",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BrewingStartEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "boolean"
  },
  {
    "descr": "Triggered when a hanging entity is removed",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent"
  },
  {
    "descr": "Sets the new result of the login, as an enum",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.event.player.PlayerPreLoginEvent.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#setResult(org.bukkit.event.player.PlayerPreLoginEvent.Result)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "PIGLIN",
    "id": "org.bukkit.entity.EntityType#PIGLIN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BRAIN_CORAL_BLOCK",
    "id": "org.bukkit.Material#BRAIN_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PURPLE_TERRACOTTA",
    "id": "org.bukkit.Material#PURPLE_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the item currently smelting.",
    "param-names": ["FurnaceInventory"],
    "param-types": ["org.bukkit.inventory.FurnaceInventory"],
    "method": "getSmelting",
    "id": "org.bukkit.inventory.FurnaceInventory#getSmelting()",
    "class": "org.bukkit.inventory.FurnaceInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the status of the boat.",
    "param-names": ["Boat"],
    "param-types": ["org.bukkit.entity.Boat"],
    "method": "getStatus",
    "id": "org.bukkit.entity.Boat#getStatus()",
    "class": "org.bukkit.entity.Boat",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "descr": "Gets the color as an RGB integer.",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "asRGB",
    "id": "org.bukkit.Color#asRGB()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "descr": "Gets the type of this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getType",
    "id": "org.bukkit.block.BlockState#getType()",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A workbench inventory, with 9 CRAFTING slots and a RESULT slot.",
    "static": true,
    "field": "WORKBENCH",
    "id": "org.bukkit.event.inventory.InventoryType#WORKBENCH",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Display integer value.",
    "static": true,
    "field": "INTEGER",
    "id": "org.bukkit.scoreboard.RenderType#INTEGER",
    "class": "org.bukkit.scoreboard.RenderType",
    "return": "org.bukkit.scoreboard.RenderType"
  },
  {
    "descr": "BlockData: Jigsaw",
    "static": true,
    "field": "JIGSAW",
    "id": "org.bukkit.Material#JIGSAW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GHAST_HURT",
    "id": "org.bukkit.Sound#ENTITY_GHAST_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if the specified BlockData matches this block data.\\n\\nThe semantics of this method are such that for manually created or\\nmodified BlockData it has the same effect as\\nObject#equals(java.lang.Object), whilst for parsed data (that to\\nwhich #merge(org.bukkit.block.data.BlockData) applies, it will\\nreturn true when the type and all explicitly set states match.\\n\\nNote that these semantics mean that a.matches(b) may not be the same\\nas b.matches(a)",
    "param-names": [
      "BlockData",
      "Data"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "matches",
    "id": "org.bukkit.block.data.BlockData#matches(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "descr": "Provides extra damage when shooting arrows from bows",
    "static": true,
    "field": "ARROW_DAMAGE",
    "id": "org.bukkit.enchantments.Enchantment#ARROW_DAMAGE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "ADMIRING_DISABLED",
    "id": "org.bukkit.entity.memory.MemoryKey#ADMIRING_DISABLED",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "static": true,
    "field": "POTTED_ALLIUM",
    "id": "org.bukkit.Material#POTTED_ALLIUM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.ServerListPingEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_ACACIA_STAIRS",
    "id": "org.bukkit.Material#LEGACY_ACACIA_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the item in hand represented by this event",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_CAULDRON",
    "id": "org.bukkit.Material#LEGACY_CAULDRON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the item in the horse's saddle slot.",
    "param-names": ["AbstractHorseInventory"],
    "param-types": ["org.bukkit.inventory.AbstractHorseInventory"],
    "method": "getSaddle",
    "id": "org.bukkit.inventory.AbstractHorseInventory#getSaddle()",
    "class": "org.bukkit.inventory.AbstractHorseInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPoseChangeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Adds the specified ingredient.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.Material"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(org.bukkit.Material)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_BRICKS_FALL",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_BRICKS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SLIME_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_SLIME_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_WAIT",
    "id": "org.bukkit.Sound#MUSIC_DISC_WAIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "A",
    "id": "org.bukkit.Note.Tone#A",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "descr": "Gets the scoreboard team overridden glow color of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getGlowColorOverride",
    "id": "org.bukkit.entity.Display#getGlowColorOverride()",
    "class": "org.bukkit.entity.Display",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Unknown trigger.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#UNKNOWN",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "descr": "Checks for the existence of pages in the book.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "hasPages",
    "id": "org.bukkit.inventory.meta.BookMeta#hasPages()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "boolean"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "double",
      "java.lang.Object"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Sets the fall distance for this entity",
    "param-names": [
      "Entity",
      "Distance"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "float"
    ],
    "method": "setFallDistance",
    "id": "org.bukkit.entity.Entity#setFallDistance(float)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the data for the block that would be changed into",
    "method": "getBlockData",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getBlockData()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_EMERALD_BLOCK",
    "id": "org.bukkit.Material#LEGACY_EMERALD_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'extended' property.",
    "param-names": ["Piston"],
    "param-types": ["org.bukkit.block.data.type.Piston"],
    "method": "isExtended",
    "id": "org.bukkit.block.data.type.Piston#isExtended()",
    "class": "org.bukkit.block.data.type.Piston",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_MELON_BLOCK",
    "id": "org.bukkit.Material#LEGACY_MELON_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ITEM_CHORUS_FRUIT_TELEPORT",
    "id": "org.bukkit.Sound#ITEM_CHORUS_FRUIT_TELEPORT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player who performed the click.",
    "method": "getWhoClicked",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getWhoClicked()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Gets the value of the 'inverted' property.",
    "param-names": ["DaylightDetector"],
    "param-types": ["org.bukkit.block.data.type.DaylightDetector"],
    "method": "isInverted",
    "id": "org.bukkit.block.data.type.DaylightDetector#isInverted()",
    "class": "org.bukkit.block.data.type.DaylightDetector",
    "return": "boolean"
  },
  {
    "descr": "Whether wardens should naturally spawn.",
    "static": true,
    "field": "DO_WARDEN_SPAWNING",
    "id": "org.bukkit.GameRule#DO_WARDEN_SPAWNING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "LEGACY_LONG_GRASS",
    "id": "org.bukkit.Material#LEGACY_LONG_GRASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the amount by which this modifier will apply its Operation.",
    "param-names": ["AttributeModifier"],
    "param-types": ["org.bukkit.attribute.AttributeModifier"],
    "method": "getAmount",
    "id": "org.bukkit.attribute.AttributeModifier#getAmount()",
    "class": "org.bukkit.attribute.AttributeModifier",
    "return": "double"
  },
  {
    "descr": "Triggered by a skeleton horse trap.",
    "static": true,
    "field": "TRAP",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#TRAP",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.WorldLoadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.WorldLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Tall wall present.",
    "static": true,
    "field": "TALL",
    "id": "org.bukkit.block.data.type.Wall.Height#TALL",
    "class": "org.bukkit.block.data.type.Wall.Height",
    "return": "org.bukkit.block.data.type.Wall.Height"
  },
  {
    "descr": "Returns whether this state is placed in the world.\\n\\nSome methods will not work if the block state isn't\\nplaced in the world.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "isPlaced",
    "id": "org.bukkit.block.BlockState#isPlaced()",
    "class": "org.bukkit.block.BlockState",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the ID of this map item for use with MapMeta.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "getId",
    "id": "org.bukkit.map.MapView#getId()",
    "class": "org.bukkit.map.MapView",
    "return": "int"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Door.Hinge#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Door.Hinge",
    "return": "org.bukkit.block.data.type.Door.Hinge"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Villager.Profession#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "When the entity stands inside an area effect cloud.",
    "static": true,
    "field": "AREA_EFFECT_CLOUD",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#AREA_EFFECT_CLOUD",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "LEGACY_SULPHUR",
    "id": "org.bukkit.Material#LEGACY_SULPHUR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the lightning bolt which is striking the Creeper.",
    "method": "getLightning",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getLightning()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "org.bukkit.entity.LightningStrike"
  },
  {
    "descr": "Get enchantment bonus in effect - corresponds to number of bookshelves",
    "method": "getEnchantmentBonus",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getEnchantmentBonus()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "int"
  },
  {
    "descr": "Gets whether or not the book is being signed. If a book is signed the\\nMaterial changes from BOOK_AND_QUILL to WRITTEN_BOOK.",
    "method": "isSigning",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#isSigning()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_MANGROVE_ROOTS_HIT",
    "id": "org.bukkit.Sound#BLOCK_MANGROVE_ROOTS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the ItemStack at the given equipment slot in the inventory.",
    "param-names": [
      "PlayerInventory",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.EquipmentSlot"
    ],
    "method": "getItem",
    "id": "org.bukkit.inventory.PlayerInventory#getItem(org.bukkit.inventory.EquipmentSlot)",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Required method for configuration serialization",
    "param-names": ["Args"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.inventory.ItemStack#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE",
    "id": "org.bukkit.Sound#AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_PORTAL_TRAVEL",
    "id": "org.bukkit.Sound#BLOCK_PORTAL_TRAVEL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.server.ServerCommandEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.server.ServerCommandEvent"
  },
  {
    "descr": "Gets the color as an BGR integer.",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "asBGR",
    "id": "org.bukkit.Color#asBGR()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "descr": "Plays an effect to just this player.",
    "param-names": [
      "Player",
      "Loc",
      "Effect",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.Effect",
      "int"
    ],
    "method": "playEffect",
    "id": "org.bukkit.entity.Player#playEffect(org.bukkit.Location,org.bukkit.Effect,int)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Set how many mobs attempt to spawn.",
    "param-names": [
      "CreatureSpawner",
      "Spawn Count"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setSpawnCount",
    "id": "org.bukkit.block.CreatureSpawner#setSpawnCount(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "Damages the attacker",
    "static": true,
    "field": "THORNS",
    "id": "org.bukkit.enchantments.Enchantment#THORNS",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockFormEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BLOCK_CAVE_VINES_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CAVE_VINES_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Primed TNT that is about to explode.",
    "static": true,
    "field": "PRIMED_TNT",
    "id": "org.bukkit.entity.EntityType#PRIMED_TNT",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_GROVE",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_GROVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets if this is a screaming goat.\\nA screaming goat makes screaming sounds and rams more often. They do not\\noffer home loans.",
    "param-names": [
      "Goat",
      "Screaming"
    ],
    "param-types": [
      "org.bukkit.entity.Goat",
      "boolean"
    ],
    "method": "setScreaming",
    "id": "org.bukkit.entity.Goat#setScreaming(boolean)",
    "class": "org.bukkit.entity.Goat"
  },
  {
    "static": true,
    "field": "DESERT",
    "id": "org.bukkit.entity.Villager.Type#DESERT",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the BlockState for the block which was replaced. Material type air\\nmostly.",
    "method": "getBlockReplacedState",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getBlockReplacedState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_BLOCK",
    "id": "org.bukkit.Material#LEGACY_IRON_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the current warning state for the server.",
    "static": true,
    "method": "getWarningState",
    "id": "org.bukkit.Bukkit#getWarningState()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.Warning.WarningState"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerFishEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Item cannot be removed",
    "static": true,
    "field": "BINDING_CURSE",
    "id": "org.bukkit.enchantments.Enchantment#BINDING_CURSE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Set the Block radius to search in for available portals.",
    "param-names": ["Search Radius"],
    "param-types": ["int"],
    "method": "setSearchRadius",
    "id": "org.bukkit.event.player.PlayerPortalEvent#setSearchRadius(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "static": true,
    "field": "GUARDIAN",
    "id": "org.bukkit.loot.LootTables#GUARDIAN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_SADDLE",
    "id": "org.bukkit.Sound#ENTITY_HORSE_SADDLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the chance of a fish biting.\\n\\n0.0 = No Chance.\\n1.0 = Instant catch.",
    "param-names": [
      "FishHook",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "double"
    ],
    "method": "setBiteChance",
    "id": "org.bukkit.entity.FishHook#setBiteChance(double)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Get the world that this map is associated with. Primarily used by the\\ninternal renderer, but may be used by external renderers. May return\\nnull if the world the map is associated with is not loaded.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "getWorld",
    "id": "org.bukkit.map.MapView#getWorld()",
    "class": "org.bukkit.map.MapView",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets the entity type name.",
    "param-names": ["EntityType"],
    "param-types": ["org.bukkit.entity.EntityType"],
    "method": "getName",
    "id": "org.bukkit.entity.EntityType#getName()",
    "class": "org.bukkit.entity.EntityType",
    "return": "java.lang.String"
  },
  {
    "descr": "Player emptying the cauldron by filling their bottle.",
    "static": true,
    "field": "BOTTLE_FILL",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#BOTTLE_FILL",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason"
  },
  {
    "descr": "Get the maximum number of ticks one has to wait for a fish appearing.\\n\\nThe default is 600 ticks (30 seconds).\\nNote that this is before applying lure.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getMaxWaitTime",
    "id": "org.bukkit.entity.FishHook#getMaxWaitTime()",
    "class": "org.bukkit.entity.FishHook",
    "return": "int"
  },
  {
    "static": true,
    "field": "MOSSY_COBBLESTONE",
    "id": "org.bukkit.Material#MOSSY_COBBLESTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "WARPED_FENCE_GATE",
    "id": "org.bukkit.Material#WARPED_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.ChunkLoadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "boolean"
  },
  {
    "descr": "The rail ascends in the west (negative X) direction.",
    "static": true,
    "field": "ASCENDING_WEST",
    "id": "org.bukkit.block.data.Rail.Shape#ASCENDING_WEST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "Represents orange dye.",
    "static": true,
    "field": "ORANGE",
    "id": "org.bukkit.DyeColor#ORANGE",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "Desert pyramids (also known as desert temples) are found in deserts.\\n\\nThey are usually composed of sandstone and stained terracotta.",
    "static": true,
    "field": "DESERT_PYRAMID",
    "id": "org.bukkit.StructureType#DESERT_PYRAMID",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set whether the lure enchantment should be applied to reduce the wait\\ntime.\\n\\nThe default is true.\\nLure reduces the wait time by 100 ticks (5 seconds) for each level of the\\nenchantment.",
    "param-names": [
      "FishHook",
      "Apply Lure"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "boolean"
    ],
    "method": "setApplyLure",
    "id": "org.bukkit.entity.FishHook#setApplyLure(boolean)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Indicates the teleportation was caused by a player executing a\\ncommand",
    "static": true,
    "field": "COMMAND",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#COMMAND",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "Setting to show/hide the unbreakable State",
    "static": true,
    "field": "HIDE_UNBREAKABLE",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_UNBREAKABLE",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "descr": "Gets the volume of the bounding box.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getVolume",
    "id": "org.bukkit.util.BoundingBox#getVolume()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Get the Material represented by this block data.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "getMaterial",
    "id": "org.bukkit.block.data.BlockData#getMaterial()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "boolean"
  },
  {
    "descr": "Called when the brewing of the contents inside the Brewing Stand is\\ncomplete.",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent"
  },
  {
    "descr": "Gets the category which this recipe will appear in the recipe book under.\\nDefaults to CraftingBookCategory#MISC if not set.",
    "param-names": ["ShapedRecipe"],
    "param-types": ["org.bukkit.inventory.ShapedRecipe"],
    "method": "getCategory",
    "id": "org.bukkit.inventory.ShapedRecipe#getCategory()",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "org.bukkit.inventory.recipe.CraftingBookCategory"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerFishEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the Panda is eating",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "isEating",
    "id": "org.bukkit.entity.Panda#isEating()",
    "class": "org.bukkit.entity.Panda",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_MELON_SEEDS",
    "id": "org.bukkit.Material#LEGACY_MELON_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Resizes this bounding box.",
    "param-names": [
      "BoundingBox",
      "X1",
      "Y1",
      "Z1",
      "X2",
      "Y2",
      "Z2"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "resize",
    "id": "org.bukkit.util.BoundingBox#resize(double,double,double,double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_JUKEBOX",
    "id": "org.bukkit.Material#LEGACY_JUKEBOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns an immutable list of the projectiles charged on this item.",
    "param-names": ["CrossbowMeta"],
    "param-types": ["org.bukkit.inventory.meta.CrossbowMeta"],
    "method": "getChargedProjectiles",
    "id": "org.bukkit.inventory.meta.CrossbowMeta#getChargedProjectiles()",
    "class": "org.bukkit.inventory.meta.CrossbowMeta",
    "return": "java.util.List"
  },
  {
    "descr": "Player is sprint jumping",
    "static": true,
    "field": "JUMP_SPRINT",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#JUMP_SPRINT",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "The sound played when a grindstone is being used.",
    "static": true,
    "field": "GRINDSTONE_USE",
    "id": "org.bukkit.Effect#GRINDSTONE_USE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Play a sound for a player at the location.\\n\\nThis function will fail silently if Location or Sound are null.",
    "param-names": [
      "Player",
      "Location",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.Sound",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "The player is not allowed to log in, due to them being banned",
    "static": true,
    "field": "KICK_BANNED",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#KICK_BANNED",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "CRIMSON_FENCE",
    "id": "org.bukkit.Material#CRIMSON_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attempts to update the block represented by this state, setting it to\\nthe new values as defined by this state.\\n\\nIf this state is not placed, this will have no effect and return true.\\n\\nUnless force is true, this will not modify the state of a block if it\\nis no longer the same type as it was when this state was taken. It will\\nreturn false in this eventuality.\\n\\nIf force is true, it will set the type of the block to match the new\\nstate, set the state data and then return true.\\n\\nIf applyPhysics is true, it will trigger a physics update on\\nsurrounding blocks which could cause them to update or disappear.",
    "param-names": [
      "BlockState",
      "Force",
      "Apply Physics"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "boolean",
      "boolean"
    ],
    "method": "update",
    "id": "org.bukkit.block.BlockState#update(boolean,boolean)",
    "class": "org.bukkit.block.BlockState",
    "return": "boolean"
  },
  {
    "descr": "If the ClickType is NUMBER_KEY, this method will return the index of\\nthe pressed key (0-8).",
    "method": "getHotbarButton",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getHotbarButton()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "SHEARS",
    "id": "org.bukkit.Material#SHEARS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.ServiceRegisterEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceRegisterEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "CHISELED_NETHER_BRICKS",
    "id": "org.bukkit.Material#CHISELED_NETHER_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the armor stand's body's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getBodyPose",
    "id": "org.bukkit.entity.ArmorStand#getBodyPose()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Stores all data related to the bartering interaction with a piglin.\\nThis event can be triggered by a piglin picking up an item that's on its\\nbartering list.",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent"
  },
  {
    "descr": "Get the number of mob hatches from the egg. By default the number will\\nbe the number the server would've done\\n\\n7/8 chance of being 0\\n31/256 ~= 1/8 chance to be 1\\n1/256 chance to be 4\\n",
    "method": "getNumHatches",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getNumHatches()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "byte"
  },
  {
    "descr": "Get the current fuel for brewing.",
    "param-names": ["BrewerInventory"],
    "param-types": ["org.bukkit.inventory.BrewerInventory"],
    "method": "getFuel",
    "id": "org.bukkit.inventory.BrewerInventory#getFuel()",
    "class": "org.bukkit.inventory.BrewerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.EntitiesLoadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.boss.BarStyle#valueOf(java.lang.String)",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "Sets the Material at the given coordinates.",
    "param-names": [
      "RegionAccessor",
      "X",
      "Y",
      "Z",
      "Material"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "int",
      "int",
      "int",
      "org.bukkit.Material"
    ],
    "method": "setType",
    "id": "org.bukkit.RegionAccessor#setType(int,int,int,org.bukkit.Material)",
    "class": "org.bukkit.RegionAccessor"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockBreakEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "DEEPSLATE",
    "id": "org.bukkit.Material#DEEPSLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GLOW_SQUID_INK",
    "id": "org.bukkit.Particle#GLOW_SQUID_INK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "EVOKER",
    "id": "org.bukkit.entity.EntityType#EVOKER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_STRAY",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_STRAY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the face of the block that the entity was placed on",
    "method": "getBlockFace",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getBlockFace()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.ServiceUnregisterEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceUnregisterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Return the ItemStack from the helmet slot",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getHelmet",
    "id": "org.bukkit.inventory.PlayerInventory#getHelmet()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "When the entity doesn't have a target, so it attacks the nearest\\nplayer",
    "static": true,
    "field": "CLOSEST_PLAYER",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#CLOSEST_PLAYER",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Gets the value of the 'hinge' property.",
    "param-names": ["Door"],
    "param-types": ["org.bukkit.block.data.type.Door"],
    "method": "getHinge",
    "id": "org.bukkit.block.data.type.Door#getHinge()",
    "class": "org.bukkit.block.data.type.Door",
    "return": "org.bukkit.block.data.type.Door.Hinge"
  },
  {
    "descr": "Entity is roaring.",
    "static": true,
    "field": "ROARING",
    "id": "org.bukkit.entity.Pose#ROARING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "static": true,
    "field": "SPOTTY",
    "id": "org.bukkit.entity.TropicalFish.Pattern#SPOTTY",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent"
  },
  {
    "descr": "Create a new explorer map targeting the closest nearby structure of a\\ngiven StructureType.\\n\\nThis method uses implementation default values for radius and\\nfindUnexplored (usually 100, true).",
    "param-names": [
      "World",
      "Location",
      "Structure Type"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.StructureType"
    ],
    "method": "createExplorerMap",
    "id": "org.bukkit.Bukkit#createExplorerMap(org.bukkit.World,org.bukkit.Location,org.bukkit.StructureType)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Provides infinite arrows when shooting a bow",
    "static": true,
    "field": "ARROW_INFINITE",
    "id": "org.bukkit.enchantments.Enchantment#ARROW_INFINITE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Sets the color of this cloud. Will be applied as a tint to its particles.",
    "param-names": [
      "AreaEffectCloud",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.entity.AreaEffectCloud#setColor(org.bukkit.Color)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "field": "CAVE_SPIDER",
    "id": "org.bukkit.entity.EntityType#CAVE_SPIDER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "WEAPONSMITH_GIFT",
    "id": "org.bukkit.loot.LootTables#WEAPONSMITH_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "CHICKEN",
    "id": "org.bukkit.entity.EntityType#CHICKEN",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_HELMET",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Skeleton is normally played when a Skeleton Head is on top of the note block.",
    "static": true,
    "field": "SKELETON",
    "id": "org.bukkit.Instrument#SKELETON",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Sets whether gravity applies to this entity.",
    "param-names": [
      "Entity",
      "Gravity"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setGravity",
    "id": "org.bukkit.entity.Entity#setGravity(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LEAD",
    "id": "org.bukkit.Material#LEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockSpreadEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "When time is changed by all players sleeping in their beds and the\\nnight skips.",
    "static": true,
    "field": "NIGHT_SKIP",
    "id": "org.bukkit.event.world.TimeSkipEvent.SkipReason#NIGHT_SKIP",
    "class": "org.bukkit.event.world.TimeSkipEvent.SkipReason",
    "return": "org.bukkit.event.world.TimeSkipEvent.SkipReason"
  },
  {
    "descr": "Set whether or not wait and lure time will be impacted by rain.\\nTrue by default, causes a 25% time decrease on average.",
    "param-names": [
      "FishHook",
      "Rain Influenced"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "boolean"
    ],
    "method": "setRainInfluenced",
    "id": "org.bukkit.entity.FishHook#setRainInfluenced(boolean)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Gets list of the Item drops caused by the block break.\\nThis list is mutable - removing an item from it will cause it to not\\ndrop. It is not legal however to add new items to the list.",
    "method": "getItems",
    "id": "org.bukkit.event.block.BlockDropItemEvent#getItems()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDropItemEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "DESERT",
    "id": "org.bukkit.block.Biome#DESERT",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerPortalEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "descr": "Attempts to update the block represented by this state, setting it to\\nthe new values as defined by this state.\\n\\nThis has the same effect as calling update(false). That is to say,\\nthis will not modify the state of a block if it is no longer the same\\ntype as it was when this state was taken. It will return false in this\\neventuality.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "update",
    "id": "org.bukkit.block.BlockState#update()",
    "class": "org.bukkit.block.BlockState",
    "return": "boolean"
  },
  {
    "descr": "Indicate the spawn was set by a command.",
    "static": true,
    "field": "COMMAND",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#COMMAND",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "descr": "Returns the id of this tone. These method allows to return the\\nsharped id of the tone. If the tone couldn't be sharped it always\\nreturn the not sharped id of this tone.",
    "param-names": [
      "Note.Tone",
      "Sharped"
    ],
    "param-types": [
      "org.bukkit.Note.Tone",
      "boolean"
    ],
    "method": "getId",
    "id": "org.bukkit.Note.Tone#getId(boolean)",
    "class": "org.bukkit.Note.Tone",
    "return": "byte"
  },
  {
    "static": true,
    "field": "POLISHED_ANDESITE",
    "id": "org.bukkit.Material#POLISHED_ANDESITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the amount of ticks this entity has lived for.\\n\\nThis is the equivalent to \"age\" in entities. May not be less than one\\ntick.",
    "param-names": [
      "Entity",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "int"
    ],
    "method": "setTicksLived",
    "id": "org.bukkit.entity.Entity#setTicksLived(int)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the value of the 'disarmed' property.",
    "param-names": [
      "Tripwire",
      "Disarmed"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Tripwire",
      "boolean"
    ],
    "method": "setDisarmed",
    "id": "org.bukkit.block.data.type.Tripwire#setDisarmed(boolean)",
    "class": "org.bukkit.block.data.type.Tripwire"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "boolean"
  },
  {
    "descr": "Adds a custom potion effect to this suspicious stew.",
    "param-names": [
      "SuspiciousStewMeta",
      "Effect",
      "Overwrite"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SuspiciousStewMeta",
      "org.bukkit.potion.PotionEffect",
      "boolean"
    ],
    "method": "addCustomEffect",
    "id": "org.bukkit.inventory.meta.SuspiciousStewMeta#addCustomEffect(org.bukkit.potion.PotionEffect,boolean)",
    "class": "org.bukkit.inventory.meta.SuspiciousStewMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_JUMP",
    "id": "org.bukkit.Sound#ENTITY_HORSE_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Decreases movement speed.",
    "static": true,
    "field": "SLOW",
    "id": "org.bukkit.potion.PotionEffectType#SLOW",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "GLASS_BOTTLE",
    "id": "org.bukkit.Material#GLASS_BOTTLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attaches a copy of the passed block data to the item.",
    "param-names": [
      "BlockDataMeta",
      "Block Data"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BlockDataMeta",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.inventory.meta.BlockDataMeta#setBlockData(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.inventory.meta.BlockDataMeta"
  },
  {
    "static": true,
    "field": "ENTITY_BLAZE_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_BLAZE_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "LIGHT_BLUE_CANDLE",
    "id": "org.bukkit.Material#LIGHT_BLUE_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "MANGROVE_WALL_SIGN",
    "id": "org.bukkit.Material#MANGROVE_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the item in this frame",
    "param-names": [
      "ItemFrame",
      "Item",
      "Play Sound"
    ],
    "param-types": [
      "org.bukkit.entity.ItemFrame",
      "org.bukkit.inventory.ItemStack",
      "boolean"
    ],
    "method": "setItem",
    "id": "org.bukkit.entity.ItemFrame#setItem(org.bukkit.inventory.ItemStack,boolean)",
    "class": "org.bukkit.entity.ItemFrame"
  },
  {
    "descr": "This describes the default outcome of this event.",
    "method": "getBedEnterResult",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#getBedEnterResult()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.ServiceUnregisterEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceUnregisterEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "COAL_BLOCK",
    "id": "org.bukkit.Material#COAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHISELED_SANDSTONE",
    "id": "org.bukkit.Material#CHISELED_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns if this tone could be sharped.",
    "param-names": ["Note.Tone"],
    "param-types": ["org.bukkit.Note.Tone"],
    "method": "isSharpable",
    "id": "org.bukkit.Note.Tone#isSharpable()",
    "class": "org.bukkit.Note.Tone",
    "return": "boolean"
  },
  {
    "descr": "When time is changed by a plugin.",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.event.world.TimeSkipEvent.SkipReason#CUSTOM",
    "class": "org.bukkit.event.world.TimeSkipEvent.SkipReason",
    "return": "org.bukkit.event.world.TimeSkipEvent.SkipReason"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleCreateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleCreateEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE",
    "id": "org.bukkit.Sound#BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player's unique ID.",
    "method": "getUniqueId",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getUniqueId()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "java.util.UUID"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "MANGROVE_DOOR",
    "id": "org.bukkit.Material#MANGROVE_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#spawnParticle(org.bukkit.Particle,double,double,double,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Warm (gray) frog.",
    "static": true,
    "field": "WARM",
    "id": "org.bukkit.entity.Frog.Variant#WARM",
    "class": "org.bukkit.entity.Frog.Variant",
    "return": "org.bukkit.entity.Frog.Variant"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "BIRCH_HANGING_SIGN",
    "id": "org.bukkit.Material#BIRCH_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ABANDONED_MINESHAFT",
    "id": "org.bukkit.loot.LootTables#ABANDONED_MINESHAFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#spawnParticle(org.bukkit.Particle,org.bukkit.Location,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the center of the bounding box.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getCenter",
    "id": "org.bukkit.util.BoundingBox#getCenter()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Removes a material from the allowed list of materials to barter with.\\nNote: It's not possible to override the default\\nbartering item gold_ingots as payment. To block gold_ingots see\\norg.bukkit.event.entity.PiglinBarterEvent.",
    "param-names": [
      "Piglin",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Piglin",
      "org.bukkit.Material"
    ],
    "method": "removeBarterMaterial",
    "id": "org.bukkit.entity.Piglin#removeBarterMaterial(org.bukkit.Material)",
    "class": "org.bukkit.entity.Piglin",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_PLATE",
    "id": "org.bukkit.Material#LEGACY_IRON_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COPPER_BLOCK",
    "id": "org.bukkit.Material#COPPER_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_HAPPY",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_HAPPY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a creature is spawned by plugins",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#CUSTOM",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "FROGSPAWN",
    "id": "org.bukkit.Material#FROGSPAWN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "HORN_CORAL_FAN",
    "id": "org.bukkit.Material#HORN_CORAL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "YELLOW_DYE",
    "id": "org.bukkit.Material#YELLOW_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'vertical_direction' property.",
    "param-names": ["PointedDripstone"],
    "param-types": ["org.bukkit.block.data.type.PointedDripstone"],
    "method": "getVerticalDirection",
    "id": "org.bukkit.block.data.type.PointedDripstone#getVerticalDirection()",
    "class": "org.bukkit.block.data.type.PointedDripstone",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the current result of the login, as an enum",
    "method": "getResult",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "Converts this potion to a valid potion damage short, usable for potion\\nitem stacks.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "toDamageValue",
    "id": "org.bukkit.potion.Potion#toDamageValue()",
    "class": "org.bukkit.potion.Potion",
    "return": "short"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets the ItemStack currently in the clicked slot.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCurrentItem",
    "id": "org.bukkit.event.inventory.SmithItemEvent#setCurrentItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent"
  },
  {
    "descr": "Called when a player statistic is incremented.\\n\\nThis event is not called for some high frequency statistics, e.g. movement\\nbased statistics.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent"
  },
  {
    "descr": "Gets the block face that was hit, if it was a block that was hit and the\\nface was provided in the vent.",
    "method": "getHitBlockFace",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getHitBlockFace()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "LEGACY_RABBIT_FOOT",
    "id": "org.bukkit.Material#LEGACY_RABBIT_FOOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getProvider",
    "id": "org.bukkit.event.server.ServiceRegisterEvent#getProvider()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceRegisterEvent",
    "return": "org.bukkit.plugin.RegisteredServiceProvider"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WOODEN_SWORD",
    "id": "org.bukkit.Material#WOODEN_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_GHAST_DEATH",
    "id": "org.bukkit.Sound#ENTITY_GHAST_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SIDEBAR_GRAY",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_GRAY",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason#values()",
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason",
    "return": "org.bukkit.event.block.CauldronLevelChangeEvent.ChangeReason[]"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Horse.Color#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color"
  },
  {
    "descr": "Gets the parent ComplexLivingEntity of this part.",
    "param-names": ["ComplexEntityPart"],
    "param-types": ["org.bukkit.entity.ComplexEntityPart"],
    "method": "getParent",
    "id": "org.bukkit.entity.ComplexEntityPart#getParent()",
    "class": "org.bukkit.entity.ComplexEntityPart",
    "return": "org.bukkit.entity.ComplexLivingEntity"
  },
  {
    "static": true,
    "field": "SHELTER_POTTERY_SHERD",
    "id": "org.bukkit.Material#SHELTER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_BROWN_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_BROWN_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SPORE_BLOSSOM_HIT",
    "id": "org.bukkit.Sound#BLOCK_SPORE_BLOSSOM_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "OAK_LOG",
    "id": "org.bukkit.Material#OAK_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHEEP",
    "id": "org.bukkit.entity.EntityType#SHEEP",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Get the vibration destination.",
    "param-names": ["Vibration"],
    "param-types": ["org.bukkit.Vibration"],
    "method": "getDestination",
    "id": "org.bukkit.Vibration#getDestination()",
    "class": "org.bukkit.Vibration",
    "return": "org.bukkit.Vibration.Destination"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "MANGROVE_ROOTS",
    "id": "org.bukkit.Material#MANGROVE_ROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "BLACK_BED",
    "id": "org.bukkit.Material#BLACK_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the yellow team.",
    "static": true,
    "field": "KILLED_BY_TEAM_YELLOW",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_YELLOW",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "CAT_SPAWN_EGG",
    "id": "org.bukkit.Material#CAT_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "INFESTED_STONE_BRICKS",
    "id": "org.bukkit.Material#INFESTED_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "NORTH_NORTH_WEST",
    "id": "org.bukkit.block.BlockFace#NORTH_NORTH_WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the instance of the scoreboard manager.\\n\\nThis will only exist after the first world has loaded.",
    "static": true,
    "method": "getScoreboardManager",
    "id": "org.bukkit.Bukkit#getScoreboardManager()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.scoreboard.ScoreboardManager"
  },
  {
    "static": true,
    "field": "BLACK_CONCRETE_POWDER",
    "id": "org.bukkit.Material#BLACK_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the LivingEntity which summoned the fangs.",
    "param-names": [
      "EvokerFangs",
      "Owner"
    ],
    "param-types": [
      "org.bukkit.entity.EvokerFangs",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "setOwner",
    "id": "org.bukkit.entity.EvokerFangs#setOwner(org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.entity.EvokerFangs"
  },
  {
    "descr": "Set the minimum angle (in degrees, 0 being positive Z 90 being negative\\nX) of where a fish will appear after the wait time.\\n\\nThe default is 0 degrees.",
    "param-names": [
      "FishHook",
      "Min Lure Angle"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "float"
    ],
    "method": "setMinLureAngle",
    "id": "org.bukkit.entity.FishHook#setMinLureAngle(float)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "static": true,
    "field": "SILVERFISH",
    "id": "org.bukkit.entity.EntityType#SILVERFISH",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "boolean"
  },
  {
    "descr": "Set the maximum angle (in degrees, 0 being positive Z 90 being negative\\nX) of where a fish will appear after the wait time.\\n\\nThe default is 360 degrees.",
    "param-names": [
      "FishHook",
      "Max Lure Angle"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "float"
    ],
    "method": "setMaxLureAngle",
    "id": "org.bukkit.entity.FishHook#setMaxLureAngle(float)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "static": true,
    "field": "ENTITY_FISH_SWIM",
    "id": "org.bukkit.Sound#ENTITY_FISH_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block associated with this holder.",
    "param-names": ["BlockInventoryHolder"],
    "param-types": ["org.bukkit.inventory.BlockInventoryHolder"],
    "method": "getBlock",
    "id": "org.bukkit.inventory.BlockInventoryHolder#getBlock()",
    "class": "org.bukkit.inventory.BlockInventoryHolder",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "GRAY_WOOL",
    "id": "org.bukkit.Material#GRAY_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LLAMA",
    "id": "org.bukkit.entity.EntityType#LLAMA",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "SOUTH_SOUTH_EAST",
    "id": "org.bukkit.block.BlockFace#SOUTH_SOUTH_EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Create a smithing recipe to produce the specified result ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Template",
      "Base",
      "Addition"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice",
      "org.bukkit.inventory.RecipeChoice",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "id": "org.bukkit.inventory.SmithingTransformRecipe#SmithingTransformRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice,org.bukkit.inventory.RecipeChoice,org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.SmithingTransformRecipe"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.GenericGameEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_SPADE",
    "id": "org.bukkit.Material#LEGACY_IRON_SPADE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "END_STONE_BRICK_WALL",
    "id": "org.bukkit.Material#END_STONE_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the initial radius of the cloud.",
    "param-names": [
      "AreaEffectCloud",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "float"
    ],
    "method": "setRadius",
    "id": "org.bukkit.entity.AreaEffectCloud#setRadius(float)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "static": true,
    "field": "FEEL",
    "id": "org.bukkit.MusicInstrument#FEEL",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "descr": "Sets the name of this CommandBlock.  The name is used with commands\\nthat this CommandBlock executes.  Setting the name to null is the\\nsame as setting it to \"@\".",
    "param-names": [
      "CommandBlock",
      "Name"
    ],
    "param-types": [
      "org.bukkit.block.CommandBlock",
      "java.lang.String"
    ],
    "method": "setName",
    "id": "org.bukkit.block.CommandBlock#setName(java.lang.String)",
    "class": "org.bukkit.block.CommandBlock"
  },
  {
    "descr": "Gets the last two blocks along the living entity's line of sight.\\n\\nThe target block will be the last block in the list. This method\\nconsiders all blocks as 1x1x1 in size.",
    "param-names": [
      "LivingEntity",
      "Transparent",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "java.util.Set",
      "int"
    ],
    "method": "getLastTwoTargetBlocks",
    "id": "org.bukkit.entity.LivingEntity#getLastTwoTargetBlocks(java.util.Set<org.bukkit.Material>,int)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "WARPED_PLANKS",
    "id": "org.bukkit.Material#WARPED_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason",
    "return": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "LEVER",
    "id": "org.bukkit.Material#LEVER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.BigDripleaf.Tilt#values()",
    "class": "org.bukkit.block.data.type.BigDripleaf.Tilt",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt[]"
  },
  {
    "descr": "Capture thread-safe read-only snapshot of chunk data",
    "param-names": [
      "Chunk",
      "Include Maxblocky",
      "Include Biome",
      "Include Biome Temp Rain"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "boolean",
      "boolean",
      "boolean"
    ],
    "method": "getChunkSnapshot",
    "id": "org.bukkit.Chunk#getChunkSnapshot(boolean,boolean,boolean)",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.ChunkSnapshot"
  },
  {
    "descr": "Sets whether or not this entity is visible by default.\\nIf this entity is not visible by default, then\\nPlayer#showEntity(org.bukkit.plugin.Plugin, org.bukkit.entity.Entity)\\nwill need to be called before the entity is visible to a given player.",
    "param-names": [
      "Entity",
      "Visible"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setVisibleByDefault",
    "id": "org.bukkit.entity.Entity#setVisibleByDefault(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Checks if this Creeper is powered (Electrocuted)",
    "param-names": ["Creeper"],
    "param-types": ["org.bukkit.entity.Creeper"],
    "method": "isPowered",
    "id": "org.bukkit.entity.Creeper#isPowered()",
    "class": "org.bukkit.entity.Creeper",
    "return": "boolean"
  },
  {
    "descr": "This event is called when a service is unregistered.\\n\\nWarning: The order in which register and unregister events are called\\nshould not be relied upon.",
    "event": true,
    "class": "org.bukkit.event.server.ServiceUnregisterEvent"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_PLAY",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_PLAY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The face is capable of supporting blocks towards the center. For example, a\\nwall or a fence post can support a standing torch as there is a solid component\\nin the middle of the block.",
    "static": true,
    "field": "CENTER",
    "id": "org.bukkit.block.BlockSupport#CENTER",
    "class": "org.bukkit.block.BlockSupport",
    "return": "org.bukkit.block.BlockSupport"
  },
  {
    "static": true,
    "field": "VINDICATOR_SPAWN_EGG",
    "id": "org.bukkit.Material#VINDICATOR_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The chest is the left hand side of a double chest and shares a 54\\nblock inventory with the chest to its right.",
    "static": true,
    "field": "LEFT",
    "id": "org.bukkit.block.data.type.Chest.Type#LEFT",
    "class": "org.bukkit.block.data.type.Chest.Type",
    "return": "org.bukkit.block.data.type.Chest.Type"
  },
  {
    "descr": "Gets the potion from its damage value.",
    "param-names": ["Damage"],
    "static": true,
    "param-types": ["int"],
    "method": "fromDamage",
    "id": "org.bukkit.potion.Potion#fromDamage(int)",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.potion.Potion"
  },
  {
    "descr": "Red, or (0xFF,0x00,0x00) in (R,G,B)",
    "static": true,
    "field": "RED",
    "id": "org.bukkit.Color#RED",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_SNARE",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_SNARE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LIGHT_BLUE_TERRACOTTA",
    "id": "org.bukkit.Material#LIGHT_BLUE_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_7",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_7",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Regular stair block.",
    "static": true,
    "field": "STRAIGHT",
    "id": "org.bukkit.block.data.type.Stairs.Shape#STRAIGHT",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "descr": "Clears the anger level of this warden.",
    "param-names": [
      "Warden",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Warden",
      "org.bukkit.entity.Entity"
    ],
    "method": "clearAnger",
    "id": "org.bukkit.entity.Warden#clearAnger(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Warden"
  },
  {
    "descr": "Shifts this bounding box by the given amounts.",
    "param-names": [
      "BoundingBox",
      "Shift X",
      "Shift Y",
      "Shift Z"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double"
    ],
    "method": "shift",
    "id": "org.bukkit.util.BoundingBox#shift(double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Sets whether this armor stand has arms.",
    "param-names": [
      "ArmorStand",
      "Arms"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "boolean"
    ],
    "method": "setArms",
    "id": "org.bukkit.entity.ArmorStand#setArms(boolean)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Gets the name of this Team",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getName",
    "id": "org.bukkit.scoreboard.Team#getName()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "java.lang.String"
  },
  {
    "descr": "A donkey",
    "static": true,
    "field": "DONKEY",
    "id": "org.bukkit.entity.Horse.Variant#DONKEY",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_COW_BELL",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_COW_BELL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Toolsmith profession. Wears a black apron. Tool smiths primarily\\ntrade for iron and diamond tools.",
    "static": true,
    "field": "TOOLSMITH",
    "id": "org.bukkit.entity.Villager.Profession#TOOLSMITH",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Raid.RaidStatus#values()",
    "class": "org.bukkit.Raid.RaidStatus",
    "return": "org.bukkit.Raid.RaidStatus[]"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "POLISHED_BLACKSTONE_STAIRS",
    "id": "org.bukkit.Material#POLISHED_BLACKSTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "boolean"
  },
  {
    "descr": "Book written into a book-and-quill. Can be copied. (Default value)",
    "static": true,
    "field": "ORIGINAL",
    "id": "org.bukkit.inventory.meta.BookMeta.Generation#ORIGINAL",
    "class": "org.bukkit.inventory.meta.BookMeta.Generation",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation"
  },
  {
    "descr": "Whether lava blocks can convert into lava source blocks.",
    "static": true,
    "field": "LAVA_SOURCE_CONVERSION",
    "id": "org.bukkit.GameRule#LAVA_SOURCE_CONVERSION",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "BASTION_BRIDGE",
    "id": "org.bukkit.loot.LootTables#BASTION_BRIDGE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BADLANDS",
    "id": "org.bukkit.block.Biome#BADLANDS",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BrewingStartEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets the chance of the item this creature is currently holding in their\\nmain hand being dropped upon this creature's death.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setItemInMainHandDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInMainHandDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "PACKED_MUD",
    "id": "org.bukkit.Material#PACKED_MUD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "DARK_OAK_DOOR",
    "id": "org.bukkit.Material#DARK_OAK_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the UUID of the entity that caused this entity to enter the\\n#canBreed() state.",
    "param-names": ["Animals"],
    "param-types": ["org.bukkit.entity.Animals"],
    "method": "getBreedCause",
    "id": "org.bukkit.entity.Animals#getBreedCause()",
    "class": "org.bukkit.entity.Animals",
    "return": "java.util.UUID"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set the item being consumed",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setItem",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#setItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_COPPER_BREAK",
    "id": "org.bukkit.Sound#BLOCK_COPPER_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": ["ShapedRecipe"],
    "param-types": ["org.bukkit.inventory.ShapedRecipe"],
    "method": "getGroup",
    "id": "org.bukkit.inventory.ShapedRecipe#getGroup()",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "WEATHERED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#WEATHERED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.ChunkLoadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the dark green team.",
    "static": true,
    "field": "KILLED_BY_TEAM_DARK_GREEN",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_DARK_GREEN",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#values()",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause[]"
  },
  {
    "static": true,
    "field": "GLOW_ITEM_FRAME",
    "id": "org.bukkit.entity.EntityType#GLOW_ITEM_FRAME",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Blue axolotl.",
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.entity.Axolotl.Variant#BLUE",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "Return whether or not this explosive creates a fire when exploding",
    "param-names": ["Explosive"],
    "param-types": ["org.bukkit.entity.Explosive"],
    "method": "isIncendiary",
    "id": "org.bukkit.entity.Explosive#isIncendiary()",
    "class": "org.bukkit.entity.Explosive",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'hanging' property.",
    "param-names": [
      "Hangable",
      "Hanging"
    ],
    "param-types": [
      "org.bukkit.block.data.Hangable",
      "boolean"
    ],
    "method": "setHanging",
    "id": "org.bukkit.block.data.Hangable#setHanging(boolean)",
    "class": "org.bukkit.block.data.Hangable"
  },
  {
    "descr": "Called when an item is put in a slot for upgrade by a Smithing Table.",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent"
  },
  {
    "descr": "Gets whether the map is locked or not.\\nA locked map may not be explored further.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "isLocked",
    "id": "org.bukkit.map.MapView#isLocked()",
    "class": "org.bukkit.map.MapView",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Parrot.Variant#values()",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Force-closes the currently open inventory view for this player, if any.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "closeInventory",
    "id": "org.bukkit.entity.HumanEntity#closeInventory()",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Gets the display block for this minecart.\\nThis function will return the type AIR if none is set.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getDisplayBlockData",
    "id": "org.bukkit.entity.Minecart#getDisplayBlockData()",
    "class": "org.bukkit.entity.Minecart",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Gets all scores for an entry on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "getScores",
    "id": "org.bukkit.scoreboard.Scoreboard#getScores(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Checks if this enchantment is a cursed enchantment\\n\\nCursed enchantments are found the same way treasure enchantments are",
    "param-names": ["Enchantment"],
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "isCursed",
    "id": "org.bukkit.enchantments.Enchantment#isCursed()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_POTATO_ITEM",
    "id": "org.bukkit.Material#LEGACY_POTATO_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getInitialEnabledPacks",
    "id": "org.bukkit.Bukkit#getInitialEnabledPacks()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.List"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockShearEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockShearEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "In an enchanting inventory, the bottom button's experience level\\nvalue.",
    "static": true,
    "field": "ENCHANT_BUTTON3",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_BUTTON3",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Mirrors the player's health points (0 for no health, 20 for maximum default health).",
    "static": true,
    "field": "HEALTH",
    "id": "org.bukkit.scoreboard.Criteria#HEALTH",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Splits the boss bar into 20 segments",
    "static": true,
    "field": "SEGMENTED_20",
    "id": "org.bukkit.boss.BarStyle#SEGMENTED_20",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "Sets whether the zoglin is a baby",
    "param-names": [
      "Zoglin",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Zoglin",
      "boolean"
    ],
    "method": "setBaby",
    "id": "org.bukkit.entity.Zoglin#setBaby(boolean)",
    "class": "org.bukkit.entity.Zoglin"
  },
  {
    "descr": "Gets the location this player moved to",
    "method": "getTo",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Set the name of whoever created this structure using a\\nLivingEntity.",
    "param-names": [
      "Structure",
      "Living Entity"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "setAuthor",
    "id": "org.bukkit.block.Structure#setAuthor(org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent"
  },
  {
    "descr": "Sets whether the furnace's fuel is burning or not.",
    "param-names": ["Burning"],
    "param-types": ["boolean"],
    "method": "setBurning",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#setBurning(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent"
  },
  {
    "static": true,
    "field": "BLOCK_LAVA_POP",
    "id": "org.bukkit.Sound#BLOCK_LAVA_POP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set whether this potion has extended duration. This will cause the\\npotion to have roughly 8/3 more duration than a regular potion.",
    "param-names": [
      "Potion",
      "Is Extended"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "boolean"
    ],
    "method": "setHasExtendedDuration",
    "id": "org.bukkit.potion.Potion#setHasExtendedDuration(boolean)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "STRIPE_BOTTOM",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_BOTTOM",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Adds this user to the ProfileBanList. If a previous ban exists, this will\\nupdate the entry.",
    "param-names": [
      "OfflinePlayer",
      "Reason",
      "Duration",
      "Source"
    ],
    "param-types": [
      "org.bukkit.OfflinePlayer",
      "java.lang.String",
      "java.time.Duration",
      "java.lang.String"
    ],
    "method": "ban",
    "id": "org.bukkit.OfflinePlayer#ban(java.lang.String,java.time.Duration,java.lang.String)",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the fish's pattern.\\n\\nPlugins should check that hasVariant() returns true before\\ncalling this method.",
    "param-names": ["TropicalFishBucketMeta"],
    "param-types": ["org.bukkit.inventory.meta.TropicalFishBucketMeta"],
    "method": "getPattern",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#getPattern()",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "static": true,
    "field": "NORTH",
    "id": "org.bukkit.block.BlockFace#NORTH",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Stores the location of this block state in the provided Location object.\\n\\nIf the provided Location is null this method does nothing and returns\\nnull.\\n\\nIf this block state is not placed the location's world will be null!",
    "param-names": [
      "BlockState",
      "Loc"
    ],
    "param-types": [
      "org.bukkit.block.BlockState",
      "org.bukkit.Location"
    ],
    "method": "getLocation",
    "id": "org.bukkit.block.BlockState#getLocation(org.bukkit.Location)",
    "class": "org.bukkit.block.BlockState",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent"
  },
  {
    "descr": "Set the record in the jukebox.\\n\\nThis will immediately start playing the inserted item or stop playing if the\\nitem provided is null. If the provided item is not a record (according to\\nTag#ITEMS_MUSIC_DISCS), this method will do nothing and not set the\\nitem in the inventory.",
    "param-names": [
      "JukeboxInventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.JukeboxInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setRecord",
    "id": "org.bukkit.inventory.JukeboxInventory#setRecord(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.JukeboxInventory"
  },
  {
    "descr": "Sets the color of the fish's body.\\n\\nSetting this when hasVariant() returns false will initialize\\nall other values to unspecified defaults.",
    "param-names": [
      "TropicalFishBucketMeta",
      "Color"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.TropicalFishBucketMeta",
      "org.bukkit.DyeColor"
    ],
    "method": "setBodyColor",
    "id": "org.bukkit.inventory.meta.TropicalFishBucketMeta#setBodyColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.inventory.meta.TropicalFishBucketMeta"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "SPRUCE_SAPLING",
    "id": "org.bukkit.Material#SPRUCE_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the approximate bounding box for this block.\\n\\nThis isn't exact as some blocks org.bukkit.block.data.type.Stairs\\ncontain many bounding boxes to establish their complete form.\\nAlso, the box may not be exactly the same as the collision shape (such as\\ncactus, which is 16/16 of a block with 15/16 collisional bounds).\\nThis method will return an empty bounding box if the geometric shape of\\nthe block is empty (such as air blocks).",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getBoundingBox",
    "id": "org.bukkit.block.Block#getBoundingBox()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "param-names": [
      "Uuid",
      "Name",
      "Amount",
      "Operation",
      "Slot"
    ],
    "param-types": [
      "java.util.UUID",
      "java.lang.String",
      "double",
      "org.bukkit.attribute.AttributeModifier.Operation",
      "org.bukkit.inventory.EquipmentSlot"
    ],
    "id": "org.bukkit.attribute.AttributeModifier#AttributeModifier(java.util.UUID,java.lang.String,double,org.bukkit.attribute.AttributeModifier.Operation,org.bukkit.inventory.EquipmentSlot)",
    "class": "org.bukkit.attribute.AttributeModifier"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.ChatColor#values()",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor[]"
  },
  {
    "descr": "Increases walking speed while in water",
    "static": true,
    "field": "DEPTH_STRIDER",
    "id": "org.bukkit.enchantments.Enchantment#DEPTH_STRIDER",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "field": "ZOMBIE",
    "id": "org.bukkit.SkullType#ZOMBIE",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "descr": "Sets the value of the 'hatch' property.",
    "param-names": [
      "Hatchable",
      "Hatch"
    ],
    "param-types": [
      "org.bukkit.block.data.Hatchable",
      "int"
    ],
    "method": "setHatch",
    "id": "org.bukkit.block.data.Hatchable#setHatch(int)",
    "class": "org.bukkit.block.data.Hatchable"
  },
  {
    "descr": "Returns the living entity's last damage taken in the current no damage\\nticks time.\\n\\nOnly damage higher than this amount will further damage the living\\nentity.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getLastDamage",
    "id": "org.bukkit.entity.LivingEntity#getLastDamage()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "double"
  },
  {
    "descr": "Gets the value whether the player would be allowed to build here.\\nDefaults to spawn if the server was going to stop them (such as, the\\nplayer is in Spawn). Note that this is an entirely different check\\nthan BLOCK_CANBUILD, as this refers to a player, not universe-physics\\nrule like cactus on dirt.",
    "method": "canBuild",
    "id": "org.bukkit.event.block.BlockPlaceEvent#canBuild()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Put the given ItemStack into the boots slot. This does not check if the\\nItemStack is a boots",
    "param-names": [
      "PlayerInventory",
      "Boots"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setBoots",
    "id": "org.bukkit.inventory.PlayerInventory#setBoots(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.LootGenerateEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "POTTED_DEAD_BUSH",
    "id": "org.bukkit.Material#POTTED_DEAD_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "boolean"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra",
      "Data",
      "Force"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "double",
      "java.lang.Object",
      "boolean"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double,T,boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Returns whether the player is trying to start or stop flying.",
    "method": "isFlying",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#isFlying()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the number of effects in this firework.",
    "param-names": ["FireworkMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkMeta"],
    "method": "getEffectsSize",
    "id": "org.bukkit.inventory.meta.FireworkMeta#getEffectsSize()",
    "class": "org.bukkit.inventory.meta.FireworkMeta",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_LEAVES_2",
    "id": "org.bukkit.Material#LEGACY_LEAVES_2",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the rotation of the skull in the world (or facing direction if this\\nis a wall mounted skull).",
    "param-names": [
      "Skull",
      "Rotation"
    ],
    "param-types": [
      "org.bukkit.block.Skull",
      "org.bukkit.block.BlockFace"
    ],
    "method": "setRotation",
    "id": "org.bukkit.block.Skull#setRotation(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.Skull"
  },
  {
    "static": true,
    "field": "BRICKS",
    "id": "org.bukkit.block.banner.PatternType#BRICKS",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Add custom chat completion suggestions shown to the player while typing a\\nmessage.",
    "param-names": [
      "Player",
      "Completions"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.util.Collection"
    ],
    "method": "addCustomChatCompletions",
    "id": "org.bukkit.entity.Player#addCustomChatCompletions(java.util.Collection<java.lang.String>)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerHideEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "The merchant inventory, with 2 CRAFTING slots, and 1 RESULT slot.",
    "static": true,
    "field": "MERCHANT",
    "id": "org.bukkit.event.inventory.InventoryType#MERCHANT",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "static": true,
    "field": "BLOCK_STEM_PLACE",
    "id": "org.bukkit.Sound#BLOCK_STEM_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_RABBIT_DEATH",
    "id": "org.bukkit.Sound#ENTITY_RABBIT_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block that was hit, if it was a block that was hit.",
    "method": "getHitBlock",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getHitBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a left\\nclick.",
    "method": "isLeftClick",
    "id": "org.bukkit.event.inventory.SmithItemEvent#isLeftClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the ItemStack currently in the clicked slot.",
    "method": "getCurrentItem",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getCurrentItem()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ZOGLIN_SPAWN_EGG",
    "id": "org.bukkit.Material#ZOGLIN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_SONIC_CHARGE",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_SONIC_CHARGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'shape' property.",
    "param-names": ["Rail"],
    "param-types": ["org.bukkit.block.data.Rail"],
    "method": "getShape",
    "id": "org.bukkit.block.data.Rail#getShape()",
    "class": "org.bukkit.block.data.Rail",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "static": true,
    "field": "LEGACY_STAINED_GLASS",
    "id": "org.bukkit.Material#LEGACY_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Zombie",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Zombie",
      "boolean"
    ],
    "method": "setVillager",
    "id": "org.bukkit.entity.Zombie#setVillager(boolean)",
    "class": "org.bukkit.entity.Zombie"
  },
  {
    "descr": "Gets the item switched to the main hand.",
    "method": "getMainHandItem",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#getMainHandItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the value of the 'layers' property.",
    "param-names": ["Snow"],
    "param-types": ["org.bukkit.block.data.type.Snow"],
    "method": "getLayers",
    "id": "org.bukkit.block.data.type.Snow#getLayers()",
    "class": "org.bukkit.block.data.type.Snow",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_SPRUCE_FENCE",
    "id": "org.bukkit.Material#LEGACY_SPRUCE_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CALCITE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CALCITE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_VEX_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_VEX_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WEST_UP",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#WEST_UP",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "static": true,
    "field": "BLOCK_SAND_STEP",
    "id": "org.bukkit.Sound#BLOCK_SAND_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the wolf's tail angle in radians",
    "param-names": ["Wolf"],
    "param-types": ["org.bukkit.entity.Wolf"],
    "method": "getTailAngle",
    "id": "org.bukkit.entity.Wolf#getTailAngle()",
    "class": "org.bukkit.entity.Wolf",
    "return": "float"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityDropItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDropItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Test if section is empty",
    "param-names": [
      "ChunkSnapshot",
      "Sy"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int"
    ],
    "method": "isSectionEmpty",
    "id": "org.bukkit.ChunkSnapshot#isSectionEmpty(int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "boolean"
  },
  {
    "descr": "Increments automatically when a player kills another player on the red team.",
    "static": true,
    "field": "TEAM_KILL_RED",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_RED",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Bullet fired by #SHULKER.",
    "static": true,
    "field": "SHULKER_BULLET",
    "id": "org.bukkit.entity.EntityType#SHULKER_BULLET",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Bisected",
    "static": true,
    "field": "TALL_SEAGRASS",
    "id": "org.bukkit.Material#TALL_SEAGRASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entering the bed is prevented due to it not being night nor\\nthundering currently.\\n\\nIf the event is forcefully allowed during daytime, the player will\\nenter the bed (and set its bed location), but might get immediately\\nthrown out again.",
    "static": true,
    "field": "NOT_POSSIBLE_NOW",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#NOT_POSSIBLE_NOW",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "descr": "The hand used to perform this interaction. May be null in the case of\\nAction#PHYSICAL.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockFormEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_BREAK_WOODEN_DOOR",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_BREAK_WOODEN_DOOR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the World in which the border resides.",
    "param-names": ["WorldBorder"],
    "param-types": ["org.bukkit.WorldBorder"],
    "method": "getWorld",
    "id": "org.bukkit.WorldBorder#getWorld()",
    "class": "org.bukkit.WorldBorder",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets whether the Ghast is charging",
    "param-names": ["Ghast"],
    "param-types": ["org.bukkit.entity.Ghast"],
    "method": "isCharging",
    "id": "org.bukkit.entity.Ghast#isCharging()",
    "class": "org.bukkit.entity.Ghast",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ZOGLIN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ZOGLIN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_ACACIA_FENCE_GATE",
    "id": "org.bukkit.Material#LEGACY_ACACIA_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "YELLOW_CANDLE",
    "id": "org.bukkit.Material#YELLOW_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the amount of time in ticks that this chunk has been inhabited.",
    "param-names": [
      "Chunk",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "long"
    ],
    "method": "setInhabitedTime",
    "id": "org.bukkit.Chunk#setInhabitedTime(long)",
    "class": "org.bukkit.Chunk"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the Entity that entered the vehicle.",
    "method": "getEntered",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#getEntered()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_HORN_BREAK",
    "id": "org.bukkit.Sound#ENTITY_GOAT_HORN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents light blue dye.",
    "static": true,
    "field": "LIGHT_BLUE",
    "id": "org.bukkit.DyeColor#LIGHT_BLUE",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_SNIFF",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_SNIFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DEEPSLATE_GOLD_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_GOLD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Cyan colored parrot.",
    "static": true,
    "field": "CYAN",
    "id": "org.bukkit.entity.Parrot.Variant#CYAN",
    "class": "org.bukkit.entity.Parrot.Variant",
    "return": "org.bukkit.entity.Parrot.Variant"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "AMBIENT_CRIMSON_FOREST_ADDITIONS",
    "id": "org.bukkit.Sound#AMBIENT_CRIMSON_FOREST_ADDITIONS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a projectile is launched.",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Source",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.SmokingRecipe#SmokingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material,float,int)",
    "class": "org.bukkit.inventory.SmokingRecipe"
  },
  {
    "static": true,
    "field": "MULE",
    "id": "org.bukkit.loot.LootTables#MULE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Villager profession.",
    "static": true,
    "field": "VILLAGER_PROFESSION",
    "id": "org.bukkit.Registry#VILLAGER_PROFESSION",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.SignChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks if this Material can be interacted with.\\nInteractable materials include those with functionality when they are\\ninteracted with by a player such as chests, furnaces, etc.\\nSome blocks such as piston heads and stairs are considered interactable\\nthough may not perform any additional functionality.\\nNote that the interactability of some materials may be dependant on their\\nstate as well. This method will return true if there is at least one\\nstate in which additional interact handling is performed for the\\nmaterial.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isInteractable",
    "id": "org.bukkit.Material#isInteractable()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PIGLIN",
    "id": "org.bukkit.SkullType#PIGLIN",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType"
  },
  {
    "static": true,
    "field": "ENCHANTED_GOLDEN_APPLE",
    "id": "org.bukkit.Material#ENCHANTED_GOLDEN_APPLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SLIME_BALL",
    "id": "org.bukkit.Material#SLIME_BALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Chest",
    "static": true,
    "field": "CHEST",
    "id": "org.bukkit.Material#CHEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block that this block was placed against",
    "method": "getBlockAgainst",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getBlockAgainst()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.BrewEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the current state of this fish hook.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getState",
    "id": "org.bukkit.entity.FishHook#getState()",
    "class": "org.bukkit.entity.FishHook",
    "return": "org.bukkit.entity.FishHook.HookState"
  },
  {
    "static": true,
    "field": "ENTITY_HOSTILE_SWIM",
    "id": "org.bukkit.Sound#ENTITY_HOSTILE_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Attempts to match the Material with the given name.\\n\\nThis is a match lookup; names will be stripped of the \"minecraft:\"\\nnamespace, converted to uppercase, then stripped of special characters in\\nan attempt to format it like the enum.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "matchMaterial",
    "id": "org.bukkit.Material#matchMaterial(java.lang.String)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Damage caused by falling into the void\\n\\nDamage: 4 for players",
    "static": true,
    "field": "VOID",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#VOID",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Gets the block that the living entity has targeted.\\n\\nThis takes the blocks' precise collision shapes into account.\\n\\nThis may cause loading of chunks! Some implementations may impose\\nartificial restrictions on the maximum distance.",
    "param-names": [
      "LivingEntity",
      "Max Distance",
      "Fluid Collision Mode"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int",
      "org.bukkit.FluidCollisionMode"
    ],
    "method": "getTargetBlockExact",
    "id": "org.bukkit.entity.LivingEntity#getTargetBlockExact(int,org.bukkit.FluidCollisionMode)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets if a BanEntry exists for the target, indicating an active\\nban status.",
    "param-names": [
      "BanList",
      "Target"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.Object"
    ],
    "method": "isBanned",
    "id": "org.bukkit.BanList#isBanned(T)",
    "class": "org.bukkit.BanList",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the egg will hatch or not.",
    "param-names": ["Hatching"],
    "param-types": ["boolean"],
    "method": "setHatching",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#setHatching(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the blue team.",
    "static": true,
    "field": "KILLED_BY_TEAM_BLUE",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_BLUE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_NEARBY_CLOSER",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_NEARBY_CLOSER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.server.ServerLoadEvent.LoadType#values()",
    "class": "org.bukkit.event.server.ServerLoadEvent.LoadType",
    "return": "org.bukkit.event.server.ServerLoadEvent.LoadType[]"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockPlaceEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks for existence of a variant tag indicating a specific axolotl will be\\nspawned.",
    "param-names": ["AxolotlBucketMeta"],
    "param-types": ["org.bukkit.inventory.meta.AxolotlBucketMeta"],
    "method": "hasVariant",
    "id": "org.bukkit.inventory.meta.AxolotlBucketMeta#hasVariant()",
    "class": "org.bukkit.inventory.meta.AxolotlBucketMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "AMBIENT_SOUL_SAND_VALLEY_MOOD",
    "id": "org.bukkit.Sound#AMBIENT_SOUL_SAND_VALLEY_MOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "OAK_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#OAK_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_BEDROCK",
    "id": "org.bukkit.Material#LEGACY_BEDROCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "TORCHFLOWER_CROP",
    "id": "org.bukkit.Material#TORCHFLOWER_CROP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the secondary effect set on the beacon.",
    "param-names": ["Beacon"],
    "param-types": ["org.bukkit.block.Beacon"],
    "method": "getSecondaryEffect",
    "id": "org.bukkit.block.Beacon#getSecondaryEffect()",
    "class": "org.bukkit.block.Beacon",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "static": true,
    "field": "BETTY",
    "id": "org.bukkit.entity.TropicalFish.Pattern#BETTY",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "static": true,
    "field": "QUARTZ_BRICKS",
    "id": "org.bukkit.Material#QUARTZ_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FIRE_CHARGE",
    "id": "org.bukkit.Material#FIRE_CHARGE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ItemMergeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityResurrectEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityResurrectEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "CANDLE_CAKE",
    "id": "org.bukkit.Material#CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the search radius value for finding an available portal.",
    "method": "getSearchRadius",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getSearchRadius()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "int"
  },
  {
    "descr": "Gets a tag which has already been defined within the server. Plugins are\\nsuggested to use the concrete tags in Tag rather than this method\\nwhich makes no guarantees about which tags are available, and may also be\\nless performant due to lack of caching.\\n\\nTags will be searched for in an implementation specific manner, but a\\npath consisting of namespace/tags/registry/key is expected.\\n\\nServer implementations are allowed to handle only the registries\\nindicated in Tag.",
    "param-names": [
      "Registry",
      "Tag",
      "Clazz"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "org.bukkit.NamespacedKey",
      "java.lang.Class"
    ],
    "method": "getTag",
    "id": "org.bukkit.Bukkit#<T>getTag(java.lang.String,org.bukkit.NamespacedKey,java.lang.Class<T>)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.Tag"
  },
  {
    "descr": "Villager splashes particles during a raid.",
    "static": true,
    "field": "VILLAGER_SPLASH",
    "id": "org.bukkit.EntityEffect#VILLAGER_SPLASH",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "POLISHED_DEEPSLATE_STAIRS",
    "id": "org.bukkit.Material#POLISHED_DEEPSLATE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "BROWN_CANDLE_CAKE",
    "id": "org.bukkit.Material#BROWN_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PigZapEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent"
  },
  {
    "descr": "Called when a sheep's wool is dyed",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent"
  },
  {
    "descr": "Get the maximum fuse ticks for this Creeper, where the maximum ticks\\nis the amount of time in which a creeper is allowed to be in the\\nprimed state before exploding.",
    "param-names": ["Creeper"],
    "param-types": ["org.bukkit.entity.Creeper"],
    "method": "getMaxFuseTicks",
    "id": "org.bukkit.entity.Creeper#getMaxFuseTicks()",
    "class": "org.bukkit.entity.Creeper",
    "return": "int"
  },
  {
    "static": true,
    "field": "MINER_POTTERY_SHERD",
    "id": "org.bukkit.Material#MINER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_RETURN",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_RETURN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "descr": "Opens an empty workbench inventory window with the player's inventory\\non the bottom.",
    "param-names": [
      "HumanEntity",
      "Location",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Location",
      "boolean"
    ],
    "method": "openWorkbench",
    "id": "org.bukkit.entity.HumanEntity#openWorkbench(org.bukkit.Location,boolean)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "No spell is being evoked.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.entity.Evoker.Spell#NONE",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "FEELING_HAPPY",
    "id": "org.bukkit.entity.Sniffer.State#FEELING_HAPPY",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "SMOOTH_RED_SANDSTONE_SLAB",
    "id": "org.bukkit.Material#SMOOTH_RED_SANDSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SPIT",
    "id": "org.bukkit.Particle#SPIT",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "WAXED_EXPOSED_CUT_COPPER",
    "id": "org.bukkit.Material#WAXED_EXPOSED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "NOTEBLOCK_TUNED",
    "id": "org.bukkit.Statistic#NOTEBLOCK_TUNED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Copies another bounding box.",
    "param-names": [
      "BoundingBox",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.BoundingBox"
    ],
    "method": "copy",
    "id": "org.bukkit.util.BoundingBox#copy(org.bukkit.util.BoundingBox)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "COAST_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#COAST_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Calculates the cross product of this vector with another. The cross\\nproduct is defined as:\\n\\nx = y1 * z2 - y2 * z1\\ny = z1 * x2 - z2 * x1\\nz = x1 * y2 - x2 * y1\\n",
    "param-names": [
      "Vector",
      "O"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "crossProduct",
    "id": "org.bukkit.util.Vector#crossProduct(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "DIRT_PATH",
    "id": "org.bukkit.Material#DIRT_PATH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'level' property.",
    "param-names": [
      "Levelled",
      "Level"
    ],
    "param-types": [
      "org.bukkit.block.data.Levelled",
      "int"
    ],
    "method": "setLevel",
    "id": "org.bukkit.block.data.Levelled#setLevel(int)",
    "class": "org.bukkit.block.data.Levelled"
  },
  {
    "descr": "Returns the living entity's current no damage ticks.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getNoDamageTicks",
    "id": "org.bukkit.entity.LivingEntity#getNoDamageTicks()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "descr": "The wire travels up the side of the block adjacent to this face.",
    "static": true,
    "field": "UP",
    "id": "org.bukkit.block.data.type.RedstoneWire.Connection#UP",
    "class": "org.bukkit.block.data.type.RedstoneWire.Connection",
    "return": "org.bukkit.block.data.type.RedstoneWire.Connection"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Fired when a player changes their currently held item",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemHeldEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "PIG",
    "id": "org.bukkit.loot.LootTables#PIG",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Represents gray dye.",
    "static": true,
    "field": "GRAY",
    "id": "org.bukkit.DyeColor#GRAY",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "descr": "The \"Drop\" key (defaults to Q).",
    "static": true,
    "field": "DROP",
    "id": "org.bukkit.event.inventory.ClickType#DROP",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Get the boss bar to be displayed for this dragon battle.",
    "param-names": ["DragonBattle"],
    "param-types": ["org.bukkit.boss.DragonBattle"],
    "method": "getBossBar",
    "id": "org.bukkit.boss.DragonBattle#getBossBar()",
    "class": "org.bukkit.boss.DragonBattle",
    "return": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_ITEM_TAKEN",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_ITEM_TAKEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "An unrecognized ClickType.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.inventory.InventoryAction#UNKNOWN",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "BLOCK_PUMPKIN_CARVE",
    "id": "org.bukkit.Sound#BLOCK_PUMPKIN_CARVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_SMOOTH_STAIRS",
    "id": "org.bukkit.Material#LEGACY_SMOOTH_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_STEP",
    "id": "org.bukkit.Sound#BLOCK_SCULK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_WOOD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_WOOD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the new anger resulting from this event.",
    "method": "getNewAnger",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#getNewAnger()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent",
    "return": "int"
  },
  {
    "descr": "Gets whether this iron golem was built by a player.",
    "param-names": ["IronGolem"],
    "param-types": ["org.bukkit.entity.IronGolem"],
    "method": "isPlayerCreated",
    "id": "org.bukkit.entity.IronGolem#isPlayerCreated()",
    "class": "org.bukkit.entity.IronGolem",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_WET_GRASS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_WET_GRASS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the custom model data.\\n\\nCustomModelData is an integer that may be associated client side with a\\ncustom item model.",
    "param-names": [
      "ItemMeta",
      "Data"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "java.lang.Integer"
    ],
    "method": "setCustomModelData",
    "id": "org.bukkit.inventory.meta.ItemMeta#setCustomModelData(java.lang.Integer)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "descr": "Return a EulerAngle which is the result of changing\\nthe y axis to the passed angle",
    "param-names": [
      "EulerAngle",
      "Y"
    ],
    "param-types": [
      "org.bukkit.util.EulerAngle",
      "double"
    ],
    "method": "setY",
    "id": "org.bukkit.util.EulerAngle#setY(double)",
    "class": "org.bukkit.util.EulerAngle",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Sets the base amount of damage this arrow will do.",
    "param-names": [
      "AbstractArrow",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractArrow",
      "double"
    ],
    "method": "setDamage",
    "id": "org.bukkit.entity.AbstractArrow#setDamage(double)",
    "class": "org.bukkit.entity.AbstractArrow"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_PURR",
    "id": "org.bukkit.Sound#ENTITY_CAT_PURR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the base color for this banner",
    "param-names": [
      "BannerMeta",
      "Color"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BannerMeta",
      "org.bukkit.DyeColor"
    ],
    "method": "setBaseColor",
    "id": "org.bukkit.inventory.meta.BannerMeta#setBaseColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.inventory.meta.BannerMeta"
  },
  {
    "descr": "Gets the amount of damage caused by the event after all damage\\nreduction is applied.",
    "method": "getFinalDamage",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getFinalDamage()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "double"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "UNCRAFTABLE",
    "id": "org.bukkit.potion.PotionType#UNCRAFTABLE",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Creates a new color object from an integer that contains the blue,\\ngreen, and red bytes in the lowest order 24 bits.",
    "param-names": ["Bgr"],
    "static": true,
    "param-types": ["int"],
    "method": "fromBGR",
    "id": "org.bukkit.Color#fromBGR(int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Sets the value of the 'waterlogged' property.",
    "param-names": [
      "Waterlogged",
      "Waterlogged"
    ],
    "param-types": [
      "org.bukkit.block.data.Waterlogged",
      "boolean"
    ],
    "method": "setWaterlogged",
    "id": "org.bukkit.block.data.Waterlogged#setWaterlogged(boolean)",
    "class": "org.bukkit.block.data.Waterlogged"
  },
  {
    "descr": "The repair's cost in xp levels",
    "static": true,
    "field": "REPAIR_COST",
    "id": "org.bukkit.inventory.InventoryView.Property#REPAIR_COST",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Get how this structure is rotated.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getRotation",
    "id": "org.bukkit.block.Structure#getRotation()",
    "class": "org.bukkit.block.Structure",
    "return": "org.bukkit.block.structure.StructureRotation"
  },
  {
    "descr": "The default mode, similar to a transistor. The comparator will turn\\noff if either side input is greater than the rear input.",
    "static": true,
    "field": "COMPARE",
    "id": "org.bukkit.block.data.type.Comparator.Mode#COMPARE",
    "class": "org.bukkit.block.data.type.Comparator.Mode",
    "return": "org.bukkit.block.data.type.Comparator.Mode"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.HorseJumpEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the folder that contains all of the various Worlds.",
    "static": true,
    "method": "getWorldContainer",
    "id": "org.bukkit.Bukkit#getWorldContainer()",
    "class": "org.bukkit.Bukkit",
    "return": "java.io.File"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_PEARL_THROW",
    "id": "org.bukkit.Sound#ENTITY_ENDER_PEARL_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SNIFFER_DIGGING",
    "id": "org.bukkit.loot.LootTables#SNIFFER_DIGGING",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Shipwrecks are structures that generate on the floor of oceans or\\nbeaches.\\n\\nThey are made up of wood materials, and contain 1-3 loot chests. They can\\ngenerate sideways, upside-down, or upright.",
    "static": true,
    "field": "SHIPWRECK",
    "id": "org.bukkit.StructureType#SHIPWRECK",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Damage caused due to an ongoing poison effect\\n\\nDamage: 1",
    "static": true,
    "field": "POISON",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#POISON",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Get the spawner's delay.\\n\\nThis is the delay, in ticks, until the spawner will spawn its next mob.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getDelay",
    "id": "org.bukkit.block.CreatureSpawner#getDelay()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns whether or not this potion effect has a shorter duration than the\\nprovided potion effect.\\n\\nAn infinite duration is considered longer than non-infinite durations. If\\nboth potion effects have infinite durations, then neither is shorter than\\nthe other and this method will return false.",
    "param-names": [
      "PotionEffect",
      "Other"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffect",
      "org.bukkit.potion.PotionEffect"
    ],
    "method": "isShorterThan",
    "id": "org.bukkit.potion.PotionEffect#isShorterThan(org.bukkit.potion.PotionEffect)",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_SILVERFISH",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_SILVERFISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerJoinEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "id": "org.bukkit.inventory.RecipeChoice.ExactChoice#ExactChoice(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.RecipeChoice.ExactChoice"
  },
  {
    "static": true,
    "field": "SPONGE",
    "id": "org.bukkit.Material#SPONGE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'face' property.",
    "param-names": [
      "FaceAttachable",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.data.FaceAttachable",
      "org.bukkit.block.data.FaceAttachable.AttachedFace"
    ],
    "method": "setAttachedFace",
    "id": "org.bukkit.block.data.FaceAttachable#setAttachedFace(org.bukkit.block.data.FaceAttachable.AttachedFace)",
    "class": "org.bukkit.block.data.FaceAttachable"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": [
      "Color",
      "Size"
    ],
    "param-types": [
      "org.bukkit.Color",
      "float"
    ],
    "id": "org.bukkit.Particle.DustOptions#DustOptions(org.bukkit.Color,float)",
    "class": "org.bukkit.Particle.DustOptions"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_STEP",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_ORE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_ORE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the entity the player is shearing",
    "method": "getEntity",
    "id": "org.bukkit.event.player.PlayerShearEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShearEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "param-names": ["Args"],
    "static": true,
    "param-types": ["java.util.Map"],
    "method": "deserialize",
    "id": "org.bukkit.attribute.AttributeModifier#deserialize(java.util.Map<java.lang.String,java.lang.Object>)",
    "class": "org.bukkit.attribute.AttributeModifier",
    "return": "org.bukkit.attribute.AttributeModifier"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_BUTTON",
    "id": "org.bukkit.Material#LEGACY_WOOD_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns whether the world has an ongoing storm.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "hasStorm",
    "id": "org.bukkit.World#hasStorm()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets if this world has a ceiling.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "hasCeiling",
    "id": "org.bukkit.World#hasCeiling()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "VILLAGE_BUTCHER",
    "id": "org.bukkit.loot.LootTables#VILLAGE_BUTCHER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerRiptideEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRiptideEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_HURT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the damage dealt within the current no damage ticks time period.",
    "param-names": [
      "LivingEntity",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "double"
    ],
    "method": "setLastDamage",
    "id": "org.bukkit.entity.LivingEntity#setLastDamage(double)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "BlockData: DaylightDetector",
    "static": true,
    "field": "DAYLIGHT_DETECTOR",
    "id": "org.bukkit.Material#DAYLIGHT_DETECTOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the potion color. A custom potion color will alter the display of\\nthe potion in an inventory slot.",
    "param-names": [
      "PotionMeta",
      "Color"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.PotionMeta",
      "org.bukkit.Color"
    ],
    "method": "setColor",
    "id": "org.bukkit.inventory.meta.PotionMeta#setColor(org.bukkit.Color)",
    "class": "org.bukkit.inventory.meta.PotionMeta"
  },
  {
    "descr": "When an entity selects a target while defending a village.",
    "static": true,
    "field": "DEFEND_VILLAGE",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#DEFEND_VILLAGE",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "When a creature spawns from a spawner",
    "static": true,
    "field": "SPAWNER",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#SPAWNER",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Called when a bat attempts to sleep or wake up from its slumber.\\n\\nIf a Bat Toggle Sleep event is cancelled, the Bat will not toggle its sleep\\nstate.",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent"
  },
  {
    "descr": "Attack damage of an Entity.",
    "static": true,
    "field": "GENERIC_ATTACK_DAMAGE",
    "id": "org.bukkit.attribute.Attribute#GENERIC_ATTACK_DAMAGE",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "Gets a copy of the item the entity is currently holding\\nin their main hand.",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getItemInMainHand",
    "id": "org.bukkit.inventory.EntityEquipment#getItemInMainHand()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DIAMOND_ORE",
    "id": "org.bukkit.Material#DIAMOND_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ZOMBIE_HORSE",
    "id": "org.bukkit.entity.EntityType#ZOMBIE_HORSE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Pillager outposts may contain crossbows.",
    "static": true,
    "field": "PILLAGER_OUTPOST",
    "id": "org.bukkit.StructureType#PILLAGER_OUTPOST",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Sets the author of the book. Removes author when given null.",
    "param-names": [
      "BookMeta",
      "Author"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "java.lang.String"
    ],
    "method": "setAuthor",
    "id": "org.bukkit.inventory.meta.BookMeta#setAuthor(java.lang.String)",
    "class": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "descr": "Gets the minimum allowed value of the 'delay' property.",
    "param-names": ["Repeater"],
    "param-types": ["org.bukkit.block.data.type.Repeater"],
    "method": "getMinimumDelay",
    "id": "org.bukkit.block.data.type.Repeater#getMinimumDelay()",
    "class": "org.bukkit.block.data.type.Repeater",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Spellcaster.Spell#values()",
    "class": "org.bukkit.entity.Spellcaster.Spell",
    "return": "org.bukkit.entity.Spellcaster.Spell[]"
  },
  {
    "static": true,
    "field": "DRIED_KELP_BLOCK",
    "id": "org.bukkit.Material#DRIED_KELP_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The namespace representing all keys generated by Bukkit for backwards\\ncompatibility measures.",
    "static": true,
    "field": "BUKKIT",
    "id": "org.bukkit.NamespacedKey#BUKKIT",
    "class": "org.bukkit.NamespacedKey",
    "return": "java.lang.String"
  },
  {
    "descr": "Remove a specific Attribute and AttributeModifier.\\nAttributeModifiers are matched according to their java.util.UUID.",
    "param-names": [
      "ItemMeta",
      "Attribute",
      "Modifier"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.attribute.Attribute",
      "org.bukkit.attribute.AttributeModifier"
    ],
    "method": "removeAttributeModifier",
    "id": "org.bukkit.inventory.meta.ItemMeta#removeAttributeModifier(org.bukkit.attribute.Attribute,org.bukkit.attribute.AttributeModifier)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_HONEY_BLOCK_SLIDE",
    "id": "org.bukkit.Sound#BLOCK_HONEY_BLOCK_SLIDE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Statistics of this type require a Block Material qualifier.",
    "static": true,
    "field": "BLOCK",
    "id": "org.bukkit.Statistic.Type#BLOCK",
    "class": "org.bukkit.Statistic.Type",
    "return": "org.bukkit.Statistic.Type"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_CONCRETE_POWDER",
    "id": "org.bukkit.Material#LIGHT_GRAY_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.HorseJumpEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_LEATHERWORKER",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_LEATHERWORKER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "BEETROOTS",
    "id": "org.bukkit.Material#BEETROOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get whether or not the bat is attempting to awaken.",
    "method": "isAwake",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#isAwake()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ORANGE_WOOL",
    "id": "org.bukkit.Material#ORANGE_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SHIELD",
    "id": "org.bukkit.Material#LEGACY_SHIELD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTS_STEP",
    "id": "org.bukkit.Sound#BLOCK_ROOTS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "NETHER_PORTAL",
    "id": "org.bukkit.Material#NETHER_PORTAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SALMON_HURT",
    "id": "org.bukkit.Sound#ENTITY_SALMON_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Player swims one centimeter",
    "static": true,
    "field": "SWIM",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#SWIM",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Statistic.Type#values()",
    "class": "org.bukkit.Statistic.Type",
    "return": "org.bukkit.Statistic.Type[]"
  },
  {
    "static": true,
    "field": "ENTITY_MOOSHROOM_MILK",
    "id": "org.bukkit.Sound#ENTITY_MOOSHROOM_MILK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Whether entities that are not mobs should have drops.",
    "static": true,
    "field": "DO_ENTITY_DROPS",
    "id": "org.bukkit.GameRule#DO_ENTITY_DROPS",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_RED_SANDSTONE",
    "id": "org.bukkit.Material#LEGACY_RED_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_BANJO",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_BANJO",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "WARPED_WALL_SIGN",
    "id": "org.bukkit.Material#WARPED_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_FISHING_BOBBER_THROW",
    "id": "org.bukkit.Sound#ENTITY_FISHING_BOBBER_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CRAFTING_TABLE_INTERACTION",
    "id": "org.bukkit.Statistic#CRAFTING_TABLE_INTERACTION",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Returns whether the effect of this type happens once, immediately.",
    "param-names": ["PotionEffectType"],
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "isInstant",
    "id": "org.bukkit.potion.PotionEffectType#isInstant()",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "boolean"
  },
  {
    "descr": "Returns the ItemStack currently on your cursor, can be empty. Will\\nalways be empty if the player currently has no open window.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getItemOnCursor",
    "id": "org.bukkit.entity.HumanEntity#getItemOnCursor()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.PluginDisableEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.PluginDisableEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ITEM_HONEYCOMB_WAX_ON",
    "id": "org.bukkit.Sound#ITEM_HONEYCOMB_WAX_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "COW_SPAWN_EGG",
    "id": "org.bukkit.Material#COW_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates explosion at given coordinates with given power",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Power"
    ],
    "param-types": [
      "org.bukkit.World",
      "double",
      "double",
      "double",
      "float"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(double,double,double,float)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.SignChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Add a primary color to the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Color"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "org.bukkit.Color"
    ],
    "method": "withColor",
    "id": "org.bukkit.FireworkEffect.Builder#withColor(org.bukkit.Color)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "The particles shown when a sponge dries in an ultra warm world (nether).",
    "static": true,
    "field": "SPONGE_DRY",
    "id": "org.bukkit.Effect#SPONGE_DRY",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Set the shooter of this projectile.",
    "param-names": [
      "Projectile",
      "Source"
    ],
    "param-types": [
      "org.bukkit.entity.Projectile",
      "org.bukkit.projectiles.ProjectileSource"
    ],
    "method": "setShooter",
    "id": "org.bukkit.entity.Projectile#setShooter(org.bukkit.projectiles.ProjectileSource)",
    "class": "org.bukkit.entity.Projectile"
  },
  {
    "static": true,
    "field": "WATER",
    "id": "org.bukkit.potion.PotionType#WATER",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "ENTITY_WOLF_PANT",
    "id": "org.bukkit.Sound#ENTITY_WOLF_PANT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIFIED_PIGLIN_HURT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIFIED_PIGLIN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the new type of this villager.",
    "param-names": [
      "ZombieVillager",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.ZombieVillager",
      "org.bukkit.entity.Villager.Type"
    ],
    "method": "setVillagerType",
    "id": "org.bukkit.entity.ZombieVillager#setVillagerType(org.bukkit.entity.Villager.Type)",
    "class": "org.bukkit.entity.ZombieVillager"
  },
  {
    "descr": "Gets the Instrument to be used.",
    "method": "getInstrument",
    "id": "org.bukkit.event.block.NotePlayEvent#getInstrument()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ItemMergeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemMergeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Cyan axolotl.",
    "static": true,
    "field": "CYAN",
    "id": "org.bukkit.entity.Axolotl.Variant#CYAN",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant"
  },
  {
    "descr": "Gets the type of slot that was clicked.",
    "method": "getSlotType",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getSlotType()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_BUTTON_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_BUTTON_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Represents a player related inventory event",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent"
  },
  {
    "descr": "Returns the name of this effect type.",
    "param-names": ["PotionEffectType"],
    "param-types": ["org.bukkit.potion.PotionEffectType"],
    "method": "getName",
    "id": "org.bukkit.potion.PotionEffectType#getName()",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "java.lang.String"
  },
  {
    "descr": "Stops the jukebox playing and ejects the current record.\\n\\nIf the block represented by this state is no longer a jukebox, this will\\ndo nothing and return false.",
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "eject",
    "id": "org.bukkit.block.Jukebox#eject()",
    "class": "org.bukkit.block.Jukebox",
    "return": "boolean"
  },
  {
    "descr": "Sets the value of the 'candles' property.",
    "param-names": [
      "Candle",
      "Candles"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Candle",
      "int"
    ],
    "method": "setCandles",
    "id": "org.bukkit.block.data.type.Candle#setCandles(int)",
    "class": "org.bukkit.block.data.type.Candle"
  },
  {
    "descr": "Draw an image to the map. The image will be clipped if necessary.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y",
      "Image"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int",
      "java.awt.Image"
    ],
    "method": "drawImage",
    "id": "org.bukkit.map.MapCanvas#drawImage(int,int,java.awt.Image)",
    "class": "org.bukkit.map.MapCanvas"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockExpEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent",
    "return": "boolean"
  },
  {
    "descr": "Represents dark blue (aqua)",
    "static": true,
    "field": "DARK_AQUA",
    "id": "org.bukkit.ChatColor#DARK_AQUA",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIGHT_GRAY_SHULKER_BOX",
    "id": "org.bukkit.Material#LIGHT_GRAY_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_LANTERN_HIT",
    "id": "org.bukkit.Sound#BLOCK_LANTERN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Send a sign change. This fakes a sign change packet for a user at\\na certain location. This will not actually change the world in any way.\\nThis method will use a sign at the location's block or a faked sign\\nsent via\\n#sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData).\\n\\nIf the client does not have a sign at the given location it will\\ndisplay an error message to the user.\\n\\nTo change all attributes of a sign, including the back Side, use\\n#sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState).",
    "param-names": [
      "Player",
      "Loc",
      "Lines",
      "Dye Color"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "java.lang.String[]",
      "org.bukkit.DyeColor"
    ],
    "method": "sendSignChange",
    "id": "org.bukkit.entity.Player#sendSignChange(org.bukkit.Location,java.lang.String[],org.bukkit.DyeColor)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the environment that will be used to create or load the world",
    "param-names": ["WorldCreator"],
    "param-types": ["org.bukkit.WorldCreator"],
    "method": "environment",
    "id": "org.bukkit.WorldCreator#environment()",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.World.Environment"
  },
  {
    "descr": "Gets the name of the update folder. The update folder is used to safely\\nupdate plugins at the right moment on a plugin load.\\n\\nThe update folder name is relative to the plugins folder.",
    "static": true,
    "method": "getUpdateFolder",
    "id": "org.bukkit.Bukkit#getUpdateFolder()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_DECORATED_POT_STEP",
    "id": "org.bukkit.Sound#BLOCK_DECORATED_POT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_BLAST_FURNACE",
    "id": "org.bukkit.Statistic#INTERACT_WITH_BLAST_FURNACE",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_LARGE_BLAST",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_LARGE_BLAST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Makes the boss bar solid (no segments)",
    "static": true,
    "field": "SOLID",
    "id": "org.bukkit.boss.BarStyle#SOLID",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle"
  },
  {
    "descr": "Creates a new BlockData instance for this Material, with all\\nproperties initialized to unspecified defaults.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "createBlockData",
    "id": "org.bukkit.Material#createBlockData()",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerKickEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the old potion effect of the changed type, which will be removed.",
    "method": "getOldEffect",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getOldEffect()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "descr": "BlockData: Cake",
    "static": true,
    "field": "CAKE",
    "id": "org.bukkit.Material#CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "field": "data",
    "id": "org.bukkit.Material#data",
    "class": "org.bukkit.Material",
    "return": "java.lang.Class"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_TORCH_ON",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_TORCH_ON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENDER_DRAGON",
    "id": "org.bukkit.entity.EntityType#ENDER_DRAGON",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BLACK_WALL_BANNER",
    "id": "org.bukkit.Material#BLACK_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SLOW_FALLING",
    "id": "org.bukkit.potion.PotionType#SLOW_FALLING",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "WAX_OFF",
    "id": "org.bukkit.Particle#WAX_OFF",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Loads the players current location, health, inventory, motion, and\\nother information from the username.dat file, in the world/player\\nfolder.\\n\\nNote: This will overwrite the players current inventory, health,\\nmotion, etc, with the state from the saved dat file.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "loadData",
    "id": "org.bukkit.entity.Player#loadData()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets if the server whitelist is enforced.\\nIf the whitelist is enforced, non-whitelisted players will be\\ndisconnected when the server whitelist is reloaded.",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["boolean"],
    "method": "setWhitelistEnforced",
    "id": "org.bukkit.Bukkit#setWhitelistEnforced(boolean)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "GRAY_1",
    "id": "org.bukkit.map.MapPalette#GRAY_1",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "No rotation (default).",
    "static": true,
    "field": "FIXED",
    "id": "org.bukkit.entity.Display.Billboard#FIXED",
    "class": "org.bukkit.entity.Display.Billboard",
    "return": "org.bukkit.entity.Display.Billboard"
  },
  {
    "descr": "Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The\\nvalue of this method is not cached and uses a costly square-root\\nfunction, so do not repeatedly call this method to get the location's\\nmagnitude. NaN will be returned if the inner result of the sqrt()\\nfunction overflows, which will be caused if the length is too long. Not\\nworld-aware and orientation independent.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "length",
    "id": "org.bukkit.Location#length()",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "descr": "Some of the items from the cursor are moved to the clicked slot\\n(usually up to the max stack size).",
    "static": true,
    "field": "PLACE_SOME",
    "id": "org.bukkit.event.inventory.InventoryAction#PLACE_SOME",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "LEGACY_GLASS_BOTTLE",
    "id": "org.bukkit.Material#LEGACY_GLASS_BOTTLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Stores the ItemStack at the given equipment slot in the inventory.",
    "param-names": [
      "EntityEquipment",
      "Slot",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.EquipmentSlot",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.EntityEquipment#setItem(org.bukkit.inventory.EquipmentSlot,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Called when a piston retracts",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent"
  },
  {
    "descr": "Gets the Material if #getStatistic() getStatistic() is a block\\nor item statistic otherwise returns null.",
    "method": "getMaterial",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getMaterial()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "LIGHT_BLUE_BED",
    "id": "org.bukkit.Material#LIGHT_BLUE_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the Inventory that initiated the transfer. This will always be\\neither the destination or source Inventory.",
    "method": "getInitiator",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getInitiator()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "LEGACY_FIREWORK_CHARGE",
    "id": "org.bukkit.Material#LEGACY_FIREWORK_CHARGE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Return the direction in which the piston will operate.",
    "method": "getDirection",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getDirection()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Gets the fishing hook.",
    "method": "getHook",
    "id": "org.bukkit.event.player.PlayerFishEvent#getHook()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Gets the player's current locale.\\nThe value of the locale String is not defined properly.\\n\\nThe vanilla Minecraft client will use lowercase language / country pairs\\nseparated by an underscore, but custom resource packs may use any format\\nthey wish.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getLocale",
    "id": "org.bukkit.entity.Player#getLocale()",
    "class": "org.bukkit.entity.Player",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when a block is formed or spreads based on world conditions.\\n\\nUse BlockSpreadEvent to catch blocks that actually spread and don't\\njust \"randomly\" form.\\n\\nExamples:\\n\\nSnow forming due to a snow storm.\\nIce forming in a snowy Biome like Taiga or Tundra.\\n Obsidian / Cobblestone forming due to contact with water.\\n Concrete forming due to mixing of concrete powder and water.\\n\\n\\nIf a Block Form event is cancelled, the block will not be formed.",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent"
  },
  {
    "static": true,
    "field": "UI_TOAST_CHALLENGE_COMPLETE",
    "id": "org.bukkit.Sound#UI_TOAST_CHALLENGE_COMPLETE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "NETHER_QUARTZ_ORE",
    "id": "org.bukkit.Material#NETHER_QUARTZ_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ZOMBIE_VILLAGER_SPAWN_EGG",
    "id": "org.bukkit.Material#ZOMBIE_VILLAGER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get current set itemFlags. The collection returned is unmodifiable.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getItemFlags",
    "id": "org.bukkit.inventory.meta.ItemMeta#getItemFlags()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "JUKEBOX_STOP_PLAY",
    "id": "org.bukkit.GameEvent#JUKEBOX_STOP_PLAY",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Loads the Chunk at the specified coordinates.\\n\\nThis method will keep the specified chunk loaded until one of the\\nunload methods is manually called. Callers are advised to instead use\\ngetChunkAt which will only temporarily load the requested chunk.\\n\\nIf the chunk does not exist, it will be generated.\\n\\nThis method is analogous to #loadChunk(int, int, boolean) where\\ngenerate is true.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "loadChunk",
    "id": "org.bukkit.World#loadChunk(int,int)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Adds a plugin ticket for the specified chunk, loading the chunk if it is\\nnot already loaded.\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": [
      "World",
      "X",
      "Z",
      "Plugin"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "addPluginChunkTicket",
    "id": "org.bukkit.World#addPluginChunkTicket(int,int,org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BIRCH_BOAT",
    "id": "org.bukkit.Material#BIRCH_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_SCENTING",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_SCENTING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_TNT_PRIMED",
    "id": "org.bukkit.Sound#ENTITY_TNT_PRIMED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#values()",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason[]"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_ORE",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a new Color object from a blue, green, and red",
    "param-names": [
      "Blue",
      "Green",
      "Red"
    ],
    "static": true,
    "param-types": [
      "int",
      "int",
      "int"
    ],
    "method": "fromBGR",
    "id": "org.bukkit.Color#fromBGR(int,int,int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_SKELETON_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_WITHER_SKELETON_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_HURT",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Removes the specified plugin's ticket for this chunk\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": [
      "Chunk",
      "Plugin"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "removePluginChunkTicket",
    "id": "org.bukkit.Chunk#removePluginChunkTicket(org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "descr": "Olive, or (0x80,0x80,0x00) in (R,G,B)",
    "static": true,
    "field": "OLIVE",
    "id": "org.bukkit.Color#OLIVE",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns true if this entity can breathe underwater and will not take\\nsuffocation damage when its air supply reaches zero.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "canBreatheUnderwater",
    "id": "org.bukkit.entity.LivingEntity#canBreatheUnderwater()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SIDEBAR_GREEN",
    "id": "org.bukkit.scoreboard.DisplaySlot#SIDEBAR_GREEN",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "DARK_OAK_STAIRS",
    "id": "org.bukkit.Material#DARK_OAK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": [
      "Guardian",
      "Should Be Elder"
    ],
    "param-types": [
      "org.bukkit.entity.Guardian",
      "boolean"
    ],
    "method": "setElder",
    "id": "org.bukkit.entity.Guardian#setElder(boolean)",
    "class": "org.bukkit.entity.Guardian"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_LISTENING",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_LISTENING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The container the hopper is attached to.\\nThis is the Inventory the Hopper pushes items into.",
    "static": true,
    "field": "DESTINATION",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType#DESTINATION",
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType",
    "return": "org.bukkit.event.inventory.HopperInventorySearchEvent.ContainerType"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BLUE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#BLUE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the Z component.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "getZ",
    "id": "org.bukkit.util.Vector#getZ()",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "static": true,
    "field": "ITEM_GOAT_HORN_SOUND_4",
    "id": "org.bukkit.Sound#ITEM_GOAT_HORN_SOUND_4",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WARDEN_SPAWN_EGG",
    "id": "org.bukkit.Material#WARDEN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_DIDGERIDOO",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_DIDGERIDOO",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the currently attached block state for this\\nitem or creates a new one if one doesn't exist.\\nThe state is a copy, it must be set back (or to another\\nitem) with #setBlockState(org.bukkit.block.BlockState)",
    "param-names": ["BlockStateMeta"],
    "param-types": ["org.bukkit.inventory.meta.BlockStateMeta"],
    "method": "getBlockState",
    "id": "org.bukkit.inventory.meta.BlockStateMeta#getBlockState()",
    "class": "org.bukkit.inventory.meta.BlockStateMeta",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Whether time progresses from the current moment.",
    "static": true,
    "field": "DO_DAYLIGHT_CYCLE",
    "id": "org.bukkit.GameRule#DO_DAYLIGHT_CYCLE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "BLOCK_HANGING_ROOTS_FALL",
    "id": "org.bukkit.Sound#BLOCK_HANGING_ROOTS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When TNT is primed by a dispenser holding flint and steel.\\n\\nNote: This event is not called for a dispenser dispensing TNT\\ndirectly.",
    "static": true,
    "field": "DISPENSER",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#DISPENSER",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "descr": "Sets the value of the 'powered' property.",
    "param-names": [
      "Powerable",
      "Powered"
    ],
    "param-types": [
      "org.bukkit.block.data.Powerable",
      "boolean"
    ],
    "method": "setPowered",
    "id": "org.bukkit.block.data.Powerable#setPowered(boolean)",
    "class": "org.bukkit.block.data.Powerable"
  },
  {
    "descr": "Raised when a vehicle collides with a block.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleBlockCollisionEvent"
  },
  {
    "descr": "Gets the amount of durability damage this item will be taking.",
    "method": "getDamage",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#getDamage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "int"
  },
  {
    "descr": "Sets whether this iron golem was built by a player or not.",
    "param-names": [
      "IronGolem",
      "Player Created"
    ],
    "param-types": [
      "org.bukkit.entity.IronGolem",
      "boolean"
    ],
    "method": "setPlayerCreated",
    "id": "org.bukkit.entity.IronGolem#setPlayerCreated(boolean)",
    "class": "org.bukkit.entity.IronGolem"
  },
  {
    "static": true,
    "field": "VEX_SPAWN_EGG",
    "id": "org.bukkit.Material#VEX_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the command that the player is attempting to send.\\n\\nAll commands begin with a special character; implementations do not\\nconsider the first character when executing the content.",
    "method": "getMessage",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#getMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks if this chunk can spawn slimes without being a swamp biome.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "isSlimeChunk",
    "id": "org.bukkit.Chunk#isSlimeChunk()",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "descr": "Set the item being enchanted.",
    "param-names": [
      "EnchantingInventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.EnchantingInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItem",
    "id": "org.bukkit.inventory.EnchantingInventory#setItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EnchantingInventory"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_BLAST_FAR",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_BLAST_FAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if the Player keeps inventory on death.",
    "method": "getKeepInventory",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getKeepInventory()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: BigDripleaf",
    "static": true,
    "field": "BIG_DRIPLEAF",
    "id": "org.bukkit.Material#BIG_DRIPLEAF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_VINE",
    "id": "org.bukkit.Material#LEGACY_VINE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CONDUIT_ATTACK_TARGET",
    "id": "org.bukkit.Sound#BLOCK_CONDUIT_ATTACK_TARGET",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Scaffolding",
    "static": true,
    "field": "SCAFFOLDING",
    "id": "org.bukkit.Material#SCAFFOLDING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_TILT_UP",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_TILT_UP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "RED_MARKER",
    "id": "org.bukkit.map.MapCursor.Type#RED_MARKER",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "static": true,
    "field": "BREWINGSTAND_INTERACTION",
    "id": "org.bukkit.Statistic#BREWINGSTAND_INTERACTION",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When TNT is primed by fire spreading.",
    "static": true,
    "field": "FIRE",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#FIRE",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Sets the join message to send to all online players",
    "param-names": ["Join Message"],
    "param-types": ["java.lang.String"],
    "method": "setJoinMessage",
    "id": "org.bukkit.event.player.PlayerJoinEvent#setJoinMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerJoinEvent"
  },
  {
    "static": true,
    "field": "LEGACY_BED_BLOCK",
    "id": "org.bukkit.Material#LEGACY_BED_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityBreedEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTED_DIRT_PLACE",
    "id": "org.bukkit.Sound#BLOCK_ROOTED_DIRT_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Translates a string using an alternate color code character into a\\nstring that uses the internal ChatColor.COLOR_CODE color code\\ncharacter. The alternate color code character will only be replaced if\\nit is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.",
    "param-names": [
      "Alt Color Char",
      "Text To Translate"
    ],
    "static": true,
    "param-types": [
      "char",
      "java.lang.String"
    ],
    "method": "translateAlternateColorCodes",
    "id": "org.bukkit.ChatColor#translateAlternateColorCodes(char,java.lang.String)",
    "class": "org.bukkit.ChatColor",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "BROWN_BANNER",
    "id": "org.bukkit.Material#BROWN_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MATCH",
    "id": "org.bukkit.Art#MATCH",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "static": true,
    "field": "BLOCK_CORAL_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CORAL_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether this gateway will teleport entities directly to\\nthe exit location instead of finding a nearby location.",
    "param-names": ["EndGateway"],
    "param-types": ["org.bukkit.block.EndGateway"],
    "method": "isExactTeleport",
    "id": "org.bukkit.block.EndGateway#isExactTeleport()",
    "class": "org.bukkit.block.EndGateway",
    "return": "boolean"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityTameEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTameEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason#values()",
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason",
    "return": "org.bukkit.event.entity.VillagerCareerChangeEvent.ChangeReason[]"
  },
  {
    "static": true,
    "field": "BLOCK_FROGLIGHT_STEP",
    "id": "org.bukkit.Sound#BLOCK_FROGLIGHT_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEFT",
    "id": "org.bukkit.entity.Wither.Head#LEFT",
    "class": "org.bukkit.entity.Wither.Head",
    "return": "org.bukkit.entity.Wither.Head"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_BOAT",
    "id": "org.bukkit.Material#LEGACY_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_CARPET_STEP",
    "id": "org.bukkit.Sound#BLOCK_MOSS_CARPET_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Indicate the spawn was caused by an unknown reason.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#UNKNOWN",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause"
  },
  {
    "descr": "Get whether the renderer is contextual, i.e. has different canvases for\\ndifferent players.",
    "param-names": ["MapRenderer"],
    "param-types": ["org.bukkit.map.MapRenderer"],
    "method": "isContextual",
    "id": "org.bukkit.map.MapRenderer#isContextual()",
    "class": "org.bukkit.map.MapRenderer",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPortalEnterEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Makes the text bold.",
    "static": true,
    "field": "BOLD",
    "id": "org.bukkit.ChatColor#BOLD",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "When an entity gets the effect from an axolotl.",
    "static": true,
    "field": "AXOLOTL",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#AXOLOTL",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_ATTACK_IMPACT",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_ATTACK_IMPACT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_BEE_HURT",
    "id": "org.bukkit.Sound#ENTITY_BEE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the horse has a chest equipped.",
    "param-names": ["ChestedHorse"],
    "param-types": ["org.bukkit.entity.ChestedHorse"],
    "method": "isCarryingChest",
    "id": "org.bukkit.entity.ChestedHorse#isCarryingChest()",
    "class": "org.bukkit.entity.ChestedHorse",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "TRIANGLE_TOP",
    "id": "org.bukkit.block.banner.PatternType#TRIANGLE_TOP",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "INFESTED_CHISELED_STONE_BRICKS",
    "id": "org.bukkit.Material#INFESTED_CHISELED_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the interpolation duration of this display.",
    "param-names": ["Display"],
    "param-types": ["org.bukkit.entity.Display"],
    "method": "getInterpolationDuration",
    "id": "org.bukkit.entity.Display#getInterpolationDuration()",
    "class": "org.bukkit.entity.Display",
    "return": "int"
  },
  {
    "static": true,
    "field": "PURPLE_CONCRETE_POWDER",
    "id": "org.bukkit.Material#PURPLE_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "UP_SOUTH",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#UP_SOUTH",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "The mode used when loading a structure.",
    "static": true,
    "field": "LOAD",
    "id": "org.bukkit.block.structure.UsageMode#LOAD",
    "class": "org.bukkit.block.structure.UsageMode",
    "return": "org.bukkit.block.structure.UsageMode"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_SPADE",
    "id": "org.bukkit.Material#LEGACY_GOLD_SPADE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set whether this chunk will be saved to disk.",
    "param-names": ["Save Chunk"],
    "param-types": ["boolean"],
    "method": "setSaveChunk",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#setSaveChunk(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent"
  },
  {
    "descr": "When an entity spawns as a mount of another entity (mostly chicken\\njockeys)",
    "static": true,
    "field": "MOUNT",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#MOUNT",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "CHERRY_TRAPDOOR",
    "id": "org.bukkit.Material#CHERRY_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "PRIZE_POTTERY_SHERD",
    "id": "org.bukkit.Material#PRIZE_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if structure was grown using bonemeal.",
    "method": "isFromBonemeal",
    "id": "org.bukkit.event.world.StructureGrowEvent#isFromBonemeal()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "boolean"
  },
  {
    "descr": "When a creature is spawned by another entity drowning",
    "static": true,
    "field": "DROWNED",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#DROWNED",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Checks for existence of a display name.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "hasDisplayName",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasDisplayName()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_DYING",
    "id": "org.bukkit.GameEvent#ENTITY_DYING",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Shows the previously hidden boss bar to all attached players",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "show",
    "id": "org.bukkit.boss.BossBar#show()",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "static": true,
    "field": "ENTITY_ELDER_GUARDIAN_HURT_LAND",
    "id": "org.bukkit.Sound#ENTITY_ELDER_GUARDIAN_HURT_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_EAT",
    "id": "org.bukkit.Sound#ENTITY_FROG_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": ["StonecuttingRecipe"],
    "param-types": ["org.bukkit.inventory.StonecuttingRecipe"],
    "method": "getGroup",
    "id": "org.bukkit.inventory.StonecuttingRecipe#getGroup()",
    "class": "org.bukkit.inventory.StonecuttingRecipe",
    "return": "java.lang.String"
  },
  {
    "descr": "Called when a splash potion hits an area",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent"
  },
  {
    "descr": "Creates a new pattern from the specified color and\\npattern type",
    "param-names": [
      "Color",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.DyeColor",
      "org.bukkit.block.banner.PatternType"
    ],
    "id": "org.bukkit.block.banner.Pattern#Pattern(org.bukkit.DyeColor,org.bukkit.block.banner.PatternType)",
    "class": "org.bukkit.block.banner.Pattern"
  },
  {
    "descr": "Set the bonus uses added.",
    "param-names": ["Bonus"],
    "param-types": ["int"],
    "method": "setBonus",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#setBonus(int)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent"
  },
  {
    "static": true,
    "field": "DAMAGE_DEALT_ABSORBED",
    "id": "org.bukkit.Statistic#DAMAGE_DEALT_ABSORBED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "BlockData: CommandBlock",
    "static": true,
    "field": "CHAIN_COMMAND_BLOCK",
    "id": "org.bukkit.Material#CHAIN_COMMAND_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_VILLAGER_CONVERTED",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_CONVERTED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SOUTH",
    "id": "org.bukkit.block.BlockFace#SOUTH",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "OAK_PLANKS",
    "id": "org.bukkit.Material#OAK_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_VEIN_FALL",
    "id": "org.bukkit.Sound#BLOCK_SCULK_VEIN_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "CREEBET",
    "id": "org.bukkit.Art#CREEBET",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Returns whether this entity is inside a vehicle.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isInsideVehicle",
    "id": "org.bukkit.entity.Entity#isInsideVehicle()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "POLISHED_DEEPSLATE_SLAB",
    "id": "org.bukkit.Material#POLISHED_DEEPSLATE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_LAVA_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_LAVA_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_GRASS_FALL",
    "id": "org.bukkit.Sound#BLOCK_GRASS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent"
  },
  {
    "descr": "Bass drum is normally played when a note block is on top of a\\nstone-like block.",
    "static": true,
    "field": "BASS_DRUM",
    "id": "org.bukkit.Instrument#BASS_DRUM",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_CHERRY_LOG",
    "id": "org.bukkit.Material#STRIPPED_CHERRY_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "RED_TULIP",
    "id": "org.bukkit.Material#RED_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.PigZapEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "INSTANT_DAMAGE",
    "id": "org.bukkit.potion.PotionType#INSTANT_DAMAGE",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "BLOCK_ANCIENT_DEBRIS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_ANCIENT_DEBRIS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_MYCEL",
    "id": "org.bukkit.Material#LEGACY_MYCEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_BONE_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_BONE_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the entity's health from 0 to #getMaxHealth(), where 0 is dead.",
    "param-names": ["Damageable"],
    "param-types": ["org.bukkit.entity.Damageable"],
    "method": "getHealth",
    "id": "org.bukkit.entity.Damageable#getHealth()",
    "class": "org.bukkit.entity.Damageable",
    "return": "double"
  },
  {
    "descr": "Gets the status of this pack.",
    "method": "getStatus",
    "id": "org.bukkit.event.player.PlayerResourcePackStatusEvent#getStatus()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerResourcePackStatusEvent",
    "return": "org.bukkit.event.player.PlayerResourcePackStatusEvent.Status"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "PEARLESCENT_FROGLIGHT",
    "id": "org.bukkit.Material#PEARLESCENT_FROGLIGHT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sound of ghast firing.",
    "static": true,
    "field": "GHAST_SHOOT",
    "id": "org.bukkit.Effect#GHAST_SHOOT",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "PHANTOM_MEMBRANE",
    "id": "org.bukkit.Material#PHANTOM_MEMBRANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_STEP",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sound of a door closing.",
    "static": true,
    "field": "IRON_DOOR_CLOSE",
    "id": "org.bukkit.Effect#IRON_DOOR_CLOSE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double,double)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "STONECUTTER",
    "id": "org.bukkit.Material#STONECUTTER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_HURT_BABY",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_HURT_BABY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_HAPPY",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_HAPPY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increments automatically when a player kills another living entity.",
    "static": true,
    "field": "TOTAL_KILL_COUNT",
    "id": "org.bukkit.scoreboard.Criteria#TOTAL_KILL_COUNT",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_EAT",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the location that this entity moved to",
    "param-names": ["To"],
    "param-types": ["org.bukkit.Location"],
    "method": "setTo",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#setTo(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent"
  },
  {
    "descr": "Creates a RayTraceResult.",
    "param-names": ["Hit Position"],
    "param-types": ["org.bukkit.util.Vector"],
    "id": "org.bukkit.util.RayTraceResult#RayTraceResult(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Set a block data at the specified coordinates.",
    "param-names": [
      "BlockChangeDelegate",
      "X",
      "Y",
      "Z",
      "Block Data"
    ],
    "param-types": [
      "org.bukkit.BlockChangeDelegate",
      "int",
      "int",
      "int",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setBlockData",
    "id": "org.bukkit.BlockChangeDelegate#setBlockData(int,int,int,org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.BlockChangeDelegate",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SPORE_BLOSSOM_FALL",
    "id": "org.bukkit.Sound#BLOCK_SPORE_BLOSSOM_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the reason for why the creature is being spawned.",
    "method": "getSpawnReason",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent#getSpawnReason()",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.AsyncPlayerPreLoginEvent.Result"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_BITE",
    "id": "org.bukkit.Sound#ENTITY_FOX_BITE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A sticky piston which will also retract connected blocks.",
    "static": true,
    "field": "STICKY",
    "id": "org.bukkit.block.data.type.TechnicalPiston.Type#STICKY",
    "class": "org.bukkit.block.data.type.TechnicalPiston.Type",
    "return": "org.bukkit.block.data.type.TechnicalPiston.Type"
  },
  {
    "param-names": [
      "AbstractSkeleton",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractSkeleton",
      "org.bukkit.entity.Skeleton.SkeletonType"
    ],
    "method": "setSkeletonType",
    "id": "org.bukkit.entity.AbstractSkeleton#setSkeletonType(org.bukkit.entity.Skeleton.SkeletonType)",
    "class": "org.bukkit.entity.AbstractSkeleton"
  },
  {
    "descr": "Checks to see if the specified player is a member of this team.",
    "param-names": [
      "Team",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "hasPlayer",
    "id": "org.bukkit.scoreboard.Team#hasPlayer(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Team",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_HOGLIN_HURT",
    "id": "org.bukkit.Sound#ENTITY_HOGLIN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_RELIC",
    "id": "org.bukkit.Sound#MUSIC_DISC_RELIC",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current ItemStack on the cursor.",
    "method": "getCursor",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getCursor()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.structure.Mirror#valueOf(java.lang.String)",
    "class": "org.bukkit.block.structure.Mirror",
    "return": "org.bukkit.block.structure.Mirror"
  },
  {
    "descr": "Get the message to broadcast.",
    "method": "getMessage",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#getMessage()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Thrown when a player drops an item from their inventory",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent"
  },
  {
    "descr": "Try to get a possible location where the sniffer can dig.",
    "param-names": ["Sniffer"],
    "param-types": ["org.bukkit.entity.Sniffer"],
    "method": "findPossibleDigLocation",
    "id": "org.bukkit.entity.Sniffer#findPossibleDigLocation()",
    "class": "org.bukkit.entity.Sniffer",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Attempts to match the registered object with the given key.\\n\\nThis will attempt to find a reasonable match based on the provided input\\nand may do so through unspecified means.",
    "param-names": [
      "Registry",
      "Input"
    ],
    "param-types": [
      "org.bukkit.Registry",
      "java.lang.String"
    ],
    "method": "match",
    "id": "org.bukkit.Registry#match(java.lang.String)",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Keyed"
  },
  {
    "descr": "Sets this Panda's hidden gene.",
    "param-names": [
      "Panda",
      "Gene"
    ],
    "param-types": [
      "org.bukkit.entity.Panda",
      "org.bukkit.entity.Panda.Gene"
    ],
    "method": "setHiddenGene",
    "id": "org.bukkit.entity.Panda#setHiddenGene(org.bukkit.entity.Panda.Gene)",
    "class": "org.bukkit.entity.Panda"
  },
  {
    "static": true,
    "field": "MINECART_ONE_CM",
    "id": "org.bukkit.Statistic#MINECART_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "ORANGE_BED",
    "id": "org.bukkit.Material#ORANGE_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether this potion is a splash potion. Splash potions can be\\nthrown for a radius effect.",
    "param-names": [
      "Potion",
      "Is Splash"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "boolean"
    ],
    "method": "setSplash",
    "id": "org.bukkit.potion.Potion#setSplash(boolean)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_ELYTRA",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_ELYTRA",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when an entity is damaged by a block",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "A visual smoke effect. Needs direction as additional info.",
    "static": true,
    "field": "SMOKE",
    "id": "org.bukkit.Effect#SMOKE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "LEGACY_DOUBLE_STEP",
    "id": "org.bukkit.Material#LEGACY_DOUBLE_STEP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "RED_NETHER_BRICK_STAIRS",
    "id": "org.bukkit.Material#RED_NETHER_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks if this state would be properly supported if it were placed at\\nthe block at the given Location.\\n\\nThis may be useful, for instance, to check whether or not a wall torch is\\ncapable of surviving on its neighbouring block states.",
    "param-names": [
      "BlockData",
      "Location"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.Location"
    ],
    "method": "isSupported",
    "id": "org.bukkit.block.data.BlockData#isSupported(org.bukkit.Location)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "descr": "Sets the Johnny state of a vindicator.",
    "param-names": [
      "Vindicator",
      "Johnny"
    ],
    "param-types": [
      "org.bukkit.entity.Vindicator",
      "boolean"
    ],
    "method": "setJohnny",
    "id": "org.bukkit.entity.Vindicator#setJohnny(boolean)",
    "class": "org.bukkit.entity.Vindicator"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Adds the location by another.",
    "param-names": [
      "Location",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.Location"
    ],
    "method": "add",
    "id": "org.bukkit.Location#add(org.bukkit.Location)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Set the Inventory that the Hopper will use for its\\nsource/attached Container.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "setInventory",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#setInventory(org.bukkit.inventory.Inventory)",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent"
  },
  {
    "descr": "Unloads and optionally saves the Chunk",
    "param-names": [
      "Chunk",
      "Save"
    ],
    "param-types": [
      "org.bukkit.Chunk",
      "boolean"
    ],
    "method": "unload",
    "id": "org.bukkit.Chunk#unload(boolean)",
    "class": "org.bukkit.Chunk",
    "return": "boolean"
  },
  {
    "descr": "Get the RenderType used by default for this criteria.",
    "param-names": ["Criteria"],
    "param-types": ["org.bukkit.scoreboard.Criteria"],
    "method": "getDefaultRenderType",
    "id": "org.bukkit.scoreboard.Criteria#getDefaultRenderType()",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.RenderType"
  },
  {
    "static": true,
    "field": "IRON_INGOT",
    "id": "org.bukkit.Material#IRON_INGOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.MushroomCow.Variant#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.MushroomCow.Variant",
    "return": "org.bukkit.entity.MushroomCow.Variant"
  },
  {
    "descr": "Represents acacia trees.",
    "static": true,
    "field": "ACACIA",
    "id": "org.bukkit.TreeSpecies#ACACIA",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.scoreboard.DisplaySlot#valueOf(java.lang.String)",
    "class": "org.bukkit.scoreboard.DisplaySlot",
    "return": "org.bukkit.scoreboard.DisplaySlot"
  },
  {
    "descr": "Fourth growth stage",
    "static": true,
    "field": "MEDIUM",
    "id": "org.bukkit.CropState#MEDIUM",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "static": true,
    "field": "BLOCK_BASALT_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BASALT_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Called when a sheep regrows its wool",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent"
  },
  {
    "descr": "Sets the default GameMode for new players.",
    "param-names": ["Mode"],
    "static": true,
    "param-types": ["org.bukkit.GameMode"],
    "method": "setDefaultGameMode",
    "id": "org.bukkit.Bukkit#setDefaultGameMode(org.bukkit.GameMode)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Gets if this Item lives forever",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.entity.Item"],
    "method": "isUnlimitedLifetime",
    "id": "org.bukkit.entity.Item#isUnlimitedLifetime()",
    "class": "org.bukkit.entity.Item",
    "return": "boolean"
  },
  {
    "descr": "Equipment items meant for general utility including pickaxes, axes, hoes,\\nflint and steel, and useful enchantment books for said tools.",
    "static": true,
    "field": "TOOLS",
    "id": "org.bukkit.inventory.CreativeCategory#TOOLS",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "static": true,
    "field": "WAXED_EXPOSED_COPPER",
    "id": "org.bukkit.Material#WAXED_EXPOSED_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHEEP_SPAWN_EGG",
    "id": "org.bukkit.Material#SHEEP_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns whether this boss bar as the passed flag set",
    "param-names": [
      "BossBar",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.boss.BarFlag"
    ],
    "method": "hasFlag",
    "id": "org.bukkit.boss.BossBar#hasFlag(org.bukkit.boss.BarFlag)",
    "class": "org.bukkit.boss.BossBar",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_FIRE",
    "id": "org.bukkit.Material#LEGACY_FIRE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the location at which the entity is spawning.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets a set of recipients that this chat message will be displayed to.\\n\\nThe set returned is not guaranteed to be mutable and may auto-populate\\non access. Any listener accessing the returned set should be aware that\\nit may reduce performance for a lazy set implementation.\\n\\nListeners should be aware that modifying the list may throw UnsupportedOperationException if the event caller provides an\\nunmodifiable set.",
    "method": "getRecipients",
    "id": "org.bukkit.event.server.BroadcastMessageEvent#getRecipients()",
    "event": true,
    "class": "org.bukkit.event.server.BroadcastMessageEvent",
    "return": "java.util.Set"
  },
  {
    "descr": "Sets the charged status of the wither skull.",
    "param-names": [
      "WitherSkull",
      "Charged"
    ],
    "param-types": [
      "org.bukkit.entity.WitherSkull",
      "boolean"
    ],
    "method": "setCharged",
    "id": "org.bukkit.entity.WitherSkull#setCharged(boolean)",
    "class": "org.bukkit.entity.WitherSkull"
  },
  {
    "descr": "Gets whether the horse is currently grazing hay.",
    "param-names": ["AbstractHorse"],
    "param-types": ["org.bukkit.entity.AbstractHorse"],
    "method": "isEatingHaystack",
    "id": "org.bukkit.entity.AbstractHorse#isEatingHaystack()",
    "class": "org.bukkit.entity.AbstractHorse",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "COPPER_INGOT",
    "id": "org.bukkit.Material#COPPER_INGOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SPORE_BLOSSOM_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SPORE_BLOSSOM_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the squared distance between this vector and another.",
    "param-names": [
      "Vector",
      "O"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "distanceSquared",
    "id": "org.bukkit.util.Vector#distanceSquared(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "static": true,
    "field": "LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the next position.",
    "method": "getTo",
    "id": "org.bukkit.event.vehicle.VehicleMoveEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleMoveEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Set the sprite for a given character.",
    "param-names": [
      "MapFont",
      "Ch",
      "Sprite"
    ],
    "param-types": [
      "org.bukkit.map.MapFont",
      "char",
      "org.bukkit.map.MapFont.CharacterSprite"
    ],
    "method": "setChar",
    "id": "org.bukkit.map.MapFont#setChar(char,org.bukkit.map.MapFont.CharacterSprite)",
    "class": "org.bukkit.map.MapFont"
  },
  {
    "descr": "Open a Sign for editing by the Player.\\nThe Sign must be placed in the same world as the player.",
    "param-names": [
      "Player",
      "Sign",
      "Side"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.block.Sign",
      "org.bukkit.block.sign.Side"
    ],
    "method": "openSign",
    "id": "org.bukkit.entity.Player#openSign(org.bukkit.block.Sign,org.bukkit.block.sign.Side)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerShowEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerShowEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_SKELETON_DEATH",
    "id": "org.bukkit.Sound#ENTITY_WITHER_SKELETON_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the given MapColorCache.",
    "param-names": ["Map Color Cache"],
    "static": true,
    "param-types": ["org.bukkit.map.MapPalette.MapColorCache"],
    "method": "setMapColorCache",
    "id": "org.bukkit.map.MapPalette#setMapColorCache(org.bukkit.map.MapPalette.MapColorCache)",
    "class": "org.bukkit.map.MapPalette"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "GRANITE_STAIRS",
    "id": "org.bukkit.Material#GRANITE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "No leaves.",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.block.data.type.Bamboo.Leaves#NONE",
    "class": "org.bukkit.block.data.type.Bamboo.Leaves",
    "return": "org.bukkit.block.data.type.Bamboo.Leaves"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.PigZapEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "boolean"
  },
  {
    "descr": "Temporarily adds a new empty PermissionAttachment to this\\nobject",
    "param-names": [
      "Permissible",
      "Plugin",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.plugin.Plugin",
      "int"
    ],
    "method": "addAttachment",
    "id": "org.bukkit.permissions.Permissible#addAttachment(org.bukkit.plugin.Plugin,int)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "org.bukkit.permissions.PermissionAttachment"
  },
  {
    "static": true,
    "field": "DIAMOND_AXE",
    "id": "org.bukkit.Material#DIAMOND_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COD",
    "id": "org.bukkit.entity.EntityType#COD",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "hasGravity",
    "id": "org.bukkit.Material#hasGravity()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "The player is not allowed to log in, for reasons undefined",
    "static": true,
    "field": "KICK_OTHER",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#KICK_OTHER",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_HARP",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_HARP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "OAK_STAIRS",
    "id": "org.bukkit.Material#OAK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the flying velocity modifier. Used for minecarts that are in\\nmid-air. A flying minecart's velocity is multiplied by this factor each\\ntick.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getFlyingVelocityMod",
    "id": "org.bukkit.entity.Minecart#getFlyingVelocityMod()",
    "class": "org.bukkit.entity.Minecart",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "A flying chicken egg.",
    "static": true,
    "field": "EGG",
    "id": "org.bukkit.entity.EntityType#EGG",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ORANGE_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#ORANGE_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.ChunkPopulateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_GRILLED_PORK",
    "id": "org.bukkit.Material#LEGACY_GRILLED_PORK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "Location",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z",
      "Extra",
      "Data",
      "Force"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "org.bukkit.Location",
      "int",
      "double",
      "double",
      "double",
      "double",
      "java.lang.Object",
      "boolean"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#<T>spawnParticle(org.bukkit.Particle,org.bukkit.Location,int,double,double,double,double,T,boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Returns the horse's current trap time in ticks.\\nTrap time is incremented every tick when #isTrapped() is true.\\nThe horse automatically despawns when it reaches 18000 ticks.",
    "param-names": ["SkeletonHorse"],
    "param-types": ["org.bukkit.entity.SkeletonHorse"],
    "method": "getTrapTime",
    "id": "org.bukkit.entity.SkeletonHorse#getTrapTime()",
    "class": "org.bukkit.entity.SkeletonHorse",
    "return": "int"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "WITHER_SKELETON_SKULL",
    "id": "org.bukkit.Material#WITHER_SKELETON_SKULL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the material that a character in the recipe shape refers to.\\n\\nNote that before an ingredient can be set, the recipe's shape must be defined\\nwith #shape(String...).",
    "param-names": [
      "ShapedRecipe",
      "Key",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "char",
      "org.bukkit.Material"
    ],
    "method": "setIngredient",
    "id": "org.bukkit.inventory.ShapedRecipe#setIngredient(char,org.bukkit.Material)",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "descr": "When a piglin is converted to a zombified piglin.",
    "static": true,
    "field": "PIGLIN_ZOMBIFIED",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#PIGLIN_ZOMBIFIED",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LIGHT_BLUE_WALL_BANNER",
    "id": "org.bukkit.Material#LIGHT_BLUE_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the integrity of the structure. Integrity must be between 0.0 and 1.0\\nLower integrity values will result in more blocks being removed when\\nloading a structure. Integrity and #getSeed() are used together\\nto determine which blocks are randomly removed to mimic \"decay.\"",
    "param-names": [
      "Structure",
      "Integrity"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "float"
    ],
    "method": "setIntegrity",
    "id": "org.bukkit.block.Structure#setIntegrity(float)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Gets the default ticks per water underground creature spawns value.\\n\\nExample Usage:\\n\\nA value of 1 will mean the server will attempt to spawn water underground creature\\nevery tick.\\nA value of 400 will mean the server will attempt to spawn water underground creature\\nevery 400th tick.\\nA value below 0 will be reset back to Minecraft's default.\\n\\n\\nNote: If set to 0, water underground creature spawning will be disabled.\\n\\nMinecraft default: 1.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getTicksPerWaterUndergroundCreatureSpawns",
    "id": "org.bukkit.World#getTicksPerWaterUndergroundCreatureSpawns()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "static": true,
    "field": "SCULK_SENSOR_TENDRILS_CLICKING",
    "id": "org.bukkit.GameEvent#SCULK_SENSOR_TENDRILS_CLICKING",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerUnregisterChannelEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_CALCITE_STEP",
    "id": "org.bukkit.Sound#BLOCK_CALCITE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BIRCH",
    "id": "org.bukkit.entity.Boat.Type#BIRCH",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#valueOf(java.lang.String)",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerCommandSendEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandSendEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BOMB",
    "id": "org.bukkit.Art#BOMB",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Get the ItemStack to be repaired.\\nThis is not necessarily the item the player is holding.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "PARROT",
    "id": "org.bukkit.loot.LootTables#PARROT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Sets the world that this location resides in",
    "param-names": [
      "Location",
      "World"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.World"
    ],
    "method": "setWorld",
    "id": "org.bukkit.Location#setWorld(org.bukkit.World)",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "Mark the specified criteria as uncompleted.",
    "param-names": [
      "AdvancementProgress",
      "Criteria"
    ],
    "param-types": [
      "org.bukkit.advancement.AdvancementProgress",
      "java.lang.String"
    ],
    "method": "revokeCriteria",
    "id": "org.bukkit.advancement.AdvancementProgress#revokeCriteria(java.lang.String)",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SOUTH_WEST",
    "id": "org.bukkit.block.BlockFace#SOUTH_WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "The sound played / particles shown when wax is applied to a copper block.",
    "static": true,
    "field": "COPPER_WAX_ON",
    "id": "org.bukkit.Effect#COPPER_WAX_ON",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.Biome#valueOf(java.lang.String)",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_STRAD",
    "id": "org.bukkit.Sound#MUSIC_DISC_STRAD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SLIME_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SLIME_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When an entity is spawned as part of a raid",
    "static": true,
    "field": "RAID",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#RAID",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "BLOCK_DISPENSER_DISPENSE",
    "id": "org.bukkit.Sound#BLOCK_DISPENSER_DISPENSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set whether or not the consumable item should be consumed in this event.\\nIf set to false, it is recommended that a call to\\nPlayer#updateInventory() is made as the client may disagree with\\nthe server's decision to not consume a consumable item.\\n\\nThis value is ignored for entities where items are not required\\n(skeletons, pillagers, etc.) or with crossbows (as no item is being\\nconsumed).",
    "param-names": ["Consume Item"],
    "param-types": ["boolean"],
    "method": "setConsumeItem",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#setConsumeItem(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent"
  },
  {
    "descr": "Gets the world containing this chunk",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getWorld",
    "id": "org.bukkit.Chunk#getWorld()",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.TimeSkipEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "boolean"
  },
  {
    "descr": "Unbans the specified address from the server.",
    "param-names": ["Address"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "unbanIP",
    "id": "org.bukkit.Bukkit#unbanIP(java.lang.String)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "static": true,
    "field": "LEGACY_SHEARS",
    "id": "org.bukkit.Material#LEGACY_SHEARS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WITCH_HURT",
    "id": "org.bukkit.Sound#ENTITY_WITCH_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the underlying event.",
    "method": "getEvent",
    "id": "org.bukkit.event.block.BlockReceiveGameEvent#getEvent()",
    "event": true,
    "class": "org.bukkit.event.block.BlockReceiveGameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Removes an ingredient from the list. If the ingredient occurs multiple\\ntimes, only one instance of it is removed. If the data value is -1,\\nonly ingredients with a -1 data value will be removed.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient",
      "Rawdata"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.Material",
      "int"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Attempts to add the effect represented by this object to the given\\nLivingEntity.",
    "param-names": [
      "PotionEffect",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.potion.PotionEffect",
      "org.bukkit.entity.LivingEntity"
    ],
    "method": "apply",
    "id": "org.bukkit.potion.PotionEffect#apply(org.bukkit.entity.LivingEntity)",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "boolean"
  },
  {
    "descr": "Get the vehicle.",
    "method": "getVehicle",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#getVehicle()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "org.bukkit.entity.Vehicle"
  },
  {
    "static": true,
    "field": "BLOCK_LODESTONE_HIT",
    "id": "org.bukkit.Sound#BLOCK_LODESTONE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_VINE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_VINE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Whether mobs can pick up items or change blocks.",
    "static": true,
    "field": "MOB_GRIEFING",
    "id": "org.bukkit.GameRule#MOB_GRIEFING",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Gets an immutable list containing all custom potion effects applied to\\nthis suspicious stew.\\n\\nPlugins should check that hasCustomEffects() returns true before calling\\nthis method.",
    "param-names": ["SuspiciousStewMeta"],
    "param-types": ["org.bukkit.inventory.meta.SuspiciousStewMeta"],
    "method": "getCustomEffects",
    "id": "org.bukkit.inventory.meta.SuspiciousStewMeta#getCustomEffects()",
    "class": "org.bukkit.inventory.meta.SuspiciousStewMeta",
    "return": "java.util.List"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent"
  },
  {
    "descr": "Gets a WorldType by its name",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByName",
    "id": "org.bukkit.WorldType#getByName(java.lang.String)",
    "class": "org.bukkit.WorldType",
    "return": "org.bukkit.WorldType"
  },
  {
    "static": true,
    "field": "LEGACY_SOIL",
    "id": "org.bukkit.Material#LEGACY_SOIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Causes the player to wakeup if they are currently sleeping.",
    "param-names": [
      "HumanEntity",
      "Set Spawn Location"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "boolean"
    ],
    "method": "wakeup",
    "id": "org.bukkit.entity.HumanEntity#wakeup(boolean)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "FLINT",
    "id": "org.bukkit.Material#FLINT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the age of this mob.",
    "param-names": [
      "Tadpole",
      "Age"
    ],
    "param-types": [
      "org.bukkit.entity.Tadpole",
      "int"
    ],
    "method": "setAge",
    "id": "org.bukkit.entity.Tadpole#setAge(int)",
    "class": "org.bukkit.entity.Tadpole"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "REDSTONE_TORCH",
    "id": "org.bukkit.Material#REDSTONE_TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get all ItemStacks from the armor slots",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getArmorContents",
    "id": "org.bukkit.inventory.PlayerInventory#getArmorContents()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "descr": "Attempts to match the Material with the given name.\\n\\nThis is a match lookup; names will be stripped of the \"minecraft:\"\\nnamespace, converted to uppercase, then stripped of special characters in\\nan attempt to format it like the enum.",
    "param-names": [
      "Name",
      "Legacy Name"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "boolean"
    ],
    "method": "matchMaterial",
    "id": "org.bukkit.Material#matchMaterial(java.lang.String,boolean)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the egg involved in this event.",
    "method": "getEgg",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getEgg()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "org.bukkit.entity.Egg"
  },
  {
    "descr": "Gets the current state of the specified rule\\n\\nWill return null if rule passed is null",
    "param-names": [
      "World",
      "Rule"
    ],
    "param-types": [
      "org.bukkit.World",
      "java.lang.String"
    ],
    "method": "getGameRuleValue",
    "id": "org.bukkit.World#getGameRuleValue(java.lang.String)",
    "class": "org.bukkit.World",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets if the new potion effect will override the old potion effect (Only\\napplicable for the CHANGED action).",
    "param-names": ["Override"],
    "param-types": ["boolean"],
    "method": "setOverride",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#setOverride(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_MANGROVE_LOG",
    "id": "org.bukkit.Material#STRIPPED_MANGROVE_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the living entity that exited the vehicle.",
    "method": "getExited",
    "id": "org.bukkit.event.vehicle.VehicleExitEvent#getExited()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleExitEvent",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Collide with all fluids.",
    "static": true,
    "field": "ALWAYS",
    "id": "org.bukkit.FluidCollisionMode#ALWAYS",
    "class": "org.bukkit.FluidCollisionMode",
    "return": "org.bukkit.FluidCollisionMode"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LIME_TERRACOTTA",
    "id": "org.bukkit.Material#LIME_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the canBuild state of this event. Set to true if you want the\\nplayer to be able to build.",
    "param-names": ["Can Build"],
    "param-types": ["boolean"],
    "method": "setBuild",
    "id": "org.bukkit.event.block.BlockPlaceEvent#setBuild(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent"
  },
  {
    "descr": "Gets a list of parts that belong to this complex entity",
    "param-names": ["ComplexLivingEntity"],
    "param-types": ["org.bukkit.entity.ComplexLivingEntity"],
    "method": "getParts",
    "id": "org.bukkit.entity.ComplexLivingEntity#getParts()",
    "class": "org.bukkit.entity.ComplexLivingEntity",
    "return": "java.util.Set"
  },
  {
    "static": true,
    "field": "SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE",
    "id": "org.bukkit.Material#SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.InventoryEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_AXE",
    "id": "org.bukkit.Material#LEGACY_GOLD_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item in the llama's decor slot.",
    "param-names": [
      "LlamaInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.LlamaInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setDecor",
    "id": "org.bukkit.inventory.LlamaInventory#setDecor(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.LlamaInventory"
  },
  {
    "param-names": ["Phantom"],
    "param-types": ["org.bukkit.entity.Phantom"],
    "method": "getSize",
    "id": "org.bukkit.entity.Phantom#getSize()",
    "class": "org.bukkit.entity.Phantom",
    "return": "int"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.StructureGrowEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "PLAYER_HEAD",
    "id": "org.bukkit.Material#PLAYER_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_HONEY_BOTTLE_DRINK",
    "id": "org.bukkit.Sound#ITEM_HONEY_BOTTLE_DRINK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Increases rate of fish biting your hook",
    "static": true,
    "field": "LURE",
    "id": "org.bukkit.enchantments.Enchantment#LURE",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Sets the amount of experience received when fishing.\\n\\nNote: This value has no default effect unless the event state is State#CAUGHT_FISH.",
    "param-names": ["Amount"],
    "param-types": ["int"],
    "method": "setExpToDrop",
    "id": "org.bukkit.event.player.PlayerFishEvent#setExpToDrop(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent"
  },
  {
    "descr": "Miscellaneous items and blocks that do not fit into other categories\\nincluding gems, dyes, spawn eggs, discs, banner patterns, etc.",
    "static": true,
    "field": "MISC",
    "id": "org.bukkit.inventory.CreativeCategory#MISC",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "DEEPSLATE_REDSTONE_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_REDSTONE_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TRIANGLES_BOTTOM",
    "id": "org.bukkit.block.banner.PatternType#TRIANGLES_BOTTOM",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Clears any objective in the specified slot.",
    "param-names": [
      "Scoreboard",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "org.bukkit.scoreboard.DisplaySlot"
    ],
    "method": "clearSlot",
    "id": "org.bukkit.scoreboard.Scoreboard#clearSlot(org.bukkit.scoreboard.DisplaySlot)",
    "class": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_HIT",
    "id": "org.bukkit.Sound#BLOCK_SCULK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'candles' property.",
    "param-names": ["Candle"],
    "param-types": ["org.bukkit.block.data.type.Candle"],
    "method": "getCandles",
    "id": "org.bukkit.block.data.type.Candle#getCandles()",
    "class": "org.bukkit.block.data.type.Candle",
    "return": "int"
  },
  {
    "descr": "Gets the first date and time that this player was witnessed on this\\nserver.\\n\\nIf the player has never played before, this will return 0. Otherwise,\\nit will be the amount of milliseconds since midnight, January 1, 1970\\nUTC.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "getFirstPlayed",
    "id": "org.bukkit.OfflinePlayer#getFirstPlayed()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "long"
  },
  {
    "descr": "Captures the current state of this block. You may then cast that state\\ninto any accepted type, such as Furnace or Sign.\\n\\nThe returned object will never be updated, and you are not guaranteed\\nthat (for example) a sign is still a sign after you capture its state.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getState",
    "id": "org.bukkit.block.Block#getState()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "AIR",
    "id": "org.bukkit.Material#AIR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_BIRCH_LOG",
    "id": "org.bukkit.Material#STRIPPED_BIRCH_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_EAT",
    "id": "org.bukkit.Sound#ENTITY_CAT_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Set the group of this recipe. Recipes with the same group may be grouped\\ntogether when displayed in the client.",
    "param-names": [
      "ShapedRecipe",
      "Group"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "java.lang.String"
    ],
    "method": "setGroup",
    "id": "org.bukkit.inventory.ShapedRecipe#setGroup(java.lang.String)",
    "class": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "descr": "The final of the particles to be displayed.",
    "param-names": ["Particle.DustTransition"],
    "param-types": ["org.bukkit.Particle.DustTransition"],
    "method": "getToColor",
    "id": "org.bukkit.Particle.DustTransition#getToColor()",
    "class": "org.bukkit.Particle.DustTransition",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Gets the Item picked up by the player.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "static": true,
    "field": "AMBIENT_BASALT_DELTAS_LOOP",
    "id": "org.bukkit.Sound#AMBIENT_BASALT_DELTAS_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "boolean"
  },
  {
    "descr": "Checks for existence of a localized name.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "hasLocalizedName",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasLocalizedName()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "When TNT is primed by a redstone signal.",
    "static": true,
    "field": "REDSTONE",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#REDSTONE",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "descr": "BlockData: LightningRod",
    "static": true,
    "field": "LIGHTNING_ROD",
    "id": "org.bukkit.Material#LIGHTNING_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#values()",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier[]"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_ORE",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.SpongeAbsorbEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.SpongeAbsorbEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "CLERIC_GIFT",
    "id": "org.bukkit.loot.LootTables#CLERIC_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_JACK_O_LANTERN",
    "id": "org.bukkit.Material#LEGACY_JACK_O_LANTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.FaceAttachable.AttachedFace#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.FaceAttachable.AttachedFace",
    "return": "org.bukkit.block.data.FaceAttachable.AttachedFace"
  },
  {
    "descr": "Gets the GameMode represented by the specified value",
    "param-names": ["Value"],
    "static": true,
    "param-types": ["int"],
    "method": "getByValue",
    "id": "org.bukkit.GameMode#getByValue(int)",
    "class": "org.bukkit.GameMode",
    "return": "org.bukkit.GameMode"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "SPRUCE_PRESSURE_PLATE",
    "id": "org.bukkit.Material#SPRUCE_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "isCollisionCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#isCollisionCancelled()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent",
    "return": "boolean"
  },
  {
    "descr": "Set whether or not this mob is celebrating a raid victory.",
    "param-names": [
      "Raider",
      "Celebrating"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "boolean"
    ],
    "method": "setCelebrating",
    "id": "org.bukkit.entity.Raider#setCelebrating(boolean)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "static": true,
    "field": "PIGLIN",
    "id": "org.bukkit.block.banner.PatternType#PIGLIN",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Creates a new BlockData instance for this Material, with all\\nproperties initialized to unspecified defaults, except for those provided\\nin data.",
    "param-names": [
      "Material",
      "Data"
    ],
    "param-types": [
      "org.bukkit.Material",
      "java.lang.String"
    ],
    "method": "createBlockData",
    "id": "org.bukkit.Material#createBlockData(java.lang.String)",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockBurnEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the players current saturation level",
    "param-names": [
      "HumanEntity",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "float"
    ],
    "method": "setSaturation",
    "id": "org.bukkit.entity.HumanEntity#setSaturation(float)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "param-names": ["BlockFace"],
    "param-types": ["org.bukkit.block.BlockFace"],
    "method": "getOppositeFace",
    "id": "org.bukkit.block.BlockFace#getOppositeFace()",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "The slot number that was clicked, ready for passing to\\nInventory#getItem(int). Note that there may be two slots with\\nthe same slot number, since a view links two different inventories.",
    "method": "getSlot",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_8",
    "id": "org.bukkit.Material#LEGACY_RECORD_8",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.InventoryBlockStartEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.InventoryBlockStartEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "WARPED_HANGING_SIGN",
    "id": "org.bukkit.Material#WARPED_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ASH",
    "id": "org.bukkit.Particle#ASH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Sets the new result of the login, as an enum",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.event.player.PlayerPreLoginEvent.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#setResult(org.bukkit.event.player.PlayerPreLoginEvent.Result)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "descr": "Get the best suitable slot for this Material.\\nFor most items this will be EquipmentSlot#HAND.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getEquipmentSlot",
    "id": "org.bukkit.Material#getEquipmentSlot()",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "Stop the specified sound from playing.",
    "param-names": [
      "Player",
      "Sound"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Sound"
    ],
    "method": "stopSound",
    "id": "org.bukkit.entity.Player#stopSound(org.bukkit.Sound)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Entities related to Water Underground, eg: Glow Squid.",
    "static": true,
    "field": "WATER_UNDERGROUND_CREATURE",
    "id": "org.bukkit.entity.SpawnCategory#WATER_UNDERGROUND_CREATURE",
    "class": "org.bukkit.entity.SpawnCategory",
    "return": "org.bukkit.entity.SpawnCategory"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.weather.WeatherChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.weather.WeatherChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the Y component.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "getY",
    "id": "org.bukkit.util.Vector#getY()",
    "class": "org.bukkit.util.Vector",
    "return": "double"
  },
  {
    "descr": "Called when a Raid is stopped.",
    "event": true,
    "class": "org.bukkit.event.raid.RaidStopEvent"
  },
  {
    "descr": "Adds multiples of the specified ingredient.",
    "param-names": [
      "ShapelessRecipe",
      "Count",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "int",
      "org.bukkit.Material"
    ],
    "method": "addIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#addIngredient(int,org.bukkit.Material)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Checks the type of connection on the specified face.",
    "param-names": [
      "RedstoneWire",
      "Face"
    ],
    "param-types": [
      "org.bukkit.block.data.type.RedstoneWire",
      "org.bukkit.block.BlockFace"
    ],
    "method": "getFace",
    "id": "org.bukkit.block.data.type.RedstoneWire#getFace(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.data.type.RedstoneWire",
    "return": "org.bukkit.block.data.type.RedstoneWire.Connection"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "PURPLE_BED",
    "id": "org.bukkit.Material#PURPLE_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Chest"],
    "param-types": ["org.bukkit.inventory.DoubleChestInventory"],
    "id": "org.bukkit.block.DoubleChest#DoubleChest(org.bukkit.inventory.DoubleChestInventory)",
    "class": "org.bukkit.block.DoubleChest"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_ATTACK_STRONG",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_ATTACK_STRONG",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_HURT_ON_FIRE",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_HURT_ON_FIRE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check if this event involved an item",
    "method": "hasItem",
    "id": "org.bukkit.event.player.PlayerInteractEvent#hasItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "POTTED_CACTUS",
    "id": "org.bukkit.Material#POTTED_CACTUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_MUDDY_MANGROVE_ROOTS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_MUDDY_MANGROVE_ROOTS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The color of the particles to be displayed.",
    "param-names": ["Particle.DustOptions"],
    "param-types": ["org.bukkit.Particle.DustOptions"],
    "method": "getColor",
    "id": "org.bukkit.Particle.DustOptions#getColor()",
    "class": "org.bukkit.Particle.DustOptions",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Gets whether the Panda is sneezing",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "isSneezing",
    "id": "org.bukkit.entity.Panda#isSneezing()",
    "class": "org.bukkit.entity.Panda",
    "return": "boolean"
  },
  {
    "descr": "Update the list of commands sent to the client.\\n\\nGenerally useful to ensure the client has a complete list of commands\\nafter permission changes are done.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "updateCommands",
    "id": "org.bukkit.entity.Player#updateCommands()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "ENTITY_SILVERFISH_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_SILVERFISH_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the player which owns the skull. This player may appear as the\\ntexture depending on skull type.",
    "param-names": [
      "Skull",
      "Player"
    ],
    "param-types": [
      "org.bukkit.block.Skull",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "setOwningPlayer",
    "id": "org.bukkit.block.Skull#setOwningPlayer(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.block.Skull"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_HURT",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if this axolotl is playing dead.\\nAn axolotl may play dead when it is damaged underwater.",
    "param-names": ["Axolotl"],
    "param-types": ["org.bukkit.entity.Axolotl"],
    "method": "isPlayingDead",
    "id": "org.bukkit.entity.Axolotl#isPlayingDead()",
    "class": "org.bukkit.entity.Axolotl",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE",
    "id": "org.bukkit.Material#LEGACY_REDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get empty chunk snapshot (equivalent to all air blocks), optionally\\nincluding valid biome data. Used for representing an ungenerated chunk,\\nor for fetching only biome data without loading a chunk.",
    "param-names": [
      "World",
      "X",
      "Z",
      "Include Biome",
      "Include Biome Temp"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "boolean",
      "boolean"
    ],
    "method": "getEmptyChunkSnapshot",
    "id": "org.bukkit.World#getEmptyChunkSnapshot(int,int,boolean,boolean)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.ChunkSnapshot"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LANDING_LAVA",
    "id": "org.bukkit.Particle#LANDING_LAVA",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "IRON_HELMET",
    "id": "org.bukkit.Material#IRON_HELMET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the HurtEntities state of this block.",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "canHurtEntities",
    "id": "org.bukkit.entity.FallingBlock#canHurtEntities()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_BURP",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_BURP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "SPRUCE_TRAPDOOR",
    "id": "org.bukkit.Material#SPRUCE_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isRecord",
    "id": "org.bukkit.Material#isRecord()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Gets the message that the player is attempting to send. This message\\nwill be used with #getFormat().",
    "method": "getMessage",
    "id": "org.bukkit.event.player.AsyncPlayerChatEvent#getMessage()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns a collection of PotionEffects that this Potion\\nwould confer upon a LivingEntity.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "getEffects",
    "id": "org.bukkit.potion.Potion#getEffects()",
    "class": "org.bukkit.potion.Potion",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "WATER_BUCKET",
    "id": "org.bukkit.Material#WATER_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the reason for the targeting",
    "method": "getReason",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "static": true,
    "field": "LEGACY_FLOWER_POT_ITEM",
    "id": "org.bukkit.Material#LEGACY_FLOWER_POT_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Removes the player from this boss bar causing it to be removed from their\\nscreen.",
    "param-names": [
      "BossBar",
      "Player"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.entity.Player"
    ],
    "method": "removePlayer",
    "id": "org.bukkit.boss.BossBar#removePlayer(org.bukkit.entity.Player)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "WHITE_BANNER",
    "id": "org.bukkit.Material#WHITE_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Calculates the intersection of this bounding box with the specified line\\nsegment.\\n\\nIntersections at edges and corners yield one of the affected block faces\\nas hit result, but it is not defined which of them.",
    "param-names": [
      "BoundingBox",
      "Start",
      "Direction",
      "Max Distance"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rayTrace",
    "id": "org.bukkit.util.BoundingBox#rayTrace(org.bukkit.util.Vector,org.bukkit.util.Vector,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.RayTraceResult"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_LAUNCH",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_LAUNCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_GRAVEL_BREAK",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_GRAVEL_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: MultipleFacing",
    "static": true,
    "field": "VINE",
    "id": "org.bukkit.Material#VINE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the reason why the player is getting kicked",
    "method": "getReason",
    "id": "org.bukkit.event.player.PlayerKickEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SLIME",
    "id": "org.bukkit.loot.LootTables#SLIME",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "THE_END",
    "id": "org.bukkit.block.Biome#THE_END",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Set the special price for this trade.",
    "param-names": [
      "MerchantRecipe",
      "Special Price"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "int"
    ],
    "method": "setSpecialPrice",
    "id": "org.bukkit.inventory.MerchantRecipe#setSpecialPrice(int)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Gets the suffix appended to the display of entries on this team.",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getSuffix",
    "id": "org.bukkit.scoreboard.Team#getSuffix()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "java.lang.String"
  },
  {
    "descr": "Player crouches one centimeter (does not effect exhaustion, but fires\\nnonetheless)",
    "static": true,
    "field": "CROUCH",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#CROUCH",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "DARK_PRISMARINE_STAIRS",
    "id": "org.bukkit.Material#DARK_PRISMARINE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A painting on a wall.",
    "static": true,
    "field": "PAINTING",
    "id": "org.bukkit.entity.EntityType#PAINTING",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.WeatherType#valueOf(java.lang.String)",
    "class": "org.bukkit.WeatherType",
    "return": "org.bukkit.WeatherType"
  },
  {
    "descr": "Sets if the firework was shot at an angle (i.e. from a crossbow).\\nA firework which was not shot at an angle will fly straight upwards.",
    "param-names": [
      "Firework",
      "Shot At Angle"
    ],
    "param-types": [
      "org.bukkit.entity.Firework",
      "boolean"
    ],
    "method": "setShotAtAngle",
    "id": "org.bukkit.entity.Firework#setShotAtAngle(boolean)",
    "class": "org.bukkit.entity.Firework"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "JUNGLE_TRAPDOOR",
    "id": "org.bukkit.Material#JUNGLE_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the remaining time in ticks of the current conditions.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getWeatherDuration",
    "id": "org.bukkit.World#getWeatherDuration()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "Gets the cost (minimum level) which is displayed as a number on the right\\nhand side of the enchantment offer.",
    "method": "getExpLevelCost",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getExpLevelCost()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "POPPY",
    "id": "org.bukkit.Material#POPPY",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHISELED_STONE_BRICKS",
    "id": "org.bukkit.Material#CHISELED_STONE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Small leaves.",
    "static": true,
    "field": "SMALL",
    "id": "org.bukkit.block.data.type.Bamboo.Leaves#SMALL",
    "class": "org.bukkit.block.data.type.Bamboo.Leaves",
    "return": "org.bukkit.block.data.type.Bamboo.Leaves"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.SheepRegrowWoolEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepRegrowWoolEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the Spell the entity is currently using.",
    "param-names": [
      "Spellcaster",
      "Spell"
    ],
    "param-types": [
      "org.bukkit.entity.Spellcaster",
      "org.bukkit.entity.Spellcaster.Spell"
    ],
    "method": "setSpell",
    "id": "org.bukkit.entity.Spellcaster#setSpell(org.bukkit.entity.Spellcaster.Spell)",
    "class": "org.bukkit.entity.Spellcaster"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Returns an appropriate item meta for the specified stack.\\n\\nThe item meta returned will always be a valid meta for a given\\nItemStack of the specified material. It may be a more or less specific\\nmeta, and could also be the same meta or meta type as the parameter.\\nThe item meta returned will also always be the most appropriate meta.\\n\\nExample, if a SkullMeta is being applied to a book, this method\\nwould return a BookMeta containing all information in the\\nspecified meta that is applicable to an ItemMeta, the highest\\ncommon interface.",
    "param-names": [
      "ItemFactory",
      "Meta",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "asMetaFor",
    "id": "org.bukkit.inventory.ItemFactory#asMetaFor(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "static": true,
    "field": "CUT_RED_SANDSTONE",
    "id": "org.bukkit.Material#CUT_RED_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a piston extends",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent"
  },
  {
    "static": true,
    "field": "ENTITY_SHEEP_SHEAR",
    "id": "org.bukkit.Sound#ENTITY_SHEEP_SHEAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the current state of the sniffer.",
    "param-names": ["Sniffer"],
    "param-types": ["org.bukkit.entity.Sniffer"],
    "method": "getState",
    "id": "org.bukkit.entity.Sniffer#getState()",
    "class": "org.bukkit.entity.Sniffer",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "descr": "When an entity is damaged by the Wither potion effect",
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#WITHER",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "END_ROD",
    "id": "org.bukkit.Material#END_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the bar style of this boss bar",
    "param-names": [
      "BossBar",
      "Style"
    ],
    "param-types": [
      "org.bukkit.boss.BossBar",
      "org.bukkit.boss.BarStyle"
    ],
    "method": "setStyle",
    "id": "org.bukkit.boss.BossBar#setStyle(org.bukkit.boss.BarStyle)",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "First growth stage",
    "static": true,
    "field": "GERMINATED",
    "id": "org.bukkit.CropState#GERMINATED",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "CARROTS",
    "id": "org.bukkit.Material#CARROTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CHERRY_GROVE",
    "id": "org.bukkit.block.Biome#CHERRY_GROVE",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Get the maximum stacksize for the material hold in this ItemStack.\\n(Returns -1 if it has no idea)",
    "param-names": ["ItemStack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "getMaxStackSize",
    "id": "org.bukkit.inventory.ItemStack#getMaxStackSize()",
    "class": "org.bukkit.inventory.ItemStack",
    "return": "int"
  },
  {
    "descr": "Gets the ItemStack for the item currently in the player's hand.",
    "method": "getItemInHand",
    "id": "org.bukkit.event.block.BlockDamageEvent#getItemInHand()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "param-names": [
      "Key",
      "Result",
      "Source",
      "Data",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "int",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material,int,float,int)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "WORRIED",
    "id": "org.bukkit.entity.Panda.Gene#WORRIED",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_HIT",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sends a title and a subtitle message to the player. If either of these\\nvalues are null, they will not be sent and the display will remain\\nunchanged. If they are empty strings, the display will be updated as\\nsuch. If the strings contain a new line, only the first line will be\\nsent. The titles will be displayed with the client's default timings.",
    "param-names": [
      "Player",
      "Title",
      "Subtitle"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "sendTitle",
    "id": "org.bukkit.entity.Player#sendTitle(java.lang.String,java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "A fishing line and bobber.",
    "static": true,
    "field": "FISHING_HOOK",
    "id": "org.bukkit.entity.EntityType#FISHING_HOOK",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerLoginEvent.Result#values()",
    "class": "org.bukkit.event.player.PlayerLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerLoginEvent.Result[]"
  },
  {
    "static": true,
    "field": "SAND",
    "id": "org.bukkit.Material#SAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_ACACIA_FENCE",
    "id": "org.bukkit.Material#LEGACY_ACACIA_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check whether a cooldown is active on the specified material.",
    "param-names": [
      "HumanEntity",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Material"
    ],
    "method": "hasCooldown",
    "id": "org.bukkit.entity.HumanEntity#hasCooldown(org.bukkit.Material)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "Trim materials.",
    "static": true,
    "field": "TRIM_MATERIAL",
    "id": "org.bukkit.Registry#TRIM_MATERIAL",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Sets this vector to the midpoint between this vector and another.",
    "param-names": [
      "Vector",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "midpoint",
    "id": "org.bukkit.util.Vector#midpoint(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "DARK_OAK_SIGN",
    "id": "org.bukkit.Material#DARK_OAK_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_HOSTILE_SMALL_FALL",
    "id": "org.bukkit.Sound#ENTITY_HOSTILE_SMALL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the DragonBattle associated with this EnderDragon.\\n\\nThis will return null for the following reasons:\\n\\nThe EnderDragon is not in the End dimension\\nThe EnderDragon was summoned by command/API\\n",
    "param-names": ["EnderDragon"],
    "param-types": ["org.bukkit.entity.EnderDragon"],
    "method": "getDragonBattle",
    "id": "org.bukkit.entity.EnderDragon#getDragonBattle()",
    "class": "org.bukkit.entity.EnderDragon",
    "return": "org.bukkit.boss.DragonBattle"
  },
  {
    "static": true,
    "field": "FLY_ONE_CM",
    "id": "org.bukkit.Statistic#FLY_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_ACACIA_LOG",
    "id": "org.bukkit.Material#STRIPPED_ACACIA_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Indicates each warning would default to the configured Warning annotation, or always if annotation not found.",
    "static": true,
    "field": "DEFAULT",
    "id": "org.bukkit.Warning.WarningState#DEFAULT",
    "class": "org.bukkit.Warning.WarningState",
    "return": "org.bukkit.Warning.WarningState"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the org.bukkit.event.Event.Result of this event. The Result describes the\\nbehavior that will be applied to the inventory in relation to this\\nevent.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "descr": "Sets the knockback strength for an arrow.",
    "param-names": [
      "AbstractArrow",
      "Knockback Strength"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractArrow",
      "int"
    ],
    "method": "setKnockbackStrength",
    "id": "org.bukkit.entity.AbstractArrow#setKnockbackStrength(int)",
    "class": "org.bukkit.entity.AbstractArrow"
  },
  {
    "descr": "Returns all Raider that spawned in this wave.",
    "method": "getRaiders",
    "id": "org.bukkit.event.raid.RaidSpawnWaveEvent#getRaiders()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidSpawnWaveEvent",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "OXIDIZED_CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#OXIDIZED_CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get an immutable list of the blocks which will be moved by the\\nextending.",
    "method": "getBlocks",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Returns a mutable list of loot generated by this LootTable.",
    "param-names": [
      "LootTable",
      "Random",
      "Context"
    ],
    "param-types": [
      "org.bukkit.loot.LootTable",
      "java.util.Random",
      "org.bukkit.loot.LootContext"
    ],
    "method": "populateLoot",
    "id": "org.bukkit.loot.LootTable#populateLoot(java.util.Random,org.bukkit.loot.LootContext)",
    "class": "org.bukkit.loot.LootTable",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.map.MapCursor.Type#values()",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type[]"
  },
  {
    "static": true,
    "field": "LEGACY_SAPLING",
    "id": "org.bukkit.Material#LEGACY_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the reason for this ban. Reasons must not be null.",
    "param-names": [
      "BanEntry",
      "Reason"
    ],
    "param-types": [
      "org.bukkit.BanEntry",
      "java.lang.String"
    ],
    "method": "setReason",
    "id": "org.bukkit.BanEntry#setReason(java.lang.String)",
    "class": "org.bukkit.BanEntry"
  },
  {
    "param-names": [
      "From Color",
      "To Color",
      "Size"
    ],
    "param-types": [
      "org.bukkit.Color",
      "org.bukkit.Color",
      "float"
    ],
    "id": "org.bukkit.Particle.DustTransition#DustTransition(org.bukkit.Color,org.bukkit.Color,float)",
    "class": "org.bukkit.Particle.DustTransition"
  },
  {
    "descr": "Gets if the block is set to instantly break when damaged by the player.",
    "method": "getInstaBreak",
    "id": "org.bukkit.event.block.BlockDamageEvent#getInstaBreak()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "AGGRESSIVE",
    "id": "org.bukkit.entity.Panda.Gene#AGGRESSIVE",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "static": true,
    "field": "STRAY",
    "id": "org.bukkit.entity.EntityType#STRAY",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_BEEHIVE_DRIP",
    "id": "org.bukkit.Sound#BLOCK_BEEHIVE_DRIP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the value of the 'bottom' property.",
    "param-names": [
      "Scaffolding",
      "Bottom"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Scaffolding",
      "boolean"
    ],
    "method": "setBottom",
    "id": "org.bukkit.block.data.type.Scaffolding#setBottom(boolean)",
    "class": "org.bukkit.block.data.type.Scaffolding"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_SKELETON_HURT",
    "id": "org.bukkit.Sound#ENTITY_WITHER_SKELETON_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the width of the painting, in blocks",
    "param-names": ["Art"],
    "param-types": ["org.bukkit.Art"],
    "method": "getBlockWidth",
    "id": "org.bukkit.Art#getBlockWidth()",
    "class": "org.bukkit.Art",
    "return": "int"
  },
  {
    "descr": "Represents an event that is called when a player right clicks an entity that\\nalso contains the location where the entity was clicked.\\n\\nNote that the client may sometimes spuriously send this packet in addition to PlayerInteractEntityEvent.\\nUsers are advised to listen to this (parent) class unless specifically required.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent"
  },
  {
    "static": true,
    "field": "LEGACY_TRAPPED_CHEST",
    "id": "org.bukkit.Material#LEGACY_TRAPPED_CHEST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get whether or not this entity is in love mode and will produce\\noffspring with another entity in love mode. Will return true if\\nand only if #getLoveModeTicks() is greater than 0.",
    "param-names": ["Animals"],
    "param-types": ["org.bukkit.entity.Animals"],
    "method": "isLoveMode",
    "id": "org.bukkit.entity.Animals#isLoveMode()",
    "class": "org.bukkit.entity.Animals",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "GILDED_BLACKSTONE",
    "id": "org.bukkit.Material#GILDED_BLACKSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the entity's maximum freeze ticks (amount of ticks before it will\\nbe fully frozen)",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getMaxFreezeTicks",
    "id": "org.bukkit.entity.Entity#getMaxFreezeTicks()",
    "class": "org.bukkit.entity.Entity",
    "return": "int"
  },
  {
    "descr": "Provides a chance of gaining extra loot when killing monsters",
    "static": true,
    "field": "LOOT_BONUS_MOBS",
    "id": "org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Sets whether this Minecart will pick up items.",
    "param-names": [
      "HopperMinecart",
      "Enabled"
    ],
    "param-types": [
      "org.bukkit.entity.minecart.HopperMinecart",
      "boolean"
    ],
    "method": "setEnabled",
    "id": "org.bukkit.entity.minecart.HopperMinecart#setEnabled(boolean)",
    "class": "org.bukkit.entity.minecart.HopperMinecart"
  },
  {
    "descr": "Gets the Bukkit version that this server is running.",
    "static": true,
    "method": "getBukkitVersion",
    "id": "org.bukkit.Bukkit#getBukkitVersion()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_ELYTRA",
    "id": "org.bukkit.Material#LEGACY_ELYTRA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WITCH_DEATH",
    "id": "org.bukkit.Sound#ENTITY_WITCH_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerAdvancementDoneEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAdvancementDoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: HangingSign",
    "static": true,
    "field": "OAK_HANGING_SIGN",
    "id": "org.bukkit.Material#OAK_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_BRUTE_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_BRUTE_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "A furnace inventory, with a RESULT slot, a CRAFTING slot, and a FUEL\\nslot.",
    "static": true,
    "field": "FURNACE",
    "id": "org.bukkit.event.inventory.InventoryType#FURNACE",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "The player is not allowed to log in, due to the server being full",
    "static": true,
    "field": "KICK_FULL",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent.Result#KICK_FULL",
    "class": "org.bukkit.event.player.PlayerPreLoginEvent.Result",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "descr": "Returns the potion data about the base potion",
    "param-names": ["PotionMeta"],
    "param-types": ["org.bukkit.inventory.meta.PotionMeta"],
    "method": "getBasePotionData",
    "id": "org.bukkit.inventory.meta.PotionMeta#getBasePotionData()",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "org.bukkit.potion.PotionData"
  },
  {
    "static": true,
    "field": "JUKEBOX_PLAY",
    "id": "org.bukkit.GameEvent#JUKEBOX_PLAY",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "HEART_OF_THE_SEA",
    "id": "org.bukkit.Material#HEART_OF_THE_SEA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent"
  },
  {
    "descr": "The sound played when a zombie converts to a drowned.",
    "static": true,
    "field": "ZOMBIE_CONVERTED_TO_DROWNED",
    "id": "org.bukkit.Effect#ZOMBIE_CONVERTED_TO_DROWNED",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "UP_NORTH",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#UP_NORTH",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "Set the base value of this instance.",
    "param-names": [
      "AttributeInstance",
      "Value"
    ],
    "param-types": [
      "org.bukkit.attribute.AttributeInstance",
      "double"
    ],
    "method": "setBaseValue",
    "id": "org.bukkit.attribute.AttributeInstance#setBaseValue(double)",
    "class": "org.bukkit.attribute.AttributeInstance"
  },
  {
    "static": true,
    "field": "ENTITY_FROG_LONG_JUMP",
    "id": "org.bukkit.Sound#ENTITY_FROG_LONG_JUMP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the maximum level that this Enchantment may become.",
    "param-names": ["Enchantment"],
    "param-types": ["org.bukkit.enchantments.Enchantment"],
    "method": "getMaxLevel",
    "id": "org.bukkit.enchantments.Enchantment#getMaxLevel()",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "int"
  },
  {
    "descr": "Send a multi-block change. This fakes a block change packet for a user\\nat multiple locations. This will not actually change the world in any\\nway.\\n\\nThis method may send multiple packets to the client depending on the\\nblocks in the collection. A packet must be sent for each chunk section\\nmodified, meaning one packet for each 16x16x16 block area. Even if only\\none block is changed in two different chunk sections, two packets will\\nbe sent.\\n\\nAdditionally, this method cannot guarantee the functionality of changes\\nbeing sent to the player in chunks not loaded by the client. It is the\\nresponsibility of the caller to ensure that the client is within range\\nof the changed blocks or to handle any side effects caused as a result.",
    "param-names": [
      "Player",
      "Blocks",
      "Suppress Light Updates"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.util.Collection",
      "boolean"
    ],
    "method": "sendBlockChanges",
    "id": "org.bukkit.entity.Player#sendBlockChanges(java.util.Collection<org.bukkit.block.BlockState>,boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Creates a RayTraceResult.",
    "param-names": [
      "Hit Position",
      "Hit Block",
      "Hit Block Face"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.block.Block",
      "org.bukkit.block.BlockFace"
    ],
    "id": "org.bukkit.util.RayTraceResult#RayTraceResult(org.bukkit.util.Vector,org.bukkit.block.Block,org.bukkit.block.BlockFace)",
    "class": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "The highest block that is neither air nor contains a fluid, for worldgen.",
    "static": true,
    "field": "OCEAN_FLOOR_WG",
    "id": "org.bukkit.HeightMap#OCEAN_FLOOR_WG",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "LEGACY_COOKED_FISH",
    "id": "org.bukkit.Material#LEGACY_COOKED_FISH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the player enchanting the item",
    "method": "getEnchanter",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getEnchanter()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "PINK_DYE",
    "id": "org.bukkit.Material#PINK_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SLEEP_IN_BED",
    "id": "org.bukkit.Statistic#SLEEP_IN_BED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Buried treasure consists of a single chest buried in the beach sand or\\ngravel, with random loot in it.",
    "static": true,
    "field": "BURIED_TREASURE",
    "id": "org.bukkit.StructureType#BURIED_TREASURE",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "static": true,
    "field": "SUGAR",
    "id": "org.bukkit.Material#SUGAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Server advancements.",
    "static": true,
    "field": "ADVANCEMENT",
    "id": "org.bukkit.Registry#ADVANCEMENT",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Set if this structure box should show the bounding box.",
    "param-names": [
      "Structure",
      "Show Bounding Box"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "boolean"
    ],
    "method": "setBoundingBoxVisible",
    "id": "org.bukkit.block.Structure#setBoundingBoxVisible(boolean)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerKickEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Indicates the teleportation was caused by a plugin",
    "static": true,
    "field": "PLUGIN",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#PLUGIN",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "Perform a firework boost.\\n\\nThis method will only work such that #isGliding() is true and\\nthe entity is actively gliding with an elytra. Additionally, the supplied\\nfireworkItemStack must be a firework rocket. The power of the boost\\nwill directly correlate to FireworkMeta#getPower().",
    "param-names": [
      "HumanEntity",
      "Firework Item Stack"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "fireworkBoost",
    "id": "org.bukkit.entity.HumanEntity#fireworkBoost(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "org.bukkit.entity.Firework"
  },
  {
    "descr": "Sets the location that this entity moved from",
    "param-names": ["From"],
    "param-types": ["org.bukkit.Location"],
    "method": "setFrom",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#setFrom(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_LEAVES_FALL",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_LEAVES_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether the guardian laser is active or not.",
    "param-names": ["Guardian"],
    "param-types": ["org.bukkit.entity.Guardian"],
    "method": "hasLaser",
    "id": "org.bukkit.entity.Guardian#hasLaser()",
    "class": "org.bukkit.entity.Guardian",
    "return": "boolean"
  },
  {
    "descr": "Nothing will happen from the click.\\n\\nThere may be cases where nothing will happen and this is value is not\\nprovided, but it is guaranteed that this value is accurate when given.",
    "static": true,
    "field": "NOTHING",
    "id": "org.bukkit.event.inventory.InventoryAction#NOTHING",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "static": true,
    "field": "MOB_INTERACT",
    "id": "org.bukkit.GameEvent#MOB_INTERACT",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE",
    "id": "org.bukkit.Sound#ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set how long this entity has been alive (in ticks).\\n\\nWhen this number is greater than 80, it will despawn on the next tick.",
    "param-names": [
      "EnderSignal",
      "Timer"
    ],
    "param-types": [
      "org.bukkit.entity.EnderSignal",
      "int"
    ],
    "method": "setDespawnTimer",
    "id": "org.bukkit.entity.EnderSignal#setDespawnTimer(int)",
    "class": "org.bukkit.entity.EnderSignal"
  },
  {
    "descr": "Called when a potion effect is modified on an entity.\\n\\nIf the event is cancelled, no change will be made on the entity.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Get the item which will be revealed when the sand is fully brushed away\\nand uncovered.",
    "param-names": ["BrushableBlock"],
    "param-types": ["org.bukkit.block.BrushableBlock"],
    "method": "getItem",
    "id": "org.bukkit.block.BrushableBlock#getItem()",
    "class": "org.bukkit.block.BrushableBlock",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "GUI",
    "id": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform#GUI",
    "class": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "Sets the value of the 'power' property.",
    "param-names": [
      "AnaloguePowerable",
      "Power"
    ],
    "param-types": [
      "org.bukkit.block.data.AnaloguePowerable",
      "int"
    ],
    "method": "setPower",
    "id": "org.bukkit.block.data.AnaloguePowerable#setPower(int)",
    "class": "org.bukkit.block.data.AnaloguePowerable"
  },
  {
    "static": true,
    "field": "BLOCK_AZALEA_LEAVES_PLACE",
    "id": "org.bukkit.Sound#BLOCK_AZALEA_LEAVES_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the floored value of the Y component, indicating the block that\\nthis vector is contained with.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "getBlockY",
    "id": "org.bukkit.util.Vector#getBlockY()",
    "class": "org.bukkit.util.Vector",
    "return": "int"
  },
  {
    "descr": "Sets the value of the 'unstable' property.",
    "param-names": [
      "TNT",
      "Unstable"
    ],
    "param-types": [
      "org.bukkit.block.data.type.TNT",
      "boolean"
    ],
    "method": "setUnstable",
    "id": "org.bukkit.block.data.type.TNT#setUnstable(boolean)",
    "class": "org.bukkit.block.data.type.TNT"
  },
  {
    "descr": "Called when an entity comes into contact with a portal",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEnterEvent"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the item currently being worn by the armor stand on its feet.",
    "param-names": [
      "ArmorStand",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setBoots",
    "id": "org.bukkit.entity.ArmorStand#setBoots(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_RELIC",
    "id": "org.bukkit.Material#MUSIC_DISC_RELIC",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.AbstractArrow.PickupStatus#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.AbstractArrow.PickupStatus",
    "return": "org.bukkit.entity.AbstractArrow.PickupStatus"
  },
  {
    "static": true,
    "field": "BANNER_PURPLE",
    "id": "org.bukkit.map.MapCursor.Type#BANNER_PURPLE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "Increments automatically when a player kills another player on the gray team.",
    "static": true,
    "field": "TEAM_KILL_GRAY",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_GRAY",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "MELON_STEM",
    "id": "org.bukkit.Material#MELON_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Black, or (0x00,0x00,0x00) in (R,G,B)",
    "static": true,
    "field": "BLACK",
    "id": "org.bukkit.Color#BLACK",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Gets the chunk being loaded/unloaded",
    "method": "getChunk",
    "id": "org.bukkit.event.world.ChunkPopulateEvent#getChunk()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent",
    "return": "org.bukkit.Chunk"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityCombustEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "GREEN_CANDLE",
    "id": "org.bukkit.Material#GREEN_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause",
    "return": "org.bukkit.event.hanging.HangingBreakEvent.RemoveCause"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_HURT",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerDropItemEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerDropItemEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Hearts from a breeding entity.",
    "static": true,
    "field": "LOVE_HEARTS",
    "id": "org.bukkit.EntityEffect#LOVE_HEARTS",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Sets whether the Panda is sneezing",
    "param-names": [
      "Panda",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Panda",
      "boolean"
    ],
    "method": "setSneezing",
    "id": "org.bukkit.entity.Panda#setSneezing(boolean)",
    "class": "org.bukkit.entity.Panda"
  },
  {
    "descr": "Checks for existence of a map ID number.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "hasMapId",
    "id": "org.bukkit.inventory.meta.MapMeta#hasMapId()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NETHER_SPROUTS",
    "id": "org.bukkit.Material#NETHER_SPROUTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Boat.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "static": true,
    "field": "COOKED_CHICKEN",
    "id": "org.bukkit.Material#COOKED_CHICKEN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "LOOM",
    "id": "org.bukkit.Material#LOOM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When an ocelot has a baby spawned along with them",
    "static": true,
    "field": "OCELOT_BABY",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#OCELOT_BABY",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "BIRCH_PLANKS",
    "id": "org.bukkit.Material#BIRCH_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_ELYTRA_FLYING",
    "id": "org.bukkit.Sound#ITEM_ELYTRA_FLYING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setPickupCancelled",
    "id": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent#setPickupCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent"
  },
  {
    "descr": "Gets the item in the llama's decor slot.",
    "param-names": ["LlamaInventory"],
    "param-types": ["org.bukkit.inventory.LlamaInventory"],
    "method": "getDecor",
    "id": "org.bukkit.inventory.LlamaInventory#getDecor()",
    "class": "org.bukkit.inventory.LlamaInventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "End Cities are tall castle-like structures that generate in the outer\\nisland of the End dimension.\\n\\nThey consist primarily of end stone bricks, purpur blocks, and end rods.\\nThey are the only place where shulkers can be found.",
    "static": true,
    "field": "END_CITY",
    "id": "org.bukkit.StructureType#END_CITY",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "Gets if the entity has a limited life.",
    "param-names": ["Vex"],
    "param-types": ["org.bukkit.entity.Vex"],
    "method": "hasLimitedLife",
    "id": "org.bukkit.entity.Vex#hasLimitedLife()",
    "class": "org.bukkit.entity.Vex",
    "return": "boolean"
  },
  {
    "descr": "Sets the biome for the given block coordinates",
    "param-names": [
      "World",
      "X",
      "Z",
      "Bio"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int",
      "org.bukkit.block.Biome"
    ],
    "method": "setBiome",
    "id": "org.bukkit.World#setBiome(int,int,org.bukkit.block.Biome)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "WHITE_TULIP",
    "id": "org.bukkit.Material#WHITE_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_LAMP_ON",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_LAMP_ON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The rail forms a curve connecting the north and west faces of the\\nblock.",
    "static": true,
    "field": "NORTH_WEST",
    "id": "org.bukkit.block.data.Rail.Shape#NORTH_WEST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "static": true,
    "field": "BLOCK_SMOKER_SMOKE",
    "id": "org.bukkit.Sound#BLOCK_SMOKER_SMOKE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set if the bee has stung.",
    "param-names": [
      "Bee",
      "Stung"
    ],
    "param-types": [
      "org.bukkit.entity.Bee",
      "boolean"
    ],
    "method": "setHasStung",
    "id": "org.bukkit.entity.Bee#setHasStung(boolean)",
    "class": "org.bukkit.entity.Bee"
  },
  {
    "descr": "Returns the bucket used in this event",
    "method": "getBucket",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#getBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_DRINK_POTION",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_DRINK_POTION",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "PRISMARINE_BRICKS",
    "id": "org.bukkit.Material#PRISMARINE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["PistonMoveReaction"],
    "param-types": ["org.bukkit.block.PistonMoveReaction"],
    "method": "getId",
    "id": "org.bukkit.block.PistonMoveReaction#getId()",
    "class": "org.bukkit.block.PistonMoveReaction",
    "return": "int"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.boss.DragonBattle.RespawnPhase#valueOf(java.lang.String)",
    "class": "org.bukkit.boss.DragonBattle.RespawnPhase",
    "return": "org.bukkit.boss.DragonBattle.RespawnPhase"
  },
  {
    "static": true,
    "field": "LIGHT_BROWN",
    "id": "org.bukkit.map.MapPalette#LIGHT_BROWN",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "descr": "Unknown exhaustion reason",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#UNKNOWN",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "Sets the items stored in this item.\\nRemoves all items when given null.",
    "param-names": [
      "BundleMeta",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BundleMeta",
      "java.util.List"
    ],
    "method": "setItems",
    "id": "org.bukkit.inventory.meta.BundleMeta#setItems(java.util.List<org.bukkit.inventory.ItemStack>)",
    "class": "org.bukkit.inventory.meta.BundleMeta"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the green team.",
    "static": true,
    "field": "KILLED_BY_TEAM_GREEN",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_GREEN",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_JUMP_WATER",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_JUMP_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityCombustByBlockEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByBlockEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "MAGENTA_WALL_BANNER",
    "id": "org.bukkit.Material#MAGENTA_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether or not the block can be built here.\\n\\nBy default, returns Minecraft's answer on whether the block can be\\nbuilt here or not.",
    "method": "isBuildable",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#isBuildable()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "boolean"
  },
  {
    "descr": "Attempts to get the BiomeProvider with the given name.\\n\\nIf the biome provider is not found, null will be returned and a message\\nwill be printed to the specified CommandSender explaining why.\\n\\nThe name must be in the \"plugin:id\" notation, or optionally just\\n\"plugin\", where \"plugin\" is the safe-name of a plugin and \"id\" is an\\noptional unique identifier for the biome provider you wish to request\\nfrom the plugin.",
    "param-names": [
      "World",
      "Name",
      "Output"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.String",
      "org.bukkit.command.CommandSender"
    ],
    "method": "getBiomeProviderForName",
    "id": "org.bukkit.WorldCreator#getBiomeProviderForName(java.lang.String,java.lang.String,org.bukkit.command.CommandSender)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.generator.BiomeProvider"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_DRIP_WATER",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_DRIP_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Chunk at the given Location",
    "param-names": [
      "World",
      "Location"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location"
    ],
    "method": "getChunkAt",
    "id": "org.bukkit.World#getChunkAt(org.bukkit.Location)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Chunk"
  },
  {
    "descr": "BlockData: Ageable",
    "static": true,
    "field": "CACTUS",
    "id": "org.bukkit.Material#CACTUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_WARPED_HYPHAE",
    "id": "org.bukkit.Material#STRIPPED_WARPED_HYPHAE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a Criteria for the specified statistic pertaining to blocks or items.\\n\\nThis method expects a Statistic of Type#BLOCK or Type#ITEM and the\\nMaterial matching said type (e.g. BLOCK statistics require materials where\\nMaterial#isBlock() is true). This acts as a convenience to create more complex\\ncompound criteria such as those that increment on block breaks, or item uses. An example\\nwould be Criteria.statistic(Statistic.CRAFT_ITEM, Material.STICK), returning a\\nCriteria representing \"minecraft.crafted:minecraft.stick\" which will increment when the\\nplayer crafts a stick.\\n\\nIf the provided statistic does not require additional data, #statistic(Statistic)\\nis called and returned instead.\\n\\nThis method provides no guarantee that any given criteria exists on the vanilla server.",
    "param-names": [
      "Statistic",
      "Material"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Statistic",
      "org.bukkit.Material"
    ],
    "method": "statistic",
    "id": "org.bukkit.scoreboard.Criteria#statistic(org.bukkit.Statistic,org.bukkit.Material)",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Gets whether the entity is invulnerable or not.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isInvulnerable",
    "id": "org.bukkit.entity.Entity#isInvulnerable()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerPortalEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Check whether this map is virtual. A map is virtual if its lowermost\\nMapRenderer is plugin-provided.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "isVirtual",
    "id": "org.bukkit.map.MapView#isVirtual()",
    "class": "org.bukkit.map.MapView",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.map.MapView.Scale#NORMAL",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "org.bukkit.map.MapView.Scale"
  },
  {
    "descr": "Gets user-specified limit for number of water ambient mobs that can spawn\\nin a chunk.",
    "static": true,
    "method": "getWaterAmbientSpawnLimit",
    "id": "org.bukkit.Bukkit#getWaterAmbientSpawnLimit()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_OCELOT_DEATH",
    "id": "org.bukkit.Sound#ENTITY_OCELOT_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Player regenerated health",
    "static": true,
    "field": "REGEN",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#REGEN",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "Checks if this code is a format code as opposed to a color code.",
    "param-names": ["ChatColor"],
    "param-types": ["org.bukkit.ChatColor"],
    "method": "isFormat",
    "id": "org.bukkit.ChatColor#isFormat()",
    "class": "org.bukkit.ChatColor",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "AMBIENT_CAVE",
    "id": "org.bukkit.Sound#AMBIENT_CAVE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the ItemStack currently in the clicked slot.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCurrentItem",
    "id": "org.bukkit.event.inventory.CraftItemEvent#setCurrentItem(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent"
  },
  {
    "descr": "BlockData: TripwireHook",
    "static": true,
    "field": "TRIPWIRE_HOOK",
    "id": "org.bukkit.Material#TRIPWIRE_HOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COOKED_BEEF",
    "id": "org.bukkit.Material#COOKED_BEEF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_LIGHTNING_BOLT_IMPACT",
    "id": "org.bukkit.Sound#ENTITY_LIGHTNING_BOLT_IMPACT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "APPLE",
    "id": "org.bukkit.Material#APPLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "DRIPPING_OBSIDIAN_TEAR",
    "id": "org.bukkit.Particle#DRIPPING_OBSIDIAN_TEAR",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityTargetLivingEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ProjectileHitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileHitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BUTCHER_GIFT",
    "id": "org.bukkit.loot.LootTables#BUTCHER_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "MAGMA_BLOCK",
    "id": "org.bukkit.Material#MAGMA_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CATALYST_BLOOM",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CATALYST_BLOOM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_CHESTPLATE",
    "id": "org.bukkit.Material#LEGACY_GOLD_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PUFFER_FISH_STING",
    "id": "org.bukkit.Sound#ENTITY_PUFFER_FISH_STING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "DRAGON_EGG",
    "id": "org.bukkit.Material#DRAGON_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_EGG_BREAK",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_EGG_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns what type of inventory this is.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "getType",
    "id": "org.bukkit.inventory.Inventory#getType()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the current kick message that will be used if getResult() !=\\nResult.ALLOWED",
    "method": "getKickMessage",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getKickMessage()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates a cached server-icon for the specific image.\\n\\nSize and type are implementation defined. An incompatible file is\\nguaranteed to throw an implementation-defined Exception.",
    "param-names": ["Image"],
    "static": true,
    "param-types": ["java.awt.image.BufferedImage"],
    "method": "loadServerIcon",
    "id": "org.bukkit.Bukkit#loadServerIcon(java.awt.image.BufferedImage)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.util.CachedServerIcon"
  },
  {
    "descr": "Sets the RecipeChoice that a character in the recipe shape refers to.\\n\\nNote that before an ingredient can be set, the recipe's shape must be defined\\nwith #shape(String...).",
    "param-names": [
      "ShapedRecipe",
      "Key",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "char",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "method": "setIngredient",
    "id": "org.bukkit.inventory.ShapedRecipe#setIngredient(char,org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "descr": "Return the entire buffer which formed the basis of this completion.",
    "method": "getBuffer",
    "id": "org.bukkit.event.server.TabCompleteEvent#getBuffer()",
    "event": true,
    "class": "org.bukkit.event.server.TabCompleteEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the armor stand's head's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": [
      "ArmorStand",
      "Pose"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.util.EulerAngle"
    ],
    "method": "setHeadPose",
    "id": "org.bukkit.entity.ArmorStand#setHeadPose(org.bukkit.util.EulerAngle)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "static": true,
    "field": "WHITE_WOOL",
    "id": "org.bukkit.Material#WHITE_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the display ItemStack.",
    "param-names": ["SizedFireball"],
    "param-types": ["org.bukkit.entity.SizedFireball"],
    "method": "getDisplayItem",
    "id": "org.bukkit.entity.SizedFireball#getDisplayItem()",
    "class": "org.bukkit.entity.SizedFireball",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the Chunk that contains the given Block",
    "param-names": [
      "World",
      "Block"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.block.Block"
    ],
    "method": "getChunkAt",
    "id": "org.bukkit.World#getChunkAt(org.bukkit.block.Block)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.Chunk"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.inventory.PrepareItemCraftEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareItemCraftEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "INFESTED_DEEPSLATE",
    "id": "org.bukkit.Material#INFESTED_DEEPSLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_VILLAGER_STEP",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_VILLAGER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the domestication level of this horse.\\n\\nSetting the domestication level to a high value will increase the\\nhorse's chances of becoming tame.\\n\\nDomestication level must be greater than zero and no greater than\\nthe max domestication level of the horse, determined with\\n#getMaxDomestication()",
    "param-names": [
      "AbstractHorse",
      "Level"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractHorse",
      "int"
    ],
    "method": "setDomestication",
    "id": "org.bukkit.entity.AbstractHorse#setDomestication(int)",
    "class": "org.bukkit.entity.AbstractHorse"
  },
  {
    "descr": "Gets the entity's width",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getWidth",
    "id": "org.bukkit.entity.Entity#getWidth()",
    "class": "org.bukkit.entity.Entity",
    "return": "double"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "GRAY_STAINED_GLASS",
    "id": "org.bukkit.Material#GRAY_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Which button was pressed to initiate the enchanting.",
    "method": "whichButton",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#whichButton()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_SMITHING_TABLE",
    "id": "org.bukkit.Statistic#INTERACT_WITH_SMITHING_TABLE",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.boss.BarStyle#values()",
    "class": "org.bukkit.boss.BarStyle",
    "return": "org.bukkit.boss.BarStyle[]"
  },
  {
    "descr": "Convert this Villager into a ZombieVillager as if it was killed by a\\nZombie.\\nNote: this will fire a EntityTransformEvent",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "zombify",
    "id": "org.bukkit.entity.Villager#zombify()",
    "class": "org.bukkit.entity.Villager",
    "return": "org.bukkit.entity.ZombieVillager"
  },
  {
    "descr": "Attack speed of an Entity.",
    "static": true,
    "field": "GENERIC_ATTACK_SPEED",
    "id": "org.bukkit.attribute.Attribute#GENERIC_ATTACK_SPEED",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_HURT",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": [
      "Phantom",
      "Sz"
    ],
    "param-types": [
      "org.bukkit.entity.Phantom",
      "int"
    ],
    "method": "setSize",
    "id": "org.bukkit.entity.Phantom#setSize(int)",
    "class": "org.bukkit.entity.Phantom"
  },
  {
    "descr": "Get the Sound this entity makes when splashing in water at high\\nspeeds. For most entities, this is just Sound#ENTITY_GENERIC_SPLASH.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getSwimHighSpeedSplashSound",
    "id": "org.bukkit.entity.Entity#getSwimHighSpeedSplashSound()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Restores the normal condition where the player's time is synchronized\\nwith the server time.\\n\\nEquivalent to calling setPlayerTime(0, true).",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "resetPlayerTime",
    "id": "org.bukkit.entity.Player#resetPlayerTime()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the displayed item stack.",
    "param-names": [
      "ItemDisplay",
      "Item"
    ],
    "param-types": [
      "org.bukkit.entity.ItemDisplay",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemStack",
    "id": "org.bukkit.entity.ItemDisplay#setItemStack(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.entity.ItemDisplay"
  },
  {
    "descr": "Returns the redstone power being provided to this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getBlockPower",
    "id": "org.bukkit.block.Block#getBlockPower()",
    "class": "org.bukkit.block.Block",
    "return": "int"
  },
  {
    "descr": "Gets the org.bukkit.event.Event.Result of this event. The Result describes the\\nbehavior that will be applied to the inventory in relation to this\\nevent.",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.Event.Result"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_CATALYST_FALL",
    "id": "org.bukkit.Sound#BLOCK_SCULK_CATALYST_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'face' property.",
    "param-names": ["FaceAttachable"],
    "param-types": ["org.bukkit.block.data.FaceAttachable"],
    "method": "getAttachedFace",
    "id": "org.bukkit.block.data.FaceAttachable#getAttachedFace()",
    "class": "org.bukkit.block.data.FaceAttachable",
    "return": "org.bukkit.block.data.FaceAttachable.AttachedFace"
  },
  {
    "descr": "Get a list of all entities in the chunk.\\nThis will force load any entities, which are not loaded.",
    "param-names": ["Chunk"],
    "param-types": ["org.bukkit.Chunk"],
    "method": "getEntities",
    "id": "org.bukkit.Chunk#getEntities()",
    "class": "org.bukkit.Chunk",
    "return": "org.bukkit.entity.Entity[]"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SENSOR_CLICKING",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SENSOR_CLICKING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_AXE_STRIP",
    "id": "org.bukkit.Sound#ITEM_AXE_STRIP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Registers a Team on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Name"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "java.lang.String"
    ],
    "method": "registerNewTeam",
    "id": "org.bukkit.scoreboard.Scoreboard#registerNewTeam(java.lang.String)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "org.bukkit.scoreboard.Team"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPortalEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the associated data value representing this type of sandstone",
    "param-names": ["SandstoneType"],
    "param-types": ["org.bukkit.SandstoneType"],
    "method": "getData",
    "id": "org.bukkit.SandstoneType#getData()",
    "class": "org.bukkit.SandstoneType",
    "return": "byte"
  },
  {
    "descr": "Sets the player's enchantment seed.\\nThe Seed is used to generate enchantment options in the enchanting table\\nfor the player.",
    "param-names": [
      "HumanEntity",
      "Seed"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "int"
    ],
    "method": "setEnchantmentSeed",
    "id": "org.bukkit.entity.HumanEntity#setEnchantmentSeed(int)",
    "class": "org.bukkit.entity.HumanEntity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerChangedMainHandEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedMainHandEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_ROAR",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_ROAR",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the specified LootTable.",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getLootTable",
    "id": "org.bukkit.Bukkit#getLootTable(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.loot.LootTable"
  },
  {
    "static": true,
    "field": "LEFT",
    "id": "org.bukkit.inventory.MainHand#LEFT",
    "class": "org.bukkit.inventory.MainHand",
    "return": "org.bukkit.inventory.MainHand"
  },
  {
    "descr": "Called before an entity exits a portal.\\n\\nThis event allows you to modify the velocity of the entity after they have\\nsuccessfully exited the portal.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent"
  },
  {
    "descr": "Movement speed of an Entity.",
    "static": true,
    "field": "GENERIC_MOVEMENT_SPEED",
    "id": "org.bukkit.attribute.Attribute#GENERIC_MOVEMENT_SPEED",
    "class": "org.bukkit.attribute.Attribute",
    "return": "org.bukkit.attribute.Attribute"
  },
  {
    "descr": "Gets the highest block corresponding to the HeightMap at the\\ngiven coordinates.",
    "param-names": [
      "World",
      "Location",
      "Height Map"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.HeightMap"
    ],
    "method": "getHighestBlockAt",
    "id": "org.bukkit.World#getHighestBlockAt(org.bukkit.Location,org.bukkit.HeightMap)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Sets the date this ban entry was created.",
    "param-names": [
      "BanEntry",
      "Created"
    ],
    "param-types": [
      "org.bukkit.BanEntry",
      "java.util.Date"
    ],
    "method": "setCreated",
    "id": "org.bukkit.BanEntry#setCreated(java.util.Date)",
    "class": "org.bukkit.BanEntry"
  },
  {
    "static": true,
    "field": "LEGACY_PAINTING",
    "id": "org.bukkit.Material#LEGACY_PAINTING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_WARDEN",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_WARDEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Snowable",
    "static": true,
    "field": "PODZOL",
    "id": "org.bukkit.Material#PODZOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_ORE_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHER_ORE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the command that the server will execute",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setCommand",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#setCommand(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent"
  },
  {
    "descr": "Uses MaterialData as DataType",
    "static": true,
    "field": "LEGACY_FALLING_DUST",
    "id": "org.bukkit.Particle#LEGACY_FALLING_DUST",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Fluid#values()",
    "class": "org.bukkit.Fluid",
    "return": "org.bukkit.Fluid[]"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "DARK_OAK_SLAB",
    "id": "org.bukkit.Material#DARK_OAK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the number of trades this merchant currently has available.",
    "param-names": ["Merchant"],
    "param-types": ["org.bukkit.inventory.Merchant"],
    "method": "getRecipeCount",
    "id": "org.bukkit.inventory.Merchant#getRecipeCount()",
    "class": "org.bukkit.inventory.Merchant",
    "return": "int"
  },
  {
    "descr": "An armour slot in the player's inventory.",
    "static": true,
    "field": "ARMOR",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#ARMOR",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "Set the thundering duration.",
    "param-names": [
      "World",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setThunderDuration",
    "id": "org.bukkit.World#setThunderDuration(int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_CONCRETE",
    "id": "org.bukkit.Material#LIGHT_GRAY_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set burn time.\\nA burn time greater than 0 will cause this block to be lit, whilst a time\\nless than 0 will extinguish it.",
    "param-names": [
      "Furnace",
      "Burn Time"
    ],
    "param-types": [
      "org.bukkit.block.Furnace",
      "short"
    ],
    "method": "setBurnTime",
    "id": "org.bukkit.block.Furnace#setBurnTime(short)",
    "class": "org.bukkit.block.Furnace"
  },
  {
    "static": true,
    "field": "BLOCK_DECORATED_POT_HIT",
    "id": "org.bukkit.Sound#BLOCK_DECORATED_POT_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Send a sign change. This fakes a sign change packet for a user at\\na certain location. This will not actually change the world in any way.\\nThis method will use a sign at the location's block or a faked sign\\nsent via\\n#sendBlockChange(org.bukkit.Location, org.bukkit.block.data.BlockData).\\n\\nIf the client does not have a sign at the given location it will\\ndisplay an error message to the user.\\n\\nTo change all attributes of a sign, including the back Side, use\\n#sendBlockUpdate(org.bukkit.Location, org.bukkit.block.TileState).",
    "param-names": [
      "Player",
      "Loc",
      "Lines",
      "Dye Color",
      "Has Glowing Text"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "java.lang.String[]",
      "org.bukkit.DyeColor",
      "boolean"
    ],
    "method": "sendSignChange",
    "id": "org.bukkit.entity.Player#sendSignChange(org.bukkit.Location,java.lang.String[],org.bukkit.DyeColor,boolean)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "param-names": [
      "MerchantRecipe",
      "Ingredients"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "java.util.List"
    ],
    "method": "setIngredients",
    "id": "org.bukkit.inventory.MerchantRecipe#setIngredients(java.util.List<org.bukkit.inventory.ItemStack>)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "VILLAGE_WEAPONSMITH",
    "id": "org.bukkit.loot.LootTables#VILLAGE_WEAPONSMITH",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "END_STONE_BRICK_SLAB",
    "id": "org.bukkit.Material#END_STONE_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the amount of arrows in the entity's body.",
    "param-names": [
      "LivingEntity",
      "Count"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "setArrowsInBody",
    "id": "org.bukkit.entity.LivingEntity#setArrowsInBody(int)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_MOSS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENDER_PEARL",
    "id": "org.bukkit.Material#ENDER_PEARL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets whether the server whitelist is enforced.\\nIf the whitelist is enforced, non-whitelisted players will be\\ndisconnected when the server whitelist is reloaded.",
    "static": true,
    "method": "isWhitelistEnforced",
    "id": "org.bukkit.Bukkit#isWhitelistEnforced()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "When the owner of the entity attacks the target attacks, so the\\nentity targets it.",
    "static": true,
    "field": "OWNER_ATTACKED_TARGET",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#OWNER_ATTACKED_TARGET",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.SpawnChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.SpawnChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the regeneration rate (1 health per x ticks) of\\nthe HumanEntity when they have saturation and\\ntheir food level is >= 20. Default is 10.",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getSaturatedRegenRate",
    "id": "org.bukkit.entity.HumanEntity#getSaturatedRegenRate()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "static": true,
    "field": "NOTE_BLOCK_PLAY",
    "id": "org.bukkit.GameEvent#NOTE_BLOCK_PLAY",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Sets the material that a character in the recipe shape refers to.\\n\\nNote that before an ingredient can be set, the recipe's shape must be defined\\nwith #shape(String...).",
    "param-names": [
      "ShapedRecipe",
      "Key",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapedRecipe",
      "char",
      "org.bukkit.material.MaterialData"
    ],
    "method": "setIngredient",
    "id": "org.bukkit.inventory.ShapedRecipe#setIngredient(char,org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "org.bukkit.inventory.ShapedRecipe"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockDamageAbortEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageAbortEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "NETHERITE_BOOTS",
    "id": "org.bukkit.Material#NETHERITE_BOOTS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "LIGHT_GRAY_BED",
    "id": "org.bukkit.Material#LIGHT_GRAY_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_OBSIDIAN",
    "id": "org.bukkit.Material#LEGACY_OBSIDIAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.world.LootGenerateEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the recipe to be acquired.",
    "method": "getRecipe",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#getRecipe()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_HIT",
    "id": "org.bukkit.Sound#BLOCK_MUD_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "This method sets the amount of experience to be created.\\n\\nThe number indicates a total amount to be divided into orbs.",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setExperience",
    "id": "org.bukkit.event.entity.ExpBottleEvent#setExperience(int)",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent"
  },
  {
    "descr": "Remove an effect from this firework.",
    "param-names": [
      "FireworkMeta",
      "Index"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.FireworkMeta",
      "int"
    ],
    "method": "removeEffect",
    "id": "org.bukkit.inventory.meta.FireworkMeta#removeEffect(int)",
    "class": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "static": true,
    "field": "LEGACY_WALL_BANNER",
    "id": "org.bukkit.Material#LEGACY_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the display block for this minecart.\\nPassing a null value will set the minecart to have no display block.",
    "param-names": [
      "Minecart",
      "Block Data"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "setDisplayBlockData",
    "id": "org.bukkit.entity.Minecart#setDisplayBlockData(org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent"
  },
  {
    "static": true,
    "field": "ENTITY_HOSTILE_SPLASH",
    "id": "org.bukkit.Sound#ENTITY_HOSTILE_SPLASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent"
  },
  {
    "descr": "Get the distance between this location and another. The value of this\\nmethod is not cached and uses a costly square-root function, so do not\\nrepeatedly call this method to get the location's magnitude. NaN will\\nbe returned if the inner result of the sqrt() function overflows, which\\nwill be caused if the distance is too long.",
    "param-names": [
      "Location",
      "O"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.Location"
    ],
    "method": "distance",
    "id": "org.bukkit.Location#distance(org.bukkit.Location)",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "descr": "Triggered when a hanging entity is removed by an entity",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent"
  },
  {
    "static": true,
    "field": "BLOCK_STEM_BREAK",
    "id": "org.bukkit.Sound#BLOCK_STEM_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates explosion at given coordinates with given power and optionally\\nsetting blocks on fire or breaking blocks.",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Power",
      "Set Fire",
      "Break Blocks",
      "Source"
    ],
    "param-types": [
      "org.bukkit.World",
      "double",
      "double",
      "double",
      "float",
      "boolean",
      "boolean",
      "org.bukkit.entity.Entity"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(double,double,double,float,boolean,boolean,org.bukkit.entity.Entity)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Gets the time that an entity will be immune from subsequent exposure.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getReapplicationDelay",
    "id": "org.bukkit.entity.AreaEffectCloud#getReapplicationDelay()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Setting to show/hide what the ItemStack can break/destroy",
    "static": true,
    "field": "HIDE_DESTROYS",
    "id": "org.bukkit.inventory.ItemFlag#HIDE_DESTROYS",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag"
  },
  {
    "descr": "Sets the item the player is holding",
    "param-names": [
      "PlayerInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInHand",
    "id": "org.bukkit.inventory.PlayerInventory#setItemInHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "Gets the unique name of this world",
    "param-names": ["WorldInfo"],
    "param-types": ["org.bukkit.generator.WorldInfo"],
    "method": "getName",
    "id": "org.bukkit.generator.WorldInfo#getName()",
    "class": "org.bukkit.generator.WorldInfo",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ARMOR_CLEANED",
    "id": "org.bukkit.Statistic#ARMOR_CLEANED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the value of the 'shrieking' property.",
    "param-names": ["SculkShrieker"],
    "param-types": ["org.bukkit.block.data.type.SculkShrieker"],
    "method": "isShrieking",
    "id": "org.bukkit.block.data.type.SculkShrieker#isShrieking()",
    "class": "org.bukkit.block.data.type.SculkShrieker",
    "return": "boolean"
  },
  {
    "descr": "Set the slot number of the currently held item.\\n\\nThis validates whether the slot is between 0 and 8 inclusive.",
    "param-names": [
      "PlayerInventory",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "int"
    ],
    "method": "setHeldItemSlot",
    "id": "org.bukkit.inventory.PlayerInventory#setHeldItemSlot(int)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "static": true,
    "field": "OCEAN_RUIN_COLD_ARCHAEOLOGY",
    "id": "org.bukkit.loot.LootTables#OCEAN_RUIN_COLD_ARCHAEOLOGY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "DOWN_EAST",
    "id": "org.bukkit.block.data.type.Jigsaw.Orientation#DOWN_EAST",
    "class": "org.bukkit.block.data.type.Jigsaw.Orientation",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerHarvestBlockEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHarvestBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "PIGLIN",
    "id": "org.bukkit.loot.LootTables#PIGLIN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_ROTTEN_FLESH",
    "id": "org.bukkit.Material#LEGACY_ROTTEN_FLESH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the owner of the skull.",
    "param-names": ["SkullMeta"],
    "param-types": ["org.bukkit.inventory.meta.SkullMeta"],
    "method": "getOwningPlayer",
    "id": "org.bukkit.inventory.meta.SkullMeta#getOwningPlayer()",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "Gets the item display transform for this entity.\\nDefaults to ItemDisplayTransform#FIXED.",
    "param-names": ["ItemDisplay"],
    "param-types": ["org.bukkit.entity.ItemDisplay"],
    "method": "getItemDisplayTransform",
    "id": "org.bukkit.entity.ItemDisplay#getItemDisplayTransform()",
    "class": "org.bukkit.entity.ItemDisplay",
    "return": "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
  },
  {
    "descr": "Removes an ingredient from the list. If the ingredient occurs multiple\\ntimes, only one instance of it is removed. If the data value is -1,\\nonly ingredients with a -1 data value will be removed.",
    "param-names": [
      "ShapelessRecipe",
      "Ingredient"
    ],
    "param-types": [
      "org.bukkit.inventory.ShapelessRecipe",
      "org.bukkit.material.MaterialData"
    ],
    "method": "removeIngredient",
    "id": "org.bukkit.inventory.ShapelessRecipe#removeIngredient(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "org.bukkit.inventory.ShapelessRecipe"
  },
  {
    "descr": "Get a Location detailing the current eye position of the living entity.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getEyeLocation",
    "id": "org.bukkit.entity.LivingEntity#getEyeLocation()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "BLOCK_MUDDY_MANGROVE_ROOTS_STEP",
    "id": "org.bukkit.Sound#BLOCK_MUDDY_MANGROVE_ROOTS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get a copy of the choice map.",
    "param-names": ["ShapedRecipe"],
    "param-types": ["org.bukkit.inventory.ShapedRecipe"],
    "method": "getChoiceMap",
    "id": "org.bukkit.inventory.ShapedRecipe#getChoiceMap()",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "java.util.Map"
  },
  {
    "descr": "Returns if a vector is normalized",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "isNormalized",
    "id": "org.bukkit.util.Vector#isNormalized()",
    "class": "org.bukkit.util.Vector",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_SCAFFOLDING_FALL",
    "id": "org.bukkit.Sound#BLOCK_SCAFFOLDING_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Return the ability to breed of the animal.",
    "param-names": ["Ageable"],
    "param-types": ["org.bukkit.entity.Ageable"],
    "method": "canBreed",
    "id": "org.bukkit.entity.Ageable#canBreed()",
    "class": "org.bukkit.entity.Ageable",
    "return": "boolean"
  },
  {
    "descr": "Gets the block that was hit, if it was a block that was hit.",
    "method": "getHitBlock",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getHitBlock()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "BlockData: WallHangingSign",
    "static": true,
    "field": "CHERRY_WALL_HANGING_SIGN",
    "id": "org.bukkit.Material#CHERRY_WALL_HANGING_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_STRAY_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_STRAY_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether the hoglin is able to be hunted by piglins.",
    "param-names": [
      "Hoglin",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Hoglin",
      "boolean"
    ],
    "method": "setIsAbleToBeHunted",
    "id": "org.bukkit.entity.Hoglin#setIsAbleToBeHunted(boolean)",
    "class": "org.bukkit.entity.Hoglin"
  },
  {
    "static": true,
    "field": "DARK_BROWN",
    "id": "org.bukkit.map.MapPalette#DARK_BROWN",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte"
  },
  {
    "static": true,
    "field": "LIME_DYE",
    "id": "org.bukkit.Material#LIME_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the last vibration frequency of this sensor.\\nDifferent activities detected by the sensor will produce different\\nfrequencies and dictate the output of connected comparators.",
    "param-names": [
      "SculkSensor",
      "Last Vibration Frequency"
    ],
    "param-types": [
      "org.bukkit.block.SculkSensor",
      "int"
    ],
    "method": "setLastVibrationFrequency",
    "id": "org.bukkit.block.SculkSensor#setLastVibrationFrequency(int)",
    "class": "org.bukkit.block.SculkSensor"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "CHERRY_FENCE",
    "id": "org.bukkit.Material#CHERRY_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "HORN_CORAL",
    "id": "org.bukkit.Material#HORN_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_SPRUCE_DOOR_ITEM",
    "id": "org.bukkit.Material#LEGACY_SPRUCE_DOOR_ITEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.hanging.HangingBreakByEntityEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakByEntityEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SALMON_BUCKET",
    "id": "org.bukkit.Material#SALMON_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "SOUL_WALL_TORCH",
    "id": "org.bukkit.Material#SOUL_WALL_TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHAIN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_CHAIN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if this player has played on this server before.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "hasPlayedBefore",
    "id": "org.bukkit.OfflinePlayer#hasPlayedBefore()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_EYE_LAUNCH",
    "id": "org.bukkit.Sound#ENTITY_ENDER_EYE_LAUNCH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_RED_SHULKER_BOX",
    "id": "org.bukkit.Material#LEGACY_RED_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CRIMSON_FUNGUS",
    "id": "org.bukkit.Material#CRIMSON_FUNGUS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the potion which caused this event",
    "method": "getPotion",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getPotion()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.entity.ThrownPotion"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.ArrowBodyCountChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.ArrowBodyCountChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Check if this event involved a block",
    "method": "hasBlock",
    "id": "org.bukkit.event.player.PlayerInteractEvent#hasBlock()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "boolean"
  },
  {
    "descr": "Clears the existing book pages, and sets the book to use the provided\\npages. Maximum 100 pages with 256 characters per page.",
    "param-names": [
      "BookMeta",
      "Pages"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "java.util.List"
    ],
    "method": "setPages",
    "id": "org.bukkit.inventory.meta.BookMeta#setPages(java.util.List<java.lang.String>)",
    "class": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "descr": "The new smithing inventory, with 3 CRAFTING slots and 1 RESULT slot.",
    "static": true,
    "field": "SMITHING_NEW",
    "id": "org.bukkit.event.inventory.InventoryType#SMITHING_NEW",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "method": "getClickedPosition",
    "id": "org.bukkit.event.player.PlayerInteractAtEntityEvent#getClickedPosition()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractAtEntityEvent",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Sets the localized name.",
    "param-names": [
      "ItemMeta",
      "Name"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "java.lang.String"
    ],
    "method": "setLocalizedName",
    "id": "org.bukkit.inventory.meta.ItemMeta#setLocalizedName(java.lang.String)",
    "class": "org.bukkit.inventory.meta.ItemMeta"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.potion.PotionType#valueOf(java.lang.String)",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "static": true,
    "field": "ENTITY_BAT_TAKEOFF",
    "id": "org.bukkit.Sound#ENTITY_BAT_TAKEOFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When all effects are removed due to death (Note: This is called on\\nrespawn, so it's player only!)",
    "static": true,
    "field": "DEATH",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#DEATH",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Blocks used and associated with redstone contraptions including buttons,\\nlevers, pressure plates, redstone components, pistons, etc.",
    "static": true,
    "field": "REDSTONE",
    "id": "org.bukkit.inventory.CreativeCategory#REDSTONE",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "descr": "Returns the display information for this advancement.\\nThis includes it's name, description and other visible tags.",
    "param-names": ["Advancement"],
    "param-types": ["org.bukkit.advancement.Advancement"],
    "method": "getDisplay",
    "id": "org.bukkit.advancement.Advancement#getDisplay()",
    "class": "org.bukkit.advancement.Advancement",
    "return": "org.bukkit.advancement.AdvancementDisplay"
  },
  {
    "param-names": ["InventoryType"],
    "param-types": ["org.bukkit.event.inventory.InventoryType"],
    "method": "getDefaultTitle",
    "id": "org.bukkit.event.inventory.InventoryType#getDefaultTitle()",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "java.lang.String"
  },
  {
    "descr": "Return an immutable copy of all AttributeModifiers\\nfor a given Attribute",
    "param-names": [
      "ItemMeta",
      "Attribute"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.attribute.Attribute"
    ],
    "method": "getAttributeModifiers",
    "id": "org.bukkit.inventory.meta.ItemMeta#getAttributeModifiers(org.bukkit.attribute.Attribute)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "TOOLSMITH_GIFT",
    "id": "org.bukkit.loot.LootTables#TOOLSMITH_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets all scores for a player on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "getScores",
    "id": "org.bukkit.scoreboard.Scoreboard#getScores(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Scoreboard",
    "return": "java.util.Set"
  },
  {
    "descr": "Gets the location that this compass will point to.\\nCheck #hasLodestone() first!",
    "param-names": ["CompassMeta"],
    "param-types": ["org.bukkit.inventory.meta.CompassMeta"],
    "method": "getLodestone",
    "id": "org.bukkit.inventory.meta.CompassMeta#getLodestone()",
    "class": "org.bukkit.inventory.meta.CompassMeta",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_STEP",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'locked' property.",
    "param-names": ["Repeater"],
    "param-types": ["org.bukkit.block.data.type.Repeater"],
    "method": "isLocked",
    "id": "org.bukkit.block.data.type.Repeater#isLocked()",
    "class": "org.bukkit.block.data.type.Repeater",
    "return": "boolean"
  },
  {
    "descr": "Sets the amount of regained health",
    "param-names": ["Amount"],
    "param-types": ["double"],
    "method": "setAmount",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#setAmount(double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent"
  },
  {
    "descr": "The top half of the block, normally with the higher y coordinate.",
    "static": true,
    "field": "TOP",
    "id": "org.bukkit.block.data.Bisected.Half#TOP",
    "class": "org.bukkit.block.data.Bisected.Half",
    "return": "org.bukkit.block.data.Bisected.Half"
  },
  {
    "descr": "Gets the minimum y value.",
    "param-names": ["BoundingBox"],
    "param-types": ["org.bukkit.util.BoundingBox"],
    "method": "getMinY",
    "id": "org.bukkit.util.BoundingBox#getMinY()",
    "class": "org.bukkit.util.BoundingBox",
    "return": "double"
  },
  {
    "descr": "Uses BlockData as DataType",
    "static": true,
    "field": "BLOCK_DUST",
    "id": "org.bukkit.Particle#BLOCK_DUST",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the color as an ARGB integer.",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "asARGB",
    "id": "org.bukkit.Color#asARGB()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "descr": "Set the current item in the result slot.",
    "param-names": [
      "FurnaceInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.FurnaceInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setResult",
    "id": "org.bukkit.inventory.FurnaceInventory#setResult(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.FurnaceInventory"
  },
  {
    "descr": "Sets the sound to play if the skull is placed on a note block.\\n\\nNote: This only works for player heads. For other heads,\\nsee org.bukkit.Instrument.",
    "param-names": [
      "SkullMeta",
      "Note Block Sound"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SkullMeta",
      "org.bukkit.NamespacedKey"
    ],
    "method": "setNoteBlockSound",
    "id": "org.bukkit.inventory.meta.SkullMeta#setNoteBlockSound(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.inventory.meta.SkullMeta"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerUnregisterChannelEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnregisterChannelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the smelted ItemStack for this event",
    "method": "getSource",
    "id": "org.bukkit.event.block.BlockCookEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "This event is called when a player in creative mode puts down or picks up\\nan item in their inventory / hotbar and when they drop items from their\\nInventory while in creative mode.",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent"
  },
  {
    "descr": "The dummy criteria. Not changed by the server.",
    "static": true,
    "field": "DUMMY",
    "id": "org.bukkit.scoreboard.Criteria#DUMMY",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Return if the boss bar is displayed to attached players.",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "isVisible",
    "id": "org.bukkit.boss.BossBar#isVisible()",
    "class": "org.bukkit.boss.BossBar",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ANGRY_AT",
    "id": "org.bukkit.entity.memory.MemoryKey#ANGRY_AT",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "static": true,
    "field": "ENTITY_DOLPHIN_AMBIENT_WATER",
    "id": "org.bukkit.Sound#ENTITY_DOLPHIN_AMBIENT_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ENDERMAN_STARE",
    "id": "org.bukkit.Sound#ENTITY_ENDERMAN_STARE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SADDLE",
    "id": "org.bukkit.Material#SADDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "D",
    "id": "org.bukkit.Note.Tone#D",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "static": true,
    "field": "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the x-coordinate of this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getX",
    "id": "org.bukkit.block.BlockState#getX()",
    "class": "org.bukkit.block.BlockState",
    "return": "int"
  },
  {
    "static": true,
    "field": "STRIPE_RIGHT",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_RIGHT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleDestroyEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDestroyEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "DEAD_FIRE_CORAL",
    "id": "org.bukkit.Material#DEAD_FIRE_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FOX_TELEPORT",
    "id": "org.bukkit.Sound#ENTITY_FOX_TELEPORT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SHRIEKER_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SHRIEKER_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_MULE_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_MULE_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Igloos are structures that generate in snowy biomes.\\n\\nThey consist of the house, as well as a basement.",
    "static": true,
    "field": "IGLOO",
    "id": "org.bukkit.StructureType#IGLOO",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "SKELETON_WALL_SKULL",
    "id": "org.bukkit.Material#SKELETON_WALL_SKULL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_STONE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_STONE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DIAGONAL_LEFT",
    "id": "org.bukkit.block.banner.PatternType#DIAGONAL_LEFT",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Gets the reason for the conversion that has occurred.",
    "method": "getTransformReason",
    "id": "org.bukkit.event.entity.EntityTransformEvent#getTransformReason()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTransformEvent",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "static": true,
    "field": "RAW_IRON",
    "id": "org.bukkit.Material#RAW_IRON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the derailed velocity modifier. Used for minecarts that are on the\\nground, but not on rails. A derailed minecart's velocity is multiplied\\nby this factor each tick.",
    "param-names": [
      "Minecart",
      "Derailed"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "org.bukkit.util.Vector"
    ],
    "method": "setDerailedVelocityMod",
    "id": "org.bukkit.entity.Minecart#setDerailedVelocityMod(org.bukkit.util.Vector)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Get light level emitted by block at corresponding coordinate in the\\nchunk",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getBlockEmittedLight",
    "id": "org.bukkit.ChunkSnapshot#getBlockEmittedLight(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "int"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getY",
    "id": "org.bukkit.block.DoubleChest#getY()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "double"
  },
  {
    "static": true,
    "field": "GLOBE",
    "id": "org.bukkit.block.banner.PatternType#GLOBE",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Sets the damage for the specified modifier.",
    "param-names": [
      "Type",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
      "double"
    ],
    "method": "setDamage",
    "id": "org.bukkit.event.entity.EntityDamageEvent#setDamage(org.bukkit.event.entity.EntityDamageEvent.DamageModifier,double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageEvent"
  },
  {
    "static": true,
    "field": "HALF_VERTICAL",
    "id": "org.bukkit.block.banner.PatternType#HALF_VERTICAL",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "The trigger criteria. Changed when a player runs the /trigger command for an objective.",
    "static": true,
    "field": "TRIGGER",
    "id": "org.bukkit.scoreboard.Criteria#TRIGGER",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Gets the location that this entity moved to",
    "method": "getTo",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getTo()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Get the amount of light at this block from the sky.\\n\\nAny light given from other sources (such as blocks like torches) will\\nbe ignored.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getLightFromSky",
    "id": "org.bukkit.block.Block#getLightFromSky()",
    "class": "org.bukkit.block.Block",
    "return": "byte"
  },
  {
    "descr": "Gets every player that has ever played on this server.",
    "static": true,
    "method": "getOfflinePlayers",
    "id": "org.bukkit.Bukkit#getOfflinePlayers()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.OfflinePlayer[]"
  },
  {
    "static": true,
    "field": "NETHERITE_INGOT",
    "id": "org.bukkit.Material#NETHERITE_INGOT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.server.ServiceRegisterEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceRegisterEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_PLING",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_PLING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockCookEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Block ignition caused by a flaming arrow.",
    "static": true,
    "field": "ARROW",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#ARROW",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "static": true,
    "field": "END_CRYSTAL",
    "id": "org.bukkit.Material#END_CRYSTAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when an entity has made a decision to explode.",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent"
  },
  {
    "static": true,
    "field": "FALLING_NECTAR",
    "id": "org.bukkit.Particle#FALLING_NECTAR",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "EXPLORER_POTTERY_SHERD",
    "id": "org.bukkit.Material#EXPLORER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Regular tree, extra tall with branches",
    "static": true,
    "field": "BIG_TREE",
    "id": "org.bukkit.TreeType#BIG_TREE",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PRISMARINE_SHARD",
    "id": "org.bukkit.Material#PRISMARINE_SHARD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attribute.",
    "static": true,
    "field": "ATTRIBUTE",
    "id": "org.bukkit.Registry#ATTRIBUTE",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Causes the player's vision to dim occasionally.",
    "static": true,
    "field": "DARKNESS",
    "id": "org.bukkit.potion.PotionEffectType#DARKNESS",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "WITHER",
    "id": "org.bukkit.loot.LootTables#WITHER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Outer corner stair block with higher right side.",
    "static": true,
    "field": "OUTER_RIGHT",
    "id": "org.bukkit.block.data.type.Stairs.Shape#OUTER_RIGHT",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the biome provider that will be used to create or load the world.\\n\\nThis may be null, in which case the biome provider from the\\nChunkGenerator will be used. If no ChunkGenerator is\\nspecific the \"natural\" biome provider for this environment will be used.\\n\\nIf the biome provider cannot be found for the given name and no\\nChunkGenerator is specific, the natural environment biome\\nprovider will be used instead and a warning will be printed to the\\nspecified output",
    "param-names": [
      "WorldCreator",
      "Biome Provider",
      "Output"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "java.lang.String",
      "org.bukkit.command.CommandSender"
    ],
    "method": "biomeProvider",
    "id": "org.bukkit.WorldCreator#biomeProvider(java.lang.String,org.bukkit.command.CommandSender)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Gets the price multiplier for the cost of this trade.",
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getPriceMultiplier",
    "id": "org.bukkit.inventory.MerchantRecipe#getPriceMultiplier()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "float"
  },
  {
    "descr": "Returns true if the player's time is relative to the server time,\\notherwise the player's time is absolute and will not change its current\\ntime unless done so with setPlayerTime().",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "isPlayerTimeRelative",
    "id": "org.bukkit.entity.Player#isPlayerTimeRelative()",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RAVAGER",
    "id": "org.bukkit.loot.LootTables#RAVAGER",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Set the amount of ticks that this mob has exited the bounds of a village\\nas a raid participant.\\n\\nThis value is considered only when the mob has had no action for 2,400 ticks\\n(according to #getNoActionTicks()). Once both the no action ticks have\\nreached that value and the ticks outside a raid exceeds 30, the mob will be\\nexpelled from the raid.",
    "param-names": [
      "Raider",
      "Ticks"
    ],
    "param-types": [
      "org.bukkit.entity.Raider",
      "int"
    ],
    "method": "setTicksOutsideRaid",
    "id": "org.bukkit.entity.Raider#setTicksOutsideRaid(int)",
    "class": "org.bukkit.entity.Raider"
  },
  {
    "static": true,
    "field": "BLOCK_SCULK_SHRIEKER_SHRIEK",
    "id": "org.bukkit.Sound#BLOCK_SCULK_SHRIEKER_SHRIEK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "RED_NETHER_BRICK_SLAB",
    "id": "org.bukkit.Material#RED_NETHER_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Create a new map with an automatically assigned ID.",
    "param-names": ["World"],
    "static": true,
    "param-types": ["org.bukkit.World"],
    "method": "createMap",
    "id": "org.bukkit.Bukkit#createMap(org.bukkit.World)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.map.MapView"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the dark red team.",
    "static": true,
    "field": "KILLED_BY_TEAM_DARK_RED",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_DARK_RED",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "LEGACY_SNOW",
    "id": "org.bukkit.Material#LEGACY_SNOW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SALMON_SPAWN_EGG",
    "id": "org.bukkit.Material#SALMON_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "HUSK_SPAWN_EGG",
    "id": "org.bukkit.Material#HUSK_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LONG_JUMP_COOLING_DOWN",
    "id": "org.bukkit.entity.memory.MemoryKey#LONG_JUMP_COOLING_DOWN",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "static": true,
    "field": "LAVA_BUCKET",
    "id": "org.bukkit.Material#LAVA_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_WORK_TOOLSMITH",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_WORK_TOOLSMITH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets all the lines of text currently on the Side#FRONT of this sign.",
    "param-names": ["Sign"],
    "param-types": ["org.bukkit.block.Sign"],
    "method": "getLines",
    "id": "org.bukkit.block.Sign#getLines()",
    "class": "org.bukkit.block.Sign",
    "return": "java.lang.String[]"
  },
  {
    "descr": "Checks for existence of a potion color.",
    "param-names": ["PotionMeta"],
    "param-types": ["org.bukkit.inventory.meta.PotionMeta"],
    "method": "hasColor",
    "id": "org.bukkit.inventory.meta.PotionMeta#hasColor()",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "descr": "Represents a custom dimension",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.World.Environment#CUSTOM",
    "class": "org.bukkit.World.Environment",
    "return": "org.bukkit.World.Environment"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Fox.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Fox.Type",
    "return": "org.bukkit.entity.Fox.Type"
  },
  {
    "descr": "Discover a recipe for this player such that it has not already been\\ndiscovered. This method will add the key's associated recipe to the\\nplayer's recipe book.",
    "param-names": [
      "HumanEntity",
      "Recipe"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.NamespacedKey"
    ],
    "method": "discoverRecipe",
    "id": "org.bukkit.entity.HumanEntity#discoverRecipe(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.FluidLevelChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.FluidLevelChangeEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerItemMendEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemMendEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "GLOW_SQUID",
    "id": "org.bukkit.entity.EntityType#GLOW_SQUID",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the book meta that will actually be added to the book.",
    "param-names": ["New Book Meta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "setNewBookMeta",
    "id": "org.bukkit.event.player.PlayerEditBookEvent#setNewBookMeta(org.bukkit.inventory.meta.BookMeta)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEditBookEvent"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PigZombieAngerEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PigZombieAngerEvent"
  },
  {
    "static": true,
    "field": "POTTED_BIRCH_SAPLING",
    "id": "org.bukkit.Material#POTTED_BIRCH_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The village has fallen (i.e. all villagers died).",
    "static": true,
    "field": "LOSS",
    "id": "org.bukkit.Raid.RaidStatus#LOSS",
    "class": "org.bukkit.Raid.RaidStatus",
    "return": "org.bukkit.Raid.RaidStatus"
  },
  {
    "descr": "Entity is sleeping.",
    "static": true,
    "field": "SLEEPING",
    "id": "org.bukkit.entity.Pose#SLEEPING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "BlockData: AnaloguePowerable",
    "static": true,
    "field": "TARGET",
    "id": "org.bukkit.Material#TARGET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets if the allay can duplicate.\\n\\nNote: this value can be overridden later by\\n#getDuplicationCooldown if is lower than zero. You can also use\\n#setDuplicationCooldown to allow the allay to duplicate",
    "param-names": [
      "Allay",
      "Can Duplicate"
    ],
    "param-types": [
      "org.bukkit.entity.Allay",
      "boolean"
    ],
    "method": "setCanDuplicate",
    "id": "org.bukkit.entity.Allay#setCanDuplicate(boolean)",
    "class": "org.bukkit.entity.Allay"
  },
  {
    "descr": "Gets the BlockState for the block which was replaced. Material type air\\nmostly.",
    "method": "getBlockReplacedState",
    "id": "org.bukkit.event.block.BlockPlaceEvent#getBlockReplacedState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the color of the armor. If it has not been set otherwise, it will\\nbe ItemFactory#getDefaultLeatherColor().",
    "param-names": ["LeatherArmorMeta"],
    "param-types": ["org.bukkit.inventory.meta.LeatherArmorMeta"],
    "method": "getColor",
    "id": "org.bukkit.inventory.meta.LeatherArmorMeta#getColor()",
    "class": "org.bukkit.inventory.meta.LeatherArmorMeta",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Get the time in ticks this firework will exist until it is detonated.",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "getMaxLife",
    "id": "org.bukkit.entity.Firework#getMaxLife()",
    "class": "org.bukkit.entity.Firework",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_GHAST_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_GHAST_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "DAMAGE_RESISTED",
    "id": "org.bukkit.Statistic#DAMAGE_RESISTED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the plugin manager for interfacing with plugins.",
    "static": true,
    "method": "getPluginManager",
    "id": "org.bukkit.Bukkit#getPluginManager()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.plugin.PluginManager"
  },
  {
    "static": true,
    "field": "ENTITY_TROPICAL_FISH_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_TROPICAL_FISH_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["MerchantRecipe"],
    "param-types": ["org.bukkit.inventory.MerchantRecipe"],
    "method": "getIngredients",
    "id": "org.bukkit.inventory.MerchantRecipe#getIngredients()",
    "class": "org.bukkit.inventory.MerchantRecipe",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_MAGMA_CUBE",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_MAGMA_CUBE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Entity is standing normally.",
    "static": true,
    "field": "STANDING",
    "id": "org.bukkit.entity.Pose#STANDING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_HOE",
    "id": "org.bukkit.Material#LEGACY_STONE_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the reason for the change.",
    "method": "getReason",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent",
    "return": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason"
  },
  {
    "descr": "Gets the generation of the book.\\n\\nPlugins should check that hasGeneration() returns true before calling\\nthis method.",
    "param-names": ["BookMeta"],
    "param-types": ["org.bukkit.inventory.meta.BookMeta"],
    "method": "getGeneration",
    "id": "org.bukkit.inventory.meta.BookMeta#getGeneration()",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation"
  },
  {
    "descr": "Get the clear weather duration.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getClearWeatherDuration",
    "id": "org.bukkit.World#getClearWeatherDuration()",
    "class": "org.bukkit.World",
    "return": "int"
  },
  {
    "descr": "Gets if this EntityType is enabled by feature in a world.",
    "param-names": [
      "EntityType",
      "World"
    ],
    "param-types": [
      "org.bukkit.entity.EntityType",
      "org.bukkit.World"
    ],
    "method": "isEnabledByFeature",
    "id": "org.bukkit.entity.EntityType#isEnabledByFeature(org.bukkit.World)",
    "class": "org.bukkit.entity.EntityType",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "FLASH",
    "id": "org.bukkit.Particle#FLASH",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Get the player which owns the skull. This player may appear as the\\ntexture depending on skull type.",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "getOwningPlayer",
    "id": "org.bukkit.block.Skull#getOwningPlayer()",
    "class": "org.bukkit.block.Skull",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "descr": "The X position of the advancement in the advancement screen.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "getX",
    "id": "org.bukkit.advancement.AdvancementDisplay#getX()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "float"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.BigDripleaf.Tilt#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.BigDripleaf.Tilt",
    "return": "org.bukkit.block.data.type.BigDripleaf.Tilt"
  },
  {
    "static": true,
    "field": "CROUCH_ONE_CM",
    "id": "org.bukkit.Statistic#CROUCH_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the current agelock.",
    "param-names": ["Breedable"],
    "param-types": ["org.bukkit.entity.Breedable"],
    "method": "getAgeLock",
    "id": "org.bukkit.entity.Breedable#getAgeLock()",
    "class": "org.bukkit.entity.Breedable",
    "return": "boolean"
  },
  {
    "descr": "Player has the hunger potion effect",
    "static": true,
    "field": "HUNGER_EFFECT",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason#HUNGER_EFFECT",
    "class": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason",
    "return": "org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "CYAN_SHULKER_BOX",
    "id": "org.bukkit.Material#CYAN_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Play a sound for a player at the location of the entity.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "Player",
      "Entity",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.entity.Entity",
      "java.lang.String",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.entity.Entity,java.lang.String,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "BLOCK_LADDER_BREAK",
    "id": "org.bukkit.Sound#BLOCK_LADDER_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Converts a raw slot ID into its local slot ID into whichever of the two\\ninventories the slot points to.\\n\\nIf the raw slot refers to the upper inventory, it will be returned\\nunchanged and thus be suitable for getTopInventory().getItem(); if it\\nrefers to the lower inventory, the output will differ from the input\\nand be suitable for getBottomInventory().getItem().",
    "param-names": [
      "InventoryView",
      "Raw Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "int"
    ],
    "method": "convertSlot",
    "id": "org.bukkit.inventory.InventoryView#convertSlot(int)",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "int"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerTeleportEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTeleportEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the chance of the item being dropped upon this frame's destruction.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": ["ItemFrame"],
    "param-types": ["org.bukkit.entity.ItemFrame"],
    "method": "getItemDropChance",
    "id": "org.bukkit.entity.ItemFrame#getItemDropChance()",
    "class": "org.bukkit.entity.ItemFrame",
    "return": "float"
  },
  {
    "static": true,
    "field": "ENTITY_RABBIT_HURT",
    "id": "org.bukkit.Sound#ENTITY_RABBIT_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the reason for the targeting",
    "method": "getReason",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getReason()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "This method sets if the particle effect will be shown.\\n\\nThis does not change the experience created.",
    "param-names": ["Show Effect"],
    "param-types": ["boolean"],
    "method": "setShowEffect",
    "id": "org.bukkit.event.entity.ExpBottleEvent#setShowEffect(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent"
  },
  {
    "descr": "Sets the value of the 'bloom' property.",
    "param-names": [
      "SculkCatalyst",
      "Bloom"
    ],
    "param-types": [
      "org.bukkit.block.data.type.SculkCatalyst",
      "boolean"
    ],
    "method": "setBloom",
    "id": "org.bukkit.block.data.type.SculkCatalyst#setBloom(boolean)",
    "class": "org.bukkit.block.data.type.SculkCatalyst"
  },
  {
    "static": true,
    "field": "BLOCK_MUD_STEP",
    "id": "org.bukkit.Sound#BLOCK_MUD_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "boolean"
  },
  {
    "descr": "Fireballs fly straight and do not take setVelocity(...) well.",
    "param-names": [
      "Fireball",
      "Direction"
    ],
    "param-types": [
      "org.bukkit.entity.Fireball",
      "org.bukkit.util.Vector"
    ],
    "method": "setDirection",
    "id": "org.bukkit.entity.Fireball#setDirection(org.bukkit.util.Vector)",
    "class": "org.bukkit.entity.Fireball"
  },
  {
    "descr": "An experience orb.",
    "static": true,
    "field": "EXPERIENCE_ORB",
    "id": "org.bukkit.entity.EntityType#EXPERIENCE_ORB",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Axolotl.Variant#values()",
    "class": "org.bukkit.entity.Axolotl.Variant",
    "return": "org.bukkit.entity.Axolotl.Variant[]"
  },
  {
    "descr": "Record the last EntityDamageEvent inflicted on this entity",
    "param-names": [
      "Entity",
      "Event"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.event.entity.EntityDamageEvent"
    ],
    "method": "setLastDamageCause",
    "id": "org.bukkit.entity.Entity#setLastDamageCause(org.bukkit.event.entity.EntityDamageEvent)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Creates a new WorldCreator for the given world name",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "name",
    "id": "org.bukkit.WorldCreator#name(java.lang.String)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockFadeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ARMOR_STAND_HIT",
    "id": "org.bukkit.Sound#ENTITY_ARMOR_STAND_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Sapling",
    "static": true,
    "field": "ACACIA_SAPLING",
    "id": "org.bukkit.Material#ACACIA_SAPLING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ORANGE_TULIP",
    "id": "org.bukkit.Material#ORANGE_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Dragon is normally played when a Dragon Head is on top of the note block.",
    "static": true,
    "field": "DRAGON",
    "id": "org.bukkit.Instrument#DRAGON",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "descr": "Swamp huts (also known as witch huts) generate in swamp biomes and have\\nthe ability to spawn witches.",
    "static": true,
    "field": "SWAMP_HUT",
    "id": "org.bukkit.StructureType#SWAMP_HUT",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_HURT",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a minecart's damage.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getDamage",
    "id": "org.bukkit.entity.Minecart#getDamage()",
    "class": "org.bukkit.entity.Minecart",
    "return": "double"
  },
  {
    "static": true,
    "field": "SPRUCE_PLANKS",
    "id": "org.bukkit.Material#SPRUCE_PLANKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "SOUTH_EAST",
    "id": "org.bukkit.block.BlockFace#SOUTH_EAST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "FALLING_OBSIDIAN_TEAR",
    "id": "org.bukkit.Particle#FALLING_OBSIDIAN_TEAR",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Set the pig zombie's current anger level.",
    "param-names": [
      "PigZombie",
      "Level"
    ],
    "param-types": [
      "org.bukkit.entity.PigZombie",
      "int"
    ],
    "method": "setAnger",
    "id": "org.bukkit.entity.PigZombie#setAnger(int)",
    "class": "org.bukkit.entity.PigZombie"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_BRICKS_STEP",
    "id": "org.bukkit.Sound#BLOCK_NETHER_BRICKS_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Disallows the player from logging in, with the given reason",
    "param-names": [
      "Result",
      "Message"
    ],
    "param-types": [
      "org.bukkit.event.player.PlayerPreLoginEvent.Result",
      "java.lang.String"
    ],
    "method": "disallow",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#disallow(org.bukkit.event.player.PlayerPreLoginEvent.Result,java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "DONKEY",
    "id": "org.bukkit.loot.LootTables#DONKEY",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Evoker.Spell#values()",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell[]"
  },
  {
    "descr": "Open a Sign for editing by the Player.\\nThe Sign must be placed in the same world as the player.",
    "param-names": [
      "Player",
      "Sign"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.block.Sign"
    ],
    "method": "openSign",
    "id": "org.bukkit.entity.Player#openSign(org.bukkit.block.Sign)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Get (or create) a new Criteria by its name.",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "create",
    "id": "org.bukkit.scoreboard.Criteria#create(java.lang.String)",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "SHEEP_BROWN",
    "id": "org.bukkit.loot.LootTables#SHEEP_BROWN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the y-coordinate of this block state.",
    "param-names": ["BlockState"],
    "param-types": ["org.bukkit.block.BlockState"],
    "method": "getY",
    "id": "org.bukkit.block.BlockState#getY()",
    "class": "org.bukkit.block.BlockState",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_EXPLODE",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_EXPLODE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "WOLF_SPAWN_EGG",
    "id": "org.bukkit.Material#WOLF_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getWorld",
    "id": "org.bukkit.block.DoubleChest#getWorld()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntitySpellCastEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpellCastEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "CRIMSON_DOOR",
    "id": "org.bukkit.Material#CRIMSON_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.SheepDyeWoolEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.SheepDyeWoolEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_WANDERING_TRADER_HURT",
    "id": "org.bukkit.Sound#ENTITY_WANDERING_TRADER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "GRAY_CONCRETE_POWDER",
    "id": "org.bukkit.Material#GRAY_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the maximum amount of damage that can be inflicted upon entities when\\nthis falling block lands on them.",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "getMaxDamage",
    "id": "org.bukkit.entity.FallingBlock#getMaxDamage()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "int"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the current recipe formed on the smithing table, if any.",
    "param-names": ["SmithingInventory"],
    "param-types": ["org.bukkit.inventory.SmithingInventory"],
    "method": "getRecipe",
    "id": "org.bukkit.inventory.SmithingInventory#getRecipe()",
    "class": "org.bukkit.inventory.SmithingInventory",
    "return": "org.bukkit.inventory.Recipe"
  },
  {
    "descr": "When a player has successfully caught an entity. This refers to any\\nalready spawned entity in the world that has been hooked directly by\\nthe rod.",
    "static": true,
    "field": "CAUGHT_ENTITY",
    "id": "org.bukkit.event.player.PlayerFishEvent.State#CAUGHT_ENTITY",
    "class": "org.bukkit.event.player.PlayerFishEvent.State",
    "return": "org.bukkit.event.player.PlayerFishEvent.State"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.PrepareGrindstoneEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareGrindstoneEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the Merchant associated with this inventory.",
    "param-names": ["MerchantInventory"],
    "param-types": ["org.bukkit.inventory.MerchantInventory"],
    "method": "getMerchant",
    "id": "org.bukkit.inventory.MerchantInventory#getMerchant()",
    "class": "org.bukkit.inventory.MerchantInventory",
    "return": "org.bukkit.inventory.Merchant"
  },
  {
    "descr": "Gets the type of coal with the given data value",
    "param-names": ["Data"],
    "static": true,
    "param-types": ["byte"],
    "method": "getByData",
    "id": "org.bukkit.CoalType#getByData(byte)",
    "class": "org.bukkit.CoalType",
    "return": "org.bukkit.CoalType"
  },
  {
    "static": true,
    "field": "CHEST_MINECART",
    "id": "org.bukkit.Material#CHEST_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "PIGLIN_HEAD",
    "id": "org.bukkit.Material#PIGLIN_HEAD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_CYAN_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#LEGACY_CYAN_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the default value of the Attribute attached to this instance.",
    "param-names": ["AttributeInstance"],
    "param-types": ["org.bukkit.attribute.AttributeInstance"],
    "method": "getDefaultValue",
    "id": "org.bukkit.attribute.AttributeInstance#getDefaultValue()",
    "class": "org.bukkit.attribute.AttributeInstance",
    "return": "double"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LIGHT_GRAY_DYE",
    "id": "org.bukkit.Material#LIGHT_GRAY_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the reason this respawn event was called.",
    "method": "getRespawnReason",
    "id": "org.bukkit.event.player.PlayerRespawnEvent#getRespawnReason()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRespawnEvent",
    "return": "org.bukkit.event.player.PlayerRespawnEvent.RespawnReason"
  },
  {
    "descr": "The sound played when a chorus flower grows",
    "static": true,
    "field": "CHORUS_FLOWER_GROW",
    "id": "org.bukkit.Effect#CHORUS_FLOWER_GROW",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "MUSIC_GAME",
    "id": "org.bukkit.Sound#MUSIC_GAME",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets whether the server should attempt to create a destination portal or\\nnot.",
    "param-names": ["Can Create Portal"],
    "param-types": ["boolean"],
    "method": "setCanCreatePortal",
    "id": "org.bukkit.event.player.PlayerPortalEvent#setCanCreatePortal(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "GRAY_WALL_BANNER",
    "id": "org.bukkit.Material#GRAY_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WHITE_CIRCLE",
    "id": "org.bukkit.map.MapCursor.Type#WHITE_CIRCLE",
    "class": "org.bukkit.map.MapCursor.Type",
    "return": "org.bukkit.map.MapCursor.Type"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "BONE_BLOCK",
    "id": "org.bukkit.Material#BONE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.ServerLoadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.ServerLoadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "OCELOT_SPAWN_EGG",
    "id": "org.bukkit.Material#OCELOT_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason#values()",
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason",
    "return": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason[]"
  },
  {
    "static": true,
    "field": "EXPLOSION_NORMAL",
    "id": "org.bukkit.Particle#EXPLOSION_NORMAL",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the cause of this lightning strike.",
    "method": "getCause",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.SoundCategory#values()",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory[]"
  },
  {
    "descr": "Overwrites the intensity for a given entity",
    "param-names": [
      "Entity",
      "Intensity"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "double"
    ],
    "method": "setIntensity",
    "id": "org.bukkit.event.entity.PotionSplashEvent#setIntensity(org.bukkit.entity.LivingEntity,double)",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent"
  },
  {
    "static": true,
    "field": "GREEN_CONCRETE",
    "id": "org.bukkit.Material#GREEN_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerSwapHandItemsEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSwapHandItemsEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Deals the given amount of damage to this entity, from a specified\\nentity.",
    "param-names": [
      "Damageable",
      "Amount",
      "Source"
    ],
    "param-types": [
      "org.bukkit.entity.Damageable",
      "double",
      "org.bukkit.entity.Entity"
    ],
    "method": "damage",
    "id": "org.bukkit.entity.Damageable#damage(double,org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Damageable"
  },
  {
    "descr": "The arrow cannot be picked up.",
    "static": true,
    "field": "DISALLOWED",
    "id": "org.bukkit.entity.AbstractArrow.PickupStatus#DISALLOWED",
    "class": "org.bukkit.entity.AbstractArrow.PickupStatus",
    "return": "org.bukkit.entity.AbstractArrow.PickupStatus"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "CRIMSON_STEM",
    "id": "org.bukkit.Material#CRIMSON_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_BEETROOT_BLOCK",
    "id": "org.bukkit.Material#LEGACY_BEETROOT_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DIAMOND",
    "id": "org.bukkit.Material#DIAMOND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the current type of this villager.",
    "param-names": ["Villager"],
    "param-types": ["org.bukkit.entity.Villager"],
    "method": "getVillagerType",
    "id": "org.bukkit.entity.Villager#getVillagerType()",
    "class": "org.bukkit.entity.Villager",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Launches a Projectile from the ProjectileSource.",
    "param-names": [
      "ProjectileSource",
      "Projectile"
    ],
    "param-types": [
      "org.bukkit.projectiles.ProjectileSource",
      "java.lang.Class"
    ],
    "method": "launchProjectile",
    "id": "org.bukkit.projectiles.ProjectileSource#<T>launchProjectile(java.lang.Class<? extends T>)",
    "class": "org.bukkit.projectiles.ProjectileSource",
    "return": "org.bukkit.entity.Projectile"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Note.Tone#valueOf(java.lang.String)",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_BURN",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_BURN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "INTERACT_WITH_CARTOGRAPHY_TABLE",
    "id": "org.bukkit.Statistic#INTERACT_WITH_CARTOGRAPHY_TABLE",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_BEE_LOOP",
    "id": "org.bukkit.Sound#ENTITY_BEE_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Allows the Enchantment to be placed on armor",
    "static": true,
    "field": "ARMOR",
    "id": "org.bukkit.enchantments.EnchantmentTarget#ARMOR",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Returns the block that damaged the player.",
    "method": "getDamager",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getDamager()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "field": "UNDERWATER_RUIN_BIG",
    "id": "org.bukkit.loot.LootTables#UNDERWATER_RUIN_BIG",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Render a map and send it to the player in its entirety. This may be\\nused when streaming the map in the normal manner is not desirable.",
    "param-names": [
      "Player",
      "Map"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.map.MapView"
    ],
    "method": "sendMap",
    "id": "org.bukkit.entity.Player#sendMap(org.bukkit.map.MapView)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Removes all custom potion effects from this suspicious stew.",
    "param-names": ["SuspiciousStewMeta"],
    "param-types": ["org.bukkit.inventory.meta.SuspiciousStewMeta"],
    "method": "clearCustomEffects",
    "id": "org.bukkit.inventory.meta.SuspiciousStewMeta#clearCustomEffects()",
    "class": "org.bukkit.inventory.meta.SuspiciousStewMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets the potion from its name id.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "getNameId",
    "id": "org.bukkit.potion.Potion#getNameId()",
    "class": "org.bukkit.potion.Potion",
    "return": "int"
  },
  {
    "static": true,
    "field": "RESONATE_12",
    "id": "org.bukkit.GameEvent#RESONATE_12",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "LEGACY_DEAD_BUSH",
    "id": "org.bukkit.Material#LEGACY_DEAD_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns a list of items which would drop by destroying this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getDrops",
    "id": "org.bukkit.block.Block#getDrops()",
    "class": "org.bukkit.block.Block",
    "return": "java.util.Collection"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.CampfireStartEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.CampfireStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "RED_WOOL",
    "id": "org.bukkit.Material#RED_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Teleports this entity to the given location. If this entity is riding a\\nvehicle, it will be dismounted prior to teleportation.",
    "param-names": [
      "Entity",
      "Location",
      "Cause"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "org.bukkit.Location",
      "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
    ],
    "method": "teleport",
    "id": "org.bukkit.entity.Entity#teleport(org.bukkit.Location,org.bukkit.event.player.PlayerTeleportEvent.TeleportCause)",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_EMERGE",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_EMERGE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent"
  },
  {
    "descr": "Expands this bounding box by the given values in the corresponding\\ndirections.\\n\\nNegative values will shrink the bounding box in the corresponding\\ndirection. Shrinking will be limited to the point where the affected\\nopposite faces would meet if the they shrank at uniform speeds.",
    "param-names": [
      "BoundingBox",
      "Negative X",
      "Negative Y",
      "Negative Z",
      "Positive X",
      "Positive Y",
      "Positive Z"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "double",
      "double",
      "double",
      "double",
      "double",
      "double"
    ],
    "method": "expand",
    "id": "org.bukkit.util.BoundingBox#expand(double,double,double,double,double,double)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "ENTITY_GHAST_SCREAM",
    "id": "org.bukkit.Sound#ENTITY_GHAST_SCREAM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_GILDED_BLACKSTONE_STEP",
    "id": "org.bukkit.Sound#BLOCK_GILDED_BLACKSTONE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the player that this message will display as, or command will be\\nexecuted as",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "setPlayer",
    "id": "org.bukkit.event.player.PlayerChatEvent#setPlayer(org.bukkit.entity.Player)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent"
  },
  {
    "static": true,
    "field": "ENTITY_PLAYER_HURT_FREEZE",
    "id": "org.bukkit.Sound#ENTITY_PLAYER_HURT_FREEZE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_NUGGET",
    "id": "org.bukkit.Material#LEGACY_GOLD_NUGGET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.inventory.MainHand#values()",
    "class": "org.bukkit.inventory.MainHand",
    "return": "org.bukkit.inventory.MainHand[]"
  },
  {
    "descr": "Returns the reaction of the block when moved by a piston",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getPistonMoveReaction",
    "id": "org.bukkit.block.Block#getPistonMoveReaction()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.PistonMoveReaction"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LEGACY_COOKED_CHICKEN",
    "id": "org.bukkit.Material#LEGACY_COOKED_CHICKEN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the y-coordinate of this location",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getY",
    "id": "org.bukkit.Location#getY()",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "static": true,
    "field": "MUD",
    "id": "org.bukkit.Material#MUD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Attempts to make the entity sleep at the given location.\\n\\nThe location must be in the current world and have a bed placed at the\\nlocation. The game may also enforce other requirements such as proximity\\nto bed, monsters, and dimension type if force is not set.",
    "param-names": [
      "HumanEntity",
      "Location",
      "Force"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "org.bukkit.Location",
      "boolean"
    ],
    "method": "sleep",
    "id": "org.bukkit.entity.HumanEntity#sleep(org.bukkit.Location,boolean)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "Gets the associated data value representing this type of coal",
    "param-names": ["CoalType"],
    "param-types": ["org.bukkit.CoalType"],
    "method": "getData",
    "id": "org.bukkit.CoalType#getData()",
    "class": "org.bukkit.CoalType",
    "return": "byte"
  },
  {
    "descr": "Get the name of who created this structure.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getAuthor",
    "id": "org.bukkit.block.Structure#getAuthor()",
    "class": "org.bukkit.block.Structure",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "GRANITE_WALL",
    "id": "org.bukkit.Material#GRANITE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the armor stand's body's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": [
      "ArmorStand",
      "Pose"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "org.bukkit.util.EulerAngle"
    ],
    "method": "setBodyPose",
    "id": "org.bukkit.entity.ArmorStand#setBodyPose(org.bukkit.util.EulerAngle)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent"
  },
  {
    "static": true,
    "field": "HEARTBREAK_POTTERY_SHERD",
    "id": "org.bukkit.Material#HEARTBREAK_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BellRingEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent"
  },
  {
    "descr": "This represents the damage reduction caused by the Resistance potion effect.",
    "static": true,
    "field": "RESISTANCE",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#RESISTANCE",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "descr": "A blast furnace inventory, with a RESULT slot, a CRAFTING slot, and a\\nFUEL slot.",
    "static": true,
    "field": "BLAST_FURNACE",
    "id": "org.bukkit.event.inventory.InventoryType#BLAST_FURNACE",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Gets the PotionEffectType at the specified key",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getByKey",
    "id": "org.bukkit.potion.PotionEffectType#getByKey(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the particle which this cloud will be composed of",
    "param-names": [
      "AreaEffectCloud",
      "Particle",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.Particle",
      "java.lang.Object"
    ],
    "method": "setParticle",
    "id": "org.bukkit.entity.AreaEffectCloud#<T>setParticle(org.bukkit.Particle,T)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "BLACK_SHULKER_BOX",
    "id": "org.bukkit.Material#BLACK_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_RAW_FISH",
    "id": "org.bukkit.Material#LEGACY_RAW_FISH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Check if the pig has a saddle.",
    "param-names": ["Steerable"],
    "param-types": ["org.bukkit.entity.Steerable"],
    "method": "hasSaddle",
    "id": "org.bukkit.entity.Steerable#hasSaddle()",
    "class": "org.bukkit.entity.Steerable",
    "return": "boolean"
  },
  {
    "descr": "Second growth stage",
    "static": true,
    "field": "VERY_SMALL",
    "id": "org.bukkit.CropState#VERY_SMALL",
    "class": "org.bukkit.CropState",
    "return": "org.bukkit.CropState"
  },
  {
    "descr": "This method indicates if the particle effect should be shown.",
    "method": "getShowEffect",
    "id": "org.bukkit.event.entity.ExpBottleEvent#getShowEffect()",
    "event": true,
    "class": "org.bukkit.event.entity.ExpBottleEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the zombie pig that will replace the pig, provided the event is\\nnot cancelled first.",
    "method": "getPigZombie",
    "id": "org.bukkit.event.entity.PigZapEvent#getPigZombie()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.entity.PigZombie"
  },
  {
    "descr": "Gets the burn time for this fuel",
    "method": "getBurnTime",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#getBurnTime()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_PLACE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.ServiceRegisterEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.ServiceRegisterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PigZapEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "STONE_BUTTON",
    "id": "org.bukkit.Material#STONE_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Server art.",
    "static": true,
    "field": "ART",
    "id": "org.bukkit.Registry#ART",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Wall.Height#values()",
    "class": "org.bukkit.block.data.type.Wall.Height",
    "return": "org.bukkit.block.data.type.Wall.Height[]"
  },
  {
    "descr": "Entity is sniffing.",
    "static": true,
    "field": "SNIFFING",
    "id": "org.bukkit.entity.Pose#SNIFFING",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "Play a Sound at the location of the provided entity in the World.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "World",
      "Entity",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.Entity",
      "org.bukkit.Sound",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.entity.Entity,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "BlockData: Farmland",
    "static": true,
    "field": "FARMLAND",
    "id": "org.bukkit.Material#FARMLAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_DIAMOND",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_DIAMOND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Visual effect of a splash potion breaking. Needs potion data value as\\nadditional info.",
    "static": true,
    "field": "POTION_BREAK",
    "id": "org.bukkit.Effect#POTION_BREAK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "BLOCK_GILDED_BLACKSTONE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_GILDED_BLACKSTONE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MARKER",
    "id": "org.bukkit.entity.EntityType#MARKER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the location that this entity moved to",
    "param-names": ["To"],
    "param-types": ["org.bukkit.Location"],
    "method": "setTo",
    "id": "org.bukkit.event.entity.EntityPortalEvent#setTo(org.bukkit.Location)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalEvent"
  },
  {
    "descr": "BlockData: WallSign",
    "static": true,
    "field": "CRIMSON_WALL_SIGN",
    "id": "org.bukkit.Material#CRIMSON_WALL_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_PACKED_ICE",
    "id": "org.bukkit.Material#LEGACY_PACKED_ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "INSTRUMENT_PLAY",
    "id": "org.bukkit.GameEvent#INSTRUMENT_PLAY",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Gets the size of the team",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getSize",
    "id": "org.bukkit.scoreboard.Team#getSize()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "int"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "CRIMSON_BUTTON",
    "id": "org.bukkit.Material#CRIMSON_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Stop the specified sound from playing.",
    "param-names": [
      "Player",
      "Sound",
      "Category"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "org.bukkit.SoundCategory"
    ],
    "method": "stopSound",
    "id": "org.bukkit.entity.Player#stopSound(java.lang.String,org.bukkit.SoundCategory)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "OBSIDIAN",
    "id": "org.bukkit.Material#OBSIDIAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the location at which the entity is spawning.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.EntitySpawnEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.EntitySpawnEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent"
  },
  {
    "descr": "BlockData: Waterlogged",
    "static": true,
    "field": "BUBBLE_CORAL",
    "id": "org.bukkit.Material#BUBBLE_CORAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a mutable list of all LivingEntity LivingEntities to be\\nhighlighted by the bell's resonating. This list can be added to or\\nremoved from to change which entities are highlighted, and may be empty\\nif no entities were resonated as a result of this event.\\n\\nWhile the highlighted entities will change, the particles that display\\nover a resonated entity and their colors will not. This is handled by the\\nclient and cannot be controlled by the server.",
    "method": "getResonatedEntities",
    "id": "org.bukkit.event.block.BellResonateEvent#getResonatedEntities()",
    "event": true,
    "class": "org.bukkit.event.block.BellResonateEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Custom Sound is normally played when a Player Head with the required data is on top of the note block.",
    "static": true,
    "field": "CUSTOM_HEAD",
    "id": "org.bukkit.Instrument#CUSTOM_HEAD",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "LEGACY_HOPPER_MINECART",
    "id": "org.bukkit.Material#LEGACY_HOPPER_MINECART",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "MUD_BRICK_SLAB",
    "id": "org.bukkit.Material#MUD_BRICK_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the integrity of this structure.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getIntegrity",
    "id": "org.bukkit.block.Structure#getIntegrity()",
    "class": "org.bukkit.block.Structure",
    "return": "float"
  },
  {
    "descr": "Nitwit profession. Wears a green apron, cannot trade. Nitwit\\nvillagers do not do anything. They do not have any trades by default.",
    "static": true,
    "field": "NITWIT",
    "id": "org.bukkit.entity.Villager.Profession#NITWIT",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Player's bad omen effect removed to start or increase raid difficult.",
    "static": true,
    "field": "PLAYER_BAD_OMEN_RAID",
    "id": "org.bukkit.EntityEffect#PLAYER_BAD_OMEN_RAID",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ItemDespawnEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ItemDespawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the player's unique ID.",
    "method": "getUniqueId",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getUniqueId()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "java.util.UUID"
  },
  {
    "descr": "Increments automatically when a player kills another player on the gold team.",
    "static": true,
    "field": "TEAM_KILL_GOLD",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_GOLD",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Gets the temperature for the given block coordinates.\\n\\nIt is safe to run this method when the block does not exist, it will\\nnot create the block.\\n\\nThis method will return the raw temperature without adjusting for block\\nheight effects.",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "getTemperature",
    "id": "org.bukkit.World#getTemperature(int,int)",
    "class": "org.bukkit.World",
    "return": "double"
  },
  {
    "descr": "Gets a mutable set of UUIDs of the entities which are exempt from the\\nentity's collidable rule and which's collision with this entity will\\nbehave the opposite of it.\\n\\nThis set can be modified to add or remove exemptions.\\n\\nFor example if collidable is true and an entity is in the exemptions set\\nthen it will not collide with it. Similarly if collidable is false and an\\nentity is in this set then it will still collide with it.\\n\\nNote these exemptions are not (currently) persistent.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getCollidableExemptions",
    "id": "org.bukkit.entity.LivingEntity#getCollidableExemptions()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "java.util.Set"
  },
  {
    "descr": "Get the current recipe formed on the crafting inventory, if any.",
    "param-names": ["CraftingInventory"],
    "param-types": ["org.bukkit.inventory.CraftingInventory"],
    "method": "getRecipe",
    "id": "org.bukkit.inventory.CraftingInventory#getRecipe()",
    "class": "org.bukkit.inventory.CraftingInventory",
    "return": "org.bukkit.inventory.Recipe"
  },
  {
    "descr": "Clears the existing book pages, and sets the book to use the provided\\npages. Maximum 50 pages with 256 characters per page.",
    "param-names": [
      "BookMeta",
      "Pages"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "java.lang.String[]"
    ],
    "method": "setPages",
    "id": "org.bukkit.inventory.meta.BookMeta#setPages(java.lang.String...)",
    "class": "org.bukkit.inventory.meta.BookMeta"
  },
  {
    "descr": "When a zombie gets cured and a villager is spawned.",
    "static": true,
    "field": "CURED",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#CURED",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#values()",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult[]"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockCookEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent"
  },
  {
    "static": true,
    "field": "ENTITY_ARROW_HIT",
    "id": "org.bukkit.Sound#ENTITY_ARROW_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the owner of the skull, if one exists",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "getOwner",
    "id": "org.bukkit.block.Skull#getOwner()",
    "class": "org.bukkit.block.Skull",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Switch",
    "static": true,
    "field": "MANGROVE_BUTTON",
    "id": "org.bukkit.Material#MANGROVE_BUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_DECORATED_POT_SHATTER",
    "id": "org.bukkit.Sound#BLOCK_DECORATED_POT_SHATTER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the value of the memory specified.\\n\\nNote that the value will not be persisted when the specific entity does\\nnot have that value by default.",
    "param-names": [
      "LivingEntity",
      "Memory Key",
      "Memory Value"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.entity.memory.MemoryKey",
      "java.lang.Object"
    ],
    "method": "setMemory",
    "id": "org.bukkit.entity.LivingEntity#<T>setMemory(org.bukkit.entity.memory.MemoryKey<T>,T)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "Increments automatically when a player dies.",
    "static": true,
    "field": "DEATH_COUNT",
    "id": "org.bukkit.scoreboard.Criteria#DEATH_COUNT",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets how much experience is contained within this orb",
    "param-names": [
      "ExperienceOrb",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.ExperienceOrb",
      "int"
    ],
    "method": "setExperience",
    "id": "org.bukkit.entity.ExperienceOrb#setExperience(int)",
    "class": "org.bukkit.entity.ExperienceOrb"
  },
  {
    "descr": "Provides a chance of gaining extra loot when destroying blocks",
    "static": true,
    "field": "LOOT_BONUS_BLOCKS",
    "id": "org.bukkit.enchantments.Enchantment#LOOT_BONUS_BLOCKS",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockSpreadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockSpreadEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BASE",
    "id": "org.bukkit.block.banner.PatternType#BASE",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "static": true,
    "field": "SHEEP_GREEN",
    "id": "org.bukkit.loot.LootTables#SHEEP_GREEN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the level of the enchantment.",
    "param-names": ["EnchantmentOffer"],
    "param-types": ["org.bukkit.enchantments.EnchantmentOffer"],
    "method": "getEnchantmentLevel",
    "id": "org.bukkit.enchantments.EnchantmentOffer#getEnchantmentLevel()",
    "class": "org.bukkit.enchantments.EnchantmentOffer",
    "return": "int"
  },
  {
    "static": true,
    "field": "KEBAB",
    "id": "org.bukkit.Art#KEBAB",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Sets the value of the 'facing' property.",
    "param-names": [
      "Directional",
      "Facing"
    ],
    "param-types": [
      "org.bukkit.block.data.Directional",
      "org.bukkit.block.BlockFace"
    ],
    "method": "setFacing",
    "id": "org.bukkit.block.data.Directional#setFacing(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.block.data.Directional"
  },
  {
    "descr": "BlockData: Furnace",
    "static": true,
    "field": "SMOKER",
    "id": "org.bukkit.Material#SMOKER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the primary colors of the firework effect.",
    "param-names": ["FireworkEffect"],
    "param-types": ["org.bukkit.FireworkEffect"],
    "method": "getColors",
    "id": "org.bukkit.FireworkEffect#getColors()",
    "class": "org.bukkit.FireworkEffect",
    "return": "java.util.List"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "WATER_BREATHING",
    "id": "org.bukkit.potion.PotionType#WATER_BREATHING",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Get the radius around which the spawner will attempt to spawn mobs in.\\n\\nThis area is square, includes the block the spawner is in, and is\\ncentered on the spawner's x,z coordinates - not the spawner itself.\\n\\nIt is 2 blocks high, centered on the spawner's y-coordinate (its bottom);\\nthus allowing mobs to spawn as high as its top surface and as low\\nas 1 block below its bottom surface.\\n\\nDefault value is 4.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getSpawnRange",
    "id": "org.bukkit.block.CreatureSpawner#getSpawnRange()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "static": true,
    "field": "AMBIENT_BASALT_DELTAS_ADDITIONS",
    "id": "org.bukkit.Sound#AMBIENT_BASALT_DELTAS_ADDITIONS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerHideEntityEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerHideEntityEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets if this is a screaming goat.\\nA screaming goat makes screaming sounds and rams more often. They do not\\noffer home loans.",
    "param-names": ["Goat"],
    "param-types": ["org.bukkit.entity.Goat"],
    "method": "isScreaming",
    "id": "org.bukkit.entity.Goat#isScreaming()",
    "class": "org.bukkit.entity.Goat",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_ITEM_FRAME_ADD_ITEM",
    "id": "org.bukkit.Sound#ENTITY_GLOW_ITEM_FRAME_ADD_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the value of the 'can_summon' property.",
    "param-names": ["SculkShrieker"],
    "param-types": ["org.bukkit.block.data.type.SculkShrieker"],
    "method": "isCanSummon",
    "id": "org.bukkit.block.data.type.SculkShrieker#isCanSummon()",
    "class": "org.bukkit.block.data.type.SculkShrieker",
    "return": "boolean"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Checks if this bounding box overlaps with the given bounding box.\\n\\nBounding boxes that are only intersecting at the borders are not\\nconsidered overlapping.",
    "param-names": [
      "BoundingBox",
      "Other"
    ],
    "param-types": [
      "org.bukkit.util.BoundingBox",
      "org.bukkit.util.BoundingBox"
    ],
    "method": "overlaps",
    "id": "org.bukkit.util.BoundingBox#overlaps(org.bukkit.util.BoundingBox)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_TADPOLE_FLOP",
    "id": "org.bukkit.Sound#ENTITY_TADPOLE_FLOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.StructureBlock.Mode#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.StructureBlock.Mode",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode"
  },
  {
    "static": true,
    "field": "BUCKET",
    "id": "org.bukkit.Material#BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Play a Sound at the location of the provided entity in the World.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "World",
      "Entity",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.Entity",
      "java.lang.String",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.entity.Entity,java.lang.String,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockBurnEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBurnEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerMoveEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause#valueOf(java.lang.String)",
    "class": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause",
    "return": "org.bukkit.event.block.TNTPrimeEvent.PrimeCause"
  },
  {
    "static": true,
    "field": "EXPOSED_CUT_COPPER",
    "id": "org.bukkit.Material#EXPOSED_CUT_COPPER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "boolean"
  },
  {
    "param-names": [
      "Sheep",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Sheep",
      "boolean"
    ],
    "method": "setSheared",
    "id": "org.bukkit.entity.Sheep#setSheared(boolean)",
    "class": "org.bukkit.entity.Sheep"
  },
  {
    "descr": "Uses BlockData as DataType",
    "static": true,
    "field": "FALLING_DUST",
    "id": "org.bukkit.Particle#FALLING_DUST",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "BLOCK_IRON_TRAPDOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_IRON_TRAPDOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for getting the faced Block.",
    "method": "getToBlock",
    "id": "org.bukkit.event.block.BlockFromToEvent#getToBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFromToEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockDispenseEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "When the Cause is missing.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#UNKNOWN",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "static": true,
    "field": "IRON_ORE",
    "id": "org.bukkit.Material#IRON_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_HURT",
    "id": "org.bukkit.Sound#ENTITY_HORSE_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the DragonBattle associated with this world.\\nIf this world's environment is not Environment#THE_END, null will\\nbe returned.\\n\\nIf an end world, a dragon battle instance will be returned regardless of\\nwhether or not a dragon is present in the world or a fight sequence has\\nbeen activated. The dragon battle instance acts as a state holder.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getEnderDragonBattle",
    "id": "org.bukkit.World#getEnderDragonBattle()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.boss.DragonBattle"
  },
  {
    "static": true,
    "field": "VOICE",
    "id": "org.bukkit.SoundCategory#VOICE",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "descr": "Sets the Powered status of this Creeper",
    "param-names": [
      "Creeper",
      "Value"
    ],
    "param-types": [
      "org.bukkit.entity.Creeper",
      "boolean"
    ],
    "method": "setPowered",
    "id": "org.bukkit.entity.Creeper#setPowered(boolean)",
    "class": "org.bukkit.entity.Creeper"
  },
  {
    "static": true,
    "field": "CRACKED_DEEPSLATE_BRICKS",
    "id": "org.bukkit.Material#CRACKED_DEEPSLATE_BRICKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the BlockData that we are trying to place.",
    "method": "getBlockData",
    "id": "org.bukkit.event.block.BlockCanBuildEvent#getBlockData()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCanBuildEvent",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockDamageEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "TIPPED_ARROW",
    "id": "org.bukkit.Material#TIPPED_ARROW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_WHITE_TULIP",
    "id": "org.bukkit.Material#POTTED_WHITE_TULIP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_SWORD",
    "id": "org.bukkit.Material#LEGACY_GOLD_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get a painting by its unique name\\n\\nThis ignores underscores and capitalization",
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "getByName",
    "id": "org.bukkit.Art#getByName(java.lang.String)",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Sets the new border center.",
    "param-names": [
      "WorldBorder",
      "Location"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "org.bukkit.Location"
    ],
    "method": "setCenter",
    "id": "org.bukkit.WorldBorder#setCenter(org.bukkit.Location)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_MILK",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_MILK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the yaw of this location, measured in degrees.\\n\\nA yaw of 0 or 360 represents the positive z direction.\\nA yaw of 180 represents the negative z direction.\\nA yaw of 90 represents the negative x direction.\\nA yaw of 270 represents the positive x direction.\\n\\nIncreasing yaw values are the equivalent of turning to your\\nright-facing, increasing the scale of the next respective axis, and\\ndecreasing the scale of the previous axis.",
    "param-names": [
      "Location",
      "Yaw"
    ],
    "param-types": [
      "org.bukkit.Location",
      "float"
    ],
    "method": "setYaw",
    "id": "org.bukkit.Location#setYaw(float)",
    "class": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "BLOCK_PISTON_EXTEND",
    "id": "org.bukkit.Sound#BLOCK_PISTON_EXTEND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Dispatches a command on this server, and executes it if found.",
    "param-names": [
      "Sender",
      "Command Line"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.command.CommandSender",
      "java.lang.String"
    ],
    "method": "dispatchCommand",
    "id": "org.bukkit.Bukkit#dispatchCommand(org.bukkit.command.CommandSender,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "Allows selection and saving of a structure.",
    "static": true,
    "field": "SAVE",
    "id": "org.bukkit.block.data.type.StructureBlock.Mode#SAVE",
    "class": "org.bukkit.block.data.type.StructureBlock.Mode",
    "return": "org.bukkit.block.data.type.StructureBlock.Mode"
  },
  {
    "static": true,
    "field": "ENTITY_HUSK_HURT",
    "id": "org.bukkit.Sound#ENTITY_HUSK_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the state of the block that will be fading, melting or\\ndisappearing.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.BlockFadeEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Broadcasts the specified message to every user with the given\\npermission name.",
    "param-names": [
      "Message",
      "Permission"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.String"
    ],
    "method": "broadcast",
    "id": "org.bukkit.Bukkit#broadcast(java.lang.String,java.lang.String)",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "GREEN_DYE",
    "id": "org.bukkit.Material#GREEN_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the jump strength of this horse.\\n\\nJump strength defines how high the horse can jump. A higher jump strength\\nincreases how high a jump will go.",
    "param-names": ["AbstractHorse"],
    "param-types": ["org.bukkit.entity.AbstractHorse"],
    "method": "getJumpStrength",
    "id": "org.bukkit.entity.AbstractHorse#getJumpStrength()",
    "class": "org.bukkit.entity.AbstractHorse",
    "return": "double"
  },
  {
    "descr": "Called when a hopper or hopper minecart picks up a dropped item.",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.FluidCollisionMode#valueOf(java.lang.String)",
    "class": "org.bukkit.FluidCollisionMode",
    "return": "org.bukkit.FluidCollisionMode"
  },
  {
    "descr": "Gets the id of this view.",
    "param-names": ["InventoryView.Property"],
    "param-types": ["org.bukkit.inventory.InventoryView.Property"],
    "method": "getId",
    "id": "org.bukkit.inventory.InventoryView.Property#getId()",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "int"
  },
  {
    "descr": "Chain this to the constructor to make the potion a splash potion.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "splash",
    "id": "org.bukkit.potion.Potion#splash()",
    "class": "org.bukkit.potion.Potion",
    "return": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "BLOCK_WART_BLOCK_STEP",
    "id": "org.bukkit.Sound#BLOCK_WART_BLOCK_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check whether this target includes the specified item.",
    "param-names": [
      "EnchantmentTarget",
      "Item"
    ],
    "param-types": [
      "org.bukkit.enchantments.EnchantmentTarget",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "includes",
    "id": "org.bukkit.enchantments.EnchantmentTarget#includes(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_SPRUCE_FENCE_GATE",
    "id": "org.bukkit.Material#LEGACY_SPRUCE_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "spigot",
    "id": "org.bukkit.World#spigot()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.World.Spigot"
  },
  {
    "descr": "Stationary water.",
    "static": true,
    "field": "WATER",
    "id": "org.bukkit.Fluid#WATER",
    "class": "org.bukkit.Fluid",
    "return": "org.bukkit.Fluid"
  },
  {
    "static": true,
    "field": "WHITE_DYE",
    "id": "org.bukkit.Material#WHITE_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityToggleSwimEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleSwimEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Says a message (or runs a command).",
    "param-names": [
      "Player",
      "Msg"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "chat",
    "id": "org.bukkit.entity.Player#chat(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Plays an effect to all players within a given radius around a location.",
    "param-names": [
      "World",
      "Location",
      "Effect",
      "Data",
      "Radius"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Effect",
      "int",
      "int"
    ],
    "method": "playEffect",
    "id": "org.bukkit.World#playEffect(org.bukkit.Location,org.bukkit.Effect,int,int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerQuitEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerQuitEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets if the block should instantly break when damaged by the player.",
    "param-names": ["Bool"],
    "param-types": ["boolean"],
    "method": "setInstaBreak",
    "id": "org.bukkit.event.block.BlockDamageEvent#setInstaBreak(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent"
  },
  {
    "descr": "Removes the given ItemStacks from the inventory.\\n\\nIt will try to remove 'as much as possible' from the types and amounts\\nyou give as arguments.\\n\\nThe returned HashMap contains what it couldn't remove, where the key is\\nthe index of the parameter, and the value is the ItemStack at that\\nindex of the varargs parameter. If all the given ItemStacks are\\nremoved, it will return an empty HashMap.\\n\\nIt is known that in some implementations this method will also set the\\ninputted argument amount to the number of that item not removed from\\nslots.",
    "param-names": [
      "Inventory",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "removeItem",
    "id": "org.bukkit.inventory.Inventory#removeItem(org.bukkit.inventory.ItemStack...)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "java.util.HashMap"
  },
  {
    "descr": "Makes the player perform the given command",
    "param-names": [
      "Player",
      "Command"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "performCommand",
    "id": "org.bukkit.entity.Player#performCommand(java.lang.String)",
    "class": "org.bukkit.entity.Player",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_MOSS_CARPET_FALL",
    "id": "org.bukkit.Sound#BLOCK_MOSS_CARPET_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_CAT_PURREOW",
    "id": "org.bukkit.Sound#ENTITY_CAT_PURREOW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_SCREAMING_RAM_IMPACT",
    "id": "org.bukkit.Sound#ENTITY_GOAT_SCREAMING_RAM_IMPACT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Damage caused by direct exposure to fire\\n\\nDamage: 1",
    "static": true,
    "field": "FIRE",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#FIRE",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "TADPOLE_BUCKET",
    "id": "org.bukkit.Material#TADPOLE_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_GRASS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_GRASS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the location at which the entity is spawning.",
    "method": "getLocation",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#getLocation()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_XYLOPHONE",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_XYLOPHONE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Dripleaf",
    "static": true,
    "field": "BIG_DRIPLEAF_STEM",
    "id": "org.bukkit.Material#BIG_DRIPLEAF_STEM",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SNIFFER_EGG_CRACK",
    "id": "org.bukkit.Sound#BLOCK_SNIFFER_EGG_CRACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the Item picked up by the player.",
    "method": "getItem",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "org.bukkit.entity.Item"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.SignChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.SignChangeEvent",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Choice"],
    "param-types": ["org.bukkit.Material"],
    "id": "org.bukkit.inventory.RecipeChoice.MaterialChoice#MaterialChoice(org.bukkit.Material)",
    "class": "org.bukkit.inventory.RecipeChoice.MaterialChoice"
  },
  {
    "descr": "Set the HurtEntities state of this block.",
    "param-names": [
      "FallingBlock",
      "Hurt Entities"
    ],
    "param-types": [
      "org.bukkit.entity.FallingBlock",
      "boolean"
    ],
    "method": "setHurtEntities",
    "id": "org.bukkit.entity.FallingBlock#setHurtEntities(boolean)",
    "class": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "When the entity is hit by an spectral or tipped arrow.",
    "static": true,
    "field": "ARROW",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause#ARROW",
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the height of the painting, in blocks",
    "param-names": ["Art"],
    "param-types": ["org.bukkit.Art"],
    "method": "getBlockHeight",
    "id": "org.bukkit.Art#getBlockHeight()",
    "class": "org.bukkit.Art",
    "return": "int"
  },
  {
    "descr": "The rail runs flat along the east/west (X) axis.",
    "static": true,
    "field": "EAST_WEST",
    "id": "org.bukkit.block.data.Rail.Shape#EAST_WEST",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent"
  },
  {
    "descr": "Returns the distance this entity has fallen",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getFallDistance",
    "id": "org.bukkit.entity.Entity#getFallDistance()",
    "class": "org.bukkit.entity.Entity",
    "return": "float"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.SandstoneType#values()",
    "class": "org.bukkit.SandstoneType",
    "return": "org.bukkit.SandstoneType[]"
  },
  {
    "descr": "Returns the block this command sender belongs to",
    "param-names": ["BlockCommandSender"],
    "param-types": ["org.bukkit.command.BlockCommandSender"],
    "method": "getBlock",
    "id": "org.bukkit.command.BlockCommandSender#getBlock()",
    "class": "org.bukkit.command.BlockCommandSender",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "This represents the amount of damage being done, also known as the\\nraw EntityDamageEvent#getDamage().",
    "static": true,
    "field": "BASE",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier#BASE",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageModifier"
  },
  {
    "descr": "Returns a collection of PotionEffect that would be applied from\\na potion with the given type.",
    "param-names": [
      "PotionBrewer",
      "Type",
      "Upgraded",
      "Extended"
    ],
    "param-types": [
      "org.bukkit.potion.PotionBrewer",
      "org.bukkit.potion.PotionType",
      "boolean",
      "boolean"
    ],
    "method": "getEffects",
    "id": "org.bukkit.potion.PotionBrewer#getEffects(org.bukkit.potion.PotionType,boolean,boolean)",
    "class": "org.bukkit.potion.PotionBrewer",
    "return": "java.util.Collection"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "COBBLESTONE_STAIRS",
    "id": "org.bukkit.Material#COBBLESTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ILLUSIONER_PREPARE_BLINDNESS",
    "id": "org.bukkit.Sound#ENTITY_ILLUSIONER_PREPARE_BLINDNESS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets an entry's Score for an Objective on this Scoreboard.",
    "param-names": [
      "Objective",
      "Entry"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Objective",
      "java.lang.String"
    ],
    "method": "getScore",
    "id": "org.bukkit.scoreboard.Objective#getScore(java.lang.String)",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "org.bukkit.scoreboard.Score"
  },
  {
    "descr": "Sets the currently displayed player list header for this player.",
    "param-names": [
      "Player",
      "Header"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "setPlayerListHeader",
    "id": "org.bukkit.entity.Player#setPlayerListHeader(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets whether the server needs to send a preview of the chat to the\\nclient.",
    "method": "shouldSendChatPreviews",
    "id": "org.bukkit.event.server.ServerListPingEvent#shouldSendChatPreviews()",
    "event": true,
    "class": "org.bukkit.event.server.ServerListPingEvent",
    "return": "boolean"
  },
  {
    "descr": "Get the previous interacting player.",
    "param-names": ["Interaction.PreviousInteraction"],
    "param-types": ["org.bukkit.entity.Interaction.PreviousInteraction"],
    "method": "getPlayer",
    "id": "org.bukkit.entity.Interaction.PreviousInteraction#getPlayer()",
    "class": "org.bukkit.entity.Interaction.PreviousInteraction",
    "return": "org.bukkit.OfflinePlayer"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Entity that rang the bell (if there was one).",
    "method": "getEntity",
    "id": "org.bukkit.event.block.BellRingEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "DEEP_FROZEN_OCEAN",
    "id": "org.bukkit.block.Biome#DEEP_FROZEN_OCEAN",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerToggleSneakEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSneakEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SNIFFER",
    "id": "org.bukkit.entity.EntityType#SNIFFER",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityEnterLoveModeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterLoveModeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "COBBLESTONE_SLAB",
    "id": "org.bukkit.Material#COBBLESTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the full in-game time on this world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getFullTime",
    "id": "org.bukkit.World#getFullTime()",
    "class": "org.bukkit.World",
    "return": "long"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_DECORATED_POT_PLACE",
    "id": "org.bukkit.Sound#BLOCK_DECORATED_POT_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the amount of ticks that have elapsed since this guardian has initiated\\na laser attack.\\n\\nThis value may or may not be significant depending on whether or not the guardian\\nhas an active target (#getTarget()) and is charging a laser attack\\n(#hasLaser()). This value is not reset after a successful attack nor used\\nin the next and will be reset to the minimum value when the guardian initiates a\\nnew one.",
    "param-names": ["Guardian"],
    "param-types": ["org.bukkit.entity.Guardian"],
    "method": "getLaserTicks",
    "id": "org.bukkit.entity.Guardian#getLaserTicks()",
    "class": "org.bukkit.entity.Guardian",
    "return": "int"
  },
  {
    "descr": "Gets whether the world is hardcore or not.\\nIn a hardcore world the difficulty is locked to hard.",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "isHardcore",
    "id": "org.bukkit.World#isHardcore()",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Set the UsageMode of this structure block.",
    "param-names": [
      "Structure",
      "Mode"
    ],
    "param-types": [
      "org.bukkit.block.Structure",
      "org.bukkit.block.structure.UsageMode"
    ],
    "method": "setUsageMode",
    "id": "org.bukkit.block.Structure#setUsageMode(org.bukkit.block.structure.UsageMode)",
    "class": "org.bukkit.block.Structure"
  },
  {
    "descr": "Called when a block grows naturally in the world.\\n\\nExamples:\\n\\nWheat\\nSugar Cane\\nCactus\\nWatermelon\\nPumpkin\\nTurtle Egg\\n\\n\\nIf a Block Grow event is cancelled, the block will not grow.",
    "event": true,
    "class": "org.bukkit.event.block.BlockGrowEvent"
  },
  {
    "descr": "When the entity's leashholder is more than 10 blocks away",
    "static": true,
    "field": "DISTANCE",
    "id": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason#DISTANCE",
    "class": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason",
    "return": "org.bukkit.event.entity.EntityUnleashEvent.UnleashReason"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_BRUTE_STEP",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_BRUTE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the type of weather the player will see.  When used, the weather\\nstatus of the player is locked until #resetPlayerWeather() is\\nused.",
    "param-names": [
      "Player",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.WeatherType"
    ],
    "method": "setPlayerWeather",
    "id": "org.bukkit.entity.Player#setPlayerWeather(org.bukkit.WeatherType)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Send a block change. This fakes a block change packet for a user at a\\ncertain location. This will not actually change the world in any way.",
    "param-names": [
      "Player",
      "Loc",
      "Block"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "sendBlockChange",
    "id": "org.bukkit.entity.Player#sendBlockChange(org.bukkit.Location,org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Sets the pattern at the specified index",
    "param-names": [
      "Banner",
      "I",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.block.Banner",
      "int",
      "org.bukkit.block.banner.Pattern"
    ],
    "method": "setPattern",
    "id": "org.bukkit.block.Banner#setPattern(int,org.bukkit.block.banner.Pattern)",
    "class": "org.bukkit.block.Banner"
  },
  {
    "descr": "Sets the raw amount of damage caused by the event.\\n\\nFor compatibility this also recalculates the modifiers and scales\\nthem by the difference between the modifier for the previous damage\\nvalue and the new one.",
    "param-names": ["Damage"],
    "param-types": ["double"],
    "method": "setDamage",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#setDamage(double)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent"
  },
  {
    "descr": "Return whether this chunk will be saved to disk.",
    "method": "isSaveChunk",
    "id": "org.bukkit.event.world.ChunkUnloadEvent#isSaveChunk()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkUnloadEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Jukebox"],
    "param-types": ["org.bukkit.block.Jukebox"],
    "method": "getSnapshotInventory",
    "id": "org.bukkit.block.Jukebox#getSnapshotInventory()",
    "class": "org.bukkit.block.Jukebox",
    "return": "org.bukkit.inventory.JukeboxInventory"
  },
  {
    "descr": "Entities that participate in raids. These creatures:\\n\\nAre immune to damage from EvokerFangs.\\nAre ignored by Vindicator vindicators named \"Johnny\".\\nAre hostile to Villager villagers,\\nWanderingTrader wandering traders, IronGolem iron golems\\nand Player players.\\n",
    "static": true,
    "field": "ILLAGER",
    "id": "org.bukkit.entity.EntityCategory#ILLAGER",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "descr": "Get the shape.",
    "param-names": ["ShapedRecipe"],
    "param-types": ["org.bukkit.inventory.ShapedRecipe"],
    "method": "getShape",
    "id": "org.bukkit.inventory.ShapedRecipe#getShape()",
    "class": "org.bukkit.inventory.ShapedRecipe",
    "return": "java.lang.String[]"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Instrument#valueOf(java.lang.String)",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "LANDING_HONEY",
    "id": "org.bukkit.Particle#LANDING_HONEY",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerChatTabCompleteEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatTabCompleteEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Set the maximum distance (squared) a player can be in order for this\\nspawner to be active.\\n\\nSetting this value to less than or equal to 0 will make this spawner\\nalways active (given that there are players online).",
    "param-names": [
      "CreatureSpawner",
      "Required Player Range"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setRequiredPlayerRange",
    "id": "org.bukkit.block.CreatureSpawner#setRequiredPlayerRange(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "Checks for existence of a location name.",
    "param-names": ["MapMeta"],
    "param-types": ["org.bukkit.inventory.meta.MapMeta"],
    "method": "hasLocationName",
    "id": "org.bukkit.inventory.meta.MapMeta#hasLocationName()",
    "class": "org.bukkit.inventory.meta.MapMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_FLOWER_FOREST",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_FLOWER_FOREST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the maximum number of ticks one has to wait for a fish appearing.\\n\\nThe default is 600 ticks (30 seconds).\\nNote that this is before applying lure.",
    "param-names": [
      "FishHook",
      "Max Wait Time"
    ],
    "param-types": [
      "org.bukkit.entity.FishHook",
      "int"
    ],
    "method": "setMaxWaitTime",
    "id": "org.bukkit.entity.FishHook#setMaxWaitTime(int)",
    "class": "org.bukkit.entity.FishHook"
  },
  {
    "descr": "Called when a splash potion hits an area",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.StructureGrowEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.StructureGrowEvent",
    "return": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_STEP",
    "id": "org.bukkit.Sound#ENTITY_HORSE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_SWORD",
    "id": "org.bukkit.Material#LEGACY_STONE_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_SPLASH_POTION",
    "id": "org.bukkit.Material#LEGACY_SPLASH_POTION",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks if this Material is a placable block",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isBlock",
    "id": "org.bukkit.Material#isBlock()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_RABBIT_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_RABBIT_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_SPROUTS_FALL",
    "id": "org.bukkit.Sound#BLOCK_NETHER_SPROUTS_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_ZOGLIN_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_ZOGLIN_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_BUCKET_EMPTY",
    "id": "org.bukkit.Sound#ITEM_BUCKET_EMPTY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_BIG_DRIPLEAF_BREAK",
    "id": "org.bukkit.Sound#BLOCK_BIG_DRIPLEAF_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Check whether or not this guardian is moving.\\n\\nWhile moving, the guardian's spikes are retracted and will not inflict thorns\\ndamage upon entities that attack it. Additionally, a moving guardian cannot\\nattack another entity. If stationary (i.e. this method returns false),\\nthorns damage is guaranteed and the guardian may initiate laser attacks.",
    "param-names": ["Guardian"],
    "param-types": ["org.bukkit.entity.Guardian"],
    "method": "isMoving",
    "id": "org.bukkit.entity.Guardian#isMoving()",
    "class": "org.bukkit.entity.Guardian",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "DRIPSTONE_BLOCK",
    "id": "org.bukkit.Material#DRIPSTONE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "param-names": ["ShapelessRecipe"],
    "param-types": ["org.bukkit.inventory.ShapelessRecipe"],
    "method": "getChoiceList",
    "id": "org.bukkit.inventory.ShapelessRecipe#getChoiceList()",
    "class": "org.bukkit.inventory.ShapelessRecipe",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_FALL",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_EGG_THROW",
    "id": "org.bukkit.Sound#ENTITY_EGG_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_CREEPER_PRIMED",
    "id": "org.bukkit.Sound#ENTITY_CREEPER_PRIMED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_HIT",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_ELDER_GUARDIAN",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_ELDER_GUARDIAN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_FLOWER_POT",
    "id": "org.bukkit.Material#LEGACY_FLOWER_POT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the amount of damage inflicted upon entities multiplied by the distance\\nthat the block had fallen when this falling block lands on them.",
    "param-names": ["FallingBlock"],
    "param-types": ["org.bukkit.entity.FallingBlock"],
    "method": "getDamagePerBlock",
    "id": "org.bukkit.entity.FallingBlock#getDamagePerBlock()",
    "class": "org.bukkit.entity.FallingBlock",
    "return": "float"
  },
  {
    "descr": "Check if the specified flag is present on this item.",
    "param-names": [
      "ItemMeta",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.ItemFlag"
    ],
    "method": "hasItemFlag",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasItemFlag(org.bukkit.inventory.ItemFlag)",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BEE",
    "id": "org.bukkit.loot.LootTables#BEE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "LEGACY_GRASS_PATH",
    "id": "org.bukkit.Material#LEGACY_GRASS_PATH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets whether this mob is aware of its surroundings.\\nUnaware mobs will still move if pushed, attacked, etc. but will not move\\nor perform any actions on their own. Unaware mobs may also have other\\nunspecified behaviours disabled, such as drowning.",
    "param-names": ["Mob"],
    "param-types": ["org.bukkit.entity.Mob"],
    "method": "isAware",
    "id": "org.bukkit.entity.Mob#isAware()",
    "class": "org.bukkit.entity.Mob",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "POLISHED_ANDESITE_STAIRS",
    "id": "org.bukkit.Material#POLISHED_ANDESITE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Loom inventory, with 3 CRAFTING slots, and 1 RESULT slot.",
    "static": true,
    "field": "LOOM",
    "id": "org.bukkit.event.inventory.InventoryType#LOOM",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Called when a player is about to teleport because it is in contact with a\\nportal which will generate an exit portal.\\n\\nFor other entities see org.bukkit.event.entity.EntityPortalEvent",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPortalEvent"
  },
  {
    "descr": "Returns the amplifier of this effect. A higher amplifier means the\\npotion effect happens more often over its duration and in some cases\\nhas more effect on its target.",
    "param-names": ["PotionEffect"],
    "param-types": ["org.bukkit.potion.PotionEffect"],
    "method": "getAmplifier",
    "id": "org.bukkit.potion.PotionEffect#getAmplifier()",
    "class": "org.bukkit.potion.PotionEffect",
    "return": "int"
  },
  {
    "static": true,
    "field": "PONDER",
    "id": "org.bukkit.MusicInstrument#PONDER",
    "class": "org.bukkit.MusicInstrument",
    "return": "org.bukkit.MusicInstrument"
  },
  {
    "descr": "Returns whether gravity applies to this entity.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "hasGravity",
    "id": "org.bukkit.entity.Entity#hasGravity()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Returns the armor stand's right arm's current pose as a\\norg.bukkit.util.EulerAngle.",
    "param-names": ["ArmorStand"],
    "param-types": ["org.bukkit.entity.ArmorStand"],
    "method": "getRightArmPose",
    "id": "org.bukkit.entity.ArmorStand#getRightArmPose()",
    "class": "org.bukkit.entity.ArmorStand",
    "return": "org.bukkit.util.EulerAngle"
  },
  {
    "descr": "Creeper is normally played when a Creeper Head is on top of the note block.",
    "static": true,
    "field": "CREEPER",
    "id": "org.bukkit.Instrument#CREEPER",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "TRAPPED_CHEST_TRIGGERED",
    "id": "org.bukkit.Statistic#TRAPPED_CHEST_TRIGGERED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.CraftItemEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "HEALTH",
    "id": "org.bukkit.scoreboard.Criterias#HEALTH",
    "class": "org.bukkit.scoreboard.Criterias",
    "return": "java.lang.String"
  },
  {
    "descr": "Clicking the right mouse button on the grey area around the inventory.",
    "static": true,
    "field": "WINDOW_BORDER_RIGHT",
    "id": "org.bukkit.event.inventory.ClickType#WINDOW_BORDER_RIGHT",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "EXPLOSION_HUGE",
    "id": "org.bukkit.Particle#EXPLOSION_HUGE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockPistonExtendEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonExtendEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.VillagerReplenishTradeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerReplenishTradeEvent",
    "return": "boolean"
  },
  {
    "descr": "Damage caused by being hit by a damage potion or spell\\n\\nDamage: variable",
    "static": true,
    "field": "MAGIC",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#MAGIC",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Indicates the teleportation was caused by a player exiting a vehicle",
    "static": true,
    "field": "DISMOUNT",
    "id": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause#DISMOUNT",
    "class": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause",
    "return": "org.bukkit.event.player.PlayerTeleportEvent.TeleportCause"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.PotionSplashEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_AXOLOTL_SPLASH",
    "id": "org.bukkit.Sound#ENTITY_AXOLOTL_SPLASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Panda.Gene#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "descr": "Check whether or not this inventory is empty. An inventory is considered\\nto be empty if there are no ItemStacks in any slot of this inventory.",
    "param-names": ["Inventory"],
    "param-types": ["org.bukkit.inventory.Inventory"],
    "method": "isEmpty",
    "id": "org.bukkit.inventory.Inventory#isEmpty()",
    "class": "org.bukkit.inventory.Inventory",
    "return": "boolean"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getZ",
    "id": "org.bukkit.block.DoubleChest#getZ()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "double"
  },
  {
    "descr": "An item resting on the ground.\\n\\nSpawn with World#dropItem(Location, ItemStack) or World#dropItemNaturally(Location, ItemStack)",
    "static": true,
    "field": "DROPPED_ITEM",
    "id": "org.bukkit.entity.EntityType#DROPPED_ITEM",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets how many smaller slimes will spawn on the split",
    "param-names": ["Count"],
    "param-types": ["int"],
    "method": "setCount",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#setCount(int)",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent"
  },
  {
    "descr": "Called when a block is placed by a player.\\n\\nIf a Block Place event is cancelled, the block will not be placed.",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent"
  },
  {
    "descr": "This checks to see if a particular modifier is valid for this event's\\ncaller, such that, #setDamage(DamageModifier, double) will not\\nthrow an UnsupportedOperationException.\\n\\nDamageModifier#BASE is always applicable.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "isApplicable",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#isApplicable(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "GIANT",
    "id": "org.bukkit.loot.LootTables#GIANT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Check whether or not this minecart's fuse has been ignited.",
    "param-names": ["ExplosiveMinecart"],
    "param-types": ["org.bukkit.entity.minecart.ExplosiveMinecart"],
    "method": "isIgnited",
    "id": "org.bukkit.entity.minecart.ExplosiveMinecart#isIgnited()",
    "class": "org.bukkit.entity.minecart.ExplosiveMinecart",
    "return": "boolean"
  },
  {
    "descr": "Sets whether the guardian laser should show or not.\\nA target must be present. If no target is present the laser will not show\\nand the method will return false.",
    "param-names": [
      "Guardian",
      "Activated"
    ],
    "param-types": [
      "org.bukkit.entity.Guardian",
      "boolean"
    ],
    "method": "setLaser",
    "id": "org.bukkit.entity.Guardian#setLaser(boolean)",
    "class": "org.bukkit.entity.Guardian",
    "return": "boolean"
  },
  {
    "descr": "Sets the generator settings of the world that will be created or loaded.\\n\\nCurrently only WorldType#FLAT uses these settings, and expects\\nthem to be in JSON format with a valid biome (1.18.2 and\\nabove) defined. An example valid configuration is as follows:\\n{\"layers\": [{\"block\": \"stone\", \"height\": 1}, {\"block\": \"grass_block\", \"height\": 1}], \"biome\":\"plains\"}",
    "param-names": [
      "WorldCreator",
      "Generator Settings"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "java.lang.String"
    ],
    "method": "generatorSettings",
    "id": "org.bukkit.WorldCreator#generatorSettings(java.lang.String)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityEnterBlockEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityEnterBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "When a nether portal frame and portal is created at the exit of an\\nentered nether portal.",
    "static": true,
    "field": "NETHER_PAIR",
    "id": "org.bukkit.event.world.PortalCreateEvent.CreateReason#NETHER_PAIR",
    "class": "org.bukkit.event.world.PortalCreateEvent.CreateReason",
    "return": "org.bukkit.event.world.PortalCreateEvent.CreateReason"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "PRISMARINE_BRICK_STAIRS",
    "id": "org.bukkit.Material#PRISMARINE_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "UI_TOAST_OUT",
    "id": "org.bukkit.Sound#UI_TOAST_OUT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if this compass is tracking a specific lodestone.\\nIf true the compass will only work if there is a lodestone at the tracked\\nlocation.",
    "param-names": ["CompassMeta"],
    "param-types": ["org.bukkit.inventory.meta.CompassMeta"],
    "method": "isLodestoneTracked",
    "id": "org.bukkit.inventory.meta.CompassMeta#isLodestoneTracked()",
    "class": "org.bukkit.inventory.meta.CompassMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_STONE",
    "id": "org.bukkit.Material#LEGACY_STONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_UNDER_WATER",
    "id": "org.bukkit.Sound#MUSIC_UNDER_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Play a note for a player at a location. This requires a note block\\nat the particular location (as far as the client is concerned). This\\nwill not work without a note block. This will not work with cake.",
    "param-names": [
      "Player",
      "Loc",
      "Instrument",
      "Note"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.Instrument",
      "org.bukkit.Note"
    ],
    "method": "playNote",
    "id": "org.bukkit.entity.Player#playNote(org.bukkit.Location,org.bukkit.Instrument,org.bukkit.Note)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns an immutable list of the items stored in this item.",
    "param-names": ["BundleMeta"],
    "param-types": ["org.bukkit.inventory.meta.BundleMeta"],
    "method": "getItems",
    "id": "org.bukkit.inventory.meta.BundleMeta#getItems()",
    "class": "org.bukkit.inventory.meta.BundleMeta",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: TechnicalPiston",
    "static": true,
    "field": "MOVING_PISTON",
    "id": "org.bukkit.Material#MOVING_PISTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Horse.Color#values()",
    "class": "org.bukkit.entity.Horse.Color",
    "return": "org.bukkit.entity.Horse.Color[]"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.EntityBlockFormEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.EntityBlockFormEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Called when a block fades, melts or disappears based on world conditions\\n\\nExamples:\\n\\nSnow melting due to being near a light source.\\nIce melting due to being near a light source.\\nFire burning out after time, without destroying fuel block.\\nCoral fading to dead coral due to lack of water\\nTurtle Egg bursting when a turtle hatches\\n\\n\\nIf a Block Fade event is cancelled, the block will not fade, melt or\\ndisappear.",
    "event": true,
    "class": "org.bukkit.event.block.BlockFadeEvent"
  },
  {
    "descr": "Checks if this player is currently online",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "isOnline",
    "id": "org.bukkit.OfflinePlayer#isOnline()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BrewingStartEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BrewingStartEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Play a Sound at the provided Location in the World.\\n\\nThis function will fail silently if Location or Sound are null. No sound\\nwill be heard by the players if their clients do not have the respective\\nsound for the value passed.",
    "param-names": [
      "World",
      "Location",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "java.lang.String",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "Sets whether or not the entity gets persisted.",
    "param-names": [
      "Entity",
      "Persistent"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "boolean"
    ],
    "method": "setPersistent",
    "id": "org.bukkit.entity.Entity#setPersistent(boolean)",
    "class": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Returns the set of all MemoryKeys.",
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.memory.MemoryKey#values()",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "java.util.Set"
  },
  {
    "descr": "Sets the generator that will be used to create or load the world.\\n\\nThis may be null, in which case the \"natural\" generator for this\\nenvironment will be used.\\n\\nIf the generator cannot be found for the given name, the natural\\nenvironment generator will be used instead and a warning will be\\nprinted to the specified output",
    "param-names": [
      "WorldCreator",
      "Generator",
      "Output"
    ],
    "param-types": [
      "org.bukkit.WorldCreator",
      "java.lang.String",
      "org.bukkit.command.CommandSender"
    ],
    "method": "generator",
    "id": "org.bukkit.WorldCreator#generator(java.lang.String,org.bukkit.command.CommandSender)",
    "class": "org.bukkit.WorldCreator",
    "return": "org.bukkit.WorldCreator"
  },
  {
    "descr": "Chime is normally played when a note block is on top of a packed ice\\nblock.",
    "static": true,
    "field": "CHIME",
    "id": "org.bukkit.Instrument#CHIME",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "MUSIC_NETHER_WARPED_FOREST",
    "id": "org.bukkit.Sound#MUSIC_NETHER_WARPED_FOREST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the player enchanting the item",
    "method": "getEnchanter",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getEnchanter()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "PRISMARINE_STAIRS",
    "id": "org.bukkit.Material#PRISMARINE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent"
  },
  {
    "descr": "Sets the text alignment for this display.",
    "param-names": [
      "TextDisplay",
      "Alignment"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "org.bukkit.entity.TextDisplay.TextAlignment"
    ],
    "method": "setAlignment",
    "id": "org.bukkit.entity.TextDisplay#setAlignment(org.bukkit.entity.TextDisplay.TextAlignment)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "static": true,
    "field": "ENTITY_PAINTING_PLACE",
    "id": "org.bukkit.Sound#ENTITY_PAINTING_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_STEP_WATER",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_STEP_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SOUL_SOIL",
    "id": "org.bukkit.Material#SOUL_SOIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WASTELAND",
    "id": "org.bukkit.Art#WASTELAND",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "STONE_BRICK_WALL",
    "id": "org.bukkit.Material#STONE_BRICK_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Increases hunger.",
    "static": true,
    "field": "HUNGER",
    "id": "org.bukkit.potion.PotionEffectType#HUNGER",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "PINK_CONCRETE_POWDER",
    "id": "org.bukkit.Material#PINK_CONCRETE_POWDER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHERITE_BLOCK_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHERITE_BLOCK_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Checks if this animal is sitting",
    "param-names": ["Sittable"],
    "param-types": ["org.bukkit.entity.Sittable"],
    "method": "isSitting",
    "id": "org.bukkit.entity.Sittable#isSitting()",
    "class": "org.bukkit.entity.Sittable",
    "return": "boolean"
  },
  {
    "descr": "The cooldown was set by a plugin.",
    "static": true,
    "field": "PLUGIN",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason#PLUGIN",
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason",
    "return": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason"
  },
  {
    "descr": "Get the hand used by the player to unleash the entity.",
    "method": "getHand",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "CUT_RED_SANDSTONE_SLAB",
    "id": "org.bukkit.Material#CUT_RED_SANDSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the item in hand after the event",
    "param-names": ["Item Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setItemStack",
    "id": "org.bukkit.event.player.PlayerBucketFillEvent#setItemStack(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFillEvent"
  },
  {
    "descr": "Sound of a door opening.",
    "static": true,
    "field": "FENCE_GATE_TOGGLE",
    "id": "org.bukkit.Effect#FENCE_GATE_TOGGLE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Gets the current score",
    "param-names": ["Score"],
    "param-types": ["org.bukkit.scoreboard.Score"],
    "method": "getScore",
    "id": "org.bukkit.scoreboard.Score#getScore()",
    "class": "org.bukkit.scoreboard.Score",
    "return": "int"
  },
  {
    "descr": "Gets whether this server allows flying or not.",
    "static": true,
    "method": "getAllowFlight",
    "id": "org.bukkit.Bukkit#getAllowFlight()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_PURPUR_PILLAR",
    "id": "org.bukkit.Material#LEGACY_PURPUR_PILLAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_SONIC_BOOM",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_SONIC_BOOM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the current puff state of this fish (i.e. how inflated it is).",
    "param-names": [
      "PufferFish",
      "State"
    ],
    "param-types": [
      "org.bukkit.entity.PufferFish",
      "int"
    ],
    "method": "setPuffState",
    "id": "org.bukkit.entity.PufferFish#setPuffState(int)",
    "class": "org.bukkit.entity.PufferFish"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.LingeringPotionSplashEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.LingeringPotionSplashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets whether this gene is recessive, i.e. required in both parents to\\npropagate to children.",
    "param-names": ["Panda.Gene"],
    "param-types": ["org.bukkit.entity.Panda.Gene"],
    "method": "isRecessive",
    "id": "org.bukkit.entity.Panda.Gene#isRecessive()",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "AMBIENT_CRIMSON_FOREST_LOOP",
    "id": "org.bukkit.Sound#AMBIENT_CRIMSON_FOREST_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockExpEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerMoveEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_COW_HURT",
    "id": "org.bukkit.Sound#ENTITY_COW_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent"
  },
  {
    "static": true,
    "field": "LEGACY_DIAMOND_HOE",
    "id": "org.bukkit.Material#LEGACY_DIAMOND_HOE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Initialize the map cursor.",
    "param-names": [
      "X",
      "Y",
      "Direction",
      "Type",
      "Visible",
      "Caption"
    ],
    "param-types": [
      "byte",
      "byte",
      "byte",
      "byte",
      "boolean",
      "java.lang.String"
    ],
    "id": "org.bukkit.map.MapCursor#MapCursor(byte,byte,byte,byte,boolean,java.lang.String)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the white team.",
    "static": true,
    "field": "KILLED_BY_TEAM_WHITE",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_WHITE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Retrieves a collection specifying which plugins have tickets for the\\nspecified chunk. This collection is not updated when plugin tickets are\\nadded or removed to the chunk.\\n\\nA plugin ticket will prevent a chunk from unloading until it is\\nexplicitly removed. A plugin instance may only have one ticket per chunk,\\nbut each chunk can have multiple plugin tickets.\\n",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "getPluginChunkTickets",
    "id": "org.bukkit.World#getPluginChunkTickets(int,int)",
    "class": "org.bukkit.World",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "LEGACY_BAKED_POTATO",
    "id": "org.bukkit.Material#LEGACY_BAKED_POTATO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any other reason not covered by the reasons above",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#CUSTOM",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "descr": "Sets the input of this furnace recipe.",
    "param-names": [
      "FurnaceRecipe",
      "Input",
      "Data"
    ],
    "param-types": [
      "org.bukkit.inventory.FurnaceRecipe",
      "org.bukkit.Material",
      "int"
    ],
    "method": "setInput",
    "id": "org.bukkit.inventory.FurnaceRecipe#setInput(org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.FurnaceRecipe",
    "return": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_EAT",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Structure is mirrored front to back.\\n\\nPositive Z to Negative X",
    "static": true,
    "field": "FRONT_BACK",
    "id": "org.bukkit.block.structure.Mirror#FRONT_BACK",
    "class": "org.bukkit.block.structure.Mirror",
    "return": "org.bukkit.block.structure.Mirror"
  },
  {
    "descr": "Get the maximum amount of slots on this block.",
    "param-names": ["ChiseledBookshelf"],
    "param-types": ["org.bukkit.block.data.type.ChiseledBookshelf"],
    "method": "getMaximumOccupiedSlots",
    "id": "org.bukkit.block.data.type.ChiseledBookshelf#getMaximumOccupiedSlots()",
    "class": "org.bukkit.block.data.type.ChiseledBookshelf",
    "return": "int"
  },
  {
    "descr": "Get the Y position of this cursor.",
    "param-names": ["MapCursor"],
    "param-types": ["org.bukkit.map.MapCursor"],
    "method": "getY",
    "id": "org.bukkit.map.MapCursor#getY()",
    "class": "org.bukkit.map.MapCursor",
    "return": "byte"
  },
  {
    "static": true,
    "field": "BLOCK_FUNGUS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_FUNGUS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SOUL_SOIL_HIT",
    "id": "org.bukkit.Sound#BLOCK_SOUL_SOIL_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the value of the 'berries' property.",
    "param-names": [
      "CaveVinesPlant",
      "Berries"
    ],
    "param-types": [
      "org.bukkit.block.data.type.CaveVinesPlant",
      "boolean"
    ],
    "method": "setBerries",
    "id": "org.bukkit.block.data.type.CaveVinesPlant#setBerries(boolean)",
    "class": "org.bukkit.block.data.type.CaveVinesPlant"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Gets the ItemStack currently in the clicked slot.",
    "method": "getCurrentItem",
    "id": "org.bukkit.event.inventory.CraftItemEvent#getCurrentItem()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockCookEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockCookEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the criteria this objective tracks.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getCriteria",
    "id": "org.bukkit.scoreboard.Objective#getCriteria()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PINK_SHULKER_BOX",
    "id": "org.bukkit.Material#PINK_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_CHESTPLATE",
    "id": "org.bukkit.Material#LEGACY_IRON_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BELL_RESONATE",
    "id": "org.bukkit.Sound#BLOCK_BELL_RESONATE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "VILLAGE_SNOWY_HOUSE",
    "id": "org.bukkit.loot.LootTables#VILLAGE_SNOWY_HOUSE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "ARMORER_GIFT",
    "id": "org.bukkit.loot.LootTables#ARMORER_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "RED_SANDSTONE_SLAB",
    "id": "org.bukkit.Material#RED_SANDSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'rotation' property.",
    "param-names": ["Rotatable"],
    "param-types": ["org.bukkit.block.data.Rotatable"],
    "method": "getRotation",
    "id": "org.bukkit.block.data.Rotatable#getRotation()",
    "class": "org.bukkit.block.data.Rotatable",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Saves the players current location, health, inventory, motion, and\\nother information into the username.dat file, in the world/player\\nfolder",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "saveData",
    "id": "org.bukkit.entity.Player#saveData()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Set whether there is a storm. A duration will be set for the new\\ncurrent conditions.\\nThis will implicitly call #setClearWeatherDuration(int) with 0\\nticks to reset the world's clear weather.",
    "param-names": [
      "World",
      "Has Storm"
    ],
    "param-types": [
      "org.bukkit.World",
      "boolean"
    ],
    "method": "setStorm",
    "id": "org.bukkit.World#setStorm(boolean)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "CRIMSON_TRAPDOOR",
    "id": "org.bukkit.Material#CRIMSON_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLAZE",
    "id": "org.bukkit.entity.EntityType#BLAZE",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.inventory.CreativeCategory#valueOf(java.lang.String)",
    "class": "org.bukkit.inventory.CreativeCategory",
    "return": "org.bukkit.inventory.CreativeCategory"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "MAGENTA_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#MAGENTA_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_DEATH_SMALL",
    "id": "org.bukkit.Sound#ENTITY_SLIME_DEATH_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_COMMAND",
    "id": "org.bukkit.Material#LEGACY_COMMAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_BREAK_BLOCK",
    "id": "org.bukkit.Sound#ENTITY_WITHER_BREAK_BLOCK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Gets the name displayed to players for this objective",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getDisplayName",
    "id": "org.bukkit.scoreboard.Objective#getDisplayName()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "java.lang.String"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.PointedDripstone.Thickness#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.PointedDripstone.Thickness",
    "return": "org.bukkit.block.data.type.PointedDripstone.Thickness"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.FireworkExplodeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.FireworkExplodeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.SmithItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "RESONATE_11",
    "id": "org.bukkit.GameEvent#RESONATE_11",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Gets new potion effect of the changed type to be applied.",
    "method": "getNewEffect",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getNewEffect()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "static": true,
    "field": "BLOCK_CHEST_OPEN",
    "id": "org.bukkit.Sound#BLOCK_CHEST_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_DRIPSTONE_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_DRIPSTONE_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.block.BlockMultiPlaceEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_SHULKER_SHOOT",
    "id": "org.bukkit.Sound#ENTITY_SHULKER_SHOOT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.SkullType#values()",
    "class": "org.bukkit.SkullType",
    "return": "org.bukkit.SkullType[]"
  },
  {
    "static": true,
    "field": "SNIFFING",
    "id": "org.bukkit.entity.Sniffer.State#SNIFFING",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "param-names": [
      "Result",
      "Source",
      "Data"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "int"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.inventory.ItemStack,org.bukkit.Material,int)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "static": true,
    "field": "CRYING_OBSIDIAN",
    "id": "org.bukkit.Material#CRYING_OBSIDIAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the entity is now gliding or\\nfalse if the entity stops gliding.",
    "method": "isGliding",
    "id": "org.bukkit.event.entity.EntityToggleGlideEvent#isGliding()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityToggleGlideEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.attribute.AttributeModifier.Operation#valueOf(java.lang.String)",
    "class": "org.bukkit.attribute.AttributeModifier.Operation",
    "return": "org.bukkit.attribute.AttributeModifier.Operation"
  },
  {
    "descr": "Gets the view object itself",
    "method": "getView",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getView()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "org.bukkit.inventory.InventoryView"
  },
  {
    "static": true,
    "field": "COBWEB",
    "id": "org.bukkit.Material#COBWEB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the parent creating this entity.",
    "method": "getMother",
    "id": "org.bukkit.event.entity.EntityBreedEvent#getMother()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreedEvent",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "field": "COD_BUCKET",
    "id": "org.bukkit.Material#COD_BUCKET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Entity is riptiding with a trident.",
    "static": true,
    "field": "SPIN_ATTACK",
    "id": "org.bukkit.entity.Pose#SPIN_ATTACK",
    "class": "org.bukkit.entity.Pose",
    "return": "org.bukkit.entity.Pose"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "GREEN_GLAZED_TERRACOTTA",
    "id": "org.bukkit.Material#GREEN_GLAZED_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "AMBIENT_UNDERWATER_LOOP_ADDITIONS",
    "id": "org.bukkit.Sound#AMBIENT_UNDERWATER_LOOP_ADDITIONS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_WART_BLOCK_HIT",
    "id": "org.bukkit.Sound#BLOCK_WART_BLOCK_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "LIME_CANDLE",
    "id": "org.bukkit.Material#LIME_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "POTTED_BAMBOO",
    "id": "org.bukkit.Material#POTTED_BAMBOO",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SHULKER_SPAWN_EGG",
    "id": "org.bukkit.Material#SHULKER_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets the format to use to display this chat message",
    "param-names": ["Format"],
    "param-types": ["java.lang.String"],
    "method": "setFormat",
    "id": "org.bukkit.event.player.PlayerChatEvent#setFormat(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChatEvent"
  },
  {
    "static": true,
    "field": "BLOCK_CANDLE_STEP",
    "id": "org.bukkit.Sound#BLOCK_CANDLE_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "FERN",
    "id": "org.bukkit.Material#FERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets all the items which will drop when the entity dies",
    "method": "getDrops",
    "id": "org.bukkit.event.entity.PlayerDeathEvent#getDrops()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerDeathEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Never apply this option.",
    "static": true,
    "field": "NEVER",
    "id": "org.bukkit.scoreboard.Team.OptionStatus#NEVER",
    "class": "org.bukkit.scoreboard.Team.OptionStatus",
    "return": "org.bukkit.scoreboard.Team.OptionStatus"
  },
  {
    "static": true,
    "field": "BLOCK_CAMPFIRE_CRACKLE",
    "id": "org.bukkit.Sound#BLOCK_CAMPFIRE_CRACKLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BASTION_TREASURE",
    "id": "org.bukkit.loot.LootTables#BASTION_TREASURE",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "param-names": [
      "Result",
      "Uses",
      "Max Uses",
      "Experience Reward",
      "Villager Experience",
      "Price Multiplier"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemStack",
      "int",
      "int",
      "boolean",
      "int",
      "float"
    ],
    "id": "org.bukkit.inventory.MerchantRecipe#MerchantRecipe(org.bukkit.inventory.ItemStack,int,int,boolean,int,float)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_DECORATED_POT_FALL",
    "id": "org.bukkit.Sound#BLOCK_DECORATED_POT_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "BLACKSTONE_SLAB",
    "id": "org.bukkit.Material#BLACKSTONE_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.vehicle.VehicleDamageEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Removes all scores for a player on this Scoreboard",
    "param-names": [
      "Scoreboard",
      "Player"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Scoreboard",
      "org.bukkit.OfflinePlayer"
    ],
    "method": "resetScores",
    "id": "org.bukkit.scoreboard.Scoreboard#resetScores(org.bukkit.OfflinePlayer)",
    "class": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.server.PluginEnableEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.server.PluginEnableEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the green component",
    "param-names": ["Color"],
    "param-types": ["org.bukkit.Color"],
    "method": "getGreen",
    "id": "org.bukkit.Color#getGreen()",
    "class": "org.bukkit.Color",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_RESPAWN_ANCHOR_DEPLETE",
    "id": "org.bukkit.Sound#BLOCK_RESPAWN_ANCHOR_DEPLETE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the biome that this block resides in",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getBiome",
    "id": "org.bukkit.block.Block#getBiome()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "LEGACY_RECORD_7",
    "id": "org.bukkit.Material#LEGACY_RECORD_7",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_MOOSHROOM_CONVERT",
    "id": "org.bukkit.Sound#ENTITY_MOOSHROOM_CONVERT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ICE_SPIKES",
    "id": "org.bukkit.block.Biome#ICE_SPIKES",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "boolean"
  },
  {
    "descr": "Applies the effects of this potion to the given ItemStack. The\\nItemStack must be a potion.",
    "param-names": [
      "Potion",
      "To"
    ],
    "param-types": [
      "org.bukkit.potion.Potion",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "apply",
    "id": "org.bukkit.potion.Potion#apply(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.potion.Potion"
  },
  {
    "static": true,
    "field": "BIRCH_FOREST",
    "id": "org.bukkit.block.Biome#BIRCH_FOREST",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "BlockData: Wall",
    "static": true,
    "field": "DEEPSLATE_TILE_WALL",
    "id": "org.bukkit.Material#DEEPSLATE_TILE_WALL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockIgniteEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent"
  },
  {
    "static": true,
    "field": "BLOCK_FROGLIGHT_FALL",
    "id": "org.bukkit.Sound#BLOCK_FROGLIGHT_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the type of pattern",
    "param-names": ["Pattern"],
    "param-types": ["org.bukkit.block.banner.Pattern"],
    "method": "getPattern",
    "id": "org.bukkit.block.banner.Pattern#getPattern()",
    "class": "org.bukkit.block.banner.Pattern",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Put the given ItemStack into the leg slot. This does not check if the\\nItemStack is a pair of leggings",
    "param-names": [
      "PlayerInventory",
      "Leggings"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setLeggings",
    "id": "org.bukkit.inventory.PlayerInventory#setLeggings(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "BlockData: TrapDoor",
    "static": true,
    "field": "BIRCH_TRAPDOOR",
    "id": "org.bukkit.Material#BIRCH_TRAPDOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockIgniteEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockIgniteEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_GOAT_DEATH",
    "id": "org.bukkit.Sound#ENTITY_GOAT_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_BUNDLE_DROP_CONTENTS",
    "id": "org.bukkit.Sound#ITEM_BUNDLE_DROP_CONTENTS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the recipe at a certain index of this merchant's trade list.",
    "param-names": [
      "Merchant",
      "I"
    ],
    "param-types": [
      "org.bukkit.inventory.Merchant",
      "int"
    ],
    "method": "getRecipe",
    "id": "org.bukkit.inventory.Merchant#getRecipe(int)",
    "class": "org.bukkit.inventory.Merchant",
    "return": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "static": true,
    "field": "BLOCK_BONE_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_BONE_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Chest.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Chest.Type",
    "return": "org.bukkit.block.data.type.Chest.Type"
  },
  {
    "descr": "Called when an item is put in a slot and the result is calculated.",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#values()",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause[]"
  },
  {
    "descr": "Returns the primary effect set on the beacon",
    "param-names": ["Beacon"],
    "param-types": ["org.bukkit.block.Beacon"],
    "method": "getPrimaryEffect",
    "id": "org.bukkit.block.Beacon#getPrimaryEffect()",
    "class": "org.bukkit.block.Beacon",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Boat.Status#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "static": true,
    "field": "LEGACY_FLINT",
    "id": "org.bukkit.Material#LEGACY_FLINT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the contents of the Brewing Stand.\\nNote: The brewer inventory still holds the items found prior to\\nthe finalization of the brewing process, e.g. the plain water bottles.",
    "method": "getContents",
    "id": "org.bukkit.event.inventory.BrewEvent#getContents()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "org.bukkit.inventory.BrewerInventory"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.vehicle.VehicleEnterEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEnterEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_RAW_BEEF",
    "id": "org.bukkit.Material#LEGACY_RAW_BEEF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.EntityChangeBlockEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityChangeBlockEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Add a fade color to the firework effect.",
    "param-names": [
      "FireworkEffect.Builder",
      "Color"
    ],
    "param-types": [
      "org.bukkit.FireworkEffect.Builder",
      "org.bukkit.Color"
    ],
    "method": "withFade",
    "id": "org.bukkit.FireworkEffect.Builder#withFade(org.bukkit.Color)",
    "class": "org.bukkit.FireworkEffect.Builder",
    "return": "org.bukkit.FireworkEffect.Builder"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent"
  },
  {
    "descr": "Get the living entity on which the armor was dispensed.",
    "method": "getTargetEntity",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getTargetEntity()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "When eg an effect cloud is spawned as a result of a creeper exploding",
    "static": true,
    "field": "EXPLOSION",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#EXPLOSION",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "BEETROOT_SEEDS",
    "id": "org.bukkit.Material#BEETROOT_SEEDS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the entity's current position",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getLocation",
    "id": "org.bukkit.entity.Entity#getLocation()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Block ignition caused by an entity using a fireball.",
    "static": true,
    "field": "FIREBALL",
    "id": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause#FIREBALL",
    "class": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause",
    "return": "org.bukkit.event.block.BlockIgniteEvent.IgniteCause"
  },
  {
    "descr": "How often a random block tick occurs (such as plant growth, leaf decay,\\netc.) per chunk section per game tick. 0 will disable random ticks,\\nhigher numbers will increase random ticks.",
    "static": true,
    "field": "RANDOM_TICK_SPEED",
    "id": "org.bukkit.GameRule#RANDOM_TICK_SPEED",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Get the ArmorTrim.",
    "param-names": ["ArmorMeta"],
    "param-types": ["org.bukkit.inventory.meta.ArmorMeta"],
    "method": "getTrim",
    "id": "org.bukkit.inventory.meta.ArmorMeta#getTrim()",
    "class": "org.bukkit.inventory.meta.ArmorMeta",
    "return": "org.bukkit.inventory.meta.trim.ArmorTrim"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_SPIDER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_SPIDER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Rotates this blockdata by the specified StructureRotation.\\n\\nThis has no effect on blocks that do not have any rotatable states.",
    "param-names": [
      "BlockData",
      "Rotation"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.block.structure.StructureRotation"
    ],
    "method": "rotate",
    "id": "org.bukkit.block.data.BlockData#rotate(org.bukkit.block.structure.StructureRotation)",
    "class": "org.bukkit.block.data.BlockData"
  },
  {
    "descr": "A flying ender pearl.",
    "static": true,
    "field": "ENDER_PEARL",
    "id": "org.bukkit.entity.EntityType#ENDER_PEARL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Creates a new default BlockState for this type of Block, not\\nbound to a location.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "createBlockState",
    "id": "org.bukkit.block.data.BlockData#createBlockState()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "LEGACY_END_ROD",
    "id": "org.bukkit.Material#LEGACY_END_ROD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The sound played when an anvil is used",
    "static": true,
    "field": "ANVIL_USE",
    "id": "org.bukkit.Effect#ANVIL_USE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "ENTITY_LLAMA_STEP",
    "id": "org.bukkit.Sound#ENTITY_LLAMA_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SLIME_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the corresponding hit sound for this group.",
    "param-names": ["SoundGroup"],
    "param-types": ["org.bukkit.SoundGroup"],
    "method": "getHitSound",
    "id": "org.bukkit.SoundGroup#getHitSound()",
    "class": "org.bukkit.SoundGroup",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates a new Color object from an alpha, red, green, and blue",
    "param-names": [
      "Alpha",
      "Red",
      "Green",
      "Blue"
    ],
    "static": true,
    "param-types": [
      "int",
      "int",
      "int",
      "int"
    ],
    "method": "fromARGB",
    "id": "org.bukkit.Color#fromARGB(int,int,int,int)",
    "class": "org.bukkit.Color",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "A flying large fireball, as thrown by a Ghast for example.",
    "static": true,
    "field": "FIREBALL",
    "id": "org.bukkit.entity.EntityType#FIREBALL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the text opacity.",
    "param-names": [
      "TextDisplay",
      "Opacity"
    ],
    "param-types": [
      "org.bukkit.entity.TextDisplay",
      "byte"
    ],
    "method": "setTextOpacity",
    "id": "org.bukkit.entity.TextDisplay#setTextOpacity(byte)",
    "class": "org.bukkit.entity.TextDisplay"
  },
  {
    "descr": "Called when a creature is spawned into a world.\\n\\nIf a Creature Spawn event is cancelled, the creature will not spawn.",
    "event": true,
    "class": "org.bukkit.event.entity.CreatureSpawnEvent"
  },
  {
    "static": true,
    "field": "VEX",
    "id": "org.bukkit.entity.EntityType#VEX",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Get all additional ItemStacks stored in this inventory.\\n\\nNB: What defines an extra slot is up to the implementation, however it\\nwill not be contained within #getStorageContents() or\\n#getArmorContents()",
    "param-names": ["PlayerInventory"],
    "param-types": ["org.bukkit.inventory.PlayerInventory"],
    "method": "getExtraContents",
    "id": "org.bukkit.inventory.PlayerInventory#getExtraContents()",
    "class": "org.bukkit.inventory.PlayerInventory",
    "return": "org.bukkit.inventory.ItemStack[]"
  },
  {
    "descr": "Get this ItemMeta as an NBT string.\\n\\nThis string should not be relied upon as a serializable value. If\\nserialization is desired, the ConfigurationSerializable API\\nshould be used instead.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "getAsString",
    "id": "org.bukkit.inventory.meta.ItemMeta#getAsString()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "BLOCK_ANCIENT_DEBRIS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_ANCIENT_DEBRIS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets if this interaction entity should trigger a response when interacted\\nwith.",
    "param-names": ["Interaction"],
    "param-types": ["org.bukkit.entity.Interaction"],
    "method": "isResponsive",
    "id": "org.bukkit.entity.Interaction#isResponsive()",
    "class": "org.bukkit.entity.Interaction",
    "return": "boolean"
  },
  {
    "descr": "Returns the raid involved with this event.",
    "method": "getRaid",
    "id": "org.bukkit.event.raid.RaidFinishEvent#getRaid()",
    "event": true,
    "class": "org.bukkit.event.raid.RaidFinishEvent",
    "return": "org.bukkit.Raid"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "CHORUS_FRUIT",
    "id": "org.bukkit.Material#CHORUS_FRUIT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the living entity's current maximum no damage ticks.\\n\\nThis is the maximum duration in which the living entity will not take\\ndamage.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getMaximumNoDamageTicks",
    "id": "org.bukkit.entity.LivingEntity#getMaximumNoDamageTicks()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "descr": "Sets the block's animated state to closed even if a player is currently\\nviewing this block.",
    "param-names": ["Lidded"],
    "param-types": ["org.bukkit.block.Lidded"],
    "method": "close",
    "id": "org.bukkit.block.Lidded#close()",
    "class": "org.bukkit.block.Lidded"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "DEAD_TUBE_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#DEAD_TUBE_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TAIGA",
    "id": "org.bukkit.entity.Villager.Type#TAIGA",
    "class": "org.bukkit.entity.Villager.Type",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "static": true,
    "field": "ENTITY_EVOKER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_EVOKER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates explosion at given coordinates with given power and optionally\\nsetting blocks on fire.",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Power",
      "Set Fire"
    ],
    "param-types": [
      "org.bukkit.World",
      "double",
      "double",
      "double",
      "float",
      "boolean"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(double,double,double,float,boolean)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Set wolf to be interested",
    "param-names": [
      "Wolf",
      "Interested"
    ],
    "param-types": [
      "org.bukkit.entity.Wolf",
      "boolean"
    ],
    "method": "setInterested",
    "id": "org.bukkit.entity.Wolf#setInterested(boolean)",
    "class": "org.bukkit.entity.Wolf"
  },
  {
    "static": true,
    "field": "JUNGLE_CHEST_BOAT",
    "id": "org.bukkit.Material#JUNGLE_CHEST_BOAT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "When a player is healed by a potion or spell",
    "static": true,
    "field": "MAGIC",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason#MAGIC",
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason",
    "return": "org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason"
  },
  {
    "static": true,
    "field": "GOLDEN_APPLE",
    "id": "org.bukkit.Material#GOLDEN_APPLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_GRAVEL",
    "id": "org.bukkit.Material#LEGACY_GRAVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns the action type",
    "method": "getAction",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getAction()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.event.block.Action"
  },
  {
    "static": true,
    "field": "LEGACY_DOUBLE_STONE_SLAB2",
    "id": "org.bukkit.Material#LEGACY_DOUBLE_STONE_SLAB2",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "AREA_EFFECT_CLOUD",
    "id": "org.bukkit.entity.EntityType#AREA_EFFECT_CLOUD",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the center location where the raid occurs.",
    "param-names": ["Raid"],
    "param-types": ["org.bukkit.Raid"],
    "method": "getLocation",
    "id": "org.bukkit.Raid#getLocation()",
    "class": "org.bukkit.Raid",
    "return": "org.bukkit.Location"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Sniffer.State#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "static": true,
    "field": "LEGACY_PURPUR_SLAB",
    "id": "org.bukkit.Material#LEGACY_PURPUR_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerBedLeaveEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedLeaveEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the item on the cursor.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCursor",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#setCursor(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent"
  },
  {
    "descr": "Sets the #getYaw() yaw and #getPitch() pitch to point\\nin the direction of the vector.",
    "param-names": [
      "Location",
      "Vector"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.util.Vector"
    ],
    "method": "setDirection",
    "id": "org.bukkit.Location#setDirection(org.bukkit.util.Vector)",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Sheperd profession. Wears a brown robe. Shepherds primarily trade for\\nwool items, and shears.",
    "static": true,
    "field": "SHEPHERD",
    "id": "org.bukkit.entity.Villager.Profession#SHEPHERD",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.inventory.BrewEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "WITCH",
    "id": "org.bukkit.entity.EntityType#WITCH",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "STONE_STAIRS",
    "id": "org.bukkit.Material#STONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The fuel slot in a furnace inventory, or the ingredient slot in a\\nbrewing stand inventory.",
    "static": true,
    "field": "FUEL",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#FUEL",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "static": true,
    "field": "CYAN_STAINED_GLASS",
    "id": "org.bukkit.Material#CYAN_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when the time skips in a world.\\n\\nIf the event is cancelled the time will not change.",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent"
  },
  {
    "descr": "Uses BlockData as DataType",
    "static": true,
    "field": "BLOCK_CRACK",
    "id": "org.bukkit.Particle#BLOCK_CRACK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets if the allay is dancing.",
    "param-names": ["Allay"],
    "param-types": ["org.bukkit.entity.Allay"],
    "method": "isDancing",
    "id": "org.bukkit.entity.Allay#isDancing()",
    "class": "org.bukkit.entity.Allay",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "FIREWORK_STAR",
    "id": "org.bukkit.Material#FIREWORK_STAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "GREEN_CANDLE_CAKE",
    "id": "org.bukkit.Material#GREEN_CANDLE_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the horse's style.\\nStyles determine what kind of markings or patterns a horse has.\\n\\nStyles only apply to horses, not to donkeys, mules, skeleton horses\\nor undead horses.",
    "param-names": ["Horse"],
    "param-types": ["org.bukkit.entity.Horse"],
    "method": "getStyle",
    "id": "org.bukkit.entity.Horse#getStyle()",
    "class": "org.bukkit.entity.Horse",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "descr": "Checks if the Chunk at the specified coordinates is generated",
    "param-names": [
      "World",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "int",
      "int"
    ],
    "method": "isChunkGenerated",
    "id": "org.bukkit.World#isChunkGenerated(int,int)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "HEART_POTTERY_SHERD",
    "id": "org.bukkit.Material#HEART_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_COMPOSTER_FILL_SUCCESS",
    "id": "org.bukkit.Sound#BLOCK_COMPOSTER_FILL_SUCCESS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the level of this potion.",
    "param-names": ["Potion"],
    "param-types": ["org.bukkit.potion.Potion"],
    "method": "getLevel",
    "id": "org.bukkit.potion.Potion#getLevel()",
    "class": "org.bukkit.potion.Potion",
    "return": "int"
  },
  {
    "descr": "The particles shown when a lightning hits a lightning rod or oxidized\\ncopper.\\nData is the axis at which the particle should be shown. If no data is\\nprovided it will show the particles at the block faces.",
    "static": true,
    "field": "ELECTRIC_SPARK",
    "id": "org.bukkit.Effect#ELECTRIC_SPARK",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "BLOCK_IRON_DOOR_CLOSE",
    "id": "org.bukkit.Sound#BLOCK_IRON_DOOR_CLOSE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "LIGHT_GRAY_BANNER",
    "id": "org.bukkit.Material#LIGHT_GRAY_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CORAL_BLOCK_FALL",
    "id": "org.bukkit.Sound#BLOCK_CORAL_BLOCK_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityInteractEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityInteractEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_FALL",
    "id": "org.bukkit.Sound#BLOCK_METAL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns all players viewing this boss bar",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "getPlayers",
    "id": "org.bukkit.boss.BossBar#getPlayers()",
    "class": "org.bukkit.boss.BossBar",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "MINECART",
    "id": "org.bukkit.entity.EntityType#MINECART",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the action to take with the interacted bed.\\n\\norg.bukkit.event.Event.Result#ALLOW will result in the player sleeping, regardless of\\nthe default outcome described by #getBedEnterResult().\\n\\norg.bukkit.event.Event.Result#DENY will prevent the player from sleeping. This has the\\nsame effect as canceling the event via #setCancelled(boolean).\\n\\norg.bukkit.event.Event.Result#DEFAULT will result in the outcome described by\\n#getBedEnterResult().",
    "param-names": ["Use Bed"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setUseBed",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#setUseBed(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.world.WorldSaveEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.world.WorldSaveEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLOCK_STEM_HIT",
    "id": "org.bukkit.Sound#BLOCK_STEM_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Damage caused by committing suicide.\\n\\nNote: This is currently only used by plugins, default commands\\nlike /minecraft:kill use #KILL to damage players.\\n\\nDamage: variable",
    "static": true,
    "field": "SUICIDE",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#SUICIDE",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "All of the items on the clicked slot are moved to the cursor.",
    "static": true,
    "field": "PICKUP_ALL",
    "id": "org.bukkit.event.inventory.InventoryAction#PICKUP_ALL",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.inventory.InventoryOpenEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryOpenEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets whether or not this arrow should be critical.",
    "param-names": [
      "AbstractArrow",
      "Critical"
    ],
    "param-types": [
      "org.bukkit.entity.AbstractArrow",
      "boolean"
    ],
    "method": "setCritical",
    "id": "org.bukkit.entity.AbstractArrow#setCritical(boolean)",
    "class": "org.bukkit.entity.AbstractArrow"
  },
  {
    "static": true,
    "field": "WILD_OCELOT",
    "id": "org.bukkit.entity.Ocelot.Type#WILD_OCELOT",
    "class": "org.bukkit.entity.Ocelot.Type",
    "return": "org.bukkit.entity.Ocelot.Type"
  },
  {
    "descr": "Allow the Enchantment to be placed on tridents.",
    "static": true,
    "field": "TRIDENT",
    "id": "org.bukkit.enchantments.EnchantmentTarget#TRIDENT",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "descr": "Rabbit with pure white fur, blood red horizontal eyes, and is hostile to players.",
    "static": true,
    "field": "THE_KILLER_BUNNY",
    "id": "org.bukkit.entity.Rabbit.Type#THE_KILLER_BUNNY",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "Rotated clockwise 90 degrees.",
    "static": true,
    "field": "CLOCKWISE_90",
    "id": "org.bukkit.block.structure.StructureRotation#CLOCKWISE_90",
    "class": "org.bukkit.block.structure.StructureRotation",
    "return": "org.bukkit.block.structure.StructureRotation"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_EXTINGUISH_FIRE",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_EXTINGUISH_FIRE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Rotates the vector around a given arbitrary axis in 3 dimensional space.\\n\\nRotation will follow the general Right-Hand-Rule, which means rotation\\nwill be counterclockwise when the axis is pointing towards the observer.\\n\\nNote that the vector length will change accordingly to the axis vector\\nlength. If the provided axis is not a unit vector, the rotated vector\\nwill not have its previous length. The scaled length of the resulting\\nvector will be related to the axis vector. If you are not perfectly sure\\nabout the scaling of the vector, use\\nVector#rotateAroundAxis(Vector, double)",
    "param-names": [
      "Vector",
      "Axis",
      "Angle"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector",
      "double"
    ],
    "method": "rotateAroundNonUnitAxis",
    "id": "org.bukkit.util.Vector#rotateAroundNonUnitAxis(org.bukkit.util.Vector,double)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "descr": "Return the radius or yield of this explosive's explosion",
    "param-names": ["Explosive"],
    "param-types": ["org.bukkit.entity.Explosive"],
    "method": "getYield",
    "id": "org.bukkit.entity.Explosive#getYield()",
    "class": "org.bukkit.entity.Explosive",
    "return": "float"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.ArmorStand.LockType#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.ArmorStand.LockType",
    "return": "org.bukkit.entity.ArmorStand.LockType"
  },
  {
    "static": true,
    "field": "STONE",
    "id": "org.bukkit.Material#STONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "COARSE_DIRT",
    "id": "org.bukkit.Material#COARSE_DIRT",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_LIGHTNING_BOLT_THUNDER",
    "id": "org.bukkit.Sound#ENTITY_LIGHTNING_BOLT_THUNDER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ON_LAND",
    "id": "org.bukkit.entity.Boat.Status#ON_LAND",
    "class": "org.bukkit.entity.Boat.Status",
    "return": "org.bukkit.entity.Boat.Status"
  },
  {
    "descr": "Saves the ban entry, overwriting any previous data in the ban list.\\n\\nSaving the ban entry of an unbanned player will cause the player to be\\nbanned once again.",
    "param-names": ["BanEntry"],
    "param-types": ["org.bukkit.BanEntry"],
    "method": "save",
    "id": "org.bukkit.BanEntry#save()",
    "class": "org.bukkit.BanEntry"
  },
  {
    "descr": "Rotated clockwise by 135 degrees",
    "static": true,
    "field": "CLOCKWISE_135",
    "id": "org.bukkit.Rotation#CLOCKWISE_135",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "descr": "Get the left half of this double chest.",
    "param-names": ["DoubleChestInventory"],
    "param-types": ["org.bukkit.inventory.DoubleChestInventory"],
    "method": "getLeftSide",
    "id": "org.bukkit.inventory.DoubleChestInventory#getLeftSide()",
    "class": "org.bukkit.inventory.DoubleChestInventory",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Get the template recipe item.",
    "param-names": ["SmithingTransformRecipe"],
    "param-types": ["org.bukkit.inventory.SmithingTransformRecipe"],
    "method": "getTemplate",
    "id": "org.bukkit.inventory.SmithingTransformRecipe#getTemplate()",
    "class": "org.bukkit.inventory.SmithingTransformRecipe",
    "return": "org.bukkit.inventory.RecipeChoice"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "WHITE_WALL_BANNER",
    "id": "org.bukkit.Material#WHITE_WALL_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MAGMA_CUBE_SPAWN_EGG",
    "id": "org.bukkit.Material#MAGMA_CUBE_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the spawner's creature type.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getCreatureTypeName",
    "id": "org.bukkit.block.CreatureSpawner#getCreatureTypeName()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Candle",
    "static": true,
    "field": "ORANGE_CANDLE",
    "id": "org.bukkit.Material#ORANGE_CANDLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.WorldSaveEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.WorldSaveEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Increments automatically when a player kills another player on the white team.",
    "static": true,
    "field": "TEAM_KILL_WHITE",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_WHITE",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Returns the maximum amount of air the living entity can have, in ticks.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getMaximumAir",
    "id": "org.bukkit.entity.LivingEntity#getMaximumAir()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "descr": "Get a copy of the fireworks meta",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "getFireworkMeta",
    "id": "org.bukkit.entity.Firework#getFireworkMeta()",
    "class": "org.bukkit.entity.Firework",
    "return": "org.bukkit.inventory.meta.FireworkMeta"
  },
  {
    "descr": "Gets the KeyedBossBar specified by this key.\\n\\nnot bound to a org.bukkit.entity.Boss\\n\\nnot created using\\n#createBossBar(String, BarColor, BarStyle, BarFlag...)\\n\\n\\ne.g. bossbars created using the bossbar command",
    "param-names": ["Key"],
    "static": true,
    "param-types": ["org.bukkit.NamespacedKey"],
    "method": "getBossBar",
    "id": "org.bukkit.Bukkit#getBossBar(org.bukkit.NamespacedKey)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.boss.KeyedBossBar"
  },
  {
    "descr": "Gets a list of all worlds on this server.",
    "static": true,
    "method": "getWorlds",
    "id": "org.bukkit.Bukkit#getWorlds()",
    "class": "org.bukkit.Bukkit",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "BEETROOT_SOUP",
    "id": "org.bukkit.Material#BEETROOT_SOUP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the Biome at the given Location.",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Biome"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "org.bukkit.block.Biome"
    ],
    "method": "setBiome",
    "id": "org.bukkit.RegionAccessor#setBiome(org.bukkit.Location,org.bukkit.block.Biome)",
    "class": "org.bukkit.RegionAccessor"
  },
  {
    "static": true,
    "field": "ENTITY_VILLAGER_YES",
    "id": "org.bukkit.Sound#ENTITY_VILLAGER_YES",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the total amount of experience required for the player to level",
    "param-names": ["HumanEntity"],
    "param-types": ["org.bukkit.entity.HumanEntity"],
    "method": "getExpToLevel",
    "id": "org.bukkit.entity.HumanEntity#getExpToLevel()",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "int"
  },
  {
    "descr": "Gets the maximum allowed value of the 'stage' property.",
    "param-names": ["Sapling"],
    "param-types": ["org.bukkit.block.data.type.Sapling"],
    "method": "getMaximumStage",
    "id": "org.bukkit.block.data.type.Sapling#getMaximumStage()",
    "class": "org.bukkit.block.data.type.Sapling",
    "return": "int"
  },
  {
    "descr": "Retrieve the target of this bullet.",
    "param-names": ["ShulkerBullet"],
    "param-types": ["org.bukkit.entity.ShulkerBullet"],
    "method": "getTarget",
    "id": "org.bukkit.entity.ShulkerBullet#getTarget()",
    "class": "org.bukkit.entity.ShulkerBullet",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "LEGACY_GOLD_RECORD",
    "id": "org.bukkit.Material#LEGACY_GOLD_RECORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_END",
    "id": "org.bukkit.Sound#MUSIC_END",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Construct the vector with provided integer components.",
    "param-names": [
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "int",
      "int",
      "int"
    ],
    "id": "org.bukkit.util.Vector#Vector(int,int,int)",
    "class": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "ENTITY_PIGLIN_DEATH",
    "id": "org.bukkit.Sound#ENTITY_PIGLIN_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BellRingEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BellRingEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Gets the bucket that the Entity will be put into.\\nThis refers to the bucket with the entity, eg\\nMaterial#PUFFERFISH_BUCKET.",
    "method": "getEntityBucket",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#getEntityBucket()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Relative size of the particle.",
    "param-names": ["Particle.DustOptions"],
    "param-types": ["org.bukkit.Particle.DustOptions"],
    "method": "getSize",
    "id": "org.bukkit.Particle.DustOptions#getSize()",
    "class": "org.bukkit.Particle.DustOptions",
    "return": "float"
  },
  {
    "static": true,
    "field": "UP",
    "id": "org.bukkit.block.BlockFace#UP",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Raised when a vehicle collides with an entity.",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleEntityCollisionEvent"
  },
  {
    "static": true,
    "field": "LEGACY_SUGAR",
    "id": "org.bukkit.Material#LEGACY_SUGAR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Deals damage to an entity over time.",
    "static": true,
    "field": "POISON",
    "id": "org.bukkit.potion.PotionEffectType#POISON",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Checks if this block is passable.\\n\\nA block is passable if it has no colliding parts that would prevent\\nplayers from moving through it.\\n\\nExamples: Tall grass, flowers, signs, etc. are passable, but open doors,\\nfence gates, trap doors, etc. are not because they still have parts that\\ncan be collided with.",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "isPassable",
    "id": "org.bukkit.block.Block#isPassable()",
    "class": "org.bukkit.block.Block",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.GenericGameEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.block.data.type.Slab.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.block.data.type.Slab.Type",
    "return": "org.bukkit.block.data.type.Slab.Type"
  },
  {
    "descr": "When an entity is spawned as part of a patrol",
    "static": true,
    "field": "PATROL",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#PATROL",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "BLOCK_LODESTONE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_LODESTONE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Play a Sound at the provided Location in the World.\\n\\nThis function will fail silently if Location or Sound are null.",
    "param-names": [
      "World",
      "Location",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.Sound",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.Location,org.bukkit.Sound,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "AVAILABLE BETWEEN VERSIONS: 1.19 - 1.19.4",
    "static": true,
    "field": "UPDATE_1_20",
    "id": "org.bukkit.FeatureFlag#UPDATE_1_20",
    "class": "org.bukkit.FeatureFlag",
    "return": "org.bukkit.FeatureFlag"
  },
  {
    "descr": "Play a Sound at the location of the provided entity in the World.\\n\\nThis function will fail silently if Entity or Sound are null.",
    "param-names": [
      "World",
      "Entity",
      "Sound",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.entity.Entity",
      "java.lang.String",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.World#playSound(org.bukkit.entity.Entity,java.lang.String,float,float)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_BRICKS_HIT",
    "id": "org.bukkit.Sound#BLOCK_NETHER_BRICKS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the interpolation duration of this display.",
    "param-names": [
      "Display",
      "Duration"
    ],
    "param-types": [
      "org.bukkit.entity.Display",
      "int"
    ],
    "method": "setInterpolationDuration",
    "id": "org.bukkit.entity.Display#setInterpolationDuration(int)",
    "class": "org.bukkit.entity.Display"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_CAMEL_DEATH",
    "id": "org.bukkit.Sound#ENTITY_CAMEL_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SQUID_SPAWN_EGG",
    "id": "org.bukkit.Material#SQUID_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Door",
    "static": true,
    "field": "SPRUCE_DOOR",
    "id": "org.bukkit.Material#SPRUCE_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerArmorStandManipulateEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent"
  },
  {
    "descr": "Sets the deceleration rate (newSpeed = curSpeed * rate) of occupied\\nboats. Setting this to a higher value allows for quicker acceleration.\\nThe default is 0.2.",
    "param-names": [
      "Boat",
      "Rate"
    ],
    "param-types": [
      "org.bukkit.entity.Boat",
      "double"
    ],
    "method": "setOccupiedDeceleration",
    "id": "org.bukkit.entity.Boat#setOccupiedDeceleration(double)",
    "class": "org.bukkit.entity.Boat"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.TNTPrimeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.TNTPrimeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "WATER",
    "id": "org.bukkit.Art#WATER",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "BlockData: SmallDripleaf",
    "static": true,
    "field": "SMALL_DRIPLEAF",
    "id": "org.bukkit.Material#SMALL_DRIPLEAF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Returns true if the entity is in water.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "isInWater",
    "id": "org.bukkit.entity.Entity#isInWater()",
    "class": "org.bukkit.entity.Entity",
    "return": "boolean"
  },
  {
    "descr": "Gets the current type of this villager.",
    "param-names": ["ZombieVillager"],
    "param-types": ["org.bukkit.entity.ZombieVillager"],
    "method": "getVillagerType",
    "id": "org.bukkit.entity.ZombieVillager#getVillagerType()",
    "class": "org.bukkit.entity.ZombieVillager",
    "return": "org.bukkit.entity.Villager.Type"
  },
  {
    "descr": "Increments automatically when a player kills another player on the dark gray team.",
    "static": true,
    "field": "TEAM_KILL_DARK_GRAY",
    "id": "org.bukkit.scoreboard.Criteria#TEAM_KILL_DARK_GRAY",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "ACACIA_WOOD",
    "id": "org.bukkit.Material#ACACIA_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_BLOCK",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_FENCE",
    "id": "org.bukkit.Material#LEGACY_NETHER_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT",
    "id": "org.bukkit.Sound#BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the color of this cloud. Will be applied as a tint to its particles.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getColor",
    "id": "org.bukkit.entity.AreaEffectCloud#getColor()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "org.bukkit.Color"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.NotePlayEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent"
  },
  {
    "descr": "Gets the ClickType for this event.\\n\\nThis is insulated against changes to the inventory by other plugins.",
    "method": "getClick",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_LEGGINGS",
    "id": "org.bukkit.Material#LEGACY_IRON_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'axis' property.",
    "param-names": ["Orientable"],
    "param-types": ["org.bukkit.block.data.Orientable"],
    "method": "getAxis",
    "id": "org.bukkit.block.data.Orientable#getAxis()",
    "class": "org.bukkit.block.data.Orientable",
    "return": "org.bukkit.Axis"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the height of the character sprite.",
    "param-names": ["MapFont.CharacterSprite"],
    "param-types": ["org.bukkit.map.MapFont.CharacterSprite"],
    "method": "getHeight",
    "id": "org.bukkit.map.MapFont.CharacterSprite#getHeight()",
    "class": "org.bukkit.map.MapFont.CharacterSprite",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLOCK_UNSWITCH",
    "id": "org.bukkit.GameEvent#BLOCK_UNSWITCH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "FLETCHER_GIFT",
    "id": "org.bukkit.loot.LootTables#FLETCHER_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Couldn't find a suitable place to spawn raiders.",
    "static": true,
    "field": "UNSPAWNABLE",
    "id": "org.bukkit.event.raid.RaidStopEvent.Reason#UNSPAWNABLE",
    "class": "org.bukkit.event.raid.RaidStopEvent.Reason",
    "return": "org.bukkit.event.raid.RaidStopEvent.Reason"
  },
  {
    "descr": "Normalizes the given pitch angle to a value between +/-90\\ndegrees.",
    "param-names": ["Pitch"],
    "static": true,
    "param-types": ["float"],
    "method": "normalizePitch",
    "id": "org.bukkit.Location#normalizePitch(float)",
    "class": "org.bukkit.Location",
    "return": "float"
  },
  {
    "descr": "The display type of this advancement.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "getType",
    "id": "org.bukkit.advancement.AdvancementDisplay#getType()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "org.bukkit.advancement.AdvancementDisplayType"
  },
  {
    "static": true,
    "field": "POINTER",
    "id": "org.bukkit.Art#POINTER",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Get a collection of all entities in this RegionAccessor matching the given\\nclass/interface",
    "param-names": [
      "RegionAccessor",
      "Cls"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "java.lang.Class"
    ],
    "method": "getEntitiesByClass",
    "id": "org.bukkit.RegionAccessor#<T>getEntitiesByClass(java.lang.Class<T>)",
    "class": "org.bukkit.RegionAccessor",
    "return": "java.util.Collection"
  },
  {
    "static": true,
    "field": "ENTITY_DAMAGE",
    "id": "org.bukkit.GameEvent#ENTITY_DAMAGE",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "When a raiding entity selects the same target as one of its compatriots.",
    "static": true,
    "field": "FOLLOW_LEADER",
    "id": "org.bukkit.event.entity.EntityTargetEvent.TargetReason#FOLLOW_LEADER",
    "class": "org.bukkit.event.entity.EntityTargetEvent.TargetReason",
    "return": "org.bukkit.event.entity.EntityTargetEvent.TargetReason"
  },
  {
    "descr": "This is a custom Plugin portal.",
    "static": true,
    "field": "CUSTOM",
    "id": "org.bukkit.PortalType#CUSTOM",
    "class": "org.bukkit.PortalType",
    "return": "org.bukkit.PortalType"
  },
  {
    "static": true,
    "field": "MUSIC_NETHER_BASALT_DELTAS",
    "id": "org.bukkit.Sound#MUSIC_NETHER_BASALT_DELTAS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the amount of Z-coordinates to modify to get the represented block",
    "param-names": ["BlockFace"],
    "param-types": ["org.bukkit.block.BlockFace"],
    "method": "getModZ",
    "id": "org.bukkit.block.BlockFace#getModZ()",
    "class": "org.bukkit.block.BlockFace",
    "return": "int"
  },
  {
    "descr": "Called when an entity changes its pose.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPoseChangeEvent"
  },
  {
    "static": true,
    "field": "LEGACY_PURPUR_BLOCK",
    "id": "org.bukkit.Material#LEGACY_PURPUR_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Adds this user's current IP address to the IpBanList. If a previous ban exists, this will\\nupdate the entry. If #getAddress() is null this method will throw an exception.",
    "param-names": [
      "Player",
      "Reason",
      "Expires",
      "Source",
      "Kick Player"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String",
      "java.util.Date",
      "java.lang.String",
      "boolean"
    ],
    "method": "banIp",
    "id": "org.bukkit.entity.Player#banIp(java.lang.String,java.util.Date,java.lang.String,boolean)",
    "class": "org.bukkit.entity.Player",
    "return": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the bow ItemStack used to fire the arrow.",
    "method": "getBow",
    "id": "org.bukkit.event.entity.EntityShootBowEvent#getBow()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityShootBowEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Get the x coordinate of the origin chunk of the structure.\\nNote, it is not safe to attempt to retrieve or interact with this\\nchunk. This event is informative only!",
    "method": "getChunkX",
    "id": "org.bukkit.event.world.AsyncStructureSpawnEvent#getChunkX()",
    "event": true,
    "class": "org.bukkit.event.world.AsyncStructureSpawnEvent",
    "return": "int"
  },
  {
    "descr": "Creates fog around the world.",
    "static": true,
    "field": "CREATE_FOG",
    "id": "org.bukkit.boss.BarFlag#CREATE_FOG",
    "class": "org.bukkit.boss.BarFlag",
    "return": "org.bukkit.boss.BarFlag"
  },
  {
    "static": true,
    "field": "FISHERMAN_GIFT",
    "id": "org.bukkit.loot.LootTables#FISHERMAN_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Standard skeleton type.",
    "static": true,
    "field": "NORMAL",
    "id": "org.bukkit.entity.Skeleton.SkeletonType#NORMAL",
    "class": "org.bukkit.entity.Skeleton.SkeletonType",
    "return": "org.bukkit.entity.Skeleton.SkeletonType"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.NotePlayEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the maximum amount of this material that can be held in a stack",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getMaxStackSize",
    "id": "org.bukkit.Material#getMaxStackSize()",
    "class": "org.bukkit.Material",
    "return": "int"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "In an enchanting inventory, the middle button's level value.",
    "static": true,
    "field": "ENCHANT_LEVEL2",
    "id": "org.bukkit.inventory.InventoryView.Property#ENCHANT_LEVEL2",
    "class": "org.bukkit.inventory.InventoryView.Property",
    "return": "org.bukkit.inventory.InventoryView.Property"
  },
  {
    "descr": "Returns a mutable list representing the outcome of the barter.",
    "method": "getOutcome",
    "id": "org.bukkit.event.entity.PiglinBarterEvent#getOutcome()",
    "event": true,
    "class": "org.bukkit.event.entity.PiglinBarterEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Get the translation key of the block associated with this material, or\\nnull if this material does not have an associated block.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "getBlockTranslationKey",
    "id": "org.bukkit.Material#getBlockTranslationKey()",
    "class": "org.bukkit.Material",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerInteractEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the Loot Table attached to this block or entity.\\n\\nIf an block/entity does not have a loot table, this will return null, NOT\\nan empty loot table.",
    "param-names": ["Lootable"],
    "param-types": ["org.bukkit.loot.Lootable"],
    "method": "getLootTable",
    "id": "org.bukkit.loot.Lootable#getLootTable()",
    "class": "org.bukkit.loot.Lootable",
    "return": "org.bukkit.loot.LootTable"
  },
  {
    "static": true,
    "field": "LIME_STAINED_GLASS",
    "id": "org.bukkit.Material#LIME_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_JUNGLE_FENCE",
    "id": "org.bukkit.Material#LEGACY_JUNGLE_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a Location version of this vector.",
    "param-names": [
      "Vector",
      "World",
      "Yaw",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.World",
      "float",
      "float"
    ],
    "method": "toLocation",
    "id": "org.bukkit.util.Vector#toLocation(org.bukkit.World,float,float)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "WRITABLE_BOOK",
    "id": "org.bukkit.Material#WRITABLE_BOOK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Denotes that this InventoryType can be created via the normal\\norg.bukkit.Bukkit#createInventory methods.",
    "param-names": ["InventoryType"],
    "param-types": ["org.bukkit.event.inventory.InventoryType"],
    "method": "isCreatable",
    "id": "org.bukkit.event.inventory.InventoryType#isCreatable()",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "boolean"
  },
  {
    "descr": "Spawn a FallingBlock entity at the given Location of\\nthe specified BlockData. The BlockData dictates what is falling.\\nWhen the FallingBlock hits the ground, it will place that block.",
    "param-names": [
      "World",
      "Location",
      "Data"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "org.bukkit.block.data.BlockData"
    ],
    "method": "spawnFallingBlock",
    "id": "org.bukkit.World#spawnFallingBlock(org.bukkit.Location,org.bukkit.block.data.BlockData)",
    "class": "org.bukkit.World",
    "return": "org.bukkit.entity.FallingBlock"
  },
  {
    "descr": "Increases dig speed.",
    "static": true,
    "field": "FAST_DIGGING",
    "id": "org.bukkit.potion.PotionEffectType#FAST_DIGGING",
    "class": "org.bukkit.potion.PotionEffectType",
    "return": "org.bukkit.potion.PotionEffectType"
  },
  {
    "static": true,
    "field": "ENTITY_CREEPER_HURT",
    "id": "org.bukkit.Sound#ENTITY_CREEPER_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_HURT",
    "id": "org.bukkit.Sound#ENTITY_SLIME_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the state of thunder that the world is being set to",
    "method": "toThunderState",
    "id": "org.bukkit.event.weather.ThunderChangeEvent#toThunderState()",
    "event": true,
    "class": "org.bukkit.event.weather.ThunderChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the amount of air remaining for the entity (measured in ticks.",
    "param-names": ["Amount"],
    "param-types": ["int"],
    "method": "setAmount",
    "id": "org.bukkit.event.entity.EntityAirChangeEvent#setAmount(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityAirChangeEvent"
  },
  {
    "descr": "Get the command sender.",
    "method": "getSender",
    "id": "org.bukkit.event.server.RemoteServerCommandEvent#getSender()",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent",
    "return": "org.bukkit.command.CommandSender"
  },
  {
    "static": true,
    "field": "STONE_SHOVEL",
    "id": "org.bukkit.Material#STONE_SHOVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The number of seconds the combustee should be alight for.\\n\\nThis value will only ever increase the combustion time, not decrease\\nexisting combustion times.",
    "param-names": ["Duration"],
    "param-types": ["int"],
    "method": "setDuration",
    "id": "org.bukkit.event.entity.EntityCombustByEntityEvent#setDuration(int)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCombustByEntityEvent"
  },
  {
    "descr": "Returns the default color for all leather armor.",
    "param-names": ["ItemFactory"],
    "param-types": ["org.bukkit.inventory.ItemFactory"],
    "method": "getDefaultLeatherColor",
    "id": "org.bukkit.inventory.ItemFactory#getDefaultLeatherColor()",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "org.bukkit.Color"
  },
  {
    "static": true,
    "field": "BLOCK_METAL_HIT",
    "id": "org.bukkit.Sound#BLOCK_METAL_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PHANTOM_FLAP",
    "id": "org.bukkit.Sound#ENTITY_PHANTOM_FLAP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Set the exhaustion to apply to the player.\\nThe maximum exhaustion that a player can have is 40. No error will be\\nthrown if this limit is hit. This value may be negative, but there is\\nunknown behavior for when exhaustion is below 0.",
    "param-names": ["Exhaustion"],
    "param-types": ["float"],
    "method": "setExhaustion",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#setExhaustion(float)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent"
  },
  {
    "static": true,
    "field": "LAST_WORKED_AT_POI",
    "id": "org.bukkit.entity.memory.MemoryKey#LAST_WORKED_AT_POI",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "static": true,
    "field": "LEATHER_CHESTPLATE",
    "id": "org.bukkit.Material#LEATHER_CHESTPLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "C",
    "id": "org.bukkit.Note.Tone#C",
    "class": "org.bukkit.Note.Tone",
    "return": "org.bukkit.Note.Tone"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerPickupItemEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupItemEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Get the ticks that this firework has been alive. When this value reaches\\n#getMaxLife(), the firework will detonate.",
    "param-names": ["Firework"],
    "param-types": ["org.bukkit.entity.Firework"],
    "method": "getLife",
    "id": "org.bukkit.entity.Firework#getLife()",
    "class": "org.bukkit.entity.Firework",
    "return": "int"
  },
  {
    "static": true,
    "field": "MAGENTA_STAINED_GLASS",
    "id": "org.bukkit.Material#MAGENTA_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_13",
    "id": "org.bukkit.Sound#MUSIC_DISC_13",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "The left (or primary) mouse button.",
    "static": true,
    "field": "LEFT",
    "id": "org.bukkit.event.inventory.ClickType#LEFT",
    "class": "org.bukkit.event.inventory.ClickType",
    "return": "org.bukkit.event.inventory.ClickType"
  },
  {
    "descr": "Retrieve the original source of this cloud.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getSource",
    "id": "org.bukkit.entity.AreaEffectCloud#getSource()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "org.bukkit.projectiles.ProjectileSource"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "boolean"
  },
  {
    "descr": "Creates a new bounding box using the coordinates of the given vectors as\\ncorners.",
    "param-names": [
      "Corner1",
      "Corner2"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "of",
    "id": "org.bukkit.util.BoundingBox#of(org.bukkit.util.Vector,org.bukkit.util.Vector)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "static": true,
    "field": "SILVERFISH_SPAWN_EGG",
    "id": "org.bukkit.Material#SILVERFISH_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "GREEN_TERRACOTTA",
    "id": "org.bukkit.Material#GREEN_TERRACOTTA",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Forces an update of the player's entire inventory.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "updateInventory",
    "id": "org.bukkit.entity.Player#updateInventory()",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "SPRUCE_STAIRS",
    "id": "org.bukkit.Material#SPRUCE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ENCHANTMENT_TABLE_USE",
    "id": "org.bukkit.Sound#BLOCK_ENCHANTMENT_TABLE_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the age in ticks of the gateway.\\n\\nIf the age is less than 200 ticks a magenta beam will be emitted, whilst\\nif it is a multiple of 2400 ticks a purple beam will be emitted.",
    "param-names": [
      "EndGateway",
      "Age"
    ],
    "param-types": [
      "org.bukkit.block.EndGateway",
      "long"
    ],
    "method": "setAge",
    "id": "org.bukkit.block.EndGateway#setAge(long)",
    "class": "org.bukkit.block.EndGateway"
  },
  {
    "descr": "Return the side of the sign.",
    "param-names": [
      "Sign",
      "Side"
    ],
    "param-types": [
      "org.bukkit.block.Sign",
      "org.bukkit.block.sign.Side"
    ],
    "method": "getSide",
    "id": "org.bukkit.block.Sign#getSide(org.bukkit.block.sign.Side)",
    "class": "org.bukkit.block.Sign",
    "return": "org.bukkit.block.sign.SignSide"
  },
  {
    "static": true,
    "field": "ENTITY_WITHER_SKELETON_STEP",
    "id": "org.bukkit.Sound#ENTITY_WITHER_SKELETON_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CIRCLE_MIDDLE",
    "id": "org.bukkit.block.banner.PatternType#CIRCLE_MIDDLE",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Sets the entity's absorption amount.",
    "param-names": [
      "Damageable",
      "Amount"
    ],
    "param-types": [
      "org.bukkit.entity.Damageable",
      "double"
    ],
    "method": "setAbsorptionAmount",
    "id": "org.bukkit.entity.Damageable#setAbsorptionAmount(double)",
    "class": "org.bukkit.entity.Damageable"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityBreakDoorEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityBreakDoorEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_ARMOR_STAND",
    "id": "org.bukkit.Material#LEGACY_ARMOR_STAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the value of the 'eye' property.",
    "param-names": ["EndPortalFrame"],
    "param-types": ["org.bukkit.block.data.type.EndPortalFrame"],
    "method": "hasEye",
    "id": "org.bukkit.block.data.type.EndPortalFrame#hasEye()",
    "class": "org.bukkit.block.data.type.EndPortalFrame",
    "return": "boolean"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.boss.BarColor#valueOf(java.lang.String)",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "When an entity is shaking in Powder Snow and a new entity spawns.",
    "static": true,
    "field": "FROZEN",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#FROZEN",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "Gets whether the zombie is a villager",
    "param-names": ["Zombie"],
    "param-types": ["org.bukkit.entity.Zombie"],
    "method": "isVillager",
    "id": "org.bukkit.entity.Zombie#isVillager()",
    "class": "org.bukkit.entity.Zombie",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "PURPLE_SHULKER_BOX",
    "id": "org.bukkit.Material#PURPLE_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Safely unloads and saves the Chunk at the specified coordinates\\n\\nThis method is analogous to #unloadChunk(int, int, boolean)\\nwhere save is true.",
    "param-names": [
      "World",
      "Chunk"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Chunk"
    ],
    "method": "unloadChunk",
    "id": "org.bukkit.World#unloadChunk(org.bukkit.Chunk)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Fired when a single block placement action of a player triggers the\\ncreation of multiple blocks(e.g. placing a bed block). The block returned\\nby #getBlockPlaced() and its related methods is the block where\\nthe placed block would exist if the placement only affected a single\\nblock.",
    "event": true,
    "class": "org.bukkit.event.block.BlockMultiPlaceEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockDispenseEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseEvent"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.inventory.InventoryCloseEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCloseEvent",
    "return": "java.util.List"
  },
  {
    "descr": "BlockData: Powerable",
    "static": true,
    "field": "DARK_OAK_PRESSURE_PLATE",
    "id": "org.bukkit.Material#DARK_OAK_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_JUNGLE_FENCE_GATE",
    "id": "org.bukkit.Material#LEGACY_JUNGLE_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The slot number that was clicked, ready for passing to\\nInventory#getItem(int). Note that there may be two slots with\\nthe same slot number, since a view links two different inventories.",
    "method": "getSlot",
    "id": "org.bukkit.event.inventory.SmithItemEvent#getSlot()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "int"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_NETHERITE",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_NETHERITE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_STONE_AXE",
    "id": "org.bukkit.Material#LEGACY_STONE_AXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a creature spawns because of a lightning strike",
    "static": true,
    "field": "LIGHTNING",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#LIGHTNING",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "static": true,
    "field": "HOGLIN",
    "id": "org.bukkit.loot.LootTables#HOGLIN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "BlockData: RedstoneWallTorch",
    "static": true,
    "field": "REDSTONE_WALL_TORCH",
    "id": "org.bukkit.Material#REDSTONE_WALL_TORCH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Represents red dye.",
    "static": true,
    "field": "RED",
    "id": "org.bukkit.DyeColor#RED",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "static": true,
    "field": "PANDA",
    "id": "org.bukkit.entity.EntityType#PANDA",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.GenericGameEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.GenericGameEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the amount of time that was skipped.",
    "method": "getSkipAmount",
    "id": "org.bukkit.event.world.TimeSkipEvent#getSkipAmount()",
    "event": true,
    "class": "org.bukkit.event.world.TimeSkipEvent",
    "return": "long"
  },
  {
    "static": true,
    "field": "ITEM_FIRECHARGE_USE",
    "id": "org.bukkit.Sound#ITEM_FIRECHARGE_USE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "TRADER_LLAMA",
    "id": "org.bukkit.entity.EntityType#TRADER_LLAMA",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the cause of the creeper being (un)powered.",
    "method": "getCause",
    "id": "org.bukkit.event.entity.CreeperPowerEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.entity.CreeperPowerEvent",
    "return": "org.bukkit.event.entity.CreeperPowerEvent.PowerCause"
  },
  {
    "static": true,
    "field": "DEEPSLATE_DIAMOND_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_DIAMOND_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Divides the vector by another.",
    "param-names": [
      "Vector",
      "Vec"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.util.Vector"
    ],
    "method": "divide",
    "id": "org.bukkit.util.Vector#divide(org.bukkit.util.Vector)",
    "class": "org.bukkit.util.Vector",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIE_CONVERTED_TO_DROWNED",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIE_CONVERTED_TO_DROWNED",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "AMBIENT_UNDERWATER_LOOP",
    "id": "org.bukkit.Sound#AMBIENT_UNDERWATER_LOOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the current result of the login, as an enum",
    "method": "getResult",
    "id": "org.bukkit.event.player.PlayerPreLoginEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent",
    "return": "org.bukkit.event.player.PlayerPreLoginEvent.Result"
  },
  {
    "static": true,
    "field": "LEGACY_COBBLESTONE_STAIRS",
    "id": "org.bukkit.Material#LEGACY_COBBLESTONE_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the item display transform for this entity.\\nDefaults to ItemDisplayTransform#FIXED.",
    "param-names": [
      "ItemDisplay",
      "Display"
    ],
    "param-types": [
      "org.bukkit.entity.ItemDisplay",
      "org.bukkit.entity.ItemDisplay.ItemDisplayTransform"
    ],
    "method": "setItemDisplayTransform",
    "id": "org.bukkit.entity.ItemDisplay#setItemDisplayTransform(org.bukkit.entity.ItemDisplay.ItemDisplayTransform)",
    "class": "org.bukkit.entity.ItemDisplay"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.Difficulty#values()",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty[]"
  },
  {
    "static": true,
    "field": "ITEM_AXE_SCRAPE",
    "id": "org.bukkit.Sound#ITEM_AXE_SCRAPE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Wither.Head#values()",
    "class": "org.bukkit.entity.Wither.Head",
    "return": "org.bukkit.entity.Wither.Head[]"
  },
  {
    "descr": "Gets the new state of the cauldron.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "static": true,
    "field": "SNOWY_TAIGA",
    "id": "org.bukkit.block.Biome#SNOWY_TAIGA",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "LEGACY_CHORUS_FRUIT_POPPED",
    "id": "org.bukkit.Material#LEGACY_CHORUS_FRUIT_POPPED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_NEARBY_CLOSEST",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_NEARBY_CLOSEST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "CRAFT_ITEM",
    "id": "org.bukkit.Statistic#CRAFT_ITEM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_DEATH_SMALL",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_DEATH_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "BIRCH_SLAB",
    "id": "org.bukkit.Material#BIRCH_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convert an Image to a byte[] using the palette.",
    "param-names": ["Image"],
    "static": true,
    "param-types": ["java.awt.Image"],
    "method": "imageToBytes",
    "id": "org.bukkit.map.MapPalette#imageToBytes(java.awt.Image)",
    "class": "org.bukkit.map.MapPalette",
    "return": "byte[]"
  },
  {
    "descr": "Jungle pyramids (also known as jungle temples) are found in jungles.\\n\\nThey are usually composed of cobblestone and mossy cobblestone. They\\nconsist of three floors, with the bottom floor containing treasure\\nchests.",
    "static": true,
    "field": "JUNGLE_PYRAMID",
    "id": "org.bukkit.StructureType#JUNGLE_PYRAMID",
    "class": "org.bukkit.StructureType",
    "return": "org.bukkit.StructureType"
  },
  {
    "static": true,
    "field": "BLOCK_COMPOSTER_READY",
    "id": "org.bukkit.Sound#BLOCK_COMPOSTER_READY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerEggThrowEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerEggThrowEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockPhysicsEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPhysicsEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityUnleashEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityUnleashEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.TreeSpecies#valueOf(java.lang.String)",
    "class": "org.bukkit.TreeSpecies",
    "return": "org.bukkit.TreeSpecies"
  },
  {
    "static": true,
    "field": "ENTITY_MAGMA_CUBE_SQUISH",
    "id": "org.bukkit.Sound#ENTITY_MAGMA_CUBE_SQUISH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SPAWN_BONUS_CHEST",
    "id": "org.bukkit.loot.LootTables#SPAWN_BONUS_CHEST",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "BLOCK_BEACON_POWER_SELECT",
    "id": "org.bukkit.Sound#BLOCK_BEACON_POWER_SELECT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a copy of the leggings currently being worn by the entity",
    "param-names": ["EntityEquipment"],
    "param-types": ["org.bukkit.inventory.EntityEquipment"],
    "method": "getLeggings",
    "id": "org.bukkit.inventory.EntityEquipment#getLeggings()",
    "class": "org.bukkit.inventory.EntityEquipment",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Get the UsageMode of this structure block.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getUsageMode",
    "id": "org.bukkit.block.Structure#getUsageMode()",
    "class": "org.bukkit.block.Structure",
    "return": "org.bukkit.block.structure.UsageMode"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "boolean"
  },
  {
    "descr": "Get a pixel from the canvas.\\nIf no color is set at the given position for this canvas, then null is\\nreturned and the color returned by #getBasePixelColor(int, int)\\nis shown on the map.",
    "param-names": [
      "MapCanvas",
      "X",
      "Y"
    ],
    "param-types": [
      "org.bukkit.map.MapCanvas",
      "int",
      "int"
    ],
    "method": "getPixelColor",
    "id": "org.bukkit.map.MapCanvas#getPixelColor(int,int)",
    "class": "org.bukkit.map.MapCanvas",
    "return": "java.awt.Color"
  },
  {
    "descr": "Thrown when a Living Entity creates a portal in a world.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent"
  },
  {
    "descr": "Gets whether or not the block will attempt to drop items.\\nIf and only if this is false then BlockDropItemEvent will not be\\ncalled after this event.",
    "method": "isDropItems",
    "id": "org.bukkit.event.block.BlockBreakEvent#isDropItems()",
    "event": true,
    "class": "org.bukkit.event.block.BlockBreakEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_HOSTILE_BIG_FALL",
    "id": "org.bukkit.Sound#ENTITY_HOSTILE_BIG_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Rabbit.Type#values()",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type[]"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.boss.BarFlag#values()",
    "class": "org.bukkit.boss.BarFlag",
    "return": "org.bukkit.boss.BarFlag[]"
  },
  {
    "descr": "Represents white",
    "static": true,
    "field": "WHITE",
    "id": "org.bukkit.ChatColor#WHITE",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Called when a vehicle updates",
    "event": true,
    "class": "org.bukkit.event.vehicle.VehicleUpdateEvent"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Shorthand; gets whether the zombie is angry.",
    "param-names": ["PigZombie"],
    "param-types": ["org.bukkit.entity.PigZombie"],
    "method": "isAngry",
    "id": "org.bukkit.entity.PigZombie#isAngry()",
    "class": "org.bukkit.entity.PigZombie",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "PINK",
    "id": "org.bukkit.boss.BarColor#PINK",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "static": true,
    "field": "DEAD_BUSH",
    "id": "org.bukkit.Material#DEAD_BUSH",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a new BlockData instance for the specified Material, with\\nall properties initialized to unspecified defaults.",
    "param-names": [
      "Material",
      "Consumer"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Material",
      "java.util.function.Consumer"
    ],
    "method": "createBlockData",
    "id": "org.bukkit.Bukkit#createBlockData(org.bukkit.Material,java.util.function.Consumer<org.bukkit.block.data.BlockData>)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.block.data.BlockData"
  },
  {
    "static": true,
    "field": "MINECART_CHEST",
    "id": "org.bukkit.entity.EntityType#MINECART_CHEST",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the leash on this entity to be held by the supplied entity.\\n\\nThis method has no effect on EnderDragons, Withers, Players, or Bats.\\nNon-living entities excluding leashes will not persist as leash\\nholders.",
    "param-names": [
      "LivingEntity",
      "Holder"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.entity.Entity"
    ],
    "method": "setLeashHolder",
    "id": "org.bukkit.entity.LivingEntity#setLeashHolder(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "boolean"
  },
  {
    "descr": "Bans the specified address from the server.",
    "param-names": ["Address"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "banIP",
    "id": "org.bukkit.Bukkit#banIP(java.lang.String)",
    "class": "org.bukkit.Bukkit"
  },
  {
    "descr": "Sets the location this lodestone compass will point to.",
    "param-names": [
      "CompassMeta",
      "Lodestone"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.CompassMeta",
      "org.bukkit.Location"
    ],
    "method": "setLodestone",
    "id": "org.bukkit.inventory.meta.CompassMeta#setLodestone(org.bukkit.Location)",
    "class": "org.bukkit.inventory.meta.CompassMeta"
  },
  {
    "static": true,
    "field": "GOLDEN_SHOVEL",
    "id": "org.bukkit.Material#GOLDEN_SHOVEL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "The item is moved to the opposite inventory if a space is found.",
    "static": true,
    "field": "MOVE_TO_OTHER_INVENTORY",
    "id": "org.bukkit.event.inventory.InventoryAction#MOVE_TO_OTHER_INVENTORY",
    "class": "org.bukkit.event.inventory.InventoryAction",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Gets the value of the 'hatch' property.",
    "param-names": ["Hatchable"],
    "param-types": ["org.bukkit.block.data.Hatchable"],
    "method": "getHatch",
    "id": "org.bukkit.block.data.Hatchable#getHatch()",
    "class": "org.bukkit.block.data.Hatchable",
    "return": "int"
  },
  {
    "static": true,
    "field": "ENTITY_SKELETON_HORSE_GALLOP_WATER",
    "id": "org.bukkit.Sound#ENTITY_SKELETON_HORSE_GALLOP_WATER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_SWITCH",
    "id": "org.bukkit.GameEvent#BLOCK_SWITCH",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "BlockData: Bed",
    "static": true,
    "field": "BROWN_BED",
    "id": "org.bukkit.Material#BROWN_BED",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "State when first seeded",
    "static": true,
    "field": "SEEDED",
    "id": "org.bukkit.NetherWartsState#SEEDED",
    "class": "org.bukkit.NetherWartsState",
    "return": "org.bukkit.NetherWartsState"
  },
  {
    "descr": "Damage caused by being in the area when an entity, such as a\\nCreeper, explodes.\\n\\nDamage: variable",
    "static": true,
    "field": "ENTITY_EXPLOSION",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#ENTITY_EXPLOSION",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "descr": "Mirrors the player's air supply (0 for no air, 300 for maximum air).",
    "static": true,
    "field": "AIR",
    "id": "org.bukkit.scoreboard.Criteria#AIR",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "ANCIENT_CITY_ICE_BOX",
    "id": "org.bukkit.loot.LootTables#ANCIENT_CITY_ICE_BOX",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "MUSIC_OVERWORLD_BAMBOO_JUNGLE",
    "id": "org.bukkit.Sound#MUSIC_OVERWORLD_BAMBOO_JUNGLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerMoveEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerMoveEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_REDSTONE_TORCH_OFF",
    "id": "org.bukkit.Material#LEGACY_REDSTONE_TORCH_OFF",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_GLOWSTONE_DUST",
    "id": "org.bukkit.Material#LEGACY_GLOWSTONE_DUST",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: PitcherCrop",
    "static": true,
    "field": "PITCHER_CROP",
    "id": "org.bukkit.Material#PITCHER_CROP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.BlockPlaceEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.BlockPlaceEvent"
  },
  {
    "descr": "The face is capable of supporting fragile blocks such as rails. Most\\nfull-supportable top faces are rigid, unlike walls and posts, or the side of a\\nstone block, none of which are rigid.",
    "static": true,
    "field": "RIGID",
    "id": "org.bukkit.block.BlockSupport#RIGID",
    "class": "org.bukkit.block.BlockSupport",
    "return": "org.bukkit.block.BlockSupport"
  },
  {
    "static": true,
    "field": "OAK",
    "id": "org.bukkit.entity.Boat.Type#OAK",
    "class": "org.bukkit.entity.Boat.Type",
    "return": "org.bukkit.entity.Boat.Type"
  },
  {
    "static": true,
    "field": "ARROW",
    "id": "org.bukkit.Material#ARROW",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "YELLOW_SHULKER_BOX",
    "id": "org.bukkit.Material#YELLOW_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Removes any effects present of the given PotionEffectType.",
    "param-names": [
      "LivingEntity",
      "Type"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "removePotionEffect",
    "id": "org.bukkit.entity.LivingEntity#removePotionEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.LeavesDecayEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.LeavesDecayEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Represents light gray dye.",
    "static": true,
    "field": "LIGHT_GRAY",
    "id": "org.bukkit.DyeColor#LIGHT_GRAY",
    "class": "org.bukkit.DyeColor",
    "return": "org.bukkit.DyeColor"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.block.BlockExpEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Checks for existence of custom model data.\\n\\nCustomModelData is an integer that may be associated client side with a\\ncustom item model.",
    "param-names": ["ItemMeta"],
    "param-types": ["org.bukkit.inventory.meta.ItemMeta"],
    "method": "hasCustomModelData",
    "id": "org.bukkit.inventory.meta.ItemMeta#hasCustomModelData()",
    "class": "org.bukkit.inventory.meta.ItemMeta",
    "return": "boolean"
  },
  {
    "descr": "Called when an Entity targets a LivingEntity and can only target\\nLivingEntity's.",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetLivingEntityEvent"
  },
  {
    "static": true,
    "field": "LIME_CONCRETE",
    "id": "org.bukkit.Material#LIME_CONCRETE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "GREEN_BANNER",
    "id": "org.bukkit.Material#GREEN_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Unused; unobtainable by players. Can't be copied.",
    "static": true,
    "field": "TATTERED",
    "id": "org.bukkit.inventory.meta.BookMeta.Generation#TATTERED",
    "class": "org.bukkit.inventory.meta.BookMeta.Generation",
    "return": "org.bukkit.inventory.meta.BookMeta.Generation"
  },
  {
    "descr": "Gets the item to be enchanted.",
    "method": "getItem",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getItem()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "descr": "Set the org.bukkit.enchantments.Enchantment#LOOT_BONUS_MOBS\\nlevel equivalent to use when generating loot. Values less than or\\nequal to 0 will force the LootTable to only return a single\\norg.bukkit.inventory.ItemStack per pool.",
    "param-names": [
      "LootContext.Builder",
      "Modifier"
    ],
    "param-types": [
      "org.bukkit.loot.LootContext.Builder",
      "int"
    ],
    "method": "lootingModifier",
    "id": "org.bukkit.loot.LootContext.Builder#lootingModifier(int)",
    "class": "org.bukkit.loot.LootContext.Builder",
    "return": "org.bukkit.loot.LootContext.Builder"
  },
  {
    "descr": "Sets the limit for number of ambient mobs that can spawn in a chunk in\\nthis world\\n\\nNote: If set to a negative number the world will use the\\nserver-wide spawn limit instead.",
    "param-names": [
      "World",
      "Limit"
    ],
    "param-types": [
      "org.bukkit.World",
      "int"
    ],
    "method": "setAmbientSpawnLimit",
    "id": "org.bukkit.World#setAmbientSpawnLimit(int)",
    "class": "org.bukkit.World"
  },
  {
    "static": true,
    "field": "ENTITY_PIG_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_PIG_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerInteractEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEvent",
    "return": "boolean"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerUnleashEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerUnleashEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "This checks to see if a particular modifier is valid for this event's\\ncaller, such that, #setDamage(DamageModifier, double) will not\\nthrow an UnsupportedOperationException.\\n\\nDamageModifier#BASE is always applicable.",
    "param-names": ["Type"],
    "param-types": ["org.bukkit.event.entity.EntityDamageEvent.DamageModifier"],
    "method": "isApplicable",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#isApplicable(org.bukkit.event.entity.EntityDamageEvent.DamageModifier)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "boolean"
  },
  {
    "descr": "This event is called when a command is received over RCON. See the javadocs\\nof ServerCommandEvent for more information.",
    "event": true,
    "class": "org.bukkit.event.server.RemoteServerCommandEvent"
  },
  {
    "descr": "Set the item currently smelting.",
    "param-names": [
      "FurnaceInventory",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.FurnaceInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setSmelting",
    "id": "org.bukkit.inventory.FurnaceInventory#setSmelting(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.FurnaceInventory"
  },
  {
    "descr": "Players regain health over time, hostile mobs don't spawn, the hunger\\nbar does not deplete.",
    "static": true,
    "field": "PEACEFUL",
    "id": "org.bukkit.Difficulty#PEACEFUL",
    "class": "org.bukkit.Difficulty",
    "return": "org.bukkit.Difficulty"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerTakeLecternBookEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerTakeLecternBookEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Creates a new bounding box using the coordinates of the given locations\\nas corners.",
    "param-names": [
      "Corner1",
      "Corner2"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.Location"
    ],
    "method": "of",
    "id": "org.bukkit.util.BoundingBox#of(org.bukkit.Location,org.bukkit.Location)",
    "class": "org.bukkit.util.BoundingBox",
    "return": "org.bukkit.util.BoundingBox"
  },
  {
    "descr": "Gets if a BanEntry exists for the target, indicating an active\\nban status.",
    "param-names": [
      "BanList",
      "Target"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.String"
    ],
    "method": "isBanned",
    "id": "org.bukkit.BanList#isBanned(java.lang.String)",
    "class": "org.bukkit.BanList",
    "return": "boolean"
  },
  {
    "descr": "Gets the maximum height of this world.\\n\\nIf the max height is 100, there are only blocks from y=0 to y=99.",
    "param-names": ["WorldInfo"],
    "param-types": ["org.bukkit.generator.WorldInfo"],
    "method": "getMaxHeight",
    "id": "org.bukkit.generator.WorldInfo#getMaxHeight()",
    "class": "org.bukkit.generator.WorldInfo",
    "return": "int"
  },
  {
    "descr": "Gets the bolt which is striking the pig.",
    "method": "getLightning",
    "id": "org.bukkit.event.entity.PigZapEvent#getLightning()",
    "event": true,
    "class": "org.bukkit.event.entity.PigZapEvent",
    "return": "org.bukkit.entity.LightningStrike"
  },
  {
    "static": true,
    "field": "SHEAR",
    "id": "org.bukkit.GameEvent#SHEAR",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Returns a list of entities within a bounding box centered around this\\nentity",
    "param-names": [
      "Entity",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.entity.Entity",
      "double",
      "double",
      "double"
    ],
    "method": "getNearbyEntities",
    "id": "org.bukkit.entity.Entity#getNearbyEntities(double,double,double)",
    "class": "org.bukkit.entity.Entity",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "LEGACY_SAND",
    "id": "org.bukkit.Material#LEGACY_SAND",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockFertilizeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFertilizeEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Get the player viewing.",
    "param-names": ["InventoryView"],
    "param-types": ["org.bukkit.inventory.InventoryView"],
    "method": "getPlayer",
    "id": "org.bukkit.inventory.InventoryView#getPlayer()",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.entity.HumanEntity"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_BASS",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_BASS",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Adds an item to this item.",
    "param-names": [
      "BundleMeta",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BundleMeta",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "addItem",
    "id": "org.bukkit.inventory.meta.BundleMeta#addItem(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.meta.BundleMeta"
  },
  {
    "descr": "Sets the result of this event. This will change whether or not this\\nevent is considered cancelled.",
    "param-names": ["New Result"],
    "param-types": ["org.bukkit.event.Event.Result"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.InventoryDragEvent#setResult(org.bukkit.event.Event.Result)",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryDragEvent"
  },
  {
    "descr": "Gets the player identified as the killer of the living entity.\\n\\nMay be null.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getKiller",
    "id": "org.bukkit.entity.LivingEntity#getKiller()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Returns the ItemStack found in the slot at the given index",
    "param-names": [
      "Inventory",
      "Index"
    ],
    "param-types": [
      "org.bukkit.inventory.Inventory",
      "int"
    ],
    "method": "getItem",
    "id": "org.bukkit.inventory.Inventory#getItem(int)",
    "class": "org.bukkit.inventory.Inventory",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "RAW_GOLD_BLOCK",
    "id": "org.bukkit.Material#RAW_GOLD_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the currently displayed player list footer for this player.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPlayerListFooter",
    "id": "org.bukkit.entity.Player#getPlayerListFooter()",
    "class": "org.bukkit.entity.Player",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.world.PortalCreateEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.world.PortalCreateEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.world.LootGenerateEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent"
  },
  {
    "descr": "Check whether or not this state will occlude other blocks.\\n\\nBlock state occlusion affects visual features of other blocks (e.g. leaves and\\nwet sponges will not spawn dripping water particles if an occluding state is\\nbelow it), or whether light will pass through it.",
    "param-names": ["BlockData"],
    "param-types": ["org.bukkit.block.data.BlockData"],
    "method": "isOccluding",
    "id": "org.bukkit.block.data.BlockData#isOccluding()",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "descr": "Set whether to reward experience to the player for the trade.",
    "param-names": [
      "MerchantRecipe",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.inventory.MerchantRecipe",
      "boolean"
    ],
    "method": "setExperienceReward",
    "id": "org.bukkit.inventory.MerchantRecipe#setExperienceReward(boolean)",
    "class": "org.bukkit.inventory.MerchantRecipe"
  },
  {
    "descr": "Get the Loot Table's seed.\\n\\nThe seed is used when generating loot.",
    "param-names": ["Lootable"],
    "param-types": ["org.bukkit.loot.Lootable"],
    "method": "getSeed",
    "id": "org.bukkit.loot.Lootable#getSeed()",
    "class": "org.bukkit.loot.Lootable",
    "return": "long"
  },
  {
    "descr": "Get the type of the entity.",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.Entity"],
    "method": "getType",
    "id": "org.bukkit.entity.Entity#getType()",
    "class": "org.bukkit.entity.Entity",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Gets the amount remaining on the ground, if any",
    "method": "getRemaining",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#getRemaining()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "int"
  },
  {
    "descr": "Provides protection against environmental damage",
    "static": true,
    "field": "PROTECTION_ENVIRONMENTAL",
    "id": "org.bukkit.enchantments.Enchantment#PROTECTION_ENVIRONMENTAL",
    "class": "org.bukkit.enchantments.Enchantment",
    "return": "org.bukkit.enchantments.Enchantment"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets the world primarily involved with this event",
    "method": "getWorld",
    "id": "org.bukkit.event.world.ChunkPopulateEvent#getWorld()",
    "event": true,
    "class": "org.bukkit.event.world.ChunkPopulateEvent",
    "return": "org.bukkit.World"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "JUNGLE_SIGN",
    "id": "org.bukkit.Material#JUNGLE_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_SUSPICIOUS_GRAVEL_FALL",
    "id": "org.bukkit.Sound#BLOCK_SUSPICIOUS_GRAVEL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_FUNGUS_HIT",
    "id": "org.bukkit.Sound#BLOCK_FUNGUS_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_FLOWERING_AZALEA_FALL",
    "id": "org.bukkit.Sound#BLOCK_FLOWERING_AZALEA_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_PARROT_IMITATE_WITHER",
    "id": "org.bukkit.Sound#ENTITY_PARROT_IMITATE_WITHER",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the list of players viewing the primary (upper) inventory involved\\nin this event",
    "method": "getViewers",
    "id": "org.bukkit.event.enchantment.PrepareItemEnchantEvent#getViewers()",
    "event": true,
    "class": "org.bukkit.event.enchantment.PrepareItemEnchantEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Get a mutable list of all loot to be generated.\\nAny items added or removed from the returned list will be reflected in\\nthe loot generation. Null items will be treated as air.",
    "method": "getLoot",
    "id": "org.bukkit.event.world.LootGenerateEvent#getLoot()",
    "event": true,
    "class": "org.bukkit.event.world.LootGenerateEvent",
    "return": "java.util.List"
  },
  {
    "static": true,
    "field": "EVOKER_FANGS",
    "id": "org.bukkit.entity.EntityType#EVOKER_FANGS",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "STRIPE_MIDDLE",
    "id": "org.bukkit.block.banner.PatternType#STRIPE_MIDDLE",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Create a ChunkData for use in a generator.\\nSee ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)",
    "param-names": ["World"],
    "static": true,
    "param-types": ["org.bukkit.World"],
    "method": "createChunkData",
    "id": "org.bukkit.Bukkit#createChunkData(org.bukkit.World)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.generator.ChunkGenerator.ChunkData"
  },
  {
    "descr": "Gets the location that entities are teleported to when\\nentering the gateway portal.\\n\\nIf this block state is not placed the location's world will be null.",
    "param-names": ["EndGateway"],
    "param-types": ["org.bukkit.block.EndGateway"],
    "method": "getExitLocation",
    "id": "org.bukkit.block.EndGateway#getExitLocation()",
    "class": "org.bukkit.block.EndGateway",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Mark the specified criteria as awarded at the current time.",
    "param-names": [
      "AdvancementProgress",
      "Criteria"
    ],
    "param-types": [
      "org.bukkit.advancement.AdvancementProgress",
      "java.lang.String"
    ],
    "method": "awardCriteria",
    "id": "org.bukkit.advancement.AdvancementProgress#awardCriteria(java.lang.String)",
    "class": "org.bukkit.advancement.AdvancementProgress",
    "return": "boolean"
  },
  {
    "descr": "A dispenser inventory, with 9 slots of type CONTAINER.",
    "static": true,
    "field": "DISPENSER",
    "id": "org.bukkit.event.inventory.InventoryType#DISPENSER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Sets the biome that this block resides in",
    "param-names": [
      "Block",
      "Bio"
    ],
    "param-types": [
      "org.bukkit.block.Block",
      "org.bukkit.block.Biome"
    ],
    "method": "setBiome",
    "id": "org.bukkit.block.Block#setBiome(org.bukkit.block.Biome)",
    "class": "org.bukkit.block.Block"
  },
  {
    "descr": "Makes this entity attack the given entity with a melee attack.\\nAttack damage is calculated by the server from the attributes and\\nequipment of this mob, and knockback is applied to target as\\nappropriate.",
    "param-names": [
      "LivingEntity",
      "Target"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "org.bukkit.entity.Entity"
    ],
    "method": "attack",
    "id": "org.bukkit.entity.LivingEntity#attack(org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.LivingEntity"
  },
  {
    "descr": "BlockData: Gate",
    "static": true,
    "field": "DARK_OAK_FENCE_GATE",
    "id": "org.bukkit.Material#DARK_OAK_FENCE_GATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Set the new spawn range.\\n",
    "param-names": [
      "CreatureSpawner",
      "Spawn Range"
    ],
    "param-types": [
      "org.bukkit.block.CreatureSpawner",
      "int"
    ],
    "method": "setSpawnRange",
    "id": "org.bukkit.block.CreatureSpawner#setSpawnRange(int)",
    "class": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "Get the center X position of this map.",
    "param-names": ["MapView"],
    "param-types": ["org.bukkit.map.MapView"],
    "method": "getCenterX",
    "id": "org.bukkit.map.MapView#getCenterX()",
    "class": "org.bukkit.map.MapView",
    "return": "int"
  },
  {
    "descr": "Statistics of this type require an EntityType qualifier.",
    "static": true,
    "field": "ENTITY",
    "id": "org.bukkit.Statistic.Type#ENTITY",
    "class": "org.bukkit.Statistic.Type",
    "return": "org.bukkit.Statistic.Type"
  },
  {
    "descr": "Get biome at given coordinates",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int"
    ],
    "method": "getBiome",
    "id": "org.bukkit.ChunkSnapshot#getBiome(int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityPickupItemEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPickupItemEvent"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.server.PluginEnableEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.server.PluginEnableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.ChatColor#valueOf(java.lang.String)",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Put the given ItemStacks into the extra slots\\n\\nSee #getExtraContents() for an explanation of extra slots.",
    "param-names": [
      "PlayerInventory",
      "Items"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack[]"
    ],
    "method": "setExtraContents",
    "id": "org.bukkit.inventory.PlayerInventory#setExtraContents(org.bukkit.inventory.ItemStack[])",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "Set the original source of this cloud.",
    "param-names": [
      "AreaEffectCloud",
      "Source"
    ],
    "param-types": [
      "org.bukkit.entity.AreaEffectCloud",
      "org.bukkit.projectiles.ProjectileSource"
    ],
    "method": "setSource",
    "id": "org.bukkit.entity.AreaEffectCloud#setSource(org.bukkit.projectiles.ProjectileSource)",
    "class": "org.bukkit.entity.AreaEffectCloud"
  },
  {
    "descr": "Gets the state of the block where it will form or spread to.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.BlockFormEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.BlockFormEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Undead creatures. These creatures:\\n\\nAre damaged by potions of healing.\\nAre healed by potions of harming.\\nAre immune to drowning and poison.\\nAre subject to burning in daylight (though not all).\\nSink in water (except Drowned, Phantom Phantoms\\nand Wither Withers).\\nTake additional damage from Enchantment#DAMAGE_UNDEAD.\\nAre ignored by Wither Withers.\\n",
    "static": true,
    "field": "UNDEAD",
    "id": "org.bukkit.entity.EntityCategory#UNDEAD",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory"
  },
  {
    "descr": "Returns the amount of air that the living entity has remaining, in\\nticks.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getRemainingAir",
    "id": "org.bukkit.entity.LivingEntity#getRemainingAir()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "int"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "boolean"
  },
  {
    "descr": "Resets squid rotation.",
    "static": true,
    "field": "SQUID_ROTATE",
    "id": "org.bukkit.EntityEffect#SQUID_ROTATE",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Custom boss bars.",
    "static": true,
    "field": "BOSS_BARS",
    "id": "org.bukkit.Registry#BOSS_BARS",
    "class": "org.bukkit.Registry",
    "return": "org.bukkit.Registry"
  },
  {
    "static": true,
    "field": "RISING",
    "id": "org.bukkit.entity.Sniffer.State#RISING",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.inventory.InventoryClickEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryClickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the face of the block that the hanging entity was placed on",
    "method": "getBlockFace",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getBlockFace()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_DEATH",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "CUT_COPPER_STAIRS",
    "id": "org.bukkit.Material#CUT_COPPER_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "REDSTONE_BLOCK",
    "id": "org.bukkit.Material#REDSTONE_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ITEM_ARMOR_EQUIP_TURTLE",
    "id": "org.bukkit.Sound#ITEM_ARMOR_EQUIP_TURTLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "No rotation",
    "static": true,
    "field": "NONE",
    "id": "org.bukkit.Rotation#NONE",
    "class": "org.bukkit.Rotation",
    "return": "org.bukkit.Rotation"
  },
  {
    "static": true,
    "field": "ANGLER_POTTERY_SHERD",
    "id": "org.bukkit.Material#ANGLER_POTTERY_SHERD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.block.CauldronLevelChangeEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.block.CauldronLevelChangeEvent"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.entity.SlimeSplitEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.entity.SlimeSplitEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "ENTITY_BOAT_PADDLE_LAND",
    "id": "org.bukkit.Sound#ENTITY_BOAT_PADDLE_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_BARDING",
    "id": "org.bukkit.Material#LEGACY_IRON_BARDING",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SPAWNER",
    "id": "org.bukkit.Material#SPAWNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Lightable",
    "static": true,
    "field": "REDSTONE_ORE",
    "id": "org.bukkit.Material#REDSTONE_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ORANGE_CARPET",
    "id": "org.bukkit.Material#ORANGE_CARPET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "OPEN_BARREL",
    "id": "org.bukkit.Statistic#OPEN_BARREL",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "AXOLOTL",
    "id": "org.bukkit.entity.EntityType#AXOLOTL",
    "class": "org.bukkit.entity.EntityType",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Overrides the Note to be played.",
    "param-names": ["Note"],
    "param-types": ["org.bukkit.Note"],
    "method": "setNote",
    "id": "org.bukkit.event.block.NotePlayEvent#setNote(org.bukkit.Note)",
    "event": true,
    "class": "org.bukkit.event.block.NotePlayEvent"
  },
  {
    "descr": "When a villager is angry.",
    "static": true,
    "field": "VILLAGER_ANGRY",
    "id": "org.bukkit.EntityEffect#VILLAGER_ANGRY",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "ENTITY_SLIME_SQUISH_SMALL",
    "id": "org.bukkit.Sound#ENTITY_SLIME_SQUISH_SMALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_FROGSPAWN_HIT",
    "id": "org.bukkit.Sound#BLOCK_FROGSPAWN_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the name that is shown on the player list.",
    "param-names": ["Player"],
    "param-types": ["org.bukkit.entity.Player"],
    "method": "getPlayerListName",
    "id": "org.bukkit.entity.Player#getPlayerListName()",
    "class": "org.bukkit.entity.Player",
    "return": "java.lang.String"
  },
  {
    "descr": "Get whether the firework effect has a trail.",
    "param-names": ["FireworkEffect"],
    "param-types": ["org.bukkit.FireworkEffect"],
    "method": "hasTrail",
    "id": "org.bukkit.FireworkEffect#hasTrail()",
    "class": "org.bukkit.FireworkEffect",
    "return": "boolean"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "MAGENTA_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#MAGENTA_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the bound of this entity.\\nAn idle vex will navigate a 15x11x15 area centered around its bound\\nlocation.\\nWhen summoned by an Evoker, this location will be set to that of the\\nsummoner.",
    "param-names": ["Vex"],
    "param-types": ["org.bukkit.entity.Vex"],
    "method": "getBound",
    "id": "org.bukkit.entity.Vex#getBound()",
    "class": "org.bukkit.entity.Vex",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerRecipeDiscoverEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerRecipeDiscoverEvent",
    "return": "boolean"
  },
  {
    "descr": "Set the item in hand after the event",
    "param-names": ["Item Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setItemStack",
    "id": "org.bukkit.event.player.PlayerBucketEmptyEvent#setItemStack(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEmptyEvent"
  },
  {
    "static": true,
    "field": "ENTITY_MINECART_INSIDE",
    "id": "org.bukkit.Sound#ENTITY_MINECART_INSIDE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sound of a trapdoor closing.",
    "static": true,
    "field": "TRAPDOOR_CLOSE",
    "id": "org.bukkit.Effect#TRAPDOOR_CLOSE",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Indicates all warnings should be printed for deprecated items.",
    "static": true,
    "field": "ON",
    "id": "org.bukkit.Warning.WarningState#ON",
    "class": "org.bukkit.Warning.WarningState",
    "return": "org.bukkit.Warning.WarningState"
  },
  {
    "descr": "When a mob dies.\\n\\nThis will cause client-glitches!",
    "static": true,
    "field": "DEATH",
    "id": "org.bukkit.EntityEffect#DEATH",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Gets the specified page in the book. The given page must exist.\\n\\nPages are 1-indexed.",
    "param-names": [
      "BookMeta",
      "Page"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.BookMeta",
      "int"
    ],
    "method": "getPage",
    "id": "org.bukkit.inventory.meta.BookMeta#getPage(int)",
    "class": "org.bukkit.inventory.meta.BookMeta",
    "return": "java.lang.String"
  },
  {
    "descr": "BlockData: Leaves",
    "static": true,
    "field": "MANGROVE_LEAVES",
    "id": "org.bukkit.Material#MANGROVE_LEAVES",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityDamageByEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByEntityEvent"
  },
  {
    "descr": "Gets a set of recipients that this chat message will be displayed to.\\n\\nThe set returned is not guaranteed to be mutable and may auto-populate\\non access. Any listener accessing the returned set should be aware that\\nit may reduce performance for a lazy set implementation. Listeners\\nshould be aware that modifying the list may throw UnsupportedOperationException if the event caller provides an\\nunmodifiable set.",
    "method": "getRecipients",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#getRecipients()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "java.util.Set"
  },
  {
    "descr": "The flames seen on a mobspawner; a visual effect.",
    "static": true,
    "field": "MOBSPAWNER_FLAMES",
    "id": "org.bukkit.Effect#MOBSPAWNER_FLAMES",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "descr": "Constructs a new Vector based on this Location",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "toVector",
    "id": "org.bukkit.Location#toVector()",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.util.Vector"
  },
  {
    "static": true,
    "field": "BLOCK_SCAFFOLDING_PLACE",
    "id": "org.bukkit.Sound#BLOCK_SCAFFOLDING_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_WOODEN_DOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_WOODEN_DOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Triggered by a Spawner.",
    "static": true,
    "field": "SPAWNER",
    "id": "org.bukkit.event.weather.LightningStrikeEvent.Cause#SPAWNER",
    "class": "org.bukkit.event.weather.LightningStrikeEvent.Cause",
    "return": "org.bukkit.event.weather.LightningStrikeEvent.Cause"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerFishEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerFishEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Creates a RayTraceResult.",
    "param-names": [
      "Hit Position",
      "Hit Block Face"
    ],
    "param-types": [
      "org.bukkit.util.Vector",
      "org.bukkit.block.BlockFace"
    ],
    "id": "org.bukkit.util.RayTraceResult#RayTraceResult(org.bukkit.util.Vector,org.bukkit.block.BlockFace)",
    "class": "org.bukkit.util.RayTraceResult"
  },
  {
    "descr": "Gets the offset of the display block.",
    "param-names": ["Minecart"],
    "param-types": ["org.bukkit.entity.Minecart"],
    "method": "getDisplayBlockOffset",
    "id": "org.bukkit.entity.Minecart#getDisplayBlockOffset()",
    "class": "org.bukkit.entity.Minecart",
    "return": "int"
  },
  {
    "descr": "BlockData: Comparator",
    "static": true,
    "field": "COMPARATOR",
    "id": "org.bukkit.Material#COMPARATOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets one item in this inventory view by its raw slot ID.",
    "param-names": [
      "InventoryView",
      "Slot"
    ],
    "param-types": [
      "org.bukkit.inventory.InventoryView",
      "int"
    ],
    "method": "getItem",
    "id": "org.bukkit.inventory.InventoryView#getItem(int)",
    "class": "org.bukkit.inventory.InventoryView",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "LEGACY_IRON_NUGGET",
    "id": "org.bukkit.Material#LEGACY_IRON_NUGGET",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_SPROUTS_PLACE",
    "id": "org.bukkit.Sound#BLOCK_NETHER_SPROUTS_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_BLOCKS",
    "id": "org.bukkit.Material#MUSIC_DISC_BLOCKS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the face to which the shulker is attached.",
    "param-names": [
      "Shulker",
      "Face"
    ],
    "param-types": [
      "org.bukkit.entity.Shulker",
      "org.bukkit.block.BlockFace"
    ],
    "method": "setAttachedFace",
    "id": "org.bukkit.entity.Shulker#setAttachedFace(org.bukkit.block.BlockFace)",
    "class": "org.bukkit.entity.Shulker"
  },
  {
    "static": true,
    "field": "BLOCK_CHISELED_BOOKSHELF_HIT",
    "id": "org.bukkit.Sound#BLOCK_CHISELED_BOOKSHELF_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_VINE_BREAK",
    "id": "org.bukkit.Sound#BLOCK_VINE_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Sound this entity will make when falling from the given\\nheight (in blocks). The sound will often differ between either a small\\nor a big fall damage sound if the height exceeds 4 blocks.",
    "param-names": [
      "LivingEntity",
      "Fall Height"
    ],
    "param-types": [
      "org.bukkit.entity.LivingEntity",
      "int"
    ],
    "method": "getFallDamageSound",
    "id": "org.bukkit.entity.LivingEntity#getFallDamageSound(int)",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SMOOTH_RED_SANDSTONE",
    "id": "org.bukkit.Material#SMOOTH_RED_SANDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_LAND",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_LAND",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.PlayerLeashEntityEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Fired when a player's item breaks (such as a shovel or flint and steel).\\n\\nAfter this event, the item's amount will be set to item amount - 1\\nand its durability will be reset to 0.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemBreakEvent"
  },
  {
    "static": true,
    "field": "BLOCK_NOTE_BLOCK_BIT",
    "id": "org.bukkit.Sound#BLOCK_NOTE_BLOCK_BIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the bed block involved in this event.",
    "method": "getBed",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent#getBed()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBedEnterEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "STONE_BRICK_STAIRS",
    "id": "org.bukkit.Material#STONE_BRICK_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the world which contains this Block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getWorld",
    "id": "org.bukkit.block.Block#getWorld()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.World"
  },
  {
    "descr": "Spawns the particle (the number of times specified by count)\\nat the target location. The position of each particle will be\\nrandomized positively and negatively by the offset parameters\\non each axis.",
    "param-names": [
      "World",
      "Particle",
      "X",
      "Y",
      "Z",
      "Count",
      "Offset X",
      "Offset Y",
      "Offset Z"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Particle",
      "double",
      "double",
      "double",
      "int",
      "double",
      "double",
      "double"
    ],
    "method": "spawnParticle",
    "id": "org.bukkit.World#spawnParticle(org.bukkit.Particle,double,double,double,int,double,double,double)",
    "class": "org.bukkit.World"
  },
  {
    "descr": "The world doesn't allow sleeping or saving the spawn point (eg,\\nNether, The End or Custom Worlds). This is based on\\nWorld#isBedWorks() and World#isNatural().\\nEntering the bed is prevented and if World#isBedWorks() is\\nfalse then the bed explodes.",
    "static": true,
    "field": "NOT_POSSIBLE_HERE",
    "id": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult#NOT_POSSIBLE_HERE",
    "class": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult",
    "return": "org.bukkit.event.player.PlayerBedEnterEvent.BedEnterResult"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "STRIPPED_DARK_OAK_LOG",
    "id": "org.bukkit.Material#STRIPPED_DARK_OAK_LOG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: GlassPane",
    "static": true,
    "field": "YELLOW_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#YELLOW_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if this state would be properly supported if it were placed at\\nthe given Block.\\n\\nThis may be useful, for instance, to check whether or not a wall torch is\\ncapable of surviving on its neighbouring block states.",
    "param-names": [
      "BlockData",
      "Block"
    ],
    "param-types": [
      "org.bukkit.block.data.BlockData",
      "org.bukkit.block.Block"
    ],
    "method": "isSupported",
    "id": "org.bukkit.block.data.BlockData#isSupported(org.bukkit.block.Block)",
    "class": "org.bukkit.block.data.BlockData",
    "return": "boolean"
  },
  {
    "descr": "Sets the entity's health from 0 to #getMaxHealth(), where 0 is\\ndead.",
    "param-names": [
      "Damageable",
      "Health"
    ],
    "param-types": [
      "org.bukkit.entity.Damageable",
      "double"
    ],
    "method": "setHealth",
    "id": "org.bukkit.entity.Damageable#setHealth(double)",
    "class": "org.bukkit.entity.Damageable"
  },
  {
    "static": true,
    "field": "LEGACY_BEETROOT_SOUP",
    "id": "org.bukkit.Material#LEGACY_BEETROOT_SOUP",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent",
    "return": "boolean"
  },
  {
    "descr": "Get how many mobs attempt to spawn.\\n\\nDefault value is 4.",
    "param-names": ["CreatureSpawner"],
    "param-types": ["org.bukkit.block.CreatureSpawner"],
    "method": "getSpawnCount",
    "id": "org.bukkit.block.CreatureSpawner#getSpawnCount()",
    "class": "org.bukkit.block.CreatureSpawner",
    "return": "int"
  },
  {
    "descr": "Get the entity hooked by this fish hook.",
    "param-names": ["FishHook"],
    "param-types": ["org.bukkit.entity.FishHook"],
    "method": "getHookedEntity",
    "id": "org.bukkit.entity.FishHook#getHookedEntity()",
    "class": "org.bukkit.entity.FishHook",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "When a zombie infects a villager",
    "static": true,
    "field": "INFECTION",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#INFECTION",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "When a tadpole converts to a frog",
    "static": true,
    "field": "METAMORPHOSIS",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#METAMORPHOSIS",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "static": true,
    "field": "INTENTIONALLY_EMPTY",
    "id": "org.bukkit.Sound#INTENTIONALLY_EMPTY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "FARMER_GIFT",
    "id": "org.bukkit.loot.LootTables#FARMER_GIFT",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "static": true,
    "field": "PUMPKIN_PIE",
    "id": "org.bukkit.Material#PUMPKIN_PIE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Called when a lingering potion applies it's effects. Happens\\nonce every 5 ticks",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent"
  },
  {
    "descr": "Called when a player switches to another world.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerChangedWorldEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.server.PluginDisableEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.server.PluginDisableEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.CraftItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM",
    "id": "org.bukkit.Sound#ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["DoubleChest"],
    "param-types": ["org.bukkit.block.DoubleChest"],
    "method": "getLeftSide",
    "id": "org.bukkit.block.DoubleChest#getLeftSide()",
    "class": "org.bukkit.block.DoubleChest",
    "return": "org.bukkit.inventory.InventoryHolder"
  },
  {
    "descr": "Gets the new state of the affected block.",
    "method": "getNewState",
    "id": "org.bukkit.event.block.MoistureChangeEvent#getNewState()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "org.bukkit.block.BlockState"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.EntityRegainHealthEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityRegainHealthEvent",
    "return": "boolean"
  },
  {
    "descr": "Returns all known MusicInstruments.",
    "static": true,
    "method": "values",
    "id": "org.bukkit.MusicInstrument#values()",
    "class": "org.bukkit.MusicInstrument",
    "return": "java.util.Collection"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryPickupItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryPickupItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EnderDragonChangePhaseEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EnderDragonChangePhaseEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the plugin involved in this event",
    "method": "getPlugin",
    "id": "org.bukkit.event.server.PluginDisableEvent#getPlugin()",
    "event": true,
    "class": "org.bukkit.event.server.PluginDisableEvent",
    "return": "org.bukkit.plugin.Plugin"
  },
  {
    "static": true,
    "field": "LEGACY_CHAINMAIL_LEGGINGS",
    "id": "org.bukkit.Material#LEGACY_CHAINMAIL_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.weather.LightningStrikeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.weather.LightningStrikeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "BLUE",
    "id": "org.bukkit.boss.BarColor#BLUE",
    "class": "org.bukkit.boss.BarColor",
    "return": "org.bukkit.boss.BarColor"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerLoginEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLoginEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_STAL",
    "id": "org.bukkit.Material#MUSIC_DISC_STAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the intensity of the potion's effects for given entity; This\\ndepends on the distance to the impact center",
    "param-names": ["Entity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getIntensity",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getIntensity(org.bukkit.entity.LivingEntity)",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "double"
  },
  {
    "descr": "The percentage of online players which must be sleeping for the night to\\nadvance.",
    "static": true,
    "field": "PLAYERS_SLEEPING_PERCENTAGE",
    "id": "org.bukkit.GameRule#PLAYERS_SLEEPING_PERCENTAGE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "Gets the biome provider for this world",
    "param-names": ["World"],
    "param-types": ["org.bukkit.World"],
    "method": "getBiomeProvider",
    "id": "org.bukkit.World#getBiomeProvider()",
    "class": "org.bukkit.World",
    "return": "org.bukkit.generator.BiomeProvider"
  },
  {
    "descr": "Returns the effects that are applied by this potion.",
    "param-names": ["ThrownPotion"],
    "param-types": ["org.bukkit.entity.ThrownPotion"],
    "method": "getEffects",
    "id": "org.bukkit.entity.ThrownPotion#getEffects()",
    "class": "org.bukkit.entity.ThrownPotion",
    "return": "java.util.Collection"
  },
  {
    "descr": "Gets the z-coordinate of this block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getZ",
    "id": "org.bukkit.block.Block#getZ()",
    "class": "org.bukkit.block.Block",
    "return": "int"
  },
  {
    "descr": "Returns the hand that was used to place the hanging entity, or null\\nif a player did not place the hanging entity.",
    "method": "getHand",
    "id": "org.bukkit.event.hanging.HangingPlaceEvent#getHand()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingPlaceEvent",
    "return": "org.bukkit.inventory.EquipmentSlot"
  },
  {
    "static": true,
    "field": "BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN",
    "id": "org.bukkit.Sound#BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.potion.PotionType#values()",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType[]"
  },
  {
    "static": true,
    "field": "FALLING_HONEY",
    "id": "org.bukkit.Particle#FALLING_HONEY",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "static": true,
    "field": "LEGACY_COAL_BLOCK",
    "id": "org.bukkit.Material#LEGACY_COAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_FROGSPAWN_BREAK",
    "id": "org.bukkit.Sound#BLOCK_FROGSPAWN_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.AreaEffectCloudApplyEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.AreaEffectCloudApplyEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "ZOMBIFIED_PIGLIN_SPAWN_EGG",
    "id": "org.bukkit.Material#ZOMBIFIED_PIGLIN_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.ItemSpawnEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.ItemSpawnEvent"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.inventory.BrewingStandFuelEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.inventory.BrewingStandFuelEvent"
  },
  {
    "descr": "The chest is the right hand side of a double chest and shares a 54\\nblock inventory with the chest to its left.",
    "static": true,
    "field": "RIGHT",
    "id": "org.bukkit.block.data.type.Chest.Type#RIGHT",
    "class": "org.bukkit.block.data.type.Chest.Type",
    "return": "org.bukkit.block.data.type.Chest.Type"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Wither.Head#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Wither.Head",
    "return": "org.bukkit.entity.Wither.Head"
  },
  {
    "static": true,
    "field": "ENTITY_HORSE_EAT",
    "id": "org.bukkit.Sound#ENTITY_HORSE_EAT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.world.EntitiesUnloadEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.world.EntitiesUnloadEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "BlockData: Stairs",
    "static": true,
    "field": "QUARTZ_STAIRS",
    "id": "org.bukkit.Material#QUARTZ_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.MoistureChangeEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.MoistureChangeEvent",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "field": "LEGACY_COAL_ORE",
    "id": "org.bukkit.Material#LEGACY_COAL_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the block involved in this event.",
    "method": "getBlock",
    "id": "org.bukkit.event.block.BlockDispenseArmorEvent#getBlock()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDispenseArmorEvent",
    "return": "org.bukkit.block.Block"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerBucketEntityEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketEntityEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the x-coordinate of this location",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "getX",
    "id": "org.bukkit.Location#getX()",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "descr": "A pseudo-slot representing the area outside the inventory window.",
    "static": true,
    "field": "OUTSIDE",
    "id": "org.bukkit.event.inventory.InventoryType.SlotType#OUTSIDE",
    "class": "org.bukkit.event.inventory.InventoryType.SlotType",
    "return": "org.bukkit.event.inventory.InventoryType.SlotType"
  },
  {
    "descr": "When an entity breeds to create a child, this also include Shulker and Allay",
    "static": true,
    "field": "BREEDING",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#BREEDING",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Gets the last interaction on this entity.",
    "param-names": ["Interaction"],
    "param-types": ["org.bukkit.entity.Interaction"],
    "method": "getLastInteraction",
    "id": "org.bukkit.entity.Interaction#getLastInteraction()",
    "class": "org.bukkit.entity.Interaction",
    "return": "org.bukkit.entity.Interaction.PreviousInteraction"
  },
  {
    "static": true,
    "field": "AMBIENT_WARPED_FOREST_MOOD",
    "id": "org.bukkit.Sound#AMBIENT_WARPED_FOREST_MOOD",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Black with white patches, or white with black patches?",
    "static": true,
    "field": "BLACK_AND_WHITE",
    "id": "org.bukkit.entity.Rabbit.Type#BLACK_AND_WHITE",
    "class": "org.bukkit.entity.Rabbit.Type",
    "return": "org.bukkit.entity.Rabbit.Type"
  },
  {
    "descr": "Checks if this Material is an obtainable item.",
    "param-names": ["Material"],
    "param-types": ["org.bukkit.Material"],
    "method": "isItem",
    "id": "org.bukkit.Material#isItem()",
    "class": "org.bukkit.Material",
    "return": "boolean"
  },
  {
    "descr": "Gets whether a parrot is dancing",
    "param-names": ["Parrot"],
    "param-types": ["org.bukkit.entity.Parrot"],
    "method": "isDancing",
    "id": "org.bukkit.entity.Parrot#isDancing()",
    "class": "org.bukkit.entity.Parrot",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "ENTITY_ALLAY_AMBIENT_WITH_ITEM",
    "id": "org.bukkit.Sound#ENTITY_ALLAY_AMBIENT_WITH_ITEM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "LEGACY_BURNING_FURNACE",
    "id": "org.bukkit.Material#LEGACY_BURNING_FURNACE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_TURTLE_SHAMBLE",
    "id": "org.bukkit.Sound#ENTITY_TURTLE_SHAMBLE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.world.WorldUnloadEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.world.WorldUnloadEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Sets if the EnderSignal should drop an item on death; or if it should\\nshatter.",
    "param-names": [
      "EnderSignal",
      "Drop"
    ],
    "param-types": [
      "org.bukkit.entity.EnderSignal",
      "boolean"
    ],
    "method": "setDropItem",
    "id": "org.bukkit.entity.EnderSignal#setDropItem(boolean)",
    "class": "org.bukkit.entity.EnderSignal"
  },
  {
    "descr": "Sets the value of the 'distance' property.",
    "param-names": [
      "Leaves",
      "Distance"
    ],
    "param-types": [
      "org.bukkit.block.data.type.Leaves",
      "int"
    ],
    "method": "setDistance",
    "id": "org.bukkit.block.data.type.Leaves#setDistance(int)",
    "class": "org.bukkit.block.data.type.Leaves"
  },
  {
    "descr": "Gets the cause why the effect has changed.",
    "method": "getCause",
    "id": "org.bukkit.event.entity.EntityPotionEffectEvent#getCause()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPotionEffectEvent",
    "return": "org.bukkit.event.entity.EntityPotionEffectEvent.Cause"
  },
  {
    "descr": "Gets the InventoryAction that triggered this event.\\n\\nThis action cannot be changed, and represents what the normal outcome\\nof the event will be. To change the behavior of this\\nInventoryClickEvent, changes must be manually applied.",
    "method": "getAction",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#getAction()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "org.bukkit.event.inventory.InventoryAction"
  },
  {
    "descr": "Get a Criteria for the specified statistic pertaining to an entity type.\\n\\nThis method expects a Statistic of Type#ENTITY. This acts as a convenience\\nto create more complex compound criteria such as being killed by a specific entity type.\\nAn example would be Criteria.statistic(Statistic.KILL_ENTITY, EntityType.CREEPER),\\nreturning a Criteria representing \"minecraft.killed:minecraft.creeper\" which will increment\\nwhen the player kills a creepers.\\n\\nIf the provided statistic does not require additional data, #statistic(Statistic)\\nis called and returned instead.\\n\\nThis method provides no guarantee that any given criteria exists on the vanilla server.",
    "param-names": [
      "Statistic",
      "Entity Type"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.Statistic",
      "org.bukkit.entity.EntityType"
    ],
    "method": "statistic",
    "id": "org.bukkit.scoreboard.Criteria#statistic(org.bukkit.Statistic,org.bukkit.entity.EntityType)",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Sets the border to a square region with the specified side length in blocks.",
    "param-names": [
      "WorldBorder",
      "New Size",
      "Seconds"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "double",
      "long"
    ],
    "method": "setSize",
    "id": "org.bukkit.WorldBorder#setSize(double,long)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "descr": "The cooldown was set by picking up an experience orb.",
    "static": true,
    "field": "PICKUP_ORB",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason#PICKUP_ORB",
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason",
    "return": "org.bukkit.event.player.PlayerExpCooldownChangeEvent.ChangeReason"
  },
  {
    "descr": "Sets the map ID. This is used to determine what map is displayed.",
    "param-names": [
      "MapMeta",
      "Id"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.MapMeta",
      "int"
    ],
    "method": "setMapId",
    "id": "org.bukkit.inventory.meta.MapMeta#setMapId(int)",
    "class": "org.bukkit.inventory.meta.MapMeta"
  },
  {
    "descr": "Sets the new cooldown for the player.",
    "param-names": ["New Cooldown"],
    "param-types": ["int"],
    "method": "setNewCooldown",
    "id": "org.bukkit.event.player.PlayerExpCooldownChangeEvent#setNewCooldown(int)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerExpCooldownChangeEvent"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ExplosionPrimeEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ExplosionPrimeEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Sets the item the entity is holding",
    "param-names": [
      "EntityEquipment",
      "Stack"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInHand",
    "id": "org.bukkit.inventory.EntityEquipment#setItemInHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "static": true,
    "field": "ENTITY_MOOSHROOM_SUSPICIOUS_MILK",
    "id": "org.bukkit.Sound#ENTITY_MOOSHROOM_SUSPICIOUS_MILK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockRedstoneEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockRedstoneEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Increments automatically when a player is killed by a player on the dark aqua team.",
    "static": true,
    "field": "KILLED_BY_TEAM_DARK_AQUA",
    "id": "org.bukkit.scoreboard.Criteria#KILLED_BY_TEAM_DARK_AQUA",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "descr": "Get the vibration arrival time in ticks.",
    "param-names": ["Vibration"],
    "param-types": ["org.bukkit.Vibration"],
    "method": "getArrivalTime",
    "id": "org.bukkit.Vibration#getArrivalTime()",
    "class": "org.bukkit.Vibration",
    "return": "int"
  },
  {
    "descr": "Entity hurt due to berry bush. Prickly!",
    "static": true,
    "field": "HURT_BERRY_BUSH",
    "id": "org.bukkit.EntityEffect#HURT_BERRY_BUSH",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "The highest non-air block, for worldgen.",
    "static": true,
    "field": "WORLD_SURFACE_WG",
    "id": "org.bukkit.HeightMap#WORLD_SURFACE_WG",
    "class": "org.bukkit.HeightMap",
    "return": "org.bukkit.HeightMap"
  },
  {
    "static": true,
    "field": "JUMP",
    "id": "org.bukkit.Statistic#JUMP",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Armorer profession. Wears a black apron. Armorers primarily trade for\\niron armor, chainmail armor, and sometimes diamond armor.",
    "static": true,
    "field": "ARMORER",
    "id": "org.bukkit.entity.Villager.Profession#ARMORER",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "static": true,
    "field": "ENTITY_TROPICAL_FISH_DEATH",
    "id": "org.bukkit.Sound#ENTITY_TROPICAL_FISH_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.block.BlockDamageEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.block.BlockDamageEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the name of this command sender",
    "param-names": ["CommandSender"],
    "param-types": ["org.bukkit.command.CommandSender"],
    "method": "getName",
    "id": "org.bukkit.command.CommandSender#getName()",
    "class": "org.bukkit.command.CommandSender",
    "return": "java.lang.String"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerGameModeChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerGameModeChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerStatisticIncrementEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerStatisticIncrementEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "The sound/particles used by the enderdragon's breath\\nattack.",
    "static": true,
    "field": "DRAGON_BREATH",
    "id": "org.bukkit.Effect#DRAGON_BREATH",
    "class": "org.bukkit.Effect",
    "return": "org.bukkit.Effect"
  },
  {
    "static": true,
    "field": "EXPLOSION_LARGE",
    "id": "org.bukkit.Particle#EXPLOSION_LARGE",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "BlockData: Grindstone",
    "static": true,
    "field": "GRINDSTONE",
    "id": "org.bukkit.Material#GRINDSTONE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "boolean"
  },
  {
    "descr": "Increments automatically when a player kills another player.",
    "static": true,
    "field": "PLAYER_KILL_COUNT",
    "id": "org.bukkit.scoreboard.Criteria#PLAYER_KILL_COUNT",
    "class": "org.bukkit.scoreboard.Criteria",
    "return": "org.bukkit.scoreboard.Criteria"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_SPLASH",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_SPLASH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the id and data of the block that the Enderman is carrying.",
    "param-names": ["Enderman"],
    "param-types": ["org.bukkit.entity.Enderman"],
    "method": "getCarriedMaterial",
    "id": "org.bukkit.entity.Enderman#getCarriedMaterial()",
    "class": "org.bukkit.entity.Enderman",
    "return": "org.bukkit.material.MaterialData"
  },
  {
    "static": true,
    "field": "FISHING",
    "id": "org.bukkit.loot.LootTables#FISHING",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a right\\nclick.",
    "method": "isRightClick",
    "id": "org.bukkit.event.inventory.CraftItemEvent#isRightClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.CraftItemEvent",
    "return": "boolean"
  },
  {
    "descr": "Adds a new empty PermissionAttachment to this object",
    "param-names": [
      "Permissible",
      "Plugin"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.plugin.Plugin"
    ],
    "method": "addAttachment",
    "id": "org.bukkit.permissions.Permissible#addAttachment(org.bukkit.plugin.Plugin)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "org.bukkit.permissions.PermissionAttachment"
  },
  {
    "static": true,
    "field": "FROZEN_RIVER",
    "id": "org.bukkit.block.Biome#FROZEN_RIVER",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "static": true,
    "field": "WOODEN_PICKAXE",
    "id": "org.bukkit.Material#WOODEN_PICKAXE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerBucketFishEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerBucketFishEvent",
    "return": "boolean"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "CHERRY_SIGN",
    "id": "org.bukkit.Material#CHERRY_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the location that this end crystal is pointing its beam to.",
    "param-names": ["EnderCrystal"],
    "param-types": ["org.bukkit.entity.EnderCrystal"],
    "method": "getBeamTarget",
    "id": "org.bukkit.entity.EnderCrystal#getBeamTarget()",
    "class": "org.bukkit.entity.EnderCrystal",
    "return": "org.bukkit.Location"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "LEGACY_COAL",
    "id": "org.bukkit.Material#LEGACY_COAL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Checks if the specified Chunk is loaded",
    "param-names": [
      "World",
      "Chunk"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Chunk"
    ],
    "method": "isChunkLoaded",
    "id": "org.bukkit.World#isChunkLoaded(org.bukkit.Chunk)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Stores details for players attempting to log in",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPreLoginEvent"
  },
  {
    "static": true,
    "field": "ENTITY_STRIDER_STEP",
    "id": "org.bukkit.Sound#ENTITY_STRIDER_STEP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.Statistic.Type#valueOf(java.lang.String)",
    "class": "org.bukkit.Statistic.Type",
    "return": "org.bukkit.Statistic.Type"
  },
  {
    "descr": "Sets the owner of the skull.",
    "param-names": [
      "SkullMeta",
      "Owner"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SkullMeta",
      "java.lang.String"
    ],
    "method": "setOwner",
    "id": "org.bukkit.inventory.meta.SkullMeta#setOwner(java.lang.String)",
    "class": "org.bukkit.inventory.meta.SkullMeta",
    "return": "boolean"
  },
  {
    "descr": "Sets the burn time for this fuel",
    "param-names": ["Burn Time"],
    "param-types": ["int"],
    "method": "setBurnTime",
    "id": "org.bukkit.event.inventory.FurnaceBurnEvent#setBurnTime(int)",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceBurnEvent"
  },
  {
    "descr": "Returns the Entity involved in this event",
    "method": "getEntity",
    "id": "org.bukkit.event.entity.ProjectileLaunchEvent#getEntity()",
    "event": true,
    "class": "org.bukkit.event.entity.ProjectileLaunchEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "descr": "Check if each component of this Vector is finite.",
    "param-names": ["Vector"],
    "param-types": ["org.bukkit.util.Vector"],
    "method": "checkFinite",
    "id": "org.bukkit.util.Vector#checkFinite()",
    "class": "org.bukkit.util.Vector"
  },
  {
    "descr": "Sets the new border center.",
    "param-names": [
      "WorldBorder",
      "X",
      "Z"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "double",
      "double"
    ],
    "method": "setCenter",
    "id": "org.bukkit.WorldBorder#setCenter(double,double)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "static": true,
    "field": "SKULL",
    "id": "org.bukkit.block.banner.PatternType#SKULL",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Makes the text italic.",
    "static": true,
    "field": "ITALIC",
    "id": "org.bukkit.ChatColor#ITALIC",
    "class": "org.bukkit.ChatColor",
    "return": "org.bukkit.ChatColor"
  },
  {
    "descr": "Pseudo composter inventory with 0 or 1 slots of undefined type.",
    "static": true,
    "field": "COMPOSTER",
    "id": "org.bukkit.event.inventory.InventoryType#COMPOSTER",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Sets the team's ability to see PotionEffectType#INVISIBILITY invisible teammates.",
    "param-names": [
      "Team",
      "Enabled"
    ],
    "param-types": [
      "org.bukkit.scoreboard.Team",
      "boolean"
    ],
    "method": "setCanSeeFriendlyInvisibles",
    "id": "org.bukkit.scoreboard.Team#setCanSeeFriendlyInvisibles(boolean)",
    "class": "org.bukkit.scoreboard.Team"
  },
  {
    "static": true,
    "field": "AZTEC",
    "id": "org.bukkit.Art#AZTEC",
    "class": "org.bukkit.Art",
    "return": "org.bukkit.Art"
  },
  {
    "descr": "Play a sound for a player at the location.\\n\\nThis function will fail silently if Location or Sound are null. No sound\\nwill be heard by the player if their client does not have the respective\\nsound for the value passed.",
    "param-names": [
      "Player",
      "Location",
      "Sound",
      "Category",
      "Volume",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "java.lang.String",
      "org.bukkit.SoundCategory",
      "float",
      "float"
    ],
    "method": "playSound",
    "id": "org.bukkit.entity.Player#playSound(org.bukkit.Location,java.lang.String,org.bukkit.SoundCategory,float,float)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the name displayed to entries for this team",
    "param-names": ["Team"],
    "param-types": ["org.bukkit.scoreboard.Team"],
    "method": "getDisplayName",
    "id": "org.bukkit.scoreboard.Team#getDisplayName()",
    "class": "org.bukkit.scoreboard.Team",
    "return": "java.lang.String"
  },
  {
    "descr": "Cartographer profession. Wears a white robe. Cartographers primarily\\ntrade for explorer maps and some paper.",
    "static": true,
    "field": "CARTOGRAPHER",
    "id": "org.bukkit.entity.Villager.Profession#CARTOGRAPHER",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "descr": "Sets the chance of the boots being dropped upon this creature's death.\\n\\nA drop chance of 0.0F will never drop\\nA drop chance of 1.0F will always drop\\n",
    "param-names": [
      "EntityEquipment",
      "Chance"
    ],
    "param-types": [
      "org.bukkit.inventory.EntityEquipment",
      "float"
    ],
    "method": "setBootsDropChance",
    "id": "org.bukkit.inventory.EntityEquipment#setBootsDropChance(float)",
    "class": "org.bukkit.inventory.EntityEquipment"
  },
  {
    "descr": "Gets the resultant ItemStack for this event",
    "method": "getResult",
    "id": "org.bukkit.event.inventory.FurnaceSmeltEvent#getResult()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceSmeltEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerKickEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerKickEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Set result item, may be null.",
    "param-names": ["Result"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setResult",
    "id": "org.bukkit.event.inventory.PrepareSmithingEvent#setResult(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareSmithingEvent"
  },
  {
    "static": true,
    "field": "COOKED_MUTTON",
    "id": "org.bukkit.Material#COOKED_MUTTON",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "A small ball effect.",
    "static": true,
    "field": "BALL",
    "id": "org.bukkit.FireworkEffect.Type#BALL",
    "class": "org.bukkit.FireworkEffect.Type",
    "return": "org.bukkit.FireworkEffect.Type"
  },
  {
    "descr": "Whether command blocks should notify admins when they perform commands.",
    "static": true,
    "field": "COMMAND_BLOCK_OUTPUT",
    "id": "org.bukkit.GameRule#COMMAND_BLOCK_OUTPUT",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "WARPED_FENCE",
    "id": "org.bukkit.Material#WARPED_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Totem prevents entity death.",
    "static": true,
    "field": "TOTEM_RESURRECT",
    "id": "org.bukkit.EntityEffect#TOTEM_RESURRECT",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "ENDERMAN",
    "id": "org.bukkit.loot.LootTables#ENDERMAN",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets the Inventory that the ItemStack is being taken from",
    "method": "getSource",
    "id": "org.bukkit.event.inventory.InventoryMoveItemEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryMoveItemEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Allows the Enchantment to be placed on head slot armor",
    "static": true,
    "field": "ARMOR_HEAD",
    "id": "org.bukkit.enchantments.EnchantmentTarget#ARMOR_HEAD",
    "class": "org.bukkit.enchantments.EnchantmentTarget",
    "return": "org.bukkit.enchantments.EnchantmentTarget"
  },
  {
    "static": true,
    "field": "BLOCK_VINE_FALL",
    "id": "org.bukkit.Sound#BLOCK_VINE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets whether the Ghast is charging",
    "param-names": [
      "Ghast",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Ghast",
      "boolean"
    ],
    "method": "setCharging",
    "id": "org.bukkit.entity.Ghast#setCharging(boolean)",
    "class": "org.bukkit.entity.Ghast"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.block.data.type.Bell.Attachment#values()",
    "class": "org.bukkit.block.data.type.Bell.Attachment",
    "return": "org.bukkit.block.data.type.Bell.Attachment[]"
  },
  {
    "static": true,
    "field": "SWEEP_ATTACK",
    "id": "org.bukkit.Particle#SWEEP_ATTACK",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "DEAD_BUBBLE_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#DEAD_BUBBLE_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_WARDEN_HURT",
    "id": "org.bukkit.Sound#ENTITY_WARDEN_HURT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the item stack associated with this item drop.",
    "param-names": ["Item"],
    "param-types": ["org.bukkit.entity.Item"],
    "method": "getItemStack",
    "id": "org.bukkit.entity.Item#getItemStack()",
    "class": "org.bukkit.entity.Item",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ENTITY_ENDER_DRAGON_DEATH",
    "id": "org.bukkit.Sound#ENTITY_ENDER_DRAGON_DEATH",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_RIPTIDE_1",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_RIPTIDE_1",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MAGENTA_WOOL",
    "id": "org.bukkit.Material#MAGENTA_WOOL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.PrepareInventoryResultEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.PrepareInventoryResultEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_STAIRS",
    "id": "org.bukkit.Material#LEGACY_WOOD_STAIRS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the value of the 'dusted' property.",
    "param-names": [
      "Brushable",
      "Dusted"
    ],
    "param-types": [
      "org.bukkit.block.data.Brushable",
      "int"
    ],
    "method": "setDusted",
    "id": "org.bukkit.block.data.Brushable#setDusted(int)",
    "class": "org.bukkit.block.data.Brushable"
  },
  {
    "descr": "Anger level 40-79.",
    "static": true,
    "field": "AGITATED",
    "id": "org.bukkit.entity.Warden.AngerLevel#AGITATED",
    "class": "org.bukkit.entity.Warden.AngerLevel",
    "return": "org.bukkit.entity.Warden.AngerLevel"
  },
  {
    "descr": "Check if this structure block is currently showing all air blocks",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "isShowAir",
    "id": "org.bukkit.block.Structure#isShowAir()",
    "class": "org.bukkit.block.Structure",
    "return": "boolean"
  },
  {
    "descr": "Gets a copy the stored enchantments in this ItemMeta.",
    "param-names": ["EnchantmentStorageMeta"],
    "param-types": ["org.bukkit.inventory.meta.EnchantmentStorageMeta"],
    "method": "getStoredEnchants",
    "id": "org.bukkit.inventory.meta.EnchantmentStorageMeta#getStoredEnchants()",
    "class": "org.bukkit.inventory.meta.EnchantmentStorageMeta",
    "return": "java.util.Map"
  },
  {
    "descr": "Sets the source of this ban.\\n\\nNote: A source is considered any String, although this is generally a\\nplayer name.",
    "param-names": [
      "BanEntry",
      "Source"
    ],
    "param-types": [
      "org.bukkit.BanEntry",
      "java.lang.String"
    ],
    "method": "setSource",
    "id": "org.bukkit.BanEntry#setSource(java.lang.String)",
    "class": "org.bukkit.BanEntry"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "BLOCK_POLISHED_DEEPSLATE_FALL",
    "id": "org.bukkit.Sound#BLOCK_POLISHED_DEEPSLATE_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MOOSHROOM",
    "id": "org.bukkit.loot.LootTables#MOOSHROOM",
    "class": "org.bukkit.loot.LootTables",
    "return": "org.bukkit.loot.LootTables"
  },
  {
    "descr": "Gets if the text is see through.",
    "param-names": ["TextDisplay"],
    "param-types": ["org.bukkit.entity.TextDisplay"],
    "method": "isSeeThrough",
    "id": "org.bukkit.entity.TextDisplay#isSeeThrough()",
    "class": "org.bukkit.entity.TextDisplay",
    "return": "boolean"
  },
  {
    "descr": "The relative position of the structure outline based on the position of\\nthe structure block. Maximum allowed distance is 48 blocks in any\\ndirection.",
    "param-names": ["Structure"],
    "param-types": ["org.bukkit.block.Structure"],
    "method": "getRelativePosition",
    "id": "org.bukkit.block.Structure#getRelativePosition()",
    "class": "org.bukkit.block.Structure",
    "return": "org.bukkit.util.BlockVector"
  },
  {
    "descr": "BlockData: Lantern",
    "static": true,
    "field": "LANTERN",
    "id": "org.bukkit.Material#LANTERN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the \"friendly\" name to display of this player. This may include\\ncolor.\\n\\nNote that this name will not be displayed in game, only in chat and\\nplaces defined by plugins.",
    "param-names": [
      "Player",
      "Name"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "java.lang.String"
    ],
    "method": "setDisplayName",
    "id": "org.bukkit.entity.Player#setDisplayName(java.lang.String)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "descr": "Removes a custom potion effect from this suspicious stew.",
    "param-names": [
      "SuspiciousStewMeta",
      "Type"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.SuspiciousStewMeta",
      "org.bukkit.potion.PotionEffectType"
    ],
    "method": "removeCustomEffect",
    "id": "org.bukkit.inventory.meta.SuspiciousStewMeta#removeCustomEffect(org.bukkit.potion.PotionEffectType)",
    "class": "org.bukkit.inventory.meta.SuspiciousStewMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Panda.Gene#values()",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene[]"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_WOOD_TRAPDOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_NETHER_WOOD_TRAPDOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Sets the item the player is holding in their main hand.",
    "param-names": [
      "PlayerInventory",
      "Item"
    ],
    "param-types": [
      "org.bukkit.inventory.PlayerInventory",
      "org.bukkit.inventory.ItemStack"
    ],
    "method": "setItemInMainHand",
    "id": "org.bukkit.inventory.PlayerInventory#setItemInMainHand(org.bukkit.inventory.ItemStack)",
    "class": "org.bukkit.inventory.PlayerInventory"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "CRIMSON_HYPHAE",
    "id": "org.bukkit.Material#CRIMSON_HYPHAE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get world type (level-type setting) for default world.",
    "static": true,
    "method": "getWorldType",
    "id": "org.bukkit.Bukkit#getWorldType()",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.String"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.player.PlayerPickupArrowEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerPickupArrowEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the item on the cursor.",
    "param-names": ["Stack"],
    "param-types": ["org.bukkit.inventory.ItemStack"],
    "method": "setCursor",
    "id": "org.bukkit.event.inventory.SmithItemEvent#setCursor(org.bukkit.inventory.ItemStack)",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent"
  },
  {
    "static": true,
    "field": "BORDER",
    "id": "org.bukkit.block.banner.PatternType#BORDER",
    "class": "org.bukkit.block.banner.PatternType",
    "return": "org.bukkit.block.banner.PatternType"
  },
  {
    "descr": "Sets the display block for this minecart.\\nPassing a null value will set the minecart to have no display block.",
    "param-names": [
      "Minecart",
      "Material"
    ],
    "param-types": [
      "org.bukkit.entity.Minecart",
      "org.bukkit.material.MaterialData"
    ],
    "method": "setDisplayBlock",
    "id": "org.bukkit.entity.Minecart#setDisplayBlock(org.bukkit.material.MaterialData)",
    "class": "org.bukkit.entity.Minecart"
  },
  {
    "descr": "Cat taming failed.",
    "static": true,
    "field": "CAT_TAME_FAIL",
    "id": "org.bukkit.EntityEffect#CAT_TAME_FAIL",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "static": true,
    "field": "ITEM_TRIDENT_THROW",
    "id": "org.bukkit.Sound#ITEM_TRIDENT_THROW",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Creates explosion at given coordinates with given power",
    "param-names": [
      "World",
      "Loc",
      "Power"
    ],
    "param-types": [
      "org.bukkit.World",
      "org.bukkit.Location",
      "float"
    ],
    "method": "createExplosion",
    "id": "org.bukkit.World#createExplosion(org.bukkit.Location,float)",
    "class": "org.bukkit.World",
    "return": "boolean"
  },
  {
    "descr": "Inner corner stair block with higher right side.",
    "static": true,
    "field": "INNER_RIGHT",
    "id": "org.bukkit.block.data.type.Stairs.Shape#INNER_RIGHT",
    "class": "org.bukkit.block.data.type.Stairs.Shape",
    "return": "org.bukkit.block.data.type.Stairs.Shape"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityTargetEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTargetEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "BlockData: AnaloguePowerable",
    "static": true,
    "field": "HEAVY_WEIGHTED_PRESSURE_PLATE",
    "id": "org.bukkit.Material#HEAVY_WEIGHTED_PRESSURE_PLATE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the squared distance between this location and another.",
    "param-names": [
      "Location",
      "O"
    ],
    "param-types": [
      "org.bukkit.Location",
      "org.bukkit.Location"
    ],
    "method": "distanceSquared",
    "id": "org.bukkit.Location#distanceSquared(org.bukkit.Location)",
    "class": "org.bukkit.Location",
    "return": "double"
  },
  {
    "static": true,
    "field": "LEGACY_SPONGE",
    "id": "org.bukkit.Material#LEGACY_SPONGE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_ITEM_PICKUP",
    "id": "org.bukkit.Sound#ENTITY_ITEM_PICKUP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the sky lighting component of this brightness.",
    "param-names": ["Display.Brightness"],
    "param-types": ["org.bukkit.entity.Display.Brightness"],
    "method": "getSkyLight",
    "id": "org.bukkit.entity.Display.Brightness#getSkyLight()",
    "class": "org.bukkit.entity.Display.Brightness",
    "return": "int"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause#values()",
    "class": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause",
    "return": "org.bukkit.event.player.PlayerSpawnChangeEvent.Cause[]"
  },
  {
    "static": true,
    "field": "ENTITY_RABBIT_ATTACK",
    "id": "org.bukkit.Sound#ENTITY_RABBIT_ATTACK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "boolean"
  },
  {
    "descr": "Gets the source ItemStack for this event.",
    "method": "getSource",
    "id": "org.bukkit.event.inventory.FurnaceStartSmeltEvent#getSource()",
    "event": true,
    "class": "org.bukkit.event.inventory.FurnaceStartSmeltEvent",
    "return": "org.bukkit.inventory.ItemStack"
  },
  {
    "static": true,
    "field": "ENTITY_ZOMBIFIED_PIGLIN_ANGRY",
    "id": "org.bukkit.Sound#ENTITY_ZOMBIFIED_PIGLIN_ANGRY",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.inventory.InventoryCreativeEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.inventory.InventoryCreativeEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerItemConsumeEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemConsumeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "DEEPSLATE_LAPIS_ORE",
    "id": "org.bukkit.Material#DEEPSLATE_LAPIS_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_BIRCH_DOOR",
    "id": "org.bukkit.Material#LEGACY_BIRCH_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.enchantment.EnchantItemEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.enchantment.EnchantItemEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "SPRINT_ONE_CM",
    "id": "org.bukkit.Statistic#SPRINT_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "method": "getSpawner",
    "id": "org.bukkit.event.entity.SpawnerSpawnEvent#getSpawner()",
    "event": true,
    "class": "org.bukkit.event.entity.SpawnerSpawnEvent",
    "return": "org.bukkit.block.CreatureSpawner"
  },
  {
    "descr": "BlockData: Bell",
    "static": true,
    "field": "BELL",
    "id": "org.bukkit.Material#BELL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets how many ticks the panda will be unhappy for",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "getUnhappyTicks",
    "id": "org.bukkit.entity.Panda#getUnhappyTicks()",
    "class": "org.bukkit.entity.Panda",
    "return": "int"
  },
  {
    "descr": "A cream-colored llama.",
    "static": true,
    "field": "CREAMY",
    "id": "org.bukkit.entity.Llama.Color#CREAMY",
    "class": "org.bukkit.entity.Llama.Color",
    "return": "org.bukkit.entity.Llama.Color"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "ANVIL",
    "id": "org.bukkit.Material#ANVIL",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the type of skull",
    "param-names": ["Skull"],
    "param-types": ["org.bukkit.block.Skull"],
    "method": "getSkullType",
    "id": "org.bukkit.block.Skull#getSkullType()",
    "class": "org.bukkit.block.Skull",
    "return": "org.bukkit.SkullType"
  },
  {
    "static": true,
    "field": "EMERALD_ORE",
    "id": "org.bukkit.Material#EMERALD_ORE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Not really a horse :)",
    "static": true,
    "field": "LLAMA",
    "id": "org.bukkit.entity.Horse.Variant#LLAMA",
    "class": "org.bukkit.entity.Horse.Variant",
    "return": "org.bukkit.entity.Horse.Variant"
  },
  {
    "static": true,
    "field": "POLISHED_DIORITE",
    "id": "org.bukkit.Material#POLISHED_DIORITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.",
    "param-names": [
      "Boat",
      "Speed"
    ],
    "param-types": [
      "org.bukkit.entity.Boat",
      "double"
    ],
    "method": "setMaxSpeed",
    "id": "org.bukkit.entity.Boat#setMaxSpeed(double)",
    "class": "org.bukkit.entity.Boat"
  },
  {
    "descr": "Sets whether the hoglin is immune to zombification.",
    "param-names": [
      "Hoglin",
      "Flag"
    ],
    "param-types": [
      "org.bukkit.entity.Hoglin",
      "boolean"
    ],
    "method": "setImmuneToZombification",
    "id": "org.bukkit.entity.Hoglin#setImmuneToZombification(boolean)",
    "class": "org.bukkit.entity.Hoglin"
  },
  {
    "descr": "Milky splotches",
    "static": true,
    "field": "WHITEFIELD",
    "id": "org.bukkit.entity.Horse.Style#WHITEFIELD",
    "class": "org.bukkit.entity.Horse.Style",
    "return": "org.bukkit.entity.Horse.Style"
  },
  {
    "descr": "BlockData: Orientable",
    "static": true,
    "field": "BIRCH_WOOD",
    "id": "org.bukkit.Material#BIRCH_WOOD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.BatToggleSleepEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.BatToggleSleepEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.EntityCategory#values()",
    "class": "org.bukkit.entity.EntityCategory",
    "return": "org.bukkit.entity.EntityCategory[]"
  },
  {
    "static": true,
    "field": "LAST_SLEPT",
    "id": "org.bukkit.entity.memory.MemoryKey#LAST_SLEPT",
    "class": "org.bukkit.entity.memory.MemoryKey",
    "return": "org.bukkit.entity.memory.MemoryKey"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.PotionSplashEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.PotionSplashEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "static": true,
    "field": "LEGACY_WOOD_SWORD",
    "id": "org.bukkit.Material#LEGACY_WOOD_SWORD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "LEGACY_CAKE",
    "id": "org.bukkit.Material#LEGACY_CAKE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerLevelChangeEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerLevelChangeEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Gets a set containing all of the permissions currently in effect by\\nthis object",
    "param-names": ["Permissible"],
    "param-types": ["org.bukkit.permissions.Permissible"],
    "method": "getEffectivePermissions",
    "id": "org.bukkit.permissions.Permissible#getEffectivePermissions()",
    "class": "org.bukkit.permissions.Permissible",
    "return": "java.util.Set"
  },
  {
    "descr": "Removes the specified target from this list, therefore indicating a\\n\"not banned\" status.",
    "param-names": [
      "BanList",
      "Target"
    ],
    "param-types": [
      "org.bukkit.BanList",
      "java.lang.String"
    ],
    "method": "pardon",
    "id": "org.bukkit.BanList#pardon(java.lang.String)",
    "class": "org.bukkit.BanList"
  },
  {
    "descr": "Called when a player interacts with an armor stand and will either swap, retrieve or\\nplace an item.",
    "event": true,
    "class": "org.bukkit.event.player.PlayerArmorStandManipulateEvent"
  },
  {
    "descr": "Sets the damage",
    "param-names": [
      "Damageable",
      "Damage"
    ],
    "param-types": [
      "org.bukkit.inventory.meta.Damageable",
      "int"
    ],
    "method": "setDamage",
    "id": "org.bukkit.inventory.meta.Damageable#setDamage(int)",
    "class": "org.bukkit.inventory.meta.Damageable"
  },
  {
    "static": true,
    "field": "FLAP",
    "id": "org.bukkit.GameEvent#FLAP",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "static": true,
    "field": "RED_STAINED_GLASS",
    "id": "org.bukkit.Material#RED_STAINED_GLASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "MUSIC",
    "id": "org.bukkit.SoundCategory#MUSIC",
    "class": "org.bukkit.SoundCategory",
    "return": "org.bukkit.SoundCategory"
  },
  {
    "param-names": ["Lectern"],
    "param-types": ["org.bukkit.block.Lectern"],
    "method": "getSnapshotInventory",
    "id": "org.bukkit.block.Lectern#getSnapshotInventory()",
    "class": "org.bukkit.block.Lectern",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Get the amount of exhaustion to add to the player's current exhaustion.",
    "method": "getExhaustion",
    "id": "org.bukkit.event.entity.EntityExhaustionEvent#getExhaustion()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExhaustionEvent",
    "return": "float"
  },
  {
    "descr": "Gets the instance of the item factory (for ItemMeta).",
    "static": true,
    "method": "getItemFactory",
    "id": "org.bukkit.Bukkit#getItemFactory()",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.ItemFactory"
  },
  {
    "descr": "Stops accepting any effect type registrations.",
    "static": true,
    "method": "stopAcceptingRegistrations",
    "id": "org.bukkit.potion.PotionEffectType#stopAcceptingRegistrations()",
    "class": "org.bukkit.potion.PotionEffectType"
  },
  {
    "descr": "Gets the value of the 'orientation' property.",
    "param-names": ["Jigsaw"],
    "param-types": ["org.bukkit.block.data.type.Jigsaw"],
    "method": "getOrientation",
    "id": "org.bukkit.block.data.type.Jigsaw#getOrientation()",
    "class": "org.bukkit.block.data.type.Jigsaw",
    "return": "org.bukkit.block.data.type.Jigsaw.Orientation"
  },
  {
    "descr": "BlockData: AmethystCluster",
    "static": true,
    "field": "SMALL_AMETHYST_BUD",
    "id": "org.bukkit.Material#SMALL_AMETHYST_BUD",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Hides this boss bar from all attached players",
    "param-names": ["BossBar"],
    "param-types": ["org.bukkit.boss.BossBar"],
    "method": "hide",
    "id": "org.bukkit.boss.BossBar#hide()",
    "class": "org.bukkit.boss.BossBar"
  },
  {
    "descr": "When reason is unknown.",
    "static": true,
    "field": "UNKNOWN",
    "id": "org.bukkit.event.entity.EntityTransformEvent.TransformReason#UNKNOWN",
    "class": "org.bukkit.event.entity.EntityTransformEvent.TransformReason",
    "return": "org.bukkit.event.entity.EntityTransformEvent.TransformReason"
  },
  {
    "descr": "Send a block change. This fakes a block change packet for a user at a\\ncertain location. This will not actually change the world in any way.",
    "param-names": [
      "Player",
      "Loc",
      "Material",
      "Data"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.Location",
      "org.bukkit.Material",
      "byte"
    ],
    "method": "sendBlockChange",
    "id": "org.bukkit.entity.Player#sendBlockChange(org.bukkit.Location,org.bukkit.Material,byte)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "NOTEBLOCK_PLAYED",
    "id": "org.bukkit.Statistic#NOTEBLOCK_PLAYED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.VillagerCareerChangeEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerCareerChangeEvent",
    "return": "boolean"
  },
  {
    "descr": "Get raw biome temperature at given coordinates",
    "param-names": [
      "ChunkSnapshot",
      "X",
      "Y",
      "Z"
    ],
    "param-types": [
      "org.bukkit.ChunkSnapshot",
      "int",
      "int",
      "int"
    ],
    "method": "getRawBiomeTemperature",
    "id": "org.bukkit.ChunkSnapshot#getRawBiomeTemperature(int,int,int)",
    "class": "org.bukkit.ChunkSnapshot",
    "return": "double"
  },
  {
    "static": true,
    "field": "GRANITE",
    "id": "org.bukkit.Material#GRANITE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.entity.EntityDamageByBlockEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDamageByBlockEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_WOODEN_DOOR",
    "id": "org.bukkit.Material#LEGACY_WOODEN_DOOR",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "When a creature spawns from an egg",
    "static": true,
    "field": "EGG",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#EGG",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "Sets the border to a square region with the specified side length in blocks.",
    "param-names": [
      "WorldBorder",
      "New Size",
      "Unit",
      "Time"
    ],
    "param-types": [
      "org.bukkit.WorldBorder",
      "double",
      "java.util.concurrent.TimeUnit",
      "long"
    ],
    "method": "setSize",
    "id": "org.bukkit.WorldBorder#setSize(double,java.util.concurrent.TimeUnit,long)",
    "class": "org.bukkit.WorldBorder"
  },
  {
    "descr": "Set the type of this cursor.",
    "param-names": [
      "MapCursor",
      "Type"
    ],
    "param-types": [
      "org.bukkit.map.MapCursor",
      "byte"
    ],
    "method": "setRawType",
    "id": "org.bukkit.map.MapCursor#setRawType(byte)",
    "class": "org.bukkit.map.MapCursor"
  },
  {
    "descr": "The dragon will land on on the portal. If the dragon is not near\\nthe portal, it will fly to it before mounting.",
    "static": true,
    "field": "LAND_ON_PORTAL",
    "id": "org.bukkit.entity.EnderDragon.Phase#LAND_ON_PORTAL",
    "class": "org.bukkit.entity.EnderDragon.Phase",
    "return": "org.bukkit.entity.EnderDragon.Phase"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.VillagerAcquireTradeEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.VillagerAcquireTradeEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the format to use to display this chat message.\\n\\nWhen this event finishes execution, the first format parameter is the\\nPlayer#getDisplayName() and the second parameter is #getMessage()",
    "param-names": ["Format"],
    "param-types": ["java.lang.String"],
    "method": "setFormat",
    "id": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent#setFormat(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerChatPreviewEvent"
  },
  {
    "descr": "BlockData: SculkVein",
    "static": true,
    "field": "SCULK_VEIN",
    "id": "org.bukkit.Material#SCULK_VEIN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_RAVAGER_AMBIENT",
    "id": "org.bukkit.Sound#ENTITY_RAVAGER_AMBIENT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "MUSIC_DISC_MALL",
    "id": "org.bukkit.Sound#MUSIC_DISC_MALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENCHANTING_TABLE",
    "id": "org.bukkit.Material#ENCHANTING_TABLE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Zero this location's components. Not world-aware.",
    "param-names": ["Location"],
    "param-types": ["org.bukkit.Location"],
    "method": "zero",
    "id": "org.bukkit.Location#zero()",
    "class": "org.bukkit.Location",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Armor stand is hit.",
    "static": true,
    "field": "ARMOR_STAND_HIT",
    "id": "org.bukkit.EntityEffect#ARMOR_STAND_HIT",
    "class": "org.bukkit.EntityEffect",
    "return": "org.bukkit.EntityEffect"
  },
  {
    "descr": "Constructs a new Location with the given coordinates and direction",
    "param-names": [
      "World",
      "X",
      "Y",
      "Z",
      "Yaw",
      "Pitch"
    ],
    "param-types": [
      "org.bukkit.World",
      "double",
      "double",
      "double",
      "float",
      "float"
    ],
    "id": "org.bukkit.Location#Location(org.bukkit.World,double,double,double,float,float)",
    "class": "org.bukkit.Location"
  },
  {
    "descr": "Whether freeze damage is enabled or not.",
    "static": true,
    "field": "FREEZE_DAMAGE",
    "id": "org.bukkit.GameRule#FREEZE_DAMAGE",
    "class": "org.bukkit.GameRule",
    "return": "org.bukkit.GameRule"
  },
  {
    "static": true,
    "field": "NORTH_WEST",
    "id": "org.bukkit.block.BlockFace#NORTH_WEST",
    "class": "org.bukkit.block.BlockFace",
    "return": "org.bukkit.block.BlockFace"
  },
  {
    "descr": "Called immediately prior to a creature being leashed by a player.",
    "event": true,
    "class": "org.bukkit.event.entity.PlayerLeashEntityEvent"
  },
  {
    "descr": "Gets user-specified limit for number of water animals that can spawn in\\na chunk.",
    "static": true,
    "method": "getWaterAnimalSpawnLimit",
    "id": "org.bukkit.Bukkit#getWaterAnimalSpawnLimit()",
    "class": "org.bukkit.Bukkit",
    "return": "int"
  },
  {
    "static": true,
    "field": "BLUE_ICE",
    "id": "org.bukkit.Material#BLUE_ICE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Creates a tree at the given Location\\n\\nThe provided consumer gets called for every block which gets changed\\nas a result of the tree generation. When the consumer gets called no\\nmodifications to the world are done yet. Which means, that calling\\n#getBlockState(Location) in the consumer while return the state\\nof the block before the generation.\\n\\nModifications done to the BlockState in the consumer are respected,\\nwhich means that it is not necessary to call BlockState#update()",
    "param-names": [
      "RegionAccessor",
      "Location",
      "Random",
      "Type",
      "State Consumer"
    ],
    "param-types": [
      "org.bukkit.RegionAccessor",
      "org.bukkit.Location",
      "java.util.Random",
      "org.bukkit.TreeType",
      "org.bukkit.util.Consumer"
    ],
    "method": "generateTree",
    "id": "org.bukkit.RegionAccessor#generateTree(org.bukkit.Location,java.util.Random,org.bukkit.TreeType,org.bukkit.util.Consumer<org.bukkit.block.BlockState>)",
    "class": "org.bukkit.RegionAccessor",
    "return": "boolean"
  },
  {
    "descr": "Gets the scoreboard to which this objective is attached.",
    "param-names": ["Objective"],
    "param-types": ["org.bukkit.scoreboard.Objective"],
    "method": "getScoreboard",
    "id": "org.bukkit.scoreboard.Objective#getScoreboard()",
    "class": "org.bukkit.scoreboard.Objective",
    "return": "org.bukkit.scoreboard.Scoreboard"
  },
  {
    "static": true,
    "field": "SPIDER_EYE",
    "id": "org.bukkit.Material#SPIDER_EYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets the primary Inventory involved in this transaction",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.TradeSelectEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.TradeSelectEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "BLOCK_NETHER_SPROUTS_BREAK",
    "id": "org.bukkit.Sound#BLOCK_NETHER_SPROUTS_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Create a cooking recipe to craft the specified ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Input"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.inventory.RecipeChoice"
    ],
    "id": "org.bukkit.inventory.StonecuttingRecipe#StonecuttingRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.inventory.RecipeChoice)",
    "class": "org.bukkit.inventory.StonecuttingRecipe"
  },
  {
    "descr": "Gets this Panda's hidden gene.",
    "param-names": ["Panda"],
    "param-types": ["org.bukkit.entity.Panda"],
    "method": "getHiddenGene",
    "id": "org.bukkit.entity.Panda#getHiddenGene()",
    "class": "org.bukkit.entity.Panda",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "static": true,
    "field": "PICKUP",
    "id": "org.bukkit.Statistic#PICKUP",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.inventory.ItemFlag#values()",
    "class": "org.bukkit.inventory.ItemFlag",
    "return": "org.bukkit.inventory.ItemFlag[]"
  },
  {
    "descr": "Adds a new PermissionAttachment with a single permission by\\nname and value",
    "param-names": [
      "Permissible",
      "Plugin",
      "Name",
      "Value"
    ],
    "param-types": [
      "org.bukkit.permissions.Permissible",
      "org.bukkit.plugin.Plugin",
      "java.lang.String",
      "boolean"
    ],
    "method": "addAttachment",
    "id": "org.bukkit.permissions.Permissible#addAttachment(org.bukkit.plugin.Plugin,java.lang.String,boolean)",
    "class": "org.bukkit.permissions.Permissible",
    "return": "org.bukkit.permissions.PermissionAttachment"
  },
  {
    "descr": "An event that's called when a block yields experience.",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent"
  },
  {
    "static": true,
    "field": "SEARCHING",
    "id": "org.bukkit.entity.Sniffer.State#SEARCHING",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "descr": "Gets a copy of the player's profile.\\n\\nIf the player is online, the returned profile will be complete.\\nOtherwise, only the unique id is guaranteed to be present. You can use\\nPlayerProfile#update() to complete the returned profile.",
    "param-names": ["OfflinePlayer"],
    "param-types": ["org.bukkit.OfflinePlayer"],
    "method": "getPlayerProfile",
    "id": "org.bukkit.OfflinePlayer#getPlayerProfile()",
    "class": "org.bukkit.OfflinePlayer",
    "return": "org.bukkit.profile.PlayerProfile"
  },
  {
    "static": true,
    "field": "ENTITY_GENERIC_SWIM",
    "id": "org.bukkit.Sound#ENTITY_GENERIC_SWIM",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "SEAGRASS",
    "id": "org.bukkit.Material#SEAGRASS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Slab",
    "static": true,
    "field": "WAXED_CUT_COPPER_SLAB",
    "id": "org.bukkit.Material#WAXED_CUT_COPPER_SLAB",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Rotatable",
    "static": true,
    "field": "BLUE_BANNER",
    "id": "org.bukkit.Material#BLUE_BANNER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "SOUL_SAND_VALLEY",
    "id": "org.bukkit.block.Biome#SOUL_SAND_VALLEY",
    "class": "org.bukkit.block.Biome",
    "return": "org.bukkit.block.Biome"
  },
  {
    "descr": "BlockData: Sign",
    "static": true,
    "field": "OAK_SIGN",
    "id": "org.bukkit.Material#OAK_SIGN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_WART_BLOCK_BREAK",
    "id": "org.bukkit.Sound#BLOCK_WART_BLOCK_BREAK",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "ENTITY_SQUID_SQUIRT",
    "id": "org.bukkit.Sound#ENTITY_SQUID_SQUIRT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Snare drum is normally played when a note block is on top of a sandy\\nblock.",
    "static": true,
    "field": "SNARE_DRUM",
    "id": "org.bukkit.Instrument#SNARE_DRUM",
    "class": "org.bukkit.Instrument",
    "return": "org.bukkit.Instrument"
  },
  {
    "static": true,
    "field": "ANIMALS_BRED",
    "id": "org.bukkit.Statistic#ANIMALS_BRED",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "field": "EMERALD_BLOCK",
    "id": "org.bukkit.Material#EMERALD_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Sets whether this armor stand is a marker, meaning it has a very small\\ncollision box.",
    "param-names": [
      "ArmorStand",
      "Marker"
    ],
    "param-types": [
      "org.bukkit.entity.ArmorStand",
      "boolean"
    ],
    "method": "setMarker",
    "id": "org.bukkit.entity.ArmorStand#setMarker(boolean)",
    "class": "org.bukkit.entity.ArmorStand"
  },
  {
    "static": true,
    "field": "ALLAY_SPAWN_EGG",
    "id": "org.bukkit.Material#ALLAY_SPAWN_EGG",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "TUBE_CORAL_BLOCK",
    "id": "org.bukkit.Material#TUBE_CORAL_BLOCK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "FLOPPER",
    "id": "org.bukkit.entity.TropicalFish.Pattern#FLOPPER",
    "class": "org.bukkit.entity.TropicalFish.Pattern",
    "return": "org.bukkit.entity.TropicalFish.Pattern"
  },
  {
    "descr": "Gets how much EXP should be dropped from this death.\\n\\nThis does not indicate how much EXP should be taken from the entity in\\nquestion, merely how much should be created after its death.",
    "method": "getDroppedExp",
    "id": "org.bukkit.event.entity.EntityDeathEvent#getDroppedExp()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityDeathEvent",
    "return": "int"
  },
  {
    "descr": "An anvil inventory, with 2 CRAFTING slots and 1 RESULT slot",
    "static": true,
    "field": "ANVIL",
    "id": "org.bukkit.event.inventory.InventoryType#ANVIL",
    "class": "org.bukkit.event.inventory.InventoryType",
    "return": "org.bukkit.event.inventory.InventoryType"
  },
  {
    "descr": "Remove a location of the explored locations.\\n\\nNote: the location must be in the sniffer's current world for this\\nmethod to have any effect.",
    "param-names": [
      "Sniffer",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.Sniffer",
      "org.bukkit.Location"
    ],
    "method": "removeExploredLocation",
    "id": "org.bukkit.entity.Sniffer#removeExploredLocation(org.bukkit.Location)",
    "class": "org.bukkit.entity.Sniffer"
  },
  {
    "descr": "BlockData: Fence",
    "static": true,
    "field": "OAK_FENCE",
    "id": "org.bukkit.Material#OAK_FENCE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "BlockData: Directional",
    "static": true,
    "field": "MAGENTA_SHULKER_BOX",
    "id": "org.bukkit.Material#MAGENTA_SHULKER_BOX",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Get the raw value of this scale level.",
    "param-names": ["MapView.Scale"],
    "param-types": ["org.bukkit.map.MapView.Scale"],
    "method": "getValue",
    "id": "org.bukkit.map.MapView.Scale#getValue()",
    "class": "org.bukkit.map.MapView.Scale",
    "return": "byte"
  },
  {
    "descr": "Creates a PotionEffect from the given PotionEffectType,\\napplying duration modifiers and checks.",
    "param-names": [
      "PotionBrewer",
      "Potion",
      "Duration",
      "Amplifier"
    ],
    "param-types": [
      "org.bukkit.potion.PotionBrewer",
      "org.bukkit.potion.PotionEffectType",
      "int",
      "int"
    ],
    "method": "createEffect",
    "id": "org.bukkit.potion.PotionBrewer#createEffect(org.bukkit.potion.PotionEffectType,int,int)",
    "class": "org.bukkit.potion.PotionBrewer",
    "return": "org.bukkit.potion.PotionEffect"
  },
  {
    "descr": "Gets the Location of the block",
    "param-names": ["Block"],
    "param-types": ["org.bukkit.block.Block"],
    "method": "getLocation",
    "id": "org.bukkit.block.Block#getLocation()",
    "class": "org.bukkit.block.Block",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Make the entity drop the item in their hand.\\n\\nThis will force the entity to drop the item they are holding with\\nan option to drop the entire ItemStack or just 1 of the items.",
    "param-names": [
      "HumanEntity",
      "Drop All"
    ],
    "param-types": [
      "org.bukkit.entity.HumanEntity",
      "boolean"
    ],
    "method": "dropItem",
    "id": "org.bukkit.entity.HumanEntity#dropItem(boolean)",
    "class": "org.bukkit.entity.HumanEntity",
    "return": "boolean"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerCommandPreprocessEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerCommandPreprocessEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Convenience method for providing a user-friendly identifier. By\\ndefault, it is the event's class's Class#getSimpleName() simple name.",
    "method": "getEventName",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#getEventName()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "java.lang.String"
  },
  {
    "descr": "Gets the value of the 'type' property.",
    "param-names": ["Slab"],
    "param-types": ["org.bukkit.block.data.type.Slab"],
    "method": "getType",
    "id": "org.bukkit.block.data.type.Slab#getType()",
    "class": "org.bukkit.block.data.type.Slab",
    "return": "org.bukkit.block.data.type.Slab.Type"
  },
  {
    "param-names": ["Name"],
    "static": true,
    "param-types": ["java.lang.String"],
    "method": "valueOf",
    "id": "org.bukkit.entity.Evoker.Spell#valueOf(java.lang.String)",
    "class": "org.bukkit.entity.Evoker.Spell",
    "return": "org.bukkit.entity.Evoker.Spell"
  },
  {
    "descr": "Gets the location that this entity moved from",
    "method": "getFrom",
    "id": "org.bukkit.event.entity.EntityTeleportEvent#getFrom()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityTeleportEvent",
    "return": "org.bukkit.Location"
  },
  {
    "descr": "Create a furnace recipe to craft the specified ItemStack.",
    "param-names": [
      "Key",
      "Result",
      "Source",
      "Experience",
      "Cooking Time"
    ],
    "param-types": [
      "org.bukkit.NamespacedKey",
      "org.bukkit.inventory.ItemStack",
      "org.bukkit.Material",
      "float",
      "int"
    ],
    "id": "org.bukkit.inventory.FurnaceRecipe#FurnaceRecipe(org.bukkit.NamespacedKey,org.bukkit.inventory.ItemStack,org.bukkit.Material,float,int)",
    "class": "org.bukkit.inventory.FurnaceRecipe"
  },
  {
    "descr": "When an entity is spawned as a result of ender pearl usage",
    "static": true,
    "field": "ENDER_PEARL",
    "id": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason#ENDER_PEARL",
    "class": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason",
    "return": "org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason"
  },
  {
    "descr": "One item from the cursor is placed in each selected slot.",
    "static": true,
    "field": "SINGLE",
    "id": "org.bukkit.event.inventory.DragType#SINGLE",
    "class": "org.bukkit.event.inventory.DragType",
    "return": "org.bukkit.event.inventory.DragType"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_DIGGING_STOP",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_DIGGING_STOP",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets the firework effect for this meta.",
    "param-names": ["FireworkEffectMeta"],
    "param-types": ["org.bukkit.inventory.meta.FireworkEffectMeta"],
    "method": "getEffect",
    "id": "org.bukkit.inventory.meta.FireworkEffectMeta#getEffect()",
    "class": "org.bukkit.inventory.meta.FireworkEffectMeta",
    "return": "org.bukkit.FireworkEffect"
  },
  {
    "descr": "Cleric profession. Wears a purple robe. Clerics primarily trade for\\nrotten flesh, gold ingot, redstone, lapis, ender pearl, glowstone,\\nand bottle o' enchanting.",
    "static": true,
    "field": "CLERIC",
    "id": "org.bukkit.entity.Villager.Profession#CLERIC",
    "class": "org.bukkit.entity.Villager.Profession",
    "return": "org.bukkit.entity.Villager.Profession"
  },
  {
    "static": true,
    "field": "ENTITY_SNIFFER_SNIFFING",
    "id": "org.bukkit.Sound#ENTITY_SNIFFER_SNIFFING",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_PACKED_MUD_FALL",
    "id": "org.bukkit.Sound#BLOCK_PACKED_MUD_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_DEEPSLATE_HIT",
    "id": "org.bukkit.Sound#BLOCK_DEEPSLATE_HIT",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BLOCK_POINTED_DRIPSTONE_PLACE",
    "id": "org.bukkit.Sound#BLOCK_POINTED_DRIPSTONE_PLACE",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Get the Sound this entity will make when falling from a small\\nheight.",
    "param-names": ["LivingEntity"],
    "param-types": ["org.bukkit.entity.LivingEntity"],
    "method": "getFallDamageSoundSmall",
    "id": "org.bukkit.entity.LivingEntity#getFallDamageSoundSmall()",
    "class": "org.bukkit.entity.LivingEntity",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "field": "BREAK_ITEM",
    "id": "org.bukkit.Statistic#BREAK_ITEM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "descr": "Set the collar color of this cat",
    "param-names": [
      "Cat",
      "Color"
    ],
    "param-types": [
      "org.bukkit.entity.Cat",
      "org.bukkit.DyeColor"
    ],
    "method": "setCollarColor",
    "id": "org.bukkit.entity.Cat#setCollarColor(org.bukkit.DyeColor)",
    "class": "org.bukkit.entity.Cat"
  },
  {
    "descr": "Sets whether this camel is dashing (sprinting).",
    "param-names": [
      "Camel",
      "Dashing"
    ],
    "param-types": [
      "org.bukkit.entity.Camel",
      "boolean"
    ],
    "method": "setDashing",
    "id": "org.bukkit.entity.Camel#setDashing(boolean)",
    "class": "org.bukkit.entity.Camel"
  },
  {
    "descr": "Gets the entity that was right-clicked by the player.",
    "method": "getRightClicked",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#getRightClicked()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent",
    "return": "org.bukkit.entity.Entity"
  },
  {
    "static": true,
    "field": "BLOCK_ANVIL_FALL",
    "id": "org.bukkit.Sound#BLOCK_ANVIL_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets a all tags which have been defined within the server.\\n\\nServer implementations are allowed to handle only the registries\\nindicated in Tag.\\n\\nNo guarantees are made about the mutability of the returned iterator.",
    "param-names": [
      "Registry",
      "Clazz"
    ],
    "static": true,
    "param-types": [
      "java.lang.String",
      "java.lang.Class"
    ],
    "method": "getTags",
    "id": "org.bukkit.Bukkit#<T>getTags(java.lang.String,java.lang.Class<T>)",
    "class": "org.bukkit.Bukkit",
    "return": "java.lang.Iterable"
  },
  {
    "static": true,
    "field": "HORSE_ONE_CM",
    "id": "org.bukkit.Statistic#HORSE_ONE_CM",
    "class": "org.bukkit.Statistic",
    "return": "org.bukkit.Statistic"
  },
  {
    "static": true,
    "method": "values",
    "id": "org.bukkit.entity.Sniffer.State#values()",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State[]"
  },
  {
    "static": true,
    "field": "GRAY_DYE",
    "id": "org.bukkit.Material#GRAY_DYE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "BLOCK_CHERRY_WOOD_DOOR_OPEN",
    "id": "org.bukkit.Sound#BLOCK_CHERRY_WOOD_DOOR_OPEN",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Gets whether or not the ClickType for this event represents a right\\nclick.",
    "method": "isRightClick",
    "id": "org.bukkit.event.inventory.SmithItemEvent#isRightClick()",
    "event": true,
    "class": "org.bukkit.event.inventory.SmithItemEvent",
    "return": "boolean"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.player.PlayerItemDamageEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerItemDamageEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Creates an empty inventory with the specified type. If the type\\nis InventoryType#CHEST, the new inventory has a size of 27;\\notherwise the new inventory has the normal size for its type.\\n\\nInventoryType#WORKBENCH will not process crafting recipes if\\ncreated with this method. Use\\nPlayer#openWorkbench(Location, boolean) instead.\\n\\nInventoryType#ENCHANTING will not process ItemStacks\\nfor possible enchanting results. Use\\nPlayer#openEnchanting(Location, boolean) instead.",
    "param-names": [
      "Owner",
      "Type"
    ],
    "static": true,
    "param-types": [
      "org.bukkit.inventory.InventoryHolder",
      "org.bukkit.event.inventory.InventoryType"
    ],
    "method": "createInventory",
    "id": "org.bukkit.Bukkit#createInventory(org.bukkit.inventory.InventoryHolder,org.bukkit.event.inventory.InventoryType)",
    "class": "org.bukkit.Bukkit",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerToggleFlightEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleFlightEvent",
    "return": "boolean"
  },
  {
    "descr": "Removes all custom potion effects from this potion.",
    "param-names": ["PotionMeta"],
    "param-types": ["org.bukkit.inventory.meta.PotionMeta"],
    "method": "clearCustomEffects",
    "id": "org.bukkit.inventory.meta.PotionMeta#clearCustomEffects()",
    "class": "org.bukkit.inventory.meta.PotionMeta",
    "return": "boolean"
  },
  {
    "descr": "Gets whether this server allows the End or not.",
    "static": true,
    "method": "getAllowEnd",
    "id": "org.bukkit.Bukkit#getAllowEnd()",
    "class": "org.bukkit.Bukkit",
    "return": "boolean"
  },
  {
    "descr": "The raid was terminated.",
    "static": true,
    "field": "STOPPED",
    "id": "org.bukkit.Raid.RaidStatus#STOPPED",
    "class": "org.bukkit.Raid.RaidStatus",
    "return": "org.bukkit.Raid.RaidStatus"
  },
  {
    "descr": "Sets the fish's pattern",
    "param-names": [
      "TropicalFish",
      "Pattern"
    ],
    "param-types": [
      "org.bukkit.entity.TropicalFish",
      "org.bukkit.entity.TropicalFish.Pattern"
    ],
    "method": "setPattern",
    "id": "org.bukkit.entity.TropicalFish#setPattern(org.bukkit.entity.TropicalFish.Pattern)",
    "class": "org.bukkit.entity.TropicalFish"
  },
  {
    "descr": "Sets the kick message to display if getResult() != Result.ALLOWED",
    "param-names": ["Message"],
    "param-types": ["java.lang.String"],
    "method": "setKickMessage",
    "id": "org.bukkit.event.player.AsyncPlayerPreLoginEvent#setKickMessage(java.lang.String)",
    "event": true,
    "class": "org.bukkit.event.player.AsyncPlayerPreLoginEvent"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.player.PlayerVelocityEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerVelocityEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "static": true,
    "field": "GOLDEN_LEGGINGS",
    "id": "org.bukkit.Material#GOLDEN_LEGGINGS",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "WOLF_SHAKING",
    "id": "org.bukkit.GameEvent#WOLF_SHAKING",
    "class": "org.bukkit.GameEvent",
    "return": "org.bukkit.GameEvent"
  },
  {
    "descr": "Returns the player involved in this event",
    "method": "getPlayer",
    "id": "org.bukkit.event.player.PlayerAnimationEvent#getPlayer()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerAnimationEvent",
    "return": "org.bukkit.entity.Player"
  },
  {
    "descr": "Gets the value of the 'moisture' property.",
    "param-names": ["Farmland"],
    "param-types": ["org.bukkit.block.data.type.Farmland"],
    "method": "getMoisture",
    "id": "org.bukkit.block.data.type.Farmland#getMoisture()",
    "class": "org.bukkit.block.data.type.Farmland",
    "return": "int"
  },
  {
    "descr": "Set the amount of experience dropped by the block after the event has\\nprocessed",
    "param-names": ["Exp"],
    "param-types": ["int"],
    "method": "setExpToDrop",
    "id": "org.bukkit.event.block.BlockExpEvent#setExpToDrop(int)",
    "event": true,
    "class": "org.bukkit.event.block.BlockExpEvent"
  },
  {
    "descr": "Allows this player to see an entity that was previously hidden. If\\nanother another plugin had hidden the entity too, then the entity will\\nremain hidden until the other plugin calls this method too.",
    "param-names": [
      "Player",
      "Plugin",
      "Entity"
    ],
    "param-types": [
      "org.bukkit.entity.Player",
      "org.bukkit.plugin.Plugin",
      "org.bukkit.entity.Entity"
    ],
    "method": "showEntity",
    "id": "org.bukkit.entity.Player#showEntity(org.bukkit.plugin.Plugin,org.bukkit.entity.Entity)",
    "class": "org.bukkit.entity.Player"
  },
  {
    "static": true,
    "field": "PLAYFUL",
    "id": "org.bukkit.entity.Panda.Gene#PLAYFUL",
    "class": "org.bukkit.entity.Panda.Gene",
    "return": "org.bukkit.entity.Panda.Gene"
  },
  {
    "static": true,
    "field": "FIRE_RESISTANCE",
    "id": "org.bukkit.potion.PotionType#FIRE_RESISTANCE",
    "class": "org.bukkit.potion.PotionType",
    "return": "org.bukkit.potion.PotionType"
  },
  {
    "descr": "Any custom event that should not by synchronized with other events must\\nuse the specific constructor. These are the caveats of using an\\nasynchronous event:\\n\\nThe event is never fired from inside code triggered by a\\nsynchronous event. Attempting to do so results in an java.lang.IllegalStateException.\\nHowever, asynchronous event handlers may fire synchronous or\\nasynchronous events\\nThe event may be fired multiple times simultaneously and in any\\norder.\\nAny newly registered or unregistered handler is ignored after an\\nevent starts execution.\\nThe handlers for this event may block for any length of time.\\nSome implementations may selectively declare a specific event use\\nas asynchronous. This behavior should be clearly defined.\\nAsynchronous calls are not calculated in the plugin timing system.\\n",
    "method": "isAsynchronous",
    "id": "org.bukkit.event.entity.HorseJumpEvent#isAsynchronous()",
    "event": true,
    "class": "org.bukkit.event.entity.HorseJumpEvent",
    "return": "boolean"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.entity.EntityPlaceEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPlaceEvent"
  },
  {
    "descr": "Returns whether the item has block data currently attached to it.",
    "param-names": ["BlockDataMeta"],
    "param-types": ["org.bukkit.inventory.meta.BlockDataMeta"],
    "method": "hasBlockData",
    "id": "org.bukkit.inventory.meta.BlockDataMeta#hasBlockData()",
    "class": "org.bukkit.inventory.meta.BlockDataMeta",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_NETHER_STALK",
    "id": "org.bukkit.Material#LEGACY_NETHER_STALK",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "CURRENT_DOWN",
    "id": "org.bukkit.Particle#CURRENT_DOWN",
    "class": "org.bukkit.Particle",
    "return": "org.bukkit.Particle"
  },
  {
    "descr": "Gets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins",
    "method": "isCancelled",
    "id": "org.bukkit.event.player.PlayerToggleSprintEvent#isCancelled()",
    "event": true,
    "class": "org.bukkit.event.player.PlayerToggleSprintEvent",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_STAINED_GLASS_PANE",
    "id": "org.bukkit.Material#LEGACY_STAINED_GLASS_PANE",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "static": true,
    "field": "ENTITY_FIREWORK_ROCKET_BLAST",
    "id": "org.bukkit.Sound#ENTITY_FIREWORK_ROCKET_BLAST",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "static": true,
    "method": "getHandlerList",
    "id": "org.bukkit.event.block.BlockPistonRetractEvent#getHandlerList()",
    "event": true,
    "class": "org.bukkit.event.block.BlockPistonRetractEvent",
    "return": "org.bukkit.event.HandlerList"
  },
  {
    "descr": "Whether to hide this advancement and all its children from the\\nadvancement screen until this advancement have been completed.\\nHas no effect on root advancements themselves, but still affects all\\ntheir children.",
    "param-names": ["AdvancementDisplay"],
    "param-types": ["org.bukkit.advancement.AdvancementDisplay"],
    "method": "isHidden",
    "id": "org.bukkit.advancement.AdvancementDisplay#isHidden()",
    "class": "org.bukkit.advancement.AdvancementDisplay",
    "return": "boolean"
  },
  {
    "descr": "BlockData: CoralWallFan",
    "static": true,
    "field": "BRAIN_CORAL_WALL_FAN",
    "id": "org.bukkit.Material#BRAIN_CORAL_WALL_FAN",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "This method is used to compare two item meta data objects.",
    "param-names": [
      "ItemFactory",
      "Meta1",
      "Meta2"
    ],
    "param-types": [
      "org.bukkit.inventory.ItemFactory",
      "org.bukkit.inventory.meta.ItemMeta",
      "org.bukkit.inventory.meta.ItemMeta"
    ],
    "method": "equals",
    "id": "org.bukkit.inventory.ItemFactory#equals(org.bukkit.inventory.meta.ItemMeta,org.bukkit.inventory.meta.ItemMeta)",
    "class": "org.bukkit.inventory.ItemFactory",
    "return": "boolean"
  },
  {
    "static": true,
    "field": "LEGACY_LEATHER",
    "id": "org.bukkit.Material#LEGACY_LEATHER",
    "class": "org.bukkit.Material",
    "return": "org.bukkit.Material"
  },
  {
    "descr": "Gets a list of all blocks associated with the portal.",
    "method": "getBlocks",
    "id": "org.bukkit.event.entity.EntityCreatePortalEvent#getBlocks()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityCreatePortalEvent",
    "return": "java.util.List"
  },
  {
    "descr": "Damage caused by being hit by a falling block which deals damage\\n\\nNote: Not every block deals damage\\n\\nDamage: variable",
    "static": true,
    "field": "FALLING_BLOCK",
    "id": "org.bukkit.event.entity.EntityDamageEvent.DamageCause#FALLING_BLOCK",
    "class": "org.bukkit.event.entity.EntityDamageEvent.DamageCause",
    "return": "org.bukkit.event.entity.EntityDamageEvent.DamageCause"
  },
  {
    "static": true,
    "field": "BLOCK_ROOTED_DIRT_FALL",
    "id": "org.bukkit.Sound#BLOCK_ROOTED_DIRT_FALL",
    "class": "org.bukkit.Sound",
    "return": "org.bukkit.Sound"
  },
  {
    "descr": "Returns the percentage of blocks to drop from this explosion",
    "method": "getYield",
    "id": "org.bukkit.event.entity.EntityExplodeEvent#getYield()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityExplodeEvent",
    "return": "float"
  },
  {
    "descr": "The rail ascends in the north (negative Z) direction.",
    "static": true,
    "field": "ASCENDING_NORTH",
    "id": "org.bukkit.block.data.Rail.Shape#ASCENDING_NORTH",
    "class": "org.bukkit.block.data.Rail.Shape",
    "return": "org.bukkit.block.data.Rail.Shape"
  },
  {
    "descr": "Sets the cancellation state of this event. A cancelled event will not\\nbe executed in the server, but will still pass to other plugins.",
    "param-names": ["Cancel"],
    "param-types": ["boolean"],
    "method": "setCancelled",
    "id": "org.bukkit.event.player.PlayerInteractEntityEvent#setCancelled(boolean)",
    "event": true,
    "class": "org.bukkit.event.player.PlayerInteractEntityEvent"
  },
  {
    "descr": "Gets the amount that the radius of this cloud will decrease by each tick.",
    "param-names": ["AreaEffectCloud"],
    "param-types": ["org.bukkit.entity.AreaEffectCloud"],
    "method": "getRadiusPerTick",
    "id": "org.bukkit.entity.AreaEffectCloud#getRadiusPerTick()",
    "class": "org.bukkit.entity.AreaEffectCloud",
    "return": "float"
  },
  {
    "descr": "Swamp tree (regular with vines on the side)",
    "static": true,
    "field": "SWAMP",
    "id": "org.bukkit.TreeType#SWAMP",
    "class": "org.bukkit.TreeType",
    "return": "org.bukkit.TreeType"
  },
  {
    "descr": "Gets the Inventory that the Hopper will use for its\\nsource/attached Container.",
    "method": "getInventory",
    "id": "org.bukkit.event.inventory.HopperInventorySearchEvent#getInventory()",
    "event": true,
    "class": "org.bukkit.event.inventory.HopperInventorySearchEvent",
    "return": "org.bukkit.inventory.Inventory"
  },
  {
    "static": true,
    "field": "DIGGING",
    "id": "org.bukkit.entity.Sniffer.State#DIGGING",
    "class": "org.bukkit.entity.Sniffer.State",
    "return": "org.bukkit.entity.Sniffer.State"
  },
  {
    "descr": "Gets the EntityType of the Entity involved in this event.",
    "method": "getEntityType",
    "id": "org.bukkit.event.entity.EntityPortalExitEvent#getEntityType()",
    "event": true,
    "class": "org.bukkit.event.entity.EntityPortalExitEvent",
    "return": "org.bukkit.entity.EntityType"
  },
  {
    "descr": "Sets the location that this end crystal is pointing to. Passing a null\\nvalue will remove the current beam.",
    "param-names": [
      "EnderCrystal",
      "Location"
    ],
    "param-types": [
      "org.bukkit.entity.EnderCrystal",
      "org.bukkit.Location"
    ],
    "method": "setBeamTarget",
    "id": "org.bukkit.entity.EnderCrystal#setBeamTarget(org.bukkit.Location)",
    "class": "org.bukkit.entity.EnderCrystal"
  },
  {
    "method": "getHandlers",
    "id": "org.bukkit.event.hanging.HangingBreakEvent#getHandlers()",
    "event": true,
    "class": "org.bukkit.event.hanging.HangingBreakEvent",
    "return": "org.bukkit.event.HandlerList"
  }
]